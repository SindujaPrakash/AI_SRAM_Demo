
AI_SRAM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d96c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00065350  0800dafc  0800dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08072e4c  08072e4c  000904f4  2**0
                  CONTENTS
  4 .ARM          00000008  08072e4c  08072e4c  00082e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08072e54  08072e54  000904f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08072e54  08072e54  00082e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08072e58  08072e58  00082e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f4  20000000  08072e5c  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fb1c  200004f4  08073350  000904f4  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  20010010  08073350  000a0010  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000904f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fd3  00000000  00000000  00090528  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000368a  00000000  00000000  000a54fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  000a8b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f08  00000000  00000000  000a9c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002562e  00000000  00000000  000aab40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011452  00000000  00000000  000d016e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5140  00000000  00000000  000e15c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00001b20  00000000  00000000  001b6700  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000017e  00000000  00000000  001b8220  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 0000001c  00000000  00000000  001b83a0  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00007f40  00000000  00000000  001b83bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f4 	.word	0x200004f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dae4 	.word	0x0800dae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004f8 	.word	0x200004f8
 80001cc:	0800dae4 	.word	0x0800dae4

080001d0 <_ai_platform_get_io_buffers>:
 80001d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d4:	b081      	sub	sp, #4
 80001d6:	468b      	mov	fp, r1
 80001d8:	6801      	ldr	r1, [r0, #0]
 80001da:	680f      	ldr	r7, [r1, #0]
 80001dc:	8901      	ldrh	r1, [r0, #8]
 80001de:	2600      	movs	r6, #0
 80001e0:	46b0      	mov	r8, r6
 80001e2:	f04f 0904 	mov.w	r9, #4
 80001e6:	46b2      	mov	sl, r6
 80001e8:	b339      	cbz	r1, 800023a <_ai_platform_get_io_buffers+0x6a>
 80001ea:	4604      	mov	r4, r0
 80001ec:	6860      	ldr	r0, [r4, #4]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	6841      	ldr	r1, [r0, #4]
 80001f2:	6810      	ldr	r0, [r2, #0]
 80001f4:	eb01 050a 	add.w	r5, r1, sl
 80001f8:	f003 f9ae 	bl	8003558 <ai_array_to_buffer_fmt>
 80001fc:	6028      	str	r0, [r5, #0]
 80001fe:	2101      	movs	r1, #1
 8000200:	80a9      	strh	r1, [r5, #4]
 8000202:	1c76      	adds	r6, r6, #1
 8000204:	6938      	ldr	r0, [r7, #16]
 8000206:	80e8      	strh	r0, [r5, #6]
 8000208:	f108 0801 	add.w	r8, r8, #1
 800020c:	68f9      	ldr	r1, [r7, #12]
 800020e:	8129      	strh	r1, [r5, #8]
 8000210:	f10a 0a14 	add.w	sl, sl, #20
 8000214:	68b8      	ldr	r0, [r7, #8]
 8000216:	60e8      	str	r0, [r5, #12]
 8000218:	6839      	ldr	r1, [r7, #0]
 800021a:	6888      	ldr	r0, [r1, #8]
 800021c:	6128      	str	r0, [r5, #16]
 800021e:	6820      	ldr	r0, [r4, #0]
 8000220:	f850 7009 	ldr.w	r7, [r0, r9]
 8000224:	8920      	ldrh	r0, [r4, #8]
 8000226:	4580      	cmp	r8, r0
 8000228:	f109 0904 	add.w	r9, r9, #4
 800022c:	d3de      	bcc.n	80001ec <_ai_platform_get_io_buffers+0x1c>
 800022e:	b2b0      	uxth	r0, r6
 8000230:	b118      	cbz	r0, 800023a <_ai_platform_get_io_buffers+0x6a>
 8000232:	6860      	ldr	r0, [r4, #4]
 8000234:	6841      	ldr	r1, [r0, #4]
 8000236:	f8cb 1000 	str.w	r1, [fp]
 800023a:	b2b0      	uxth	r0, r6
 800023c:	b001      	add	sp, #4
 800023e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000242 <_platform_network_state_setup>:
 8000242:	b430      	push	{r4, r5}
 8000244:	6914      	ldr	r4, [r2, #16]
 8000246:	6a13      	ldr	r3, [r2, #32]
 8000248:	435c      	muls	r4, r3
 800024a:	6084      	str	r4, [r0, #8]
 800024c:	888d      	ldrh	r5, [r1, #4]
 800024e:	436c      	muls	r4, r5
 8000250:	60c4      	str	r4, [r0, #12]
 8000252:	6909      	ldr	r1, [r1, #16]
 8000254:	68c3      	ldr	r3, [r0, #12]
 8000256:	6041      	str	r1, [r0, #4]
 8000258:	4419      	add	r1, r3
 800025a:	6001      	str	r1, [r0, #0]
 800025c:	6812      	ldr	r2, [r2, #0]
 800025e:	6814      	ldr	r4, [r2, #0]
 8000260:	00a1      	lsls	r1, r4, #2
 8000262:	d407      	bmi.n	8000274 <_platform_network_state_setup+0x32>
 8000264:	6894      	ldr	r4, [r2, #8]
 8000266:	68d1      	ldr	r1, [r2, #12]
 8000268:	6843      	ldr	r3, [r0, #4]
 800026a:	1a64      	subs	r4, r4, r1
 800026c:	1919      	adds	r1, r3, r4
 800026e:	6091      	str	r1, [r2, #8]
 8000270:	6840      	ldr	r0, [r0, #4]
 8000272:	60d0      	str	r0, [r2, #12]
 8000274:	bc30      	pop	{r4, r5}
 8000276:	4770      	bx	lr

08000278 <_platform_network_state_update_input>:
 8000278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800027c:	4605      	mov	r5, r0
 800027e:	2600      	movs	r6, #0
 8000280:	6828      	ldr	r0, [r5, #0]
 8000282:	6801      	ldr	r1, [r0, #0]
 8000284:	8928      	ldrh	r0, [r5, #8]
 8000286:	2704      	movs	r7, #4
 8000288:	46b0      	mov	r8, r6
 800028a:	b338      	cbz	r0, 80002dc <_platform_network_state_update_input+0x64>
 800028c:	6868      	ldr	r0, [r5, #4]
 800028e:	6802      	ldr	r2, [r0, #0]
 8000290:	eb02 0408 	add.w	r4, r2, r8
 8000294:	680a      	ldr	r2, [r1, #0]
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	6890      	ldr	r0, [r2, #8]
 800029a:	6861      	ldr	r1, [r4, #4]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	d503      	bpl.n	80002a8 <_platform_network_state_update_input+0x30>
 80002a0:	68a2      	ldr	r2, [r4, #8]
 80002a2:	f00b faff 	bl	800b8a4 <__aeabi_memcpy>
 80002a6:	e005      	b.n	80002b4 <_platform_network_state_update_input+0x3c>
 80002a8:	68d3      	ldr	r3, [r2, #12]
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	180b      	adds	r3, r1, r0
 80002ae:	6093      	str	r3, [r2, #8]
 80002b0:	6860      	ldr	r0, [r4, #4]
 80002b2:	60d0      	str	r0, [r2, #12]
 80002b4:	6860      	ldr	r0, [r4, #4]
 80002b6:	68a1      	ldr	r1, [r4, #8]
 80002b8:	4408      	add	r0, r1
 80002ba:	6821      	ldr	r1, [r4, #0]
 80002bc:	6060      	str	r0, [r4, #4]
 80002be:	4288      	cmp	r0, r1
 80002c0:	d302      	bcc.n	80002c8 <_platform_network_state_update_input+0x50>
 80002c2:	68e0      	ldr	r0, [r4, #12]
 80002c4:	4240      	negs	r0, r0
 80002c6:	4408      	add	r0, r1
 80002c8:	6060      	str	r0, [r4, #4]
 80002ca:	1c76      	adds	r6, r6, #1
 80002cc:	6828      	ldr	r0, [r5, #0]
 80002ce:	59c1      	ldr	r1, [r0, r7]
 80002d0:	8928      	ldrh	r0, [r5, #8]
 80002d2:	1d3f      	adds	r7, r7, #4
 80002d4:	4286      	cmp	r6, r0
 80002d6:	f108 0810 	add.w	r8, r8, #16
 80002da:	d3d7      	bcc.n	800028c <_platform_network_state_update_input+0x14>
 80002dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080002e0 <_platform_network_state_update_output>:
 80002e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002e4:	4605      	mov	r5, r0
 80002e6:	2600      	movs	r6, #0
 80002e8:	6828      	ldr	r0, [r5, #0]
 80002ea:	6801      	ldr	r1, [r0, #0]
 80002ec:	8928      	ldrh	r0, [r5, #8]
 80002ee:	2704      	movs	r7, #4
 80002f0:	46b0      	mov	r8, r6
 80002f2:	b388      	cbz	r0, 8000358 <_platform_network_state_update_output+0x78>
 80002f4:	6868      	ldr	r0, [r5, #4]
 80002f6:	6809      	ldr	r1, [r1, #0]
 80002f8:	6802      	ldr	r2, [r0, #0]
 80002fa:	680b      	ldr	r3, [r1, #0]
 80002fc:	eb02 0408 	add.w	r4, r2, r8
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	6860      	ldr	r0, [r4, #4]
 8000304:	68a2      	ldr	r2, [r4, #8]
 8000306:	d50e      	bpl.n	8000326 <_platform_network_state_update_output+0x46>
 8000308:	6889      	ldr	r1, [r1, #8]
 800030a:	f00b facb 	bl	800b8a4 <__aeabi_memcpy>
 800030e:	6862      	ldr	r2, [r4, #4]
 8000310:	68a0      	ldr	r0, [r4, #8]
 8000312:	6821      	ldr	r1, [r4, #0]
 8000314:	4410      	add	r0, r2
 8000316:	4288      	cmp	r0, r1
 8000318:	6060      	str	r0, [r4, #4]
 800031a:	d302      	bcc.n	8000322 <_platform_network_state_update_output+0x42>
 800031c:	68e0      	ldr	r0, [r4, #12]
 800031e:	4240      	negs	r0, r0
 8000320:	4408      	add	r0, r1
 8000322:	6060      	str	r0, [r4, #4]
 8000324:	e00f      	b.n	8000346 <_platform_network_state_update_output+0x66>
 8000326:	4410      	add	r0, r2
 8000328:	6822      	ldr	r2, [r4, #0]
 800032a:	6060      	str	r0, [r4, #4]
 800032c:	4290      	cmp	r0, r2
 800032e:	d302      	bcc.n	8000336 <_platform_network_state_update_output+0x56>
 8000330:	68e0      	ldr	r0, [r4, #12]
 8000332:	4240      	negs	r0, r0
 8000334:	4410      	add	r0, r2
 8000336:	6060      	str	r0, [r4, #4]
 8000338:	688a      	ldr	r2, [r1, #8]
 800033a:	68cb      	ldr	r3, [r1, #12]
 800033c:	1ad2      	subs	r2, r2, r3
 800033e:	4410      	add	r0, r2
 8000340:	6088      	str	r0, [r1, #8]
 8000342:	6862      	ldr	r2, [r4, #4]
 8000344:	60ca      	str	r2, [r1, #12]
 8000346:	1c76      	adds	r6, r6, #1
 8000348:	6828      	ldr	r0, [r5, #0]
 800034a:	59c1      	ldr	r1, [r0, r7]
 800034c:	8928      	ldrh	r0, [r5, #8]
 800034e:	1d3f      	adds	r7, r7, #4
 8000350:	4286      	cmp	r6, r0
 8000352:	f108 0810 	add.w	r8, r8, #16
 8000356:	d3cd      	bcc.n	80002f4 <_platform_network_state_update_output+0x14>
 8000358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800035c <_platform_network_io_bind>:
 800035c:	2800      	cmp	r0, #0
 800035e:	d100      	bne.n	8000362 <_platform_network_io_bind+0x6>
 8000360:	4770      	bx	lr
 8000362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000366:	b081      	sub	sp, #4
 8000368:	2300      	movs	r3, #0
 800036a:	b405      	push	{r0, r2}
 800036c:	b081      	sub	sp, #4
 800036e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000370:	8243      	strh	r3, [r0, #18]
 8000372:	9801      	ldr	r0, [sp, #4]
 8000374:	8203      	strh	r3, [r0, #16]
 8000376:	9b01      	ldr	r3, [sp, #4]
 8000378:	7a18      	ldrb	r0, [r3, #8]
 800037a:	f000 0003 	and.w	r0, r0, #3
 800037e:	2803      	cmp	r0, #3
 8000380:	d004      	beq.n	800038c <_platform_network_io_bind+0x30>
 8000382:	2230      	movs	r2, #48	; 0x30
 8000384:	2111      	movs	r1, #17
 8000386:	f103 000c 	add.w	r0, r3, #12
 800038a:	e0ce      	b.n	800052a <_platform_network_io_bind+0x1ce>
 800038c:	2900      	cmp	r1, #0
 800038e:	bf1c      	itt	ne
 8000390:	8910      	ldrhne	r0, [r2, #8]
 8000392:	2800      	cmpne	r0, #0
 8000394:	f000 80c3 	beq.w	800051e <_platform_network_io_bind+0x1c2>
 8000398:	6810      	ldr	r0, [r2, #0]
 800039a:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 800039e:	6804      	ldr	r4, [r0, #0]
 80003a0:	9200      	str	r2, [sp, #0]
 80003a2:	2700      	movs	r7, #0
 80003a4:	2504      	movs	r5, #4
 80003a6:	46b9      	mov	r9, r7
 80003a8:	1d0e      	adds	r6, r1, #4
 80003aa:	9800      	ldr	r0, [sp, #0]
 80003ac:	8901      	ldrh	r1, [r0, #8]
 80003ae:	428f      	cmp	r7, r1
 80003b0:	f080 80b1 	bcs.w	8000516 <_platform_network_io_bind+0x1ba>
 80003b4:	6841      	ldr	r1, [r0, #4]
 80003b6:	680a      	ldr	r2, [r1, #0]
 80003b8:	eb02 0809 	add.w	r8, r2, r9
 80003bc:	2c00      	cmp	r4, #0
 80003be:	bf18      	it	ne
 80003c0:	f1b8 0f00 	cmpne.w	r8, #0
 80003c4:	f000 80ab 	beq.w	800051e <_platform_network_io_bind+0x1c2>
 80003c8:	6820      	ldr	r0, [r4, #0]
 80003ca:	8873      	ldrh	r3, [r6, #2]
 80003cc:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80003d0:	68b2      	ldr	r2, [r6, #8]
 80003d2:	6841      	ldr	r1, [r0, #4]
 80003d4:	fb03 fe0c 	mul.w	lr, r3, ip
 80003d8:	fb02 fe0e 	mul.w	lr, r2, lr
 80003dc:	4571      	cmp	r1, lr
 80003de:	f0c0 80a0 	bcc.w	8000522 <_platform_network_io_bind+0x1c6>
 80003e2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80003e6:	459e      	cmp	lr, r3
 80003e8:	bf04      	itt	eq
 80003ea:	68e3      	ldreq	r3, [r4, #12]
 80003ec:	4563      	cmpeq	r3, ip
 80003ee:	bf04      	itt	eq
 80003f0:	68a3      	ldreq	r3, [r4, #8]
 80003f2:	4293      	cmpeq	r3, r2
 80003f4:	f040 8095 	bne.w	8000522 <_platform_network_io_bind+0x1c6>
 80003f8:	6800      	ldr	r0, [r0, #0]
 80003fa:	f003 f985 	bl	8003708 <ai_array_get_byte_size>
 80003fe:	6921      	ldr	r1, [r4, #16]
 8000400:	6a22      	ldr	r2, [r4, #32]
 8000402:	4351      	muls	r1, r2
 8000404:	4288      	cmp	r0, r1
 8000406:	f0c0 808c 	bcc.w	8000522 <_platform_network_io_bind+0x1c6>
 800040a:	6820      	ldr	r0, [r4, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f003 f8a3 	bl	8003558 <ai_array_to_buffer_fmt>
 8000412:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8000416:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800041a:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 800041e:	4288      	cmp	r0, r1
 8000420:	d115      	bne.n	800044e <_platform_network_io_bind+0xf2>
 8000422:	68f0      	ldr	r0, [r6, #12]
 8000424:	2800      	cmp	r0, #0
 8000426:	d07a      	beq.n	800051e <_platform_network_io_bind+0x1c2>
 8000428:	8830      	ldrh	r0, [r6, #0]
 800042a:	b190      	cbz	r0, 8000452 <_platform_network_io_bind+0xf6>
 800042c:	4550      	cmp	r0, sl
 800042e:	bf28      	it	cs
 8000430:	4682      	movcs	sl, r0
 8000432:	4622      	mov	r2, r4
 8000434:	1f31      	subs	r1, r6, #4
 8000436:	4640      	mov	r0, r8
 8000438:	f7ff ff03 	bl	8000242 <_platform_network_state_setup>
 800043c:	9800      	ldr	r0, [sp, #0]
 800043e:	6801      	ldr	r1, [r0, #0]
 8000440:	594c      	ldr	r4, [r1, r5]
 8000442:	1c7f      	adds	r7, r7, #1
 8000444:	3614      	adds	r6, #20
 8000446:	f109 0910 	add.w	r9, r9, #16
 800044a:	1d2d      	adds	r5, r5, #4
 800044c:	e7ad      	b.n	80003aa <_platform_network_io_bind+0x4e>
 800044e:	2219      	movs	r2, #25
 8000450:	e068      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000452:	2221      	movs	r2, #33	; 0x21
 8000454:	e066      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000456:	9901      	ldr	r1, [sp, #4]
 8000458:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800045a:	320c      	adds	r2, #12
 800045c:	8911      	ldrh	r1, [r2, #8]
 800045e:	2900      	cmp	r1, #0
 8000460:	d073      	beq.n	800054a <_platform_network_io_bind+0x1ee>
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	681c      	ldr	r4, [r3, #0]
 8000466:	9200      	str	r2, [sp, #0]
 8000468:	2700      	movs	r7, #0
 800046a:	2504      	movs	r5, #4
 800046c:	46b9      	mov	r9, r7
 800046e:	1d06      	adds	r6, r0, #4
 8000470:	9800      	ldr	r0, [sp, #0]
 8000472:	8901      	ldrh	r1, [r0, #8]
 8000474:	428f      	cmp	r7, r1
 8000476:	d25e      	bcs.n	8000536 <_platform_network_io_bind+0x1da>
 8000478:	6841      	ldr	r1, [r0, #4]
 800047a:	680a      	ldr	r2, [r1, #0]
 800047c:	eb02 0809 	add.w	r8, r2, r9
 8000480:	2c00      	cmp	r4, #0
 8000482:	bf18      	it	ne
 8000484:	f1b8 0f00 	cmpne.w	r8, #0
 8000488:	d05c      	beq.n	8000544 <_platform_network_io_bind+0x1e8>
 800048a:	6820      	ldr	r0, [r4, #0]
 800048c:	8873      	ldrh	r3, [r6, #2]
 800048e:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8000492:	68b2      	ldr	r2, [r6, #8]
 8000494:	6841      	ldr	r1, [r0, #4]
 8000496:	fb03 fe0c 	mul.w	lr, r3, ip
 800049a:	fb02 fe0e 	mul.w	lr, r2, lr
 800049e:	4571      	cmp	r1, lr
 80004a0:	d353      	bcc.n	800054a <_platform_network_io_bind+0x1ee>
 80004a2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80004a6:	459e      	cmp	lr, r3
 80004a8:	bf04      	itt	eq
 80004aa:	68e3      	ldreq	r3, [r4, #12]
 80004ac:	4563      	cmpeq	r3, ip
 80004ae:	bf04      	itt	eq
 80004b0:	68a3      	ldreq	r3, [r4, #8]
 80004b2:	4293      	cmpeq	r3, r2
 80004b4:	d149      	bne.n	800054a <_platform_network_io_bind+0x1ee>
 80004b6:	6800      	ldr	r0, [r0, #0]
 80004b8:	f003 f926 	bl	8003708 <ai_array_get_byte_size>
 80004bc:	6921      	ldr	r1, [r4, #16]
 80004be:	6a22      	ldr	r2, [r4, #32]
 80004c0:	4351      	muls	r1, r2
 80004c2:	4288      	cmp	r0, r1
 80004c4:	d341      	bcc.n	800054a <_platform_network_io_bind+0x1ee>
 80004c6:	6820      	ldr	r0, [r4, #0]
 80004c8:	6800      	ldr	r0, [r0, #0]
 80004ca:	f003 f845 	bl	8003558 <ai_array_to_buffer_fmt>
 80004ce:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80004d2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80004d6:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80004da:	4288      	cmp	r0, r1
 80004dc:	d115      	bne.n	800050a <_platform_network_io_bind+0x1ae>
 80004de:	68f0      	ldr	r0, [r6, #12]
 80004e0:	2800      	cmp	r0, #0
 80004e2:	d02f      	beq.n	8000544 <_platform_network_io_bind+0x1e8>
 80004e4:	8830      	ldrh	r0, [r6, #0]
 80004e6:	b198      	cbz	r0, 8000510 <_platform_network_io_bind+0x1b4>
 80004e8:	4550      	cmp	r0, sl
 80004ea:	bf28      	it	cs
 80004ec:	4682      	movcs	sl, r0
 80004ee:	4622      	mov	r2, r4
 80004f0:	1f31      	subs	r1, r6, #4
 80004f2:	4640      	mov	r0, r8
 80004f4:	f7ff fea5 	bl	8000242 <_platform_network_state_setup>
 80004f8:	9800      	ldr	r0, [sp, #0]
 80004fa:	6801      	ldr	r1, [r0, #0]
 80004fc:	594c      	ldr	r4, [r1, r5]
 80004fe:	1c7f      	adds	r7, r7, #1
 8000500:	3614      	adds	r6, #20
 8000502:	f109 0910 	add.w	r9, r9, #16
 8000506:	1d2d      	adds	r5, r5, #4
 8000508:	e7b2      	b.n	8000470 <_platform_network_io_bind+0x114>
 800050a:	2219      	movs	r2, #25
 800050c:	2113      	movs	r1, #19
 800050e:	e00a      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 8000510:	2221      	movs	r2, #33	; 0x21
 8000512:	2113      	movs	r1, #19
 8000514:	e007      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 8000516:	9802      	ldr	r0, [sp, #8]
 8000518:	2800      	cmp	r0, #0
 800051a:	d19c      	bne.n	8000456 <_platform_network_io_bind+0xfa>
 800051c:	e00e      	b.n	800053c <_platform_network_io_bind+0x1e0>
 800051e:	2217      	movs	r2, #23
 8000520:	e000      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000522:	2218      	movs	r2, #24
 8000524:	2112      	movs	r1, #18
 8000526:	9801      	ldr	r0, [sp, #4]
 8000528:	300c      	adds	r0, #12
 800052a:	f000 fa8e 	bl	8000a4a <core_set_error>
 800052e:	2000      	movs	r0, #0
 8000530:	b004      	add	sp, #16
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	9801      	ldr	r0, [sp, #4]
 8000538:	f8a0 a010 	strh.w	sl, [r0, #16]
 800053c:	2001      	movs	r0, #1
 800053e:	b004      	add	sp, #16
 8000540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000544:	2217      	movs	r2, #23
 8000546:	2113      	movs	r1, #19
 8000548:	e7ed      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 800054a:	2218      	movs	r2, #24
 800054c:	2113      	movs	r1, #19
 800054e:	e7ea      	b.n	8000526 <_platform_network_io_bind+0x1ca>

08000550 <ai_platform_runtime_get_revision>:
 8000550:	f8df 04a8 	ldr.w	r0, [pc, #1192]	; 80009fc <.text_21>
 8000554:	6801      	ldr	r1, [r0, #0]
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	0049      	lsls	r1, r1, #1
 800055a:	6001      	str	r1, [r0, #0]
 800055c:	2001      	movs	r0, #1
 800055e:	f8df 14a0 	ldr.w	r1, [pc, #1184]	; 8000a00 <.text_22>
 8000562:	6088      	str	r0, [r1, #8]
 8000564:	6888      	ldr	r0, [r1, #8]
 8000566:	2800      	cmp	r0, #0
 8000568:	d1fc      	bne.n	8000564 <ai_platform_runtime_get_revision+0x14>
 800056a:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 8000a04 <.text_23>
 800056e:	600a      	str	r2, [r1, #0]
 8000570:	6808      	ldr	r0, [r1, #0]
 8000572:	f8df 1494 	ldr.w	r1, [pc, #1172]	; 8000a08 <.text_24>
 8000576:	4288      	cmp	r0, r1
 8000578:	d000      	beq.n	800057c <ai_platform_runtime_get_revision+0x2c>
 800057a:	e7fe      	b.n	800057a <ai_platform_runtime_get_revision+0x2a>
 800057c:	a0aa      	add	r0, pc, #680	; (adr r0, 8000828 <.text_16>)
 800057e:	4770      	bx	lr

08000580 <ai_platform_runtime_get_version>:
 8000580:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 80009fc <.text_21>
 8000584:	6801      	ldr	r1, [r0, #0]
 8000586:	0849      	lsrs	r1, r1, #1
 8000588:	0049      	lsls	r1, r1, #1
 800058a:	6001      	str	r1, [r0, #0]
 800058c:	2001      	movs	r0, #1
 800058e:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 8000a00 <.text_22>
 8000592:	6088      	str	r0, [r1, #8]
 8000594:	6888      	ldr	r0, [r1, #8]
 8000596:	2800      	cmp	r0, #0
 8000598:	d1fc      	bne.n	8000594 <ai_platform_runtime_get_version+0x14>
 800059a:	f8df 2468 	ldr.w	r2, [pc, #1128]	; 8000a04 <.text_23>
 800059e:	600a      	str	r2, [r1, #0]
 80005a0:	6808      	ldr	r0, [r1, #0]
 80005a2:	f8df 1464 	ldr.w	r1, [pc, #1124]	; 8000a08 <.text_24>
 80005a6:	4288      	cmp	r0, r1
 80005a8:	d000      	beq.n	80005ac <ai_platform_runtime_get_version+0x2c>
 80005aa:	e7fe      	b.n	80005aa <ai_platform_runtime_get_version+0x2a>
 80005ac:	f20f 4264 	addw	r2, pc, #1124	; 0x464
 80005b0:	6810      	ldr	r0, [r2, #0]
 80005b2:	4770      	bx	lr

080005b4 <ai_platform_api_get_version>:
 80005b4:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 80009fc <.text_21>
 80005b8:	6801      	ldr	r1, [r0, #0]
 80005ba:	0849      	lsrs	r1, r1, #1
 80005bc:	0049      	lsls	r1, r1, #1
 80005be:	6001      	str	r1, [r0, #0]
 80005c0:	2001      	movs	r0, #1
 80005c2:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 8000a00 <.text_22>
 80005c6:	6088      	str	r0, [r1, #8]
 80005c8:	6888      	ldr	r0, [r1, #8]
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d1fc      	bne.n	80005c8 <ai_platform_api_get_version+0x14>
 80005ce:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 8000a04 <.text_23>
 80005d2:	600a      	str	r2, [r1, #0]
 80005d4:	6808      	ldr	r0, [r1, #0]
 80005d6:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000a08 <.text_24>
 80005da:	4288      	cmp	r0, r1
 80005dc:	d000      	beq.n	80005e0 <ai_platform_api_get_version+0x2c>
 80005de:	e7fe      	b.n	80005de <ai_platform_api_get_version+0x2a>
 80005e0:	f20f 4234 	addw	r2, pc, #1076	; 0x434
 80005e4:	6810      	ldr	r0, [r2, #0]
 80005e6:	4770      	bx	lr

080005e8 <ai_platform_interface_api_get_version>:
 80005e8:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 80009fc <.text_21>
 80005ec:	6801      	ldr	r1, [r0, #0]
 80005ee:	0849      	lsrs	r1, r1, #1
 80005f0:	0049      	lsls	r1, r1, #1
 80005f2:	6001      	str	r1, [r0, #0]
 80005f4:	2001      	movs	r0, #1
 80005f6:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000a00 <.text_22>
 80005fa:	6088      	str	r0, [r1, #8]
 80005fc:	6888      	ldr	r0, [r1, #8]
 80005fe:	2800      	cmp	r0, #0
 8000600:	d1fc      	bne.n	80005fc <ai_platform_interface_api_get_version+0x14>
 8000602:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000a04 <.text_23>
 8000606:	600a      	str	r2, [r1, #0]
 8000608:	6808      	ldr	r0, [r1, #0]
 800060a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000a08 <.text_24>
 800060e:	4288      	cmp	r0, r1
 8000610:	d000      	beq.n	8000614 <ai_platform_interface_api_get_version+0x2c>
 8000612:	e7fe      	b.n	8000612 <ai_platform_interface_api_get_version+0x2a>
 8000614:	f20f 4204 	addw	r2, pc, #1028	; 0x404
 8000618:	6810      	ldr	r0, [r2, #0]
 800061a:	4770      	bx	lr

0800061c <ai_platform_context_acquire>:
 800061c:	b120      	cbz	r0, 8000628 <ai_platform_context_acquire+0xc>
 800061e:	6801      	ldr	r1, [r0, #0]
 8000620:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8000a0c <.text_25>
 8000624:	4291      	cmp	r1, r2
 8000626:	d000      	beq.n	800062a <ai_platform_context_acquire+0xe>
 8000628:	2000      	movs	r0, #0
 800062a:	f8df 13d0 	ldr.w	r1, [pc, #976]	; 80009fc <.text_21>
 800062e:	680a      	ldr	r2, [r1, #0]
 8000630:	0852      	lsrs	r2, r2, #1
 8000632:	0052      	lsls	r2, r2, #1
 8000634:	600a      	str	r2, [r1, #0]
 8000636:	2101      	movs	r1, #1
 8000638:	f8df 23c4 	ldr.w	r2, [pc, #964]	; 8000a00 <.text_22>
 800063c:	6091      	str	r1, [r2, #8]
 800063e:	6891      	ldr	r1, [r2, #8]
 8000640:	2900      	cmp	r1, #0
 8000642:	d1fc      	bne.n	800063e <ai_platform_context_acquire+0x22>
 8000644:	f8df 33bc 	ldr.w	r3, [pc, #956]	; 8000a04 <.text_23>
 8000648:	6013      	str	r3, [r2, #0]
 800064a:	6811      	ldr	r1, [r2, #0]
 800064c:	f8df 23b8 	ldr.w	r2, [pc, #952]	; 8000a08 <.text_24>
 8000650:	4291      	cmp	r1, r2
 8000652:	d000      	beq.n	8000656 <ai_platform_context_acquire+0x3a>
 8000654:	e7fe      	b.n	8000654 <ai_platform_context_acquire+0x38>
 8000656:	4770      	bx	lr

08000658 <ai_platform_context_release>:
 8000658:	f8df 13b0 	ldr.w	r1, [pc, #944]	; 8000a0c <.text_25>
 800065c:	6001      	str	r1, [r0, #0]
 800065e:	4770      	bx	lr

08000660 <ai_platform_network_get_error>:
 8000660:	b120      	cbz	r0, 800066c <ai_platform_network_get_error+0xc>
 8000662:	6801      	ldr	r1, [r0, #0]
 8000664:	f8df 23a4 	ldr.w	r2, [pc, #932]	; 8000a0c <.text_25>
 8000668:	4291      	cmp	r1, r2
 800066a:	d000      	beq.n	800066e <ai_platform_network_get_error+0xe>
 800066c:	2000      	movs	r0, #0
 800066e:	f8df 138c 	ldr.w	r1, [pc, #908]	; 80009fc <.text_21>
 8000672:	680a      	ldr	r2, [r1, #0]
 8000674:	0852      	lsrs	r2, r2, #1
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	600a      	str	r2, [r1, #0]
 800067a:	2101      	movs	r1, #1
 800067c:	f8df 2380 	ldr.w	r2, [pc, #896]	; 8000a00 <.text_22>
 8000680:	6091      	str	r1, [r2, #8]
 8000682:	6891      	ldr	r1, [r2, #8]
 8000684:	2900      	cmp	r1, #0
 8000686:	d1fc      	bne.n	8000682 <ai_platform_network_get_error+0x22>
 8000688:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000a04 <.text_23>
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	6811      	ldr	r1, [r2, #0]
 8000690:	f8df 2374 	ldr.w	r2, [pc, #884]	; 8000a08 <.text_24>
 8000694:	4291      	cmp	r1, r2
 8000696:	d000      	beq.n	800069a <ai_platform_network_get_error+0x3a>
 8000698:	e7fe      	b.n	8000698 <ai_platform_network_get_error+0x38>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	300c      	addne	r0, #12
 80006a0:	f000 b9ce 	bne.w	8000a40 <core_get_error>
 80006a4:	f20f 3088 	addw	r0, pc, #904	; 0x388
 80006a8:	6800      	ldr	r0, [r0, #0]
 80006aa:	4770      	bx	lr

080006ac <ai_platform_network_set_error>:
 80006ac:	2800      	cmp	r0, #0
 80006ae:	bf1c      	itt	ne
 80006b0:	300c      	addne	r0, #12
 80006b2:	f000 b9ca 	bne.w	8000a4a <core_set_error>
 80006b6:	4770      	bx	lr

080006b8 <ai_platform_api_get_network_report>:
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006bc:	ea5f 0900 	movs.w	r9, r0
 80006c0:	b081      	sub	sp, #4
 80006c2:	460c      	mov	r4, r1
 80006c4:	d005      	beq.n	80006d2 <ai_platform_api_get_network_report+0x1a>
 80006c6:	f8d9 0000 	ldr.w	r0, [r9]
 80006ca:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000a0c <.text_25>
 80006ce:	4288      	cmp	r0, r1
 80006d0:	d001      	beq.n	80006d6 <ai_platform_api_get_network_report+0x1e>
 80006d2:	f04f 0900 	mov.w	r9, #0
 80006d6:	f8df 5324 	ldr.w	r5, [pc, #804]	; 80009fc <.text_21>
 80006da:	f8df 6324 	ldr.w	r6, [pc, #804]	; 8000a00 <.text_22>
 80006de:	6828      	ldr	r0, [r5, #0]
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	0040      	lsls	r0, r0, #1
 80006e4:	6028      	str	r0, [r5, #0]
 80006e6:	2101      	movs	r1, #1
 80006e8:	60b1      	str	r1, [r6, #8]
 80006ea:	68b0      	ldr	r0, [r6, #8]
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d1fc      	bne.n	80006ea <ai_platform_api_get_network_report+0x32>
 80006f0:	f8df 7310 	ldr.w	r7, [pc, #784]	; 8000a04 <.text_23>
 80006f4:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000a08 <.text_24>
 80006f8:	6037      	str	r7, [r6, #0]
 80006fa:	6830      	ldr	r0, [r6, #0]
 80006fc:	4540      	cmp	r0, r8
 80006fe:	d000      	beq.n	8000702 <ai_platform_api_get_network_report+0x4a>
 8000700:	e7fe      	b.n	8000700 <ai_platform_api_get_network_report+0x48>
 8000702:	f1b9 0f00 	cmp.w	r9, #0
 8000706:	bf18      	it	ne
 8000708:	2c00      	cmpne	r4, #0
 800070a:	f000 8088 	beq.w	800081e <ai_platform_api_get_network_report+0x166>
 800070e:	2000      	movs	r0, #0
 8000710:	6660      	str	r0, [r4, #100]	; 0x64
 8000712:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8000716:	2a00      	cmp	r2, #0
 8000718:	f000 807b 	beq.w	8000812 <ai_platform_api_get_network_report+0x15a>
 800071c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800071e:	1c49      	adds	r1, r1, #1
 8000720:	6661      	str	r1, [r4, #100]	; 0x64
 8000722:	6890      	ldr	r0, [r2, #8]
 8000724:	4282      	cmp	r2, r0
 8000726:	bf1c      	itt	ne
 8000728:	2800      	cmpne	r0, #0
 800072a:	4602      	movne	r2, r0
 800072c:	d1f6      	bne.n	800071c <ai_platform_api_get_network_report+0x64>
 800072e:	e06e      	b.n	800080e <ai_platform_api_get_network_report+0x156>
 8000730:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8000734:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8000738:	f7ff fd4a 	bl	80001d0 <_ai_platform_get_io_buffers>
 800073c:	8620      	strh	r0, [r4, #48]	; 0x30
 800073e:	b910      	cbnz	r0, 8000746 <ai_platform_api_get_network_report+0x8e>
 8000740:	2218      	movs	r2, #24
 8000742:	2112      	movs	r1, #18
 8000744:	e067      	b.n	8000816 <ai_platform_api_get_network_report+0x15e>
 8000746:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800074a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800074e:	300c      	adds	r0, #12
 8000750:	f7ff fd3e 	bl	80001d0 <_ai_platform_get_io_buffers>
 8000754:	8660      	strh	r0, [r4, #50]	; 0x32
 8000756:	b910      	cbnz	r0, 800075e <ai_platform_api_get_network_report+0xa6>
 8000758:	2218      	movs	r2, #24
 800075a:	2113      	movs	r1, #19
 800075c:	e05b      	b.n	8000816 <ai_platform_api_get_network_report+0x15e>
 800075e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000762:	66a0      	str	r0, [r4, #104]	; 0x68
 8000764:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000768:	e892 5c08 	ldmia.w	r2, {r3, sl, fp, ip, lr}
 800076c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000770:	f109 0914 	add.w	r9, r9, #20
 8000774:	e881 5c08 	stmia.w	r1, {r3, sl, fp, ip, lr}
 8000778:	e899 500e 	ldmia.w	r9, {r1, r2, r3, ip, lr}
 800077c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000780:	e880 500e 	stmia.w	r0, {r1, r2, r3, ip, lr}
 8000784:	6828      	ldr	r0, [r5, #0]
 8000786:	0840      	lsrs	r0, r0, #1
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	6028      	str	r0, [r5, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	60b3      	str	r3, [r6, #8]
 8000790:	68b0      	ldr	r0, [r6, #8]
 8000792:	2800      	cmp	r0, #0
 8000794:	d1fc      	bne.n	8000790 <ai_platform_api_get_network_report+0xd8>
 8000796:	6037      	str	r7, [r6, #0]
 8000798:	6831      	ldr	r1, [r6, #0]
 800079a:	4541      	cmp	r1, r8
 800079c:	d000      	beq.n	80007a0 <ai_platform_api_get_network_report+0xe8>
 800079e:	e7fe      	b.n	800079e <ai_platform_api_get_network_report+0xe6>
 80007a0:	a021      	add	r0, pc, #132	; (adr r0, 8000828 <.text_16>)
 80007a2:	6120      	str	r0, [r4, #16]
 80007a4:	6829      	ldr	r1, [r5, #0]
 80007a6:	0849      	lsrs	r1, r1, #1
 80007a8:	0049      	lsls	r1, r1, #1
 80007aa:	6029      	str	r1, [r5, #0]
 80007ac:	60b3      	str	r3, [r6, #8]
 80007ae:	68b0      	ldr	r0, [r6, #8]
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d1fc      	bne.n	80007ae <ai_platform_api_get_network_report+0xf6>
 80007b4:	6037      	str	r7, [r6, #0]
 80007b6:	6831      	ldr	r1, [r6, #0]
 80007b8:	4541      	cmp	r1, r8
 80007ba:	d000      	beq.n	80007be <ai_platform_api_get_network_report+0x106>
 80007bc:	e7fe      	b.n	80007bc <ai_platform_api_get_network_report+0x104>
 80007be:	f20f 2054 	addw	r0, pc, #596	; 0x254
 80007c2:	6802      	ldr	r2, [r0, #0]
 80007c4:	6162      	str	r2, [r4, #20]
 80007c6:	6829      	ldr	r1, [r5, #0]
 80007c8:	0849      	lsrs	r1, r1, #1
 80007ca:	0049      	lsls	r1, r1, #1
 80007cc:	6029      	str	r1, [r5, #0]
 80007ce:	60b3      	str	r3, [r6, #8]
 80007d0:	68b0      	ldr	r0, [r6, #8]
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d1fc      	bne.n	80007d0 <ai_platform_api_get_network_report+0x118>
 80007d6:	6037      	str	r7, [r6, #0]
 80007d8:	6831      	ldr	r1, [r6, #0]
 80007da:	4541      	cmp	r1, r8
 80007dc:	d000      	beq.n	80007e0 <ai_platform_api_get_network_report+0x128>
 80007de:	e7fe      	b.n	80007de <ai_platform_api_get_network_report+0x126>
 80007e0:	a08d      	add	r0, pc, #564	; (adr r0, 8000a18 <.text_28>)
 80007e2:	6802      	ldr	r2, [r0, #0]
 80007e4:	6262      	str	r2, [r4, #36]	; 0x24
 80007e6:	6829      	ldr	r1, [r5, #0]
 80007e8:	0849      	lsrs	r1, r1, #1
 80007ea:	0049      	lsls	r1, r1, #1
 80007ec:	6029      	str	r1, [r5, #0]
 80007ee:	60b3      	str	r3, [r6, #8]
 80007f0:	68b0      	ldr	r0, [r6, #8]
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d1fc      	bne.n	80007f0 <ai_platform_api_get_network_report+0x138>
 80007f6:	6037      	str	r7, [r6, #0]
 80007f8:	6831      	ldr	r1, [r6, #0]
 80007fa:	4541      	cmp	r1, r8
 80007fc:	d000      	beq.n	8000800 <ai_platform_api_get_network_report+0x148>
 80007fe:	e7fe      	b.n	80007fe <ai_platform_api_get_network_report+0x146>
 8000800:	a086      	add	r0, pc, #536	; (adr r0, 8000a1c <.text_29>)
 8000802:	6802      	ldr	r2, [r0, #0]
 8000804:	62a2      	str	r2, [r4, #40]	; 0x28
 8000806:	2001      	movs	r0, #1
 8000808:	b001      	add	sp, #4
 800080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800080e:	2900      	cmp	r1, #0
 8000810:	d18e      	bne.n	8000730 <ai_platform_api_get_network_report+0x78>
 8000812:	2218      	movs	r2, #24
 8000814:	2111      	movs	r1, #17
 8000816:	f109 000c 	add.w	r0, r9, #12
 800081a:	f000 f916 	bl	8000a4a <core_set_error>
 800081e:	2000      	movs	r0, #0
 8000820:	b001      	add	sp, #4
 8000822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000828 <.text_16>:
 8000828:	00000000 	.word	0x00000000

0800082c <ai_platform_network_create>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	9d04      	ldr	r5, [sp, #16]
 8000830:	4604      	mov	r4, r0
 8000832:	9805      	ldr	r0, [sp, #20]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	042d      	lsls	r5, r5, #16
 8000838:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800083c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000840:	a07c      	add	r0, pc, #496	; (adr r0, 8000a34 <.text_35>)
 8000842:	6806      	ldr	r6, [r0, #0]
 8000844:	486d      	ldr	r0, [pc, #436]	; (80009fc <.text_21>)
 8000846:	6801      	ldr	r1, [r0, #0]
 8000848:	0849      	lsrs	r1, r1, #1
 800084a:	0049      	lsls	r1, r1, #1
 800084c:	6001      	str	r1, [r0, #0]
 800084e:	2001      	movs	r0, #1
 8000850:	496b      	ldr	r1, [pc, #428]	; (8000a00 <.text_22>)
 8000852:	6088      	str	r0, [r1, #8]
 8000854:	6888      	ldr	r0, [r1, #8]
 8000856:	2800      	cmp	r0, #0
 8000858:	d1fc      	bne.n	8000854 <ai_platform_network_create+0x28>
 800085a:	4b6a      	ldr	r3, [pc, #424]	; (8000a04 <.text_23>)
 800085c:	600b      	str	r3, [r1, #0]
 800085e:	6808      	ldr	r0, [r1, #0]
 8000860:	4969      	ldr	r1, [pc, #420]	; (8000a08 <.text_24>)
 8000862:	4288      	cmp	r0, r1
 8000864:	d000      	beq.n	8000868 <ai_platform_network_create+0x3c>
 8000866:	e7fe      	b.n	8000866 <ai_platform_network_create+0x3a>
 8000868:	b91c      	cbnz	r4, 8000872 <ai_platform_network_create+0x46>
 800086a:	bf00      	nop
 800086c:	a072      	add	r0, pc, #456	; (adr r0, 8000a38 <.text_36>)
 800086e:	6800      	ldr	r0, [r0, #0]
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	4966      	ldr	r1, [pc, #408]	; (8000a0c <.text_25>)
 8000874:	6011      	str	r1, [r2, #0]
 8000876:	f8c4 2000 	str.w	r2, [r4]
 800087a:	f000 f8df 	bl	8000a3c <core_init>
 800087e:	b908      	cbnz	r0, 8000884 <ai_platform_network_create+0x58>
 8000880:	a067      	add	r0, pc, #412	; (adr r0, 8000a20 <.text_30>)
 8000882:	e00a      	b.n	800089a <ai_platform_network_create+0x6e>
 8000884:	4962      	ldr	r1, [pc, #392]	; (8000a10 <.text_26>)
 8000886:	428d      	cmp	r5, r1
 8000888:	bf28      	it	cs
 800088a:	f20f 1098 	addwcs	r0, pc, #408	; 0x198
 800088e:	d204      	bcs.n	800089a <ai_platform_network_create+0x6e>
 8000890:	a065      	add	r0, pc, #404	; (adr r0, 8000a28 <_platform_network_sanity_check{5}::signatures>)
 8000892:	f000 f8ef 	bl	8000a74 <ai_check_custom_types>
 8000896:	b918      	cbnz	r0, 80008a0 <ai_platform_network_create+0x74>
 8000898:	a064      	add	r0, pc, #400	; (adr r0, 8000a2c <.text_33>)
 800089a:	6806      	ldr	r6, [r0, #0]
 800089c:	2100      	movs	r1, #0
 800089e:	6021      	str	r1, [r4, #0]
 80008a0:	4630      	mov	r0, r6
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <ai_platform_network_destroy>:
 80008a4:	b128      	cbz	r0, 80008b2 <ai_platform_network_destroy+0xe>
 80008a6:	6801      	ldr	r1, [r0, #0]
 80008a8:	4a58      	ldr	r2, [pc, #352]	; (8000a0c <.text_25>)
 80008aa:	4291      	cmp	r1, r2
 80008ac:	bf08      	it	eq
 80008ae:	4602      	moveq	r2, r0
 80008b0:	d000      	beq.n	80008b4 <ai_platform_network_destroy+0x10>
 80008b2:	2200      	movs	r2, #0
 80008b4:	4951      	ldr	r1, [pc, #324]	; (80009fc <.text_21>)
 80008b6:	680b      	ldr	r3, [r1, #0]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	600b      	str	r3, [r1, #0]
 80008be:	2101      	movs	r1, #1
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <.text_22>)
 80008c2:	6099      	str	r1, [r3, #8]
 80008c4:	6899      	ldr	r1, [r3, #8]
 80008c6:	2900      	cmp	r1, #0
 80008c8:	d1fc      	bne.n	80008c4 <ai_platform_network_destroy+0x20>
 80008ca:	f8df c138 	ldr.w	ip, [pc, #312]	; 8000a04 <.text_23>
 80008ce:	f8c3 c000 	str.w	ip, [r3]
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <.text_24>)
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d000      	beq.n	80008dc <ai_platform_network_destroy+0x38>
 80008da:	e7fe      	b.n	80008da <ai_platform_network_destroy+0x36>
 80008dc:	b102      	cbz	r2, 80008e0 <ai_platform_network_destroy+0x3c>
 80008de:	2000      	movs	r0, #0
 80008e0:	4770      	bx	lr

080008e2 <ai_platform_network_init>:
 80008e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e6:	b081      	sub	sp, #4
 80008e8:	460a      	mov	r2, r1
 80008ea:	b118      	cbz	r0, 80008f4 <ai_platform_network_init+0x12>
 80008ec:	6801      	ldr	r1, [r0, #0]
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <.text_25>)
 80008f0:	4299      	cmp	r1, r3
 80008f2:	d000      	beq.n	80008f6 <ai_platform_network_init+0x14>
 80008f4:	2000      	movs	r0, #0
 80008f6:	4941      	ldr	r1, [pc, #260]	; (80009fc <.text_21>)
 80008f8:	680b      	ldr	r3, [r1, #0]
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	600b      	str	r3, [r1, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <.text_22>)
 8000904:	6099      	str	r1, [r3, #8]
 8000906:	6899      	ldr	r1, [r3, #8]
 8000908:	2900      	cmp	r1, #0
 800090a:	d1fc      	bne.n	8000906 <ai_platform_network_init+0x24>
 800090c:	4c3d      	ldr	r4, [pc, #244]	; (8000a04 <.text_23>)
 800090e:	601c      	str	r4, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <.text_24>)
 8000914:	4299      	cmp	r1, r3
 8000916:	d000      	beq.n	800091a <ai_platform_network_init+0x38>
 8000918:	e7fe      	b.n	8000918 <ai_platform_network_init+0x36>
 800091a:	2800      	cmp	r0, #0
 800091c:	d034      	beq.n	8000988 <ai_platform_network_init+0xa6>
 800091e:	b90a      	cbnz	r2, 8000924 <ai_platform_network_init+0x42>
 8000920:	2211      	movs	r2, #17
 8000922:	e012      	b.n	800094a <ai_platform_network_init+0x68>
 8000924:	6913      	ldr	r3, [r2, #16]
 8000926:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000928:	b939      	cbnz	r1, 800093a <ai_platform_network_init+0x58>
 800092a:	8b91      	ldrh	r1, [r2, #28]
 800092c:	8b55      	ldrh	r5, [r2, #26]
 800092e:	6a14      	ldr	r4, [r2, #32]
 8000930:	4369      	muls	r1, r5
 8000932:	4361      	muls	r1, r4
 8000934:	bf18      	it	ne
 8000936:	2213      	movne	r2, #19
 8000938:	d107      	bne.n	800094a <ai_platform_network_init+0x68>
 800093a:	b973      	cbnz	r3, 800095a <ai_platform_network_init+0x78>
 800093c:	8911      	ldrh	r1, [r2, #8]
 800093e:	88d4      	ldrh	r4, [r2, #6]
 8000940:	68d3      	ldr	r3, [r2, #12]
 8000942:	4361      	muls	r1, r4
 8000944:	4359      	muls	r1, r3
 8000946:	d008      	beq.n	800095a <ai_platform_network_init+0x78>
 8000948:	2212      	movs	r2, #18
 800094a:	2110      	movs	r1, #16
 800094c:	300c      	adds	r0, #12
 800094e:	f000 f87c 	bl	8000a4a <core_set_error>
 8000952:	2000      	movs	r0, #0
 8000954:	b001      	add	sp, #4
 8000956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800095a:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 800095c:	f100 0114 	add.w	r1, r0, #20
 8000960:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8000964:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 8000968:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 800096c:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 8000970:	2103      	movs	r1, #3
 8000972:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000974:	6081      	str	r1, [r0, #8]
 8000976:	b13a      	cbz	r2, 8000988 <ai_platform_network_init+0xa6>
 8000978:	6891      	ldr	r1, [r2, #8]
 800097a:	6050      	str	r0, [r2, #4]
 800097c:	428a      	cmp	r2, r1
 800097e:	bf18      	it	ne
 8000980:	2900      	cmpne	r1, #0
 8000982:	bf18      	it	ne
 8000984:	460a      	movne	r2, r1
 8000986:	d1f7      	bne.n	8000978 <ai_platform_network_init+0x96>
 8000988:	b001      	add	sp, #4
 800098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800098e <ai_platform_network_process>:
 800098e:	b570      	push	{r4, r5, r6, lr}
 8000990:	0004      	movs	r4, r0
 8000992:	d003      	beq.n	800099c <ai_platform_network_process+0xe>
 8000994:	6820      	ldr	r0, [r4, #0]
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <.text_25>)
 8000998:	4298      	cmp	r0, r3
 800099a:	d000      	beq.n	800099e <ai_platform_network_process+0x10>
 800099c:	2400      	movs	r4, #0
 800099e:	4817      	ldr	r0, [pc, #92]	; (80009fc <.text_21>)
 80009a0:	6803      	ldr	r3, [r0, #0]
 80009a2:	085b      	lsrs	r3, r3, #1
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	6003      	str	r3, [r0, #0]
 80009a8:	2001      	movs	r0, #1
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <.text_22>)
 80009ac:	6098      	str	r0, [r3, #8]
 80009ae:	6898      	ldr	r0, [r3, #8]
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1fc      	bne.n	80009ae <ai_platform_network_process+0x20>
 80009b4:	4d13      	ldr	r5, [pc, #76]	; (8000a04 <.text_23>)
 80009b6:	601d      	str	r5, [r3, #0]
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <.text_24>)
 80009bc:	4298      	cmp	r0, r3
 80009be:	d000      	beq.n	80009c2 <ai_platform_network_process+0x34>
 80009c0:	e7fe      	b.n	80009c0 <ai_platform_network_process+0x32>
 80009c2:	4620      	mov	r0, r4
 80009c4:	f7ff fcca 	bl	800035c <_platform_network_io_bind>
 80009c8:	b1b8      	cbz	r0, 80009fa <ai_platform_network_process+0x6c>
 80009ca:	8a60      	ldrh	r0, [r4, #18]
 80009cc:	8a21      	ldrh	r1, [r4, #16]
 80009ce:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f105 060c 	add.w	r6, r5, #12
 80009d6:	d20f      	bcs.n	80009f8 <ai_platform_network_process+0x6a>
 80009d8:	4628      	mov	r0, r5
 80009da:	f7ff fc4d 	bl	8000278 <_platform_network_state_update_input>
 80009de:	4620      	mov	r0, r4
 80009e0:	f000 f8f2 	bl	8000bc8 <ai_layers_forward_all>
 80009e4:	4630      	mov	r0, r6
 80009e6:	f7ff fc7b 	bl	80002e0 <_platform_network_state_update_output>
 80009ea:	8a60      	ldrh	r0, [r4, #18]
 80009ec:	8a21      	ldrh	r1, [r4, #16]
 80009ee:	1c40      	adds	r0, r0, #1
 80009f0:	8260      	strh	r0, [r4, #18]
 80009f2:	b280      	uxth	r0, r0
 80009f4:	4288      	cmp	r0, r1
 80009f6:	d3ef      	bcc.n	80009d8 <ai_platform_network_process+0x4a>
 80009f8:	8a60      	ldrh	r0, [r4, #18]
 80009fa:	bd70      	pop	{r4, r5, r6, pc}

080009fc <.text_21>:
 80009fc:	e0002000 	.word	0xe0002000

08000a00 <.text_22>:
 8000a00:	40023000 	.word	0x40023000

08000a04 <.text_23>:
 8000a04:	f407a5c2 	.word	0xf407a5c2

08000a08 <.text_24>:
 8000a08:	b5e8b5cd 	.word	0xb5e8b5cd

08000a0c <.text_25>:
 8000a0c:	a1c00100 	.word	0xa1c00100

08000a10 <.text_26>:
 8000a10:	01030001 	.word	0x01030001

08000a14 <.text_27>:
 8000a14:	00000004 	.word	0x00000004

08000a18 <.text_28>:
 8000a18:	00000101 	.word	0x00000101

08000a1c <.text_29>:
 8000a1c:	00000301 	.word	0x00000301

08000a20 <.text_30>:
 8000a20:	00001030 	.word	0x00001030

08000a24 <.text_31>:
 8000a24:	00001001 	.word	0x00001001

08000a28 <_platform_network_sanity_check{5}::signatures>:
 8000a28:	84048403                                ....

08000a2c <.text_33>:
 8000a2c:	00001002 	.word	0x00001002

08000a30 <.text_34>:
 8000a30:	00001010 	.word	0x00001010

08000a34 <.text_35>:
 8000a34:	00000000 	.word	0x00000000

08000a38 <.text_36>:
 8000a38:	00001010 	.word	0x00001010

08000a3c <core_init>:
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	4770      	bx	lr

08000a40 <core_get_error>:
 8000a40:	4601      	mov	r1, r0
 8000a42:	2200      	movs	r2, #0
 8000a44:	6808      	ldr	r0, [r1, #0]
 8000a46:	600a      	str	r2, [r1, #0]
 8000a48:	4770      	bx	lr

08000a4a <core_set_error>:
 8000a4a:	7803      	ldrb	r3, [r0, #0]
 8000a4c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000a50:	d104      	bne.n	8000a5c <core_set_error+0x12>
 8000a52:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000a56:	6001      	str	r1, [r0, #0]
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <ai_layers_forward_layer>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4604      	mov	r4, r0
 8000a64:	68e1      	ldr	r1, [r4, #12]
 8000a66:	4788      	blx	r1
 8000a68:	68a0      	ldr	r0, [r4, #8]
 8000a6a:	42a0      	cmp	r0, r4
 8000a6c:	bf08      	it	eq
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	bd10      	pop	{r4, pc}
	...

08000a74 <ai_check_custom_types>:
 8000a74:	b500      	push	{lr}
 8000a76:	b081      	sub	sp, #4
 8000a78:	b160      	cbz	r0, 8000a94 <ai_check_custom_types+0x20>
 8000a7a:	7801      	ldrb	r1, [r0, #0]
 8000a7c:	2903      	cmp	r1, #3
 8000a7e:	d109      	bne.n	8000a94 <ai_check_custom_types+0x20>
 8000a80:	f05f 0204 	movs.w	r2, #4
 8000a84:	a18c      	add	r1, pc, #560	; (adr r1, 8000cb8 <ai_check_custom_types::ref_signatures>)
 8000a86:	f00a ff39 	bl	800b8fc <memcmp>
 8000a8a:	1e40      	subs	r0, r0, #1
 8000a8c:	4180      	sbcs	r0, r0
 8000a8e:	0fc0      	lsrs	r0, r0, #31
 8000a90:	b001      	add	sp, #4
 8000a92:	bd00      	pop	{pc}
 8000a94:	2000      	movs	r0, #0
 8000a96:	b001      	add	sp, #4
 8000a98:	bd00      	pop	{pc}
	...

08000a9c <ai_layer_type_name>:
 8000a9c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000aa0:	1a81      	subs	r1, r0, r2
 8000aa2:	2901      	cmp	r1, #1
 8000aa4:	bf81      	itttt	hi
 8000aa6:	1ec9      	subhi	r1, r1, #3
 8000aa8:	290d      	cmphi	r1, #13
 8000aaa:	390f      	subhi	r1, #15
 8000aac:	2909      	cmphi	r1, #9
 8000aae:	f200 806b 	bhi.w	8000b88 <ai_layer_type_name+0xec>
 8000ab2:	1a80      	subs	r0, r0, r2
 8000ab4:	d033      	beq.n	8000b1e <ai_layer_type_name+0x82>
 8000ab6:	1e40      	subs	r0, r0, #1
 8000ab8:	d033      	beq.n	8000b22 <ai_layer_type_name+0x86>
 8000aba:	1e80      	subs	r0, r0, #2
 8000abc:	d033      	beq.n	8000b26 <ai_layer_type_name+0x8a>
 8000abe:	1e40      	subs	r0, r0, #1
 8000ac0:	d034      	beq.n	8000b2c <ai_layer_type_name+0x90>
 8000ac2:	1e40      	subs	r0, r0, #1
 8000ac4:	d034      	beq.n	8000b30 <ai_layer_type_name+0x94>
 8000ac6:	1e40      	subs	r0, r0, #1
 8000ac8:	d034      	beq.n	8000b34 <ai_layer_type_name+0x98>
 8000aca:	1e40      	subs	r0, r0, #1
 8000acc:	d034      	beq.n	8000b38 <ai_layer_type_name+0x9c>
 8000ace:	1e40      	subs	r0, r0, #1
 8000ad0:	d034      	beq.n	8000b3c <ai_layer_type_name+0xa0>
 8000ad2:	1e40      	subs	r0, r0, #1
 8000ad4:	d034      	beq.n	8000b40 <ai_layer_type_name+0xa4>
 8000ad6:	1e40      	subs	r0, r0, #1
 8000ad8:	d034      	beq.n	8000b44 <ai_layer_type_name+0xa8>
 8000ada:	1e40      	subs	r0, r0, #1
 8000adc:	d034      	beq.n	8000b48 <ai_layer_type_name+0xac>
 8000ade:	1e40      	subs	r0, r0, #1
 8000ae0:	d034      	beq.n	8000b4c <ai_layer_type_name+0xb0>
 8000ae2:	1e40      	subs	r0, r0, #1
 8000ae4:	d034      	beq.n	8000b50 <ai_layer_type_name+0xb4>
 8000ae6:	1e40      	subs	r0, r0, #1
 8000ae8:	d034      	beq.n	8000b54 <ai_layer_type_name+0xb8>
 8000aea:	1e40      	subs	r0, r0, #1
 8000aec:	d034      	beq.n	8000b58 <ai_layer_type_name+0xbc>
 8000aee:	1e40      	subs	r0, r0, #1
 8000af0:	d034      	beq.n	8000b5c <ai_layer_type_name+0xc0>
 8000af2:	1e80      	subs	r0, r0, #2
 8000af4:	d034      	beq.n	8000b60 <ai_layer_type_name+0xc4>
 8000af6:	1e40      	subs	r0, r0, #1
 8000af8:	d034      	beq.n	8000b64 <ai_layer_type_name+0xc8>
 8000afa:	1e40      	subs	r0, r0, #1
 8000afc:	d034      	beq.n	8000b68 <ai_layer_type_name+0xcc>
 8000afe:	1e40      	subs	r0, r0, #1
 8000b00:	d034      	beq.n	8000b6c <ai_layer_type_name+0xd0>
 8000b02:	1e40      	subs	r0, r0, #1
 8000b04:	d034      	beq.n	8000b70 <ai_layer_type_name+0xd4>
 8000b06:	1e40      	subs	r0, r0, #1
 8000b08:	d034      	beq.n	8000b74 <ai_layer_type_name+0xd8>
 8000b0a:	1e40      	subs	r0, r0, #1
 8000b0c:	d034      	beq.n	8000b78 <ai_layer_type_name+0xdc>
 8000b0e:	1e40      	subs	r0, r0, #1
 8000b10:	d034      	beq.n	8000b7c <ai_layer_type_name+0xe0>
 8000b12:	1e40      	subs	r0, r0, #1
 8000b14:	d034      	beq.n	8000b80 <ai_layer_type_name+0xe4>
 8000b16:	1e40      	subs	r0, r0, #1
 8000b18:	d034      	beq.n	8000b84 <ai_layer_type_name+0xe8>
 8000b1a:	a01c      	add	r0, pc, #112	; (adr r0, 8000b8c <.text_5>)
 8000b1c:	4770      	bx	lr
 8000b1e:	a01c      	add	r0, pc, #112	; (adr r0, 8000b90 <.text_6>)
 8000b20:	4770      	bx	lr
 8000b22:	a01c      	add	r0, pc, #112	; (adr r0, 8000b94 <.text_7>)
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	a031      	add	r0, pc, #196	; (adr r0, 8000bf0 <.text_15>)
 8000b2a:	4770      	bx	lr
 8000b2c:	a032      	add	r0, pc, #200	; (adr r0, 8000bf8 <.text_16>)
 8000b2e:	4770      	bx	lr
 8000b30:	a019      	add	r0, pc, #100	; (adr r0, 8000b98 <.text_8>)
 8000b32:	4770      	bx	lr
 8000b34:	a019      	add	r0, pc, #100	; (adr r0, 8000b9c <.text_9>)
 8000b36:	4770      	bx	lr
 8000b38:	a031      	add	r0, pc, #196	; (adr r0, 8000c00 <.text_17>)
 8000b3a:	4770      	bx	lr
 8000b3c:	a018      	add	r0, pc, #96	; (adr r0, 8000ba0 <.text_10>)
 8000b3e:	4770      	bx	lr
 8000b40:	a031      	add	r0, pc, #196	; (adr r0, 8000c08 <.text_18>)
 8000b42:	4770      	bx	lr
 8000b44:	a032      	add	r0, pc, #200	; (adr r0, 8000c10 <.text_19>)
 8000b46:	4770      	bx	lr
 8000b48:	a036      	add	r0, pc, #216	; (adr r0, 8000c24 <.text_20>)
 8000b4a:	4770      	bx	lr
 8000b4c:	a037      	add	r0, pc, #220	; (adr r0, 8000c2c <.text_21>)
 8000b4e:	4770      	bx	lr
 8000b50:	a014      	add	r0, pc, #80	; (adr r0, 8000ba4 <.text_11>)
 8000b52:	4770      	bx	lr
 8000b54:	a037      	add	r0, pc, #220	; (adr r0, 8000c34 <.text_22>)
 8000b56:	4770      	bx	lr
 8000b58:	a038      	add	r0, pc, #224	; (adr r0, 8000c3c <.text_23>)
 8000b5a:	4770      	bx	lr
 8000b5c:	a03a      	add	r0, pc, #232	; (adr r0, 8000c48 <.text_24>)
 8000b5e:	4770      	bx	lr
 8000b60:	a03e      	add	r0, pc, #248	; (adr r0, 8000c5c <.text_25>)
 8000b62:	4770      	bx	lr
 8000b64:	a03f      	add	r0, pc, #252	; (adr r0, 8000c64 <.text_26>)
 8000b66:	4770      	bx	lr
 8000b68:	a040      	add	r0, pc, #256	; (adr r0, 8000c6c <.text_27>)
 8000b6a:	4770      	bx	lr
 8000b6c:	a042      	add	r0, pc, #264	; (adr r0, 8000c78 <.text_28>)
 8000b6e:	4770      	bx	lr
 8000b70:	a043      	add	r0, pc, #268	; (adr r0, 8000c80 <.text_29>)
 8000b72:	4770      	bx	lr
 8000b74:	a044      	add	r0, pc, #272	; (adr r0, 8000c88 <.text_30>)
 8000b76:	4770      	bx	lr
 8000b78:	a00b      	add	r0, pc, #44	; (adr r0, 8000ba8 <.text_12>)
 8000b7a:	4770      	bx	lr
 8000b7c:	a048      	add	r0, pc, #288	; (adr r0, 8000ca0 <.text_31>)
 8000b7e:	4770      	bx	lr
 8000b80:	a049      	add	r0, pc, #292	; (adr r0, 8000ca8 <.text_32>)
 8000b82:	4770      	bx	lr
 8000b84:	a04a      	add	r0, pc, #296	; (adr r0, 8000cb0 <.text_33>)
 8000b86:	4770      	bx	lr
 8000b88:	a000      	add	r0, pc, #0	; (adr r0, 8000b8c <.text_5>)
 8000b8a:	4770      	bx	lr

08000b8c <.text_5>:
 8000b8c:	00000000 	.word	0x00000000

08000b90 <.text_6>:
 8000b90:	00444441 	.word	0x00444441

08000b94 <.text_7>:
 8000b94:	00004e42 	.word	0x00004e42

08000b98 <.text_8>:
 8000b98:	00555247 	.word	0x00555247

08000b9c <.text_9>:
 8000b9c:	004e524c 	.word	0x004e524c

08000ba0 <.text_10>:
 8000ba0:	00004c4e 	.word	0x00004c4e

08000ba4 <.text_11>:
 8000ba4:	00004d53 	.word	0x00004d53

08000ba8 <.text_12>:
 8000ba8:	00444150 	.word	0x00444150

08000bac <ai_layer_type_is_valid>:
 8000bac:	f242 7111 	movw	r1, #10001	; 0x2711
 8000bb0:	1a40      	subs	r0, r0, r1
 8000bb2:	2801      	cmp	r0, #1
 8000bb4:	bf81      	itttt	hi
 8000bb6:	1ec0      	subhi	r0, r0, #3
 8000bb8:	280d      	cmphi	r0, #13
 8000bba:	380f      	subhi	r0, #15
 8000bbc:	2809      	cmphi	r0, #9
 8000bbe:	d801      	bhi.n	8000bc4 <ai_layer_type_is_valid+0x18>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4770      	bx	lr
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <ai_layers_forward_all>:
 8000bc8:	b530      	push	{r4, r5, lr}
 8000bca:	4604      	mov	r4, r0
 8000bcc:	b081      	sub	sp, #4
 8000bce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000bd0:	b158      	cbz	r0, 8000bea <ai_layers_forward_all+0x22>
 8000bd2:	64a0      	str	r0, [r4, #72]	; 0x48
 8000bd4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000bd6:	68e9      	ldr	r1, [r5, #12]
 8000bd8:	4628      	mov	r0, r5
 8000bda:	4788      	blx	r1
 8000bdc:	68a8      	ldr	r0, [r5, #8]
 8000bde:	42a8      	cmp	r0, r5
 8000be0:	bf08      	it	eq
 8000be2:	2000      	moveq	r0, #0
 8000be4:	2800      	cmp	r0, #0
 8000be6:	64a0      	str	r0, [r4, #72]	; 0x48
 8000be8:	d1f4      	bne.n	8000bd4 <ai_layers_forward_all+0xc>
 8000bea:	b001      	add	sp, #4
 8000bec:	bd30      	pop	{r4, r5, pc}
	...

08000bf0 <.text_15>:
 8000bf0:	564e4f43 	.word	0x564e4f43
 8000bf4:	4432      	.short	0x4432
	...

08000bf8 <.text_16>:
 8000bf8:	534e4544 	.word	0x534e4544
 8000bfc:	0045      	.short	0x0045
	...

08000c00 <.text_17>:
 8000c00:	4d54534c 	.word	0x4d54534c
 8000c04:	00000000 	.word	0x00000000

08000c08 <.text_18>:
 8000c08:	4d524f4e 	.word	0x4d524f4e
 8000c0c:	00000000 	.word	0x00000000

08000c10 <.text_19>:
 8000c10:	4954504f 	.word	0x4954504f
 8000c14:	455a494d 	.word	0x455a494d
 8000c18:	4f435f44 	.word	0x4f435f44
 8000c1c:	4432564e 	.word	0x4432564e
 8000c20:	00000000 	.word	0x00000000

08000c24 <.text_20>:
 8000c24:	4d524550 	.word	0x4d524550
 8000c28:	00455455 	.word	0x00455455

08000c2c <.text_21>:
 8000c2c:	4c4f4f50 	.word	0x4c4f4f50
 8000c30:	00000000 	.word	0x00000000

08000c34 <.text_22>:
 8000c34:	494c5053 	.word	0x494c5053
 8000c38:	0054      	.short	0x0054
	...

08000c3c <.text_23>:
 8000c3c:	454d4954 	.word	0x454d4954
 8000c40:	4c45445f 	.word	0x4c45445f
 8000c44:	5941      	.short	0x5941
	...

08000c48 <.text_24>:
 8000c48:	454d4954 	.word	0x454d4954
 8000c4c:	5349445f 	.word	0x5349445f
 8000c50:	42495254 	.word	0x42495254
 8000c54:	44455455 	.word	0x44455455
 8000c58:	00000000 	.word	0x00000000

08000c5c <.text_25>:
 8000c5c:	434e4f43 	.word	0x434e4f43
 8000c60:	5441      	.short	0x5441
	...

08000c64 <.text_26>:
 8000c64:	4d4d4547 	.word	0x4d4d4547
 8000c68:	00000000 	.word	0x00000000

08000c6c <.text_27>:
 8000c6c:	41535055 	.word	0x41535055
 8000c70:	454c504d 	.word	0x454c504d
 8000c74:	00000000 	.word	0x00000000

08000c78 <.text_28>:
 8000c78:	57544c45 	.word	0x57544c45
 8000c7c:	00455349 	.word	0x00455349

08000c80 <.text_29>:
 8000c80:	454e4547 	.word	0x454e4547
 8000c84:	00434952 	.word	0x00434952

08000c88 <.text_30>:
 8000c88:	54534e49 	.word	0x54534e49
 8000c8c:	45434e41 	.word	0x45434e41
 8000c90:	4d524f4e 	.word	0x4d524f4e
 8000c94:	5a494c41 	.word	0x5a494c41
 8000c98:	4f495441 	.word	0x4f495441
 8000c9c:	004e      	.short	0x004e
	...

08000ca0 <.text_31>:
 8000ca0:	43494c53 	.word	0x43494c53
 8000ca4:	0045      	.short	0x0045
	...

08000ca8 <.text_32>:
 8000ca8:	454c4954 	.word	0x454c4954
 8000cac:	00000000 	.word	0x00000000

08000cb0 <.text_33>:
 8000cb0:	55444552 	.word	0x55444552
 8000cb4:	4543      	.short	0x4543
	...

08000cb8 <ai_check_custom_types::ref_signatures>:
 8000cb8:	8403 8404                                   ....

08000cbc <ai_conv2d_kernel_simple_f32>:
 8000cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc0:	b081      	sub	sp, #4
 8000cc2:	468b      	mov	fp, r1
 8000cc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000cc6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000cca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8000ccc:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cd0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8000cd2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8000cd6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8000cda:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ce2:	eba5 0709 	sub.w	r7, r5, r9
 8000ce6:	fb07 f708 	mul.w	r7, r7, r8
 8000cea:	9700      	str	r7, [sp, #0]
 8000cec:	1ae4      	subs	r4, r4, r3
 8000cee:	fb05 f708 	mul.w	r7, r5, r8
 8000cf2:	fb05 650e 	mla	r5, r5, lr, r6
 8000cf6:	fb08 f505 	mul.w	r5, r8, r5
 8000cfa:	437c      	muls	r4, r7
 8000cfc:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8000d00:	45da      	cmp	sl, fp
 8000d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d04:	ebac 0009 	sub.w	r0, ip, r9
 8000d08:	bf0c      	ite	eq
 8000d0a:	ed9f 0aab 	vldreq	s0, [pc, #684]	; 8000fb8 <.text_4>
 8000d0e:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000d12:	fb0c f50e 	mul.w	r5, ip, lr
 8000d16:	fb00 f008 	mul.w	r0, r0, r8
 8000d1a:	fb09 f908 	mul.w	r9, r9, r8
 8000d1e:	fb08 f505 	mul.w	r5, r8, r5
 8000d22:	2900      	cmp	r1, #0
 8000d24:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 8000d28:	f000 8070 	beq.w	8000e0c <ai_conv2d_kernel_simple_f32+0x150>
 8000d2c:	f029 0203 	bic.w	r2, r9, #3
 8000d30:	edda 0a00 	vldr	s1, [sl]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000d3a:	46c4      	mov	ip, r8
 8000d3c:	dd5c      	ble.n	8000df8 <ai_conv2d_kernel_simple_f32+0x13c>
 8000d3e:	9d00      	ldr	r5, [sp, #0]
 8000d40:	469e      	mov	lr, r3
 8000d42:	2700      	movs	r7, #0
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	dd1d      	ble.n	8000d84 <ai_conv2d_kernel_simple_f32+0xc8>
 8000d48:	ed96 4a00 	vldr	s8, [r6]
 8000d4c:	eddc 4a00 	vldr	s9, [ip]
 8000d50:	ed96 3a01 	vldr	s6, [r6, #4]
 8000d54:	eddc 3a01 	vldr	s7, [ip, #4]
 8000d58:	ed96 2a02 	vldr	s4, [r6, #8]
 8000d5c:	eddc 2a02 	vldr	s5, [ip, #8]
 8000d60:	ed96 1a03 	vldr	s2, [r6, #12]
 8000d64:	eddc 1a03 	vldr	s3, [ip, #12]
 8000d68:	ee44 0a24 	vmla.f32	s1, s8, s9
 8000d6c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8000d70:	3610      	adds	r6, #16
 8000d72:	1d3f      	adds	r7, r7, #4
 8000d74:	ee42 0a22 	vmla.f32	s1, s4, s5
 8000d78:	4297      	cmp	r7, r2
 8000d7a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d7e:	f10c 0c10 	add.w	ip, ip, #16
 8000d82:	dbe1      	blt.n	8000d48 <ai_conv2d_kernel_simple_f32+0x8c>
 8000d84:	454f      	cmp	r7, r9
 8000d86:	da2f      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000d88:	1c7f      	adds	r7, r7, #1
 8000d8a:	ed96 1a00 	vldr	s2, [r6]
 8000d8e:	eddc 1a00 	vldr	s3, [ip]
 8000d92:	1d36      	adds	r6, r6, #4
 8000d94:	454f      	cmp	r7, r9
 8000d96:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d9a:	f10c 0c04 	add.w	ip, ip, #4
 8000d9e:	da23      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000da0:	1c7f      	adds	r7, r7, #1
 8000da2:	ed96 1a00 	vldr	s2, [r6]
 8000da6:	eddc 1a00 	vldr	s3, [ip]
 8000daa:	1d36      	adds	r6, r6, #4
 8000dac:	454f      	cmp	r7, r9
 8000dae:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000db2:	f10c 0c04 	add.w	ip, ip, #4
 8000db6:	da17      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000db8:	1c7f      	adds	r7, r7, #1
 8000dba:	ed96 1a00 	vldr	s2, [r6]
 8000dbe:	eddc 1a00 	vldr	s3, [ip]
 8000dc2:	1d36      	adds	r6, r6, #4
 8000dc4:	454f      	cmp	r7, r9
 8000dc6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dca:	f10c 0c04 	add.w	ip, ip, #4
 8000dce:	da0b      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000dd0:	1c7f      	adds	r7, r7, #1
 8000dd2:	ed96 1a00 	vldr	s2, [r6]
 8000dd6:	eddc 1a00 	vldr	s3, [ip]
 8000dda:	1d36      	adds	r6, r6, #4
 8000ddc:	454f      	cmp	r7, r9
 8000dde:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000de2:	f10c 0c04 	add.w	ip, ip, #4
 8000de6:	dbcf      	blt.n	8000d88 <ai_conv2d_kernel_simple_f32+0xcc>
 8000de8:	f1be 0e01 	subs.w	lr, lr, #1
 8000dec:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 8000df0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8000df4:	d1a5      	bne.n	8000d42 <ai_conv2d_kernel_simple_f32+0x86>
 8000df6:	9500      	str	r5, [sp, #0]
 8000df8:	edcb 0a00 	vstr	s1, [fp]
 8000dfc:	1e49      	subs	r1, r1, #1
 8000dfe:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000e02:	f10b 0b04 	add.w	fp, fp, #4
 8000e06:	f10a 0a04 	add.w	sl, sl, #4
 8000e0a:	d191      	bne.n	8000d30 <ai_conv2d_kernel_simple_f32+0x74>
 8000e0c:	b001      	add	sp, #4
 8000e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000e14 <ai_conv2d_kernel_depthwise_f32>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	b081      	sub	sp, #4
 8000e1a:	b402      	push	{r1}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000e20:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000e24:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8000e28:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000e2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000e2e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8000e32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000e34:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8000e38:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8000e3a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8000e3e:	fbb6 f6fa 	udiv	r6, r6, sl
 8000e42:	eba8 0a00 	sub.w	sl, r8, r0
 8000e46:	fb0c fa0a 	mul.w	sl, ip, sl
 8000e4a:	1b09      	subs	r1, r1, r4
 8000e4c:	eba5 0c00 	sub.w	ip, r5, r0
 8000e50:	4369      	muls	r1, r5
 8000e52:	fb05 750e 	mla	r5, r5, lr, r7
 8000e56:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000e5a:	9b04      	ldr	r3, [sp, #16]
 8000e5c:	4599      	cmp	r9, r3
 8000e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000e60:	bf0c      	ite	eq
 8000e62:	ed9f 0a55 	vldreq	s0, [pc, #340]	; 8000fb8 <.text_4>
 8000e66:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000e6a:	fb08 f50e 	mul.w	r5, r8, lr
 8000e6e:	435d      	muls	r5, r3
 8000e70:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
 8000e74:	eb0e 0583 	add.w	r5, lr, r3, lsl #2
 8000e78:	45ae      	cmp	lr, r5
 8000e7a:	f04f 0800 	mov.w	r8, #0
 8000e7e:	9500      	str	r5, [sp, #0]
 8000e80:	f080 8097 	bcs.w	8000fb2 <ai_conv2d_kernel_depthwise_f32+0x19e>
 8000e84:	f020 0303 	bic.w	r3, r0, #3
 8000e88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8000e8c:	9603      	str	r6, [sp, #12]
 8000e8e:	9a03      	ldr	r2, [sp, #12]
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	f000 8088 	beq.w	8000fa6 <ai_conv2d_kernel_depthwise_f32+0x192>
 8000e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e98:	9e04      	ldr	r6, [sp, #16]
 8000e9a:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8000e9e:	9a03      	ldr	r2, [sp, #12]
 8000ea0:	9415      	str	r4, [sp, #84]	; 0x54
 8000ea2:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8000ea6:	9102      	str	r1, [sp, #8]
 8000ea8:	f8cd e004 	str.w	lr, [sp, #4]
 8000eac:	9915      	ldr	r1, [sp, #84]	; 0x54
 8000eae:	edd9 0a00 	vldr	s1, [r9]
 8000eb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb6:	2900      	cmp	r1, #0
 8000eb8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000ebc:	dd63      	ble.n	8000f86 <ai_conv2d_kernel_depthwise_f32+0x172>
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd26      	ble.n	8000f12 <ai_conv2d_kernel_depthwise_f32+0xfe>
 8000ec4:	f8dd 503c 	ldr.w	r5, [sp, #60]	; 0x3c
 8000ec8:	ed97 1a00 	vldr	s2, [r7]
 8000ecc:	edde 1a00 	vldr	s3, [lr]
 8000ed0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ed4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ed8:	ed97 1a01 	vldr	s2, [r7, #4]
 8000edc:	edde 1a00 	vldr	s3, [lr]
 8000ee0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ee4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ee8:	ed97 1a02 	vldr	s2, [r7, #8]
 8000eec:	edde 1a00 	vldr	s3, [lr]
 8000ef0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ef4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ef8:	1d24      	adds	r4, r4, #4
 8000efa:	ed97 1a03 	vldr	s2, [r7, #12]
 8000efe:	edde 1a00 	vldr	s3, [lr]
 8000f02:	3710      	adds	r7, #16
 8000f04:	429c      	cmp	r4, r3
 8000f06:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f0a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f0e:	dbdb      	blt.n	8000ec8 <ai_conv2d_kernel_depthwise_f32+0xb4>
 8000f10:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f12:	4284      	cmp	r4, r0
 8000f14:	da31      	bge.n	8000f7a <ai_conv2d_kernel_depthwise_f32+0x166>
 8000f16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8000f18:	1c64      	adds	r4, r4, #1
 8000f1a:	ed97 1a00 	vldr	s2, [r7]
 8000f1e:	edde 1a00 	vldr	s3, [lr]
 8000f22:	1d3f      	adds	r7, r7, #4
 8000f24:	4284      	cmp	r4, r0
 8000f26:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f2a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f2e:	da23      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f30:	1c64      	adds	r4, r4, #1
 8000f32:	ed97 1a00 	vldr	s2, [r7]
 8000f36:	edde 1a00 	vldr	s3, [lr]
 8000f3a:	1d3f      	adds	r7, r7, #4
 8000f3c:	4284      	cmp	r4, r0
 8000f3e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f42:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f46:	da17      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f48:	1c64      	adds	r4, r4, #1
 8000f4a:	ed97 1a00 	vldr	s2, [r7]
 8000f4e:	edde 1a00 	vldr	s3, [lr]
 8000f52:	1d3f      	adds	r7, r7, #4
 8000f54:	4284      	cmp	r4, r0
 8000f56:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f5a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f5e:	da0b      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f60:	1c64      	adds	r4, r4, #1
 8000f62:	ed97 1a00 	vldr	s2, [r7]
 8000f66:	edde 1a00 	vldr	s3, [lr]
 8000f6a:	1d3f      	adds	r7, r7, #4
 8000f6c:	4284      	cmp	r4, r0
 8000f6e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f72:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f76:	dbcf      	blt.n	8000f18 <ai_conv2d_kernel_depthwise_f32+0x104>
 8000f78:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f7a:	1e49      	subs	r1, r1, #1
 8000f7c:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8000f80:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8000f84:	d19b      	bne.n	8000ebe <ai_conv2d_kernel_depthwise_f32+0xaa>
 8000f86:	9902      	ldr	r1, [sp, #8]
 8000f88:	edc6 0a00 	vstr	s1, [r6]
 8000f8c:	1d36      	adds	r6, r6, #4
 8000f8e:	1e52      	subs	r2, r2, #1
 8000f90:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8000f94:	f108 0801 	add.w	r8, r8, #1
 8000f98:	f109 0904 	add.w	r9, r9, #4
 8000f9c:	d186      	bne.n	8000eac <ai_conv2d_kernel_depthwise_f32+0x98>
 8000f9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000fa0:	9902      	ldr	r1, [sp, #8]
 8000fa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa6:	9a00      	ldr	r2, [sp, #0]
 8000fa8:	f10e 0e04 	add.w	lr, lr, #4
 8000fac:	4596      	cmp	lr, r2
 8000fae:	f4ff af6e 	bcc.w	8000e8e <ai_conv2d_kernel_depthwise_f32+0x7a>
 8000fb2:	b006      	add	sp, #24
 8000fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000fb8 <.text_4>:
 8000fb8:	00000000 	.word	0x00000000

08000fbc <ai_conv2d_kernel_group_f32>:
 8000fbc:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	4693      	mov	fp, r2
 8000fc4:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8000fc8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000fca:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000fcc:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8000fd0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8000fd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8000fd6:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8000fd8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000fda:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000fdc:	46ca      	mov	sl, r9
 8000fde:	4655      	mov	r5, sl
 8000fe0:	ebaa 0c04 	sub.w	ip, sl, r4
 8000fe4:	fb94 f6f5 	sdiv	r6, r4, r5
 8000fe8:	fb05 c506 	mla	r5, r5, r6, ip
 8000fec:	fb95 fcfa 	sdiv	ip, r5, sl
 8000ff0:	fb0a 551c 	mls	r5, sl, ip, r5
 8000ff4:	9501      	str	r5, [sp, #4]
 8000ff6:	4454      	add	r4, sl
 8000ff8:	4645      	mov	r5, r8
 8000ffa:	1bee      	subs	r6, r5, r7
 8000ffc:	fb97 fcf5 	sdiv	ip, r7, r5
 8001000:	fb05 6c0c 	mla	ip, r5, ip, r6
 8001004:	fb9c f6f5 	sdiv	r6, ip, r5
 8001008:	fb05 cc16 	mls	ip, r5, r6, ip
 800100c:	f8cd c000 	str.w	ip, [sp]
 8001010:	1e64      	subs	r4, r4, #1
 8001012:	9e01      	ldr	r6, [sp, #4]
 8001014:	1b80      	subs	r0, r0, r6
 8001016:	4450      	add	r0, sl
 8001018:	1e40      	subs	r0, r0, #1
 800101a:	fb90 f0fa 	sdiv	r0, r0, sl
 800101e:	9e00      	ldr	r6, [sp, #0]
 8001020:	1b9b      	subs	r3, r3, r6
 8001022:	fbb1 f6f2 	udiv	r6, r1, r2
 8001026:	18eb      	adds	r3, r5, r3
 8001028:	1e5b      	subs	r3, r3, #1
 800102a:	fb93 fcf5 	sdiv	ip, r3, r5
 800102e:	ebae 0e0c 	sub.w	lr, lr, ip
 8001032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001034:	9604      	str	r6, [sp, #16]
 8001036:	fbb3 f3f2 	udiv	r3, r3, r2
 800103a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800103c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800103e:	fb01 f808 	mul.w	r8, r1, r8
 8001042:	fb00 881a 	mls	r8, r0, sl, r8
 8001046:	fb06 f808 	mul.w	r8, r6, r8
 800104a:	fb06 f109 	mul.w	r1, r6, r9
 800104e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001050:	435e      	muls	r6, r3
 8001052:	fb0e fe06 	mul.w	lr, lr, r6
 8001056:	19ee      	adds	r6, r5, r7
 8001058:	1e76      	subs	r6, r6, #1
 800105a:	fb96 f5f5 	sdiv	r5, r6, r5
 800105e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001060:	fb94 f4fa 	sdiv	r4, r4, sl
 8001064:	eba1 0903 	sub.w	r9, r1, r3
 8001068:	fb06 4405 	mla	r4, r6, r5, r4
 800106c:	9e06      	ldr	r6, [sp, #24]
 800106e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001070:	9d05      	ldr	r5, [sp, #20]
 8001072:	435c      	muls	r4, r3
 8001074:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8001078:	1a09      	subs	r1, r1, r0
 800107a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800107c:	4359      	muls	r1, r3
 800107e:	42ae      	cmp	r6, r5
 8001080:	9d00      	ldr	r5, [sp, #0]
 8001082:	9e01      	ldr	r6, [sp, #4]
 8001084:	442f      	add	r7, r5
 8001086:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001088:	fb05 6507 	mla	r5, r5, r7, r6
 800108c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800108e:	bf0c      	ite	eq
 8001090:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 8001188 <.text_6>
 8001094:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001098:	437d      	muls	r5, r7
 800109a:	2a00      	cmp	r2, #0
 800109c:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80010a0:	f04f 0a00 	mov.w	sl, #0
 80010a4:	d06d      	beq.n	8001182 <ai_conv2d_kernel_group_f32+0x1c6>
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	9a04      	ldr	r2, [sp, #16]
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d063      	beq.n	8001176 <ai_conv2d_kernel_group_f32+0x1ba>
 80010ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80010b0:	9f05      	ldr	r7, [sp, #20]
 80010b2:	f8cd c004 	str.w	ip, [sp, #4]
 80010b6:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 80010ba:	9a04      	ldr	r2, [sp, #16]
 80010bc:	f8cd e00c 	str.w	lr, [sp, #12]
 80010c0:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 80010c4:	f8cd 5008 	str.w	r5, [sp, #8]
 80010c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010cc:	eddb 0a00 	vldr	s1, [fp]
 80010d0:	9d02      	ldr	r5, [sp, #8]
 80010d2:	f1be 0f01 	cmp.w	lr, #1
 80010d6:	ee60 0a80 	vmul.f32	s1, s1, s0
 80010da:	db3b      	blt.n	8001154 <ai_conv2d_kernel_group_f32+0x198>
 80010dc:	2801      	cmp	r0, #1
 80010de:	db32      	blt.n	8001146 <ai_conv2d_kernel_group_f32+0x18a>
 80010e0:	ea4f 0c00 	mov.w	ip, r0
 80010e4:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 80010e8:	42b5      	cmp	r5, r6
 80010ea:	d227      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 80010ec:	ed94 1a00 	vldr	s2, [r4]
 80010f0:	edd5 1a00 	vldr	s3, [r5]
 80010f4:	1d24      	adds	r4, r4, #4
 80010f6:	1d2d      	adds	r5, r5, #4
 80010f8:	42b5      	cmp	r5, r6
 80010fa:	ee41 0a21 	vmla.f32	s1, s2, s3
 80010fe:	d21d      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001100:	ed94 1a00 	vldr	s2, [r4]
 8001104:	edd5 1a00 	vldr	s3, [r5]
 8001108:	1d24      	adds	r4, r4, #4
 800110a:	1d2d      	adds	r5, r5, #4
 800110c:	42b5      	cmp	r5, r6
 800110e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001112:	d213      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001114:	ed94 1a00 	vldr	s2, [r4]
 8001118:	edd5 1a00 	vldr	s3, [r5]
 800111c:	1d24      	adds	r4, r4, #4
 800111e:	1d2d      	adds	r5, r5, #4
 8001120:	42b5      	cmp	r5, r6
 8001122:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001126:	d209      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001128:	ed94 1a00 	vldr	s2, [r4]
 800112c:	edd5 1a00 	vldr	s3, [r5]
 8001130:	1d24      	adds	r4, r4, #4
 8001132:	1d2d      	adds	r5, r5, #4
 8001134:	42b5      	cmp	r5, r6
 8001136:	ee41 0a21 	vmla.f32	s1, s2, s3
 800113a:	d3d7      	bcc.n	80010ec <ai_conv2d_kernel_group_f32+0x130>
 800113c:	f1bc 0c01 	subs.w	ip, ip, #1
 8001140:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001144:	d1ce      	bne.n	80010e4 <ai_conv2d_kernel_group_f32+0x128>
 8001146:	f1be 0e01 	subs.w	lr, lr, #1
 800114a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800114e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001152:	d1c3      	bne.n	80010dc <ai_conv2d_kernel_group_f32+0x120>
 8001154:	9d03      	ldr	r5, [sp, #12]
 8001156:	edc7 0a00 	vstr	s1, [r7]
 800115a:	1d3f      	adds	r7, r7, #4
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8001162:	f10a 0a01 	add.w	sl, sl, #1
 8001166:	f10b 0b04 	add.w	fp, fp, #4
 800116a:	d1ad      	bne.n	80010c8 <ai_conv2d_kernel_group_f32+0x10c>
 800116c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001170:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001174:	9d02      	ldr	r5, [sp, #8]
 8001176:	9a00      	ldr	r2, [sp, #0]
 8001178:	1e52      	subs	r2, r2, #1
 800117a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	d192      	bne.n	80010a8 <ai_conv2d_kernel_group_f32+0xec>
 8001182:	b007      	add	sp, #28
 8001184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001188 <.text_6>:
 8001188:	00000000 	.word	0x00000000

0800118c <ai_conv2d_kernel_f32>:
 800118c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001190:	b090      	sub	sp, #64	; 0x40
 8001192:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001194:	b901      	cbnz	r1, 8001198 <ai_conv2d_kernel_f32+0xc>
 8001196:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001198:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800119a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800119c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800119e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80011a0:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80011a4:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 80011a8:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 80011ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80011ae:	1bed      	subs	r5, r5, r7
 80011b0:	1ba4      	subs	r4, r4, r6
 80011b2:	920e      	str	r2, [sp, #56]	; 0x38
 80011b4:	930d      	str	r3, [sp, #52]	; 0x34
 80011b6:	f1be 0f01 	cmp.w	lr, #1
 80011ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80011bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80011be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80011c0:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80011c4:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80011c8:	bf04      	itt	eq
 80011ca:	fb1c fb08 	smulbbeq	fp, ip, r8
 80011ce:	f1bb 0f01 	cmpeq.w	fp, #1
 80011d2:	d114      	bne.n	80011fe <ai_conv2d_kernel_f32+0x72>
 80011d4:	9303      	str	r3, [sp, #12]
 80011d6:	9202      	str	r2, [sp, #8]
 80011d8:	9001      	str	r0, [sp, #4]
 80011da:	9100      	str	r1, [sp, #0]
 80011dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80011de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80011e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80011e4:	9409      	str	r4, [sp, #36]	; 0x24
 80011e6:	9608      	str	r6, [sp, #32]
 80011e8:	9507      	str	r5, [sp, #28]
 80011ea:	9706      	str	r7, [sp, #24]
 80011ec:	f8cd a014 	str.w	sl, [sp, #20]
 80011f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80011f4:	f7ff fd62 	bl	8000cbc <ai_conv2d_kernel_simple_f32>
 80011f8:	b011      	add	sp, #68	; 0x44
 80011fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011fe:	4586      	cmp	lr, r0
 8001200:	bf04      	itt	eq
 8001202:	fb1c fb08 	smulbbeq	fp, ip, r8
 8001206:	f1bb 0f01 	cmpeq.w	fp, #1
 800120a:	d114      	bne.n	8001236 <ai_conv2d_kernel_f32+0xaa>
 800120c:	9303      	str	r3, [sp, #12]
 800120e:	9202      	str	r2, [sp, #8]
 8001210:	9001      	str	r0, [sp, #4]
 8001212:	9100      	str	r1, [sp, #0]
 8001214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001218:	9910      	ldr	r1, [sp, #64]	; 0x40
 800121a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800121c:	9409      	str	r4, [sp, #36]	; 0x24
 800121e:	9608      	str	r6, [sp, #32]
 8001220:	9507      	str	r5, [sp, #28]
 8001222:	9706      	str	r7, [sp, #24]
 8001224:	f8cd a014 	str.w	sl, [sp, #20]
 8001228:	f8cd 9010 	str.w	r9, [sp, #16]
 800122c:	f7ff fdf2 	bl	8000e14 <ai_conv2d_kernel_depthwise_f32>
 8001230:	b011      	add	sp, #68	; 0x44
 8001232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001236:	9303      	str	r3, [sp, #12]
 8001238:	9202      	str	r2, [sp, #8]
 800123a:	9001      	str	r0, [sp, #4]
 800123c:	9100      	str	r1, [sp, #0]
 800123e:	f8cd e020 	str.w	lr, [sp, #32]
 8001242:	f8cd c010 	str.w	ip, [sp, #16]
 8001246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800124a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800124c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800124e:	940c      	str	r4, [sp, #48]	; 0x30
 8001250:	960b      	str	r6, [sp, #44]	; 0x2c
 8001252:	950a      	str	r5, [sp, #40]	; 0x28
 8001254:	9709      	str	r7, [sp, #36]	; 0x24
 8001256:	f8cd a01c 	str.w	sl, [sp, #28]
 800125a:	f8cd 9018 	str.w	r9, [sp, #24]
 800125e:	f8cd 8014 	str.w	r8, [sp, #20]
 8001262:	f7ff feab 	bl	8000fbc <ai_conv2d_kernel_group_f32>
 8001266:	b011      	add	sp, #68	; 0x44
 8001268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800126c <ai_conv2d_stripe_f32>:
 800126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001270:	b091      	sub	sp, #68	; 0x44
 8001272:	4604      	mov	r4, r0
 8001274:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8001278:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800127a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 800127e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001280:	fb08 b000 	mla	r0, r8, r0, fp
 8001284:	2d00      	cmp	r5, #0
 8001286:	9001      	str	r0, [sp, #4]
 8001288:	d05d      	beq.n	8001346 <ai_conv2d_stripe_f32+0xda>
 800128a:	9102      	str	r1, [sp, #8]
 800128c:	920e      	str	r2, [sp, #56]	; 0x38
 800128e:	9500      	str	r5, [sp, #0]
 8001290:	930d      	str	r3, [sp, #52]	; 0x34
 8001292:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001294:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001296:	971a      	str	r7, [sp, #104]	; 0x68
 8001298:	4625      	mov	r5, r4
 800129a:	950f      	str	r5, [sp, #60]	; 0x3c
 800129c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800129e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80012a0:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 80012a4:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 80012a8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80012aa:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80012ae:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80012b2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80012b6:	9d02      	ldr	r5, [sp, #8]
 80012b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80012ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80012bc:	9420      	str	r4, [sp, #128]	; 0x80
 80012be:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80012c2:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 80012c6:	9624      	str	r6, [sp, #144]	; 0x90
 80012c8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80012ca:	f8dd a004 	ldr.w	sl, [sp, #4]
 80012ce:	9c00      	ldr	r4, [sp, #0]
 80012d0:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 80012d4:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 80012d8:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 80012dc:	f1db 0000 	rsbs	r0, fp, #0
 80012e0:	bfd8      	it	le
 80012e2:	2000      	movle	r0, #0
 80012e4:	eba8 010b 	sub.w	r1, r8, fp
 80012e8:	42b1      	cmp	r1, r6
 80012ea:	bf28      	it	cs
 80012ec:	4631      	movcs	r1, r6
 80012ee:	910c      	str	r1, [sp, #48]	; 0x30
 80012f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80012f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80012f6:	9702      	str	r7, [sp, #8]
 80012f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80012fc:	4450      	add	r0, sl
 80012fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001300:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001304:	910a      	str	r1, [sp, #40]	; 0x28
 8001306:	9209      	str	r2, [sp, #36]	; 0x24
 8001308:	fb00 f009 	mul.w	r0, r0, r9
 800130c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800130e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001310:	9108      	str	r1, [sp, #32]
 8001312:	9207      	str	r2, [sp, #28]
 8001314:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001316:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 800131a:	9106      	str	r1, [sp, #24]
 800131c:	9205      	str	r2, [sp, #20]
 800131e:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8001322:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001324:	9104      	str	r1, [sp, #16]
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	990e      	ldr	r1, [sp, #56]	; 0x38
 800132a:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800132e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff ff2b 	bl	800118c <ai_conv2d_kernel_f32>
 8001336:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 800133a:	1e64      	subs	r4, r4, #1
 800133c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001340:	4483      	add	fp, r0
 8001342:	4482      	add	sl, r0
 8001344:	d1ca      	bne.n	80012dc <ai_conv2d_stripe_f32+0x70>
 8001346:	b011      	add	sp, #68	; 0x44
 8001348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800134c <func_dummy>:
 800134c:	4770      	bx	lr
	...

08001350 <ai_dict8_dot_array_f32>:
 8001350:	b4f0      	push	{r4, r5, r6, r7}
 8001352:	4604      	mov	r4, r0
 8001354:	9804      	ldr	r0, [sp, #16]
 8001356:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800135a:	3d20      	subs	r5, #32
 800135c:	2808      	cmp	r0, #8
 800135e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80016c4 <.text_12>
 8001362:	d22f      	bcs.n	80013c4 <ai_dict8_dot_array_f32+0x74>
 8001364:	3520      	adds	r5, #32
 8001366:	42ab      	cmp	r3, r5
 8001368:	d224      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 800136a:	7808      	ldrb	r0, [r1, #0]
 800136c:	ed93 1a00 	vldr	s2, [r3]
 8001370:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001374:	1d18      	adds	r0, r3, #4
 8001376:	edd6 0a00 	vldr	s1, [r6]
 800137a:	42a8      	cmp	r0, r5
 800137c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001380:	d218      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001382:	784b      	ldrb	r3, [r1, #1]
 8001384:	ed90 1a00 	vldr	s2, [r0]
 8001388:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800138c:	1d00      	adds	r0, r0, #4
 800138e:	edd6 0a00 	vldr	s1, [r6]
 8001392:	42a8      	cmp	r0, r5
 8001394:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001398:	d20c      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 800139a:	788b      	ldrb	r3, [r1, #2]
 800139c:	ed90 1a00 	vldr	s2, [r0]
 80013a0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80013a4:	1d03      	adds	r3, r0, #4
 80013a6:	1cc9      	adds	r1, r1, #3
 80013a8:	edd6 0a00 	vldr	s1, [r6]
 80013ac:	42ab      	cmp	r3, r5
 80013ae:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013b2:	d3da      	bcc.n	800136a <ai_dict8_dot_array_f32+0x1a>
 80013b4:	edd4 0a00 	vldr	s1, [r4]
 80013b8:	ee30 0a80 	vadd.f32	s0, s1, s0
 80013bc:	ed84 0a00 	vstr	s0, [r4]
 80013c0:	bcf0      	pop	{r4, r5, r6, r7}
 80013c2:	4770      	bx	lr
 80013c4:	f001 0003 	and.w	r0, r1, #3
 80013c8:	2803      	cmp	r0, #3
 80013ca:	d8f3      	bhi.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013cc:	e8df f000 	tbb	[pc, r0]
 80013d0:	4c413603 	.word	0x4c413603
 80013d4:	e7ee      	b.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013d6:	429d      	cmp	r5, r3
 80013d8:	f080 80d5 	bcs.w	8001586 <ai_dict8_dot_array_f32+0x236>
 80013dc:	3520      	adds	r5, #32
 80013de:	42ab      	cmp	r3, r5
 80013e0:	d2e8      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013e2:	7808      	ldrb	r0, [r1, #0]
 80013e4:	ed93 1a00 	vldr	s2, [r3]
 80013e8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80013ec:	1d18      	adds	r0, r3, #4
 80013ee:	edd6 0a00 	vldr	s1, [r6]
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013f8:	d2dc      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013fa:	784b      	ldrb	r3, [r1, #1]
 80013fc:	ed90 1a00 	vldr	s2, [r0]
 8001400:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001404:	1d00      	adds	r0, r0, #4
 8001406:	edd6 0a00 	vldr	s1, [r6]
 800140a:	42a8      	cmp	r0, r5
 800140c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001410:	d2d0      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001412:	788b      	ldrb	r3, [r1, #2]
 8001414:	ed90 1a00 	vldr	s2, [r0]
 8001418:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800141c:	1d03      	adds	r3, r0, #4
 800141e:	1cc9      	adds	r1, r1, #3
 8001420:	edd6 0a00 	vldr	s1, [r6]
 8001424:	42ab      	cmp	r3, r5
 8001426:	ee00 0a81 	vmla.f32	s0, s1, s2
 800142a:	d3da      	bcc.n	80013e2 <ai_dict8_dot_array_f32+0x92>
 800142c:	edd4 0a00 	vldr	s1, [r4]
 8001430:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001434:	ed84 0a00 	vstr	s0, [r4]
 8001438:	bcf0      	pop	{r4, r5, r6, r7}
 800143a:	4770      	bx	lr
 800143c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001440:	ed93 1a00 	vldr	s2, [r3]
 8001444:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001448:	1d1b      	adds	r3, r3, #4
 800144a:	edd6 0a00 	vldr	s1, [r6]
 800144e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001452:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001456:	ed93 1a00 	vldr	s2, [r3]
 800145a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800145e:	1d1b      	adds	r3, r3, #4
 8001460:	edd6 0a00 	vldr	s1, [r6]
 8001464:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001468:	f811 0b01 	ldrb.w	r0, [r1], #1
 800146c:	ed93 1a00 	vldr	s2, [r3]
 8001470:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001474:	1d1b      	adds	r3, r3, #4
 8001476:	edd6 0a00 	vldr	s1, [r6]
 800147a:	429d      	cmp	r5, r3
 800147c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001480:	d34e      	bcc.n	8001520 <ai_dict8_dot_array_f32+0x1d0>
 8001482:	78cf      	ldrb	r7, [r1, #3]
 8001484:	ed93 4a00 	vldr	s8, [r3]
 8001488:	ed93 3a01 	vldr	s6, [r3, #4]
 800148c:	ed93 2a02 	vldr	s4, [r3, #8]
 8001490:	ed93 1a03 	vldr	s2, [r3, #12]
 8001494:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001498:	788f      	ldrb	r7, [r1, #2]
 800149a:	edd6 0a00 	vldr	s1, [r6]
 800149e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014a2:	784f      	ldrb	r7, [r1, #1]
 80014a4:	edd6 1a00 	vldr	s3, [r6]
 80014a8:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014ac:	780f      	ldrb	r7, [r1, #0]
 80014ae:	edd6 2a00 	vldr	s5, [r6]
 80014b2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014b6:	f103 0010 	add.w	r0, r3, #16
 80014ba:	edd6 3a00 	vldr	s7, [r6]
 80014be:	790b      	ldrb	r3, [r1, #4]
 80014c0:	ee03 0a84 	vmla.f32	s0, s7, s8
 80014c4:	ee02 0a83 	vmla.f32	s0, s5, s6
 80014c8:	ee01 0a82 	vmla.f32	s0, s3, s4
 80014cc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014d0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014d4:	794b      	ldrb	r3, [r1, #5]
 80014d6:	edd7 0a00 	vldr	s1, [r7]
 80014da:	ed90 4a00 	vldr	s8, [r0]
 80014de:	edd0 3a01 	vldr	s7, [r0, #4]
 80014e2:	ed90 3a02 	vldr	s6, [r0, #8]
 80014e6:	edd0 2a03 	vldr	s5, [r0, #12]
 80014ea:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014ee:	798b      	ldrb	r3, [r1, #6]
 80014f0:	ed97 1a00 	vldr	s2, [r7]
 80014f4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014f8:	79cb      	ldrb	r3, [r1, #7]
 80014fa:	edd7 1a00 	vldr	s3, [r7]
 80014fe:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001502:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001506:	3108      	adds	r1, #8
 8001508:	f100 0310 	add.w	r3, r0, #16
 800150c:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001510:	ed97 2a00 	vldr	s4, [r7]
 8001514:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001518:	429d      	cmp	r5, r3
 800151a:	ee02 0a22 	vmla.f32	s0, s4, s5
 800151e:	d2b0      	bcs.n	8001482 <ai_dict8_dot_array_f32+0x132>
 8001520:	3520      	adds	r5, #32
 8001522:	42ab      	cmp	r3, r5
 8001524:	f4bf af46 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001528:	7808      	ldrb	r0, [r1, #0]
 800152a:	ed93 1a00 	vldr	s2, [r3]
 800152e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001532:	1d18      	adds	r0, r3, #4
 8001534:	edd6 0a00 	vldr	s1, [r6]
 8001538:	42a8      	cmp	r0, r5
 800153a:	ee00 0a81 	vmla.f32	s0, s1, s2
 800153e:	f4bf af39 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001542:	784b      	ldrb	r3, [r1, #1]
 8001544:	ed90 1a00 	vldr	s2, [r0]
 8001548:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800154c:	1d00      	adds	r0, r0, #4
 800154e:	edd6 0a00 	vldr	s1, [r6]
 8001552:	42a8      	cmp	r0, r5
 8001554:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001558:	f4bf af2c 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 800155c:	788b      	ldrb	r3, [r1, #2]
 800155e:	ed90 1a00 	vldr	s2, [r0]
 8001562:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001566:	1d03      	adds	r3, r0, #4
 8001568:	1cc9      	adds	r1, r1, #3
 800156a:	edd6 0a00 	vldr	s1, [r6]
 800156e:	42ab      	cmp	r3, r5
 8001570:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001574:	d3d8      	bcc.n	8001528 <ai_dict8_dot_array_f32+0x1d8>
 8001576:	edd4 0a00 	vldr	s1, [r4]
 800157a:	ee30 0a80 	vadd.f32	s0, s1, s0
 800157e:	ed84 0a00 	vstr	s0, [r4]
 8001582:	bcf0      	pop	{r4, r5, r6, r7}
 8001584:	4770      	bx	lr
 8001586:	78cf      	ldrb	r7, [r1, #3]
 8001588:	ed93 4a00 	vldr	s8, [r3]
 800158c:	ed93 3a01 	vldr	s6, [r3, #4]
 8001590:	ed93 2a02 	vldr	s4, [r3, #8]
 8001594:	ed93 1a03 	vldr	s2, [r3, #12]
 8001598:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800159c:	788f      	ldrb	r7, [r1, #2]
 800159e:	edd6 0a00 	vldr	s1, [r6]
 80015a2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015a6:	784f      	ldrb	r7, [r1, #1]
 80015a8:	edd6 1a00 	vldr	s3, [r6]
 80015ac:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015b0:	780f      	ldrb	r7, [r1, #0]
 80015b2:	edd6 2a00 	vldr	s5, [r6]
 80015b6:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015ba:	f103 0010 	add.w	r0, r3, #16
 80015be:	edd6 3a00 	vldr	s7, [r6]
 80015c2:	790b      	ldrb	r3, [r1, #4]
 80015c4:	ee03 0a84 	vmla.f32	s0, s7, s8
 80015c8:	ee02 0a83 	vmla.f32	s0, s5, s6
 80015cc:	ee01 0a82 	vmla.f32	s0, s3, s4
 80015d0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80015d8:	794b      	ldrb	r3, [r1, #5]
 80015da:	edd7 0a00 	vldr	s1, [r7]
 80015de:	ed90 4a00 	vldr	s8, [r0]
 80015e2:	edd0 3a01 	vldr	s7, [r0, #4]
 80015e6:	ed90 3a02 	vldr	s6, [r0, #8]
 80015ea:	edd0 2a03 	vldr	s5, [r0, #12]
 80015ee:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015f2:	798b      	ldrb	r3, [r1, #6]
 80015f4:	ed97 1a00 	vldr	s2, [r7]
 80015f8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015fc:	79cb      	ldrb	r3, [r1, #7]
 80015fe:	edd7 1a00 	vldr	s3, [r7]
 8001602:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001606:	ee00 0a84 	vmla.f32	s0, s1, s8
 800160a:	3108      	adds	r1, #8
 800160c:	f100 0310 	add.w	r3, r0, #16
 8001610:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001614:	ed97 2a00 	vldr	s4, [r7]
 8001618:	ee01 0a83 	vmla.f32	s0, s3, s6
 800161c:	429d      	cmp	r5, r3
 800161e:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001622:	d2b0      	bcs.n	8001586 <ai_dict8_dot_array_f32+0x236>
 8001624:	e6da      	b.n	80013dc <ai_dict8_dot_array_f32+0x8c>
	...

08001628 <ai_dict4_dot_array_f32>:
 8001628:	b4f0      	push	{r4, r5, r6, r7}
 800162a:	9c04      	ldr	r4, [sp, #16]
 800162c:	0865      	lsrs	r5, r4, #1
 800162e:	006d      	lsls	r5, r5, #1
 8001630:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001634:	42ab      	cmp	r3, r5
 8001636:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80016c4 <.text_12>
 800163a:	d22f      	bcs.n	800169c <ai_dict4_dot_array_f32+0x74>
 800163c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001640:	ed93 2a00 	vldr	s4, [r3]
 8001644:	ed93 1a01 	vldr	s2, [r3, #4]
 8001648:	f006 070f 	and.w	r7, r6, #15
 800164c:	0936      	lsrs	r6, r6, #4
 800164e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001652:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001656:	edd6 1a00 	vldr	s3, [r6]
 800165a:	edd7 0a00 	vldr	s1, [r7]
 800165e:	3308      	adds	r3, #8
 8001660:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001664:	42ab      	cmp	r3, r5
 8001666:	ee00 0a81 	vmla.f32	s0, s1, s2
 800166a:	d217      	bcs.n	800169c <ai_dict4_dot_array_f32+0x74>
 800166c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001670:	ed93 2a00 	vldr	s4, [r3]
 8001674:	ed93 1a01 	vldr	s2, [r3, #4]
 8001678:	f006 070f 	and.w	r7, r6, #15
 800167c:	0936      	lsrs	r6, r6, #4
 800167e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001682:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001686:	edd6 1a00 	vldr	s3, [r6]
 800168a:	edd7 0a00 	vldr	s1, [r7]
 800168e:	3308      	adds	r3, #8
 8001690:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001694:	42ab      	cmp	r3, r5
 8001696:	ee00 0a81 	vmla.f32	s0, s1, s2
 800169a:	d3cf      	bcc.n	800163c <ai_dict4_dot_array_f32+0x14>
 800169c:	07e4      	lsls	r4, r4, #31
 800169e:	d509      	bpl.n	80016b4 <ai_dict4_dot_array_f32+0x8c>
 80016a0:	7809      	ldrb	r1, [r1, #0]
 80016a2:	ed93 1a00 	vldr	s2, [r3]
 80016a6:	0909      	lsrs	r1, r1, #4
 80016a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016ac:	edd2 0a00 	vldr	s1, [r2]
 80016b0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016b4:	edd0 1a00 	vldr	s3, [r0]
 80016b8:	ee31 0a80 	vadd.f32	s0, s3, s0
 80016bc:	ed80 0a00 	vstr	s0, [r0]
 80016c0:	bcf0      	pop	{r4, r5, r6, r7}
 80016c2:	4770      	bx	lr

080016c4 <.text_12>:
 80016c4:	00000000 	.word	0x00000000

080016c8 <ai_dict_decompress_f32>:
 80016c8:	b4f0      	push	{r4, r5, r6, r7}
 80016ca:	4604      	mov	r4, r0
 80016cc:	9805      	ldr	r0, [sp, #20]
 80016ce:	9e04      	ldr	r6, [sp, #16]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80016d6:	d003      	beq.n	80016e0 <ai_dict_decompress_f32+0x18>
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d03e      	beq.n	800175a <ai_dict_decompress_f32+0x92>
 80016dc:	bcf0      	pop	{r4, r5, r6, r7}
 80016de:	4770      	bx	lr
 80016e0:	42ac      	cmp	r4, r5
 80016e2:	d259      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 80016e4:	0870      	lsrs	r0, r6, #1
 80016e6:	d02e      	beq.n	8001746 <ai_dict_decompress_f32+0x7e>
 80016e8:	07c3      	lsls	r3, r0, #31
 80016ea:	d50c      	bpl.n	8001706 <ai_dict_decompress_f32+0x3e>
 80016ec:	780f      	ldrb	r7, [r1, #0]
 80016ee:	093f      	lsrs	r7, r7, #4
 80016f0:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016f4:	6023      	str	r3, [r4, #0]
 80016f6:	f811 7b01 	ldrb.w	r7, [r1], #1
 80016fa:	f007 070f 	and.w	r7, r7, #15
 80016fe:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001702:	6063      	str	r3, [r4, #4]
 8001704:	3408      	adds	r4, #8
 8001706:	0840      	lsrs	r0, r0, #1
 8001708:	d01d      	beq.n	8001746 <ai_dict_decompress_f32+0x7e>
 800170a:	780b      	ldrb	r3, [r1, #0]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001712:	6027      	str	r7, [r4, #0]
 8001714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001720:	6067      	str	r7, [r4, #4]
 8001722:	f104 0308 	add.w	r3, r4, #8
 8001726:	780c      	ldrb	r4, [r1, #0]
 8001728:	0924      	lsrs	r4, r4, #4
 800172a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800172e:	601f      	str	r7, [r3, #0]
 8001730:	1e40      	subs	r0, r0, #1
 8001732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001736:	f004 040f 	and.w	r4, r4, #15
 800173a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800173e:	605f      	str	r7, [r3, #4]
 8001740:	f103 0408 	add.w	r4, r3, #8
 8001744:	d1e1      	bne.n	800170a <ai_dict_decompress_f32+0x42>
 8001746:	07f0      	lsls	r0, r6, #31
 8001748:	d5ca      	bpl.n	80016e0 <ai_dict_decompress_f32+0x18>
 800174a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001754:	f844 0b04 	str.w	r0, [r4], #4
 8001758:	e7c2      	b.n	80016e0 <ai_dict_decompress_f32+0x18>
 800175a:	42ac      	cmp	r4, r5
 800175c:	d21c      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 800175e:	780b      	ldrb	r3, [r1, #0]
 8001760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001764:	6020      	str	r0, [r4, #0]
 8001766:	1d20      	adds	r0, r4, #4
 8001768:	42a8      	cmp	r0, r5
 800176a:	bf3f      	itttt	cc
 800176c:	784b      	ldrbcc	r3, [r1, #1]
 800176e:	f852 4023 	ldrcc.w	r4, [r2, r3, lsl #2]
 8001772:	f840 4b04 	strcc.w	r4, [r0], #4
 8001776:	42a8      	cmpcc	r0, r5
 8001778:	d20e      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 800177a:	788b      	ldrb	r3, [r1, #2]
 800177c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001780:	f840 4b04 	str.w	r4, [r0], #4
 8001784:	42a8      	cmp	r0, r5
 8001786:	d207      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 8001788:	78cb      	ldrb	r3, [r1, #3]
 800178a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800178e:	6004      	str	r4, [r0, #0]
 8001790:	1d09      	adds	r1, r1, #4
 8001792:	1d04      	adds	r4, r0, #4
 8001794:	42ac      	cmp	r4, r5
 8001796:	d3e2      	bcc.n	800175e <ai_dict_decompress_f32+0x96>
 8001798:	bcf0      	pop	{r4, r5, r6, r7}
 800179a:	4770      	bx	lr

0800179c <forward_conv2d>:
 800179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a0:	4605      	mov	r5, r0
 80017a2:	b0a7      	sub	sp, #156	; 0x9c
 80017a4:	6968      	ldr	r0, [r5, #20]
 80017a6:	6800      	ldr	r0, [r0, #0]
 80017a8:	68c2      	ldr	r2, [r0, #12]
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	6801      	ldr	r1, [r0, #0]
 80017ae:	6982      	ldr	r2, [r0, #24]
 80017b0:	8c00      	ldrh	r0, [r0, #32]
 80017b2:	680c      	ldr	r4, [r1, #0]
 80017b4:	f8d2 b000 	ldr.w	fp, [r2]
 80017b8:	2801      	cmp	r0, #1
 80017ba:	6890      	ldr	r0, [r2, #8]
 80017bc:	bfcc      	ite	gt
 80017be:	6851      	ldrgt	r1, [r2, #4]
 80017c0:	2100      	movle	r1, #0
 80017c2:	68a2      	ldr	r2, [r4, #8]
 80017c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80017c6:	689e      	ldr	r6, [r3, #8]
 80017c8:	9603      	str	r6, [sp, #12]
 80017ca:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	9215      	str	r2, [sp, #84]	; 0x54
 80017d2:	6926      	ldr	r6, [r4, #16]
 80017d4:	961a      	str	r6, [sp, #104]	; 0x68
 80017d6:	68e7      	ldr	r7, [r4, #12]
 80017d8:	9721      	str	r7, [sp, #132]	; 0x84
 80017da:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80017dc:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 80017e0:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 80017e2:	9720      	str	r7, [sp, #128]	; 0x80
 80017e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80017e6:	6817      	ldr	r7, [r2, #0]
 80017e8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80017ec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80017ee:	9219      	str	r2, [sp, #100]	; 0x64
 80017f0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80017f2:	9618      	str	r6, [sp, #96]	; 0x60
 80017f4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80017f8:	9214      	str	r2, [sp, #80]	; 0x50
 80017fa:	f8db 6008 	ldr.w	r6, [fp, #8]
 80017fe:	9613      	str	r6, [sp, #76]	; 0x4c
 8001800:	69aa      	ldr	r2, [r5, #24]
 8001802:	921f      	str	r2, [sp, #124]	; 0x7c
 8001804:	6822      	ldr	r2, [r4, #0]
 8001806:	6894      	ldr	r4, [r2, #8]
 8001808:	941e      	str	r4, [sp, #120]	; 0x78
 800180a:	f8db 2000 	ldr.w	r2, [fp]
 800180e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001812:	b119      	cbz	r1, 800181c <forward_conv2d+0x80>
 8001814:	680a      	ldr	r2, [r1, #0]
 8001816:	6894      	ldr	r4, [r2, #8]
 8001818:	9417      	str	r4, [sp, #92]	; 0x5c
 800181a:	e001      	b.n	8001820 <forward_conv2d+0x84>
 800181c:	2200      	movs	r2, #0
 800181e:	9217      	str	r2, [sp, #92]	; 0x5c
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	688a      	ldr	r2, [r1, #8]
 8001824:	9202      	str	r2, [sp, #8]
 8001826:	69e9      	ldr	r1, [r5, #28]
 8001828:	b158      	cbz	r0, 8001842 <forward_conv2d+0xa6>
 800182a:	6803      	ldr	r3, [r0, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	9212      	str	r2, [sp, #72]	; 0x48
 8001830:	921c      	str	r2, [sp, #112]	; 0x70
 8001832:	69c0      	ldr	r0, [r0, #28]
 8001834:	9024      	str	r0, [sp, #144]	; 0x90
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f001 ff65 	bl	8003708 <ai_array_get_byte_size>
 800183e:	4604      	mov	r4, r0
 8001840:	e00a      	b.n	8001858 <forward_conv2d+0xbc>
 8001842:	b119      	cbz	r1, 800184c <forward_conv2d+0xb0>
 8001844:	6888      	ldr	r0, [r1, #8]
 8001846:	9012      	str	r0, [sp, #72]	; 0x48
 8001848:	901c      	str	r0, [sp, #112]	; 0x70
 800184a:	e002      	b.n	8001852 <forward_conv2d+0xb6>
 800184c:	2200      	movs	r2, #0
 800184e:	9212      	str	r2, [sp, #72]	; 0x48
 8001850:	911c      	str	r1, [sp, #112]	; 0x70
 8001852:	2200      	movs	r2, #0
 8001854:	9224      	str	r2, [sp, #144]	; 0x90
 8001856:	2401      	movs	r4, #1
 8001858:	6a28      	ldr	r0, [r5, #32]
 800185a:	2800      	cmp	r0, #0
 800185c:	aa18      	add	r2, sp, #96	; 0x60
 800185e:	bf12      	itee	ne
 8001860:	9023      	strne	r0, [sp, #140]	; 0x8c
 8001862:	f8df 1b88 	ldreq.w	r1, [pc, #2952]	; 80023ec <.text_22>
 8001866:	9123      	streq	r1, [sp, #140]	; 0x8c
 8001868:	9914      	ldr	r1, [sp, #80]	; 0x50
 800186a:	8813      	ldrh	r3, [r2, #0]
 800186c:	1e48      	subs	r0, r1, #1
 800186e:	1e5b      	subs	r3, r3, #1
 8001870:	aa19      	add	r2, sp, #100	; 0x64
 8001872:	fb03 1100 	mla	r1, r3, r0, r1
 8001876:	9116      	str	r1, [sp, #88]	; 0x58
 8001878:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800187a:	8813      	ldrh	r3, [r2, #0]
 800187c:	1e41      	subs	r1, r0, #1
 800187e:	1e5b      	subs	r3, r3, #1
 8001880:	fb03 0001 	mla	r0, r3, r1, r0
 8001884:	901d      	str	r0, [sp, #116]	; 0x74
 8001886:	2600      	movs	r6, #0
 8001888:	f8db 1000 	ldr.w	r1, [fp]
 800188c:	6808      	ldr	r0, [r1, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	11c3      	asrs	r3, r0, #7
 8001892:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001896:	1440      	asrs	r0, r0, #17
 8001898:	f000 000f 	and.w	r0, r0, #15
 800189c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a0:	f00c 0c03 	and.w	ip, ip, #3
 80018a4:	2804      	cmp	r0, #4
 80018a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80018aa:	bf14      	ite	ne
 80018ac:	2808      	cmpne	r0, #8
 80018ae:	68ca      	ldreq	r2, [r1, #12]
 80018b0:	b182      	cbz	r2, 80018d4 <forward_conv2d+0x138>
 80018b2:	6968      	ldr	r0, [r5, #20]
 80018b4:	6800      	ldr	r0, [r0, #0]
 80018b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80018b8:	6828      	ldr	r0, [r5, #0]
 80018ba:	b108      	cbz	r0, 80018c0 <forward_conv2d+0x124>
 80018bc:	6806      	ldr	r6, [r0, #0]
 80018be:	68b6      	ldr	r6, [r6, #8]
 80018c0:	6800      	ldr	r0, [r0, #0]
 80018c2:	6840      	ldr	r0, [r0, #4]
 80018c4:	9001      	str	r0, [sp, #4]
 80018c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80018c8:	9000      	str	r0, [sp, #0]
 80018ca:	4630      	mov	r0, r6
 80018cc:	6889      	ldr	r1, [r1, #8]
 80018ce:	f7ff fefb 	bl	80016c8 <ai_dict_decompress_f32>
 80018d2:	b906      	cbnz	r6, 80018d6 <forward_conv2d+0x13a>
 80018d4:	464e      	mov	r6, r9
 80018d6:	b2bf      	uxth	r7, r7
 80018d8:	427f      	negs	r7, r7
 80018da:	f1ba 0f00 	cmp.w	sl, #0
 80018de:	d065      	beq.n	80019ac <forward_conv2d+0x210>
 80018e0:	f1c8 0800 	rsb	r8, r8, #0
 80018e4:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 80018e8:	4652      	mov	r2, sl
 80018ea:	9d02      	ldr	r5, [sp, #8]
 80018ec:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80018f0:	9626      	str	r6, [sp, #152]	; 0x98
 80018f2:	9711      	str	r7, [sp, #68]	; 0x44
 80018f4:	9222      	str	r2, [sp, #136]	; 0x88
 80018f6:	9825      	ldr	r0, [sp, #148]	; 0x94
 80018f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80018fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80018fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018fe:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001900:	4249      	negs	r1, r1
 8001902:	bfd8      	it	le
 8001904:	2100      	movle	r1, #0
 8001906:	1ad2      	subs	r2, r2, r3
 8001908:	42b2      	cmp	r2, r6
 800190a:	bf3d      	ittte	cc
 800190c:	9b1a      	ldrcc	r3, [sp, #104]	; 0x68
 800190e:	9a11      	ldrcc	r2, [sp, #68]	; 0x44
 8001910:	1a9a      	subcc	r2, r3, r2
 8001912:	4632      	movcs	r2, r6
 8001914:	900b      	str	r0, [sp, #44]	; 0x2c
 8001916:	9109      	str	r1, [sp, #36]	; 0x24
 8001918:	920a      	str	r2, [sp, #40]	; 0x28
 800191a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800191c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001920:	9008      	str	r0, [sp, #32]
 8001922:	9107      	str	r1, [sp, #28]
 8001924:	f8cd a008 	str.w	sl, [sp, #8]
 8001928:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800192c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800192e:	9006      	str	r0, [sp, #24]
 8001930:	9105      	str	r1, [sp, #20]
 8001932:	b21b      	sxth	r3, r3
 8001934:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001936:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001938:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800193a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800193c:	930f      	str	r3, [sp, #60]	; 0x3c
 800193e:	9004      	str	r0, [sp, #16]
 8001940:	9103      	str	r1, [sp, #12]
 8001942:	b236      	sxth	r6, r6
 8001944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001946:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001948:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800194a:	960e      	str	r6, [sp, #56]	; 0x38
 800194c:	930d      	str	r3, [sp, #52]	; 0x34
 800194e:	9001      	str	r0, [sp, #4]
 8001950:	9100      	str	r1, [sp, #0]
 8001952:	4629      	mov	r1, r5
 8001954:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001956:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001958:	960c      	str	r6, [sp, #48]	; 0x30
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fc86 	bl	800126c <ai_conv2d_stripe_f32>
 8001960:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001962:	b1d8      	cbz	r0, 800199c <forward_conv2d+0x200>
 8001964:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8001966:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001968:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800196c:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001970:	4683      	mov	fp, r0
 8001972:	4633      	mov	r3, r6
 8001974:	4652      	mov	r2, sl
 8001976:	4629      	mov	r1, r5
 8001978:	4628      	mov	r0, r5
 800197a:	47c8      	blx	r9
 800197c:	4446      	add	r6, r8
 800197e:	1bf0      	subs	r0, r6, r7
 8001980:	42a0      	cmp	r0, r4
 8001982:	bfa8      	it	ge
 8001984:	463e      	movge	r6, r7
 8001986:	f1bb 0b01 	subs.w	fp, fp, #1
 800198a:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 800198e:	d1f0      	bne.n	8001972 <forward_conv2d+0x1d6>
 8001990:	9612      	str	r6, [sp, #72]	; 0x48
 8001992:	971c      	str	r7, [sp, #112]	; 0x70
 8001994:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 8001998:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800199c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800199e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80019a0:	1808      	adds	r0, r1, r0
 80019a2:	9011      	str	r0, [sp, #68]	; 0x44
 80019a4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80019a6:	1e40      	subs	r0, r0, #1
 80019a8:	9022      	str	r0, [sp, #136]	; 0x88
 80019aa:	d1a4      	bne.n	80018f6 <forward_conv2d+0x15a>
 80019ac:	b027      	add	sp, #156	; 0x9c
 80019ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019b4 <forward_conv2d_nl_pool>:
 80019b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b8:	4607      	mov	r7, r0
 80019ba:	b0b9      	sub	sp, #228	; 0xe4
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	68c2      	ldr	r2, [r0, #12]
 80019c2:	6816      	ldr	r6, [r2, #0]
 80019c4:	6801      	ldr	r1, [r0, #0]
 80019c6:	6982      	ldr	r2, [r0, #24]
 80019c8:	8c00      	ldrh	r0, [r0, #32]
 80019ca:	680b      	ldr	r3, [r1, #0]
 80019cc:	f8d2 b000 	ldr.w	fp, [r2]
 80019d0:	689c      	ldr	r4, [r3, #8]
 80019d2:	2801      	cmp	r0, #1
 80019d4:	6890      	ldr	r0, [r2, #8]
 80019d6:	bfcc      	ite	gt
 80019d8:	6851      	ldrgt	r1, [r2, #4]
 80019da:	2100      	movle	r1, #0
 80019dc:	9424      	str	r4, [sp, #144]	; 0x90
 80019de:	68b5      	ldr	r5, [r6, #8]
 80019e0:	9502      	str	r5, [sp, #8]
 80019e2:	6934      	ldr	r4, [r6, #16]
 80019e4:	9423      	str	r4, [sp, #140]	; 0x8c
 80019e6:	68f5      	ldr	r5, [r6, #12]
 80019e8:	9522      	str	r5, [sp, #136]	; 0x88
 80019ea:	691c      	ldr	r4, [r3, #16]
 80019ec:	941c      	str	r4, [sp, #112]	; 0x70
 80019ee:	68dd      	ldr	r5, [r3, #12]
 80019f0:	952e      	str	r5, [sp, #184]	; 0xb8
 80019f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80019f4:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 80019f8:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 80019fa:	9521      	str	r5, [sp, #132]	; 0x84
 80019fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019fe:	69bd      	ldr	r5, [r7, #24]
 8001a00:	f8b2 8000 	ldrh.w	r8, [r2]
 8001a04:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8001a08:	6894      	ldr	r4, [r2, #8]
 8001a0a:	952d      	str	r5, [sp, #180]	; 0xb4
 8001a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a0e:	9220      	str	r2, [sp, #128]	; 0x80
 8001a10:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8001a12:	951f      	str	r5, [sp, #124]	; 0x7c
 8001a14:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001a18:	921b      	str	r2, [sp, #108]	; 0x6c
 8001a1a:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001a1e:	951a      	str	r5, [sp, #104]	; 0x68
 8001a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a22:	922c      	str	r2, [sp, #176]	; 0xb0
 8001a24:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001a26:	952b      	str	r5, [sp, #172]	; 0xac
 8001a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a2a:	9216      	str	r2, [sp, #88]	; 0x58
 8001a2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a2e:	6815      	ldr	r5, [r2, #0]
 8001a30:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8001a34:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8001a38:	6892      	ldr	r2, [r2, #8]
 8001a3a:	921e      	str	r2, [sp, #120]	; 0x78
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a42:	f8db 2000 	ldr.w	r2, [fp]
 8001a46:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001a4a:	b119      	cbz	r1, 8001a54 <forward_conv2d_nl_pool+0xa0>
 8001a4c:	680a      	ldr	r2, [r1, #0]
 8001a4e:	6893      	ldr	r3, [r2, #8]
 8001a50:	931d      	str	r3, [sp, #116]	; 0x74
 8001a52:	e001      	b.n	8001a58 <forward_conv2d_nl_pool+0xa4>
 8001a54:	2200      	movs	r2, #0
 8001a56:	921d      	str	r2, [sp, #116]	; 0x74
 8001a58:	69f9      	ldr	r1, [r7, #28]
 8001a5a:	b158      	cbz	r0, 8001a74 <forward_conv2d_nl_pool+0xc0>
 8001a5c:	6803      	ldr	r3, [r0, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	9218      	str	r2, [sp, #96]	; 0x60
 8001a62:	9210      	str	r2, [sp, #64]	; 0x40
 8001a64:	69c0      	ldr	r0, [r0, #28]
 8001a66:	9015      	str	r0, [sp, #84]	; 0x54
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f001 fe4c 	bl	8003708 <ai_array_get_byte_size>
 8001a70:	9014      	str	r0, [sp, #80]	; 0x50
 8001a72:	e00b      	b.n	8001a8c <forward_conv2d_nl_pool+0xd8>
 8001a74:	b119      	cbz	r1, 8001a7e <forward_conv2d_nl_pool+0xca>
 8001a76:	6889      	ldr	r1, [r1, #8]
 8001a78:	9118      	str	r1, [sp, #96]	; 0x60
 8001a7a:	9110      	str	r1, [sp, #64]	; 0x40
 8001a7c:	e002      	b.n	8001a84 <forward_conv2d_nl_pool+0xd0>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	9118      	str	r1, [sp, #96]	; 0x60
 8001a82:	9210      	str	r2, [sp, #64]	; 0x40
 8001a84:	2100      	movs	r1, #0
 8001a86:	2201      	movs	r2, #1
 8001a88:	9115      	str	r1, [sp, #84]	; 0x54
 8001a8a:	9214      	str	r2, [sp, #80]	; 0x50
 8001a8c:	aa1f      	add	r2, sp, #124	; 0x7c
 8001a8e:	6a38      	ldr	r0, [r7, #32]
 8001a90:	2800      	cmp	r0, #0
 8001a92:	bf12      	itee	ne
 8001a94:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001a96:	f8df 1954 	ldreq.w	r1, [pc, #2388]	; 80023ec <.text_22>
 8001a9a:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001a9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001aa0:	8813      	ldrh	r3, [r2, #0]
 8001aa2:	9128      	str	r1, [sp, #160]	; 0xa0
 8001aa4:	1e5b      	subs	r3, r3, #1
 8001aa6:	1e41      	subs	r1, r0, #1
 8001aa8:	aa20      	add	r2, sp, #128	; 0x80
 8001aaa:	fb03 0001 	mla	r0, r3, r1, r0
 8001aae:	9019      	str	r0, [sp, #100]	; 0x64
 8001ab0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001ab2:	8813      	ldrh	r3, [r2, #0]
 8001ab4:	1e48      	subs	r0, r1, #1
 8001ab6:	1e5b      	subs	r3, r3, #1
 8001ab8:	fb03 1100 	mla	r1, r3, r0, r1
 8001abc:	9127      	str	r1, [sp, #156]	; 0x9c
 8001abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ac0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001ac2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001ac4:	9112      	str	r1, [sp, #72]	; 0x48
 8001ac6:	1a12      	subs	r2, r2, r0
 8001ac8:	4442      	add	r2, r8
 8001aca:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001acc:	fa12 f084 	uxtah	r0, r2, r4
 8001ad0:	fbb0 f1f1 	udiv	r1, r0, r1
 8001ad4:	1c49      	adds	r1, r1, #1
 8001ad6:	9111      	str	r1, [sp, #68]	; 0x44
 8001ad8:	2400      	movs	r4, #0
 8001ada:	f8db 1000 	ldr.w	r1, [fp]
 8001ade:	6808      	ldr	r0, [r1, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	11c3      	asrs	r3, r0, #7
 8001ae4:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001ae8:	1440      	asrs	r0, r0, #17
 8001aea:	f000 000f 	and.w	r0, r0, #15
 8001aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af2:	f00c 0c03 	and.w	ip, ip, #3
 8001af6:	2804      	cmp	r0, #4
 8001af8:	fa23 f30c 	lsr.w	r3, r3, ip
 8001afc:	bf14      	ite	ne
 8001afe:	2808      	cmpne	r0, #8
 8001b00:	68ca      	ldreq	r2, [r1, #12]
 8001b02:	b1a2      	cbz	r2, 8001b2e <forward_conv2d_nl_pool+0x17a>
 8001b04:	6978      	ldr	r0, [r7, #20]
 8001b06:	6800      	ldr	r0, [r0, #0]
 8001b08:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8001b0c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8001b10:	b108      	cbz	r0, 8001b16 <forward_conv2d_nl_pool+0x162>
 8001b12:	6804      	ldr	r4, [r0, #0]
 8001b14:	68a4      	ldr	r4, [r4, #8]
 8001b16:	6800      	ldr	r0, [r0, #0]
 8001b18:	6840      	ldr	r0, [r0, #4]
 8001b1a:	9001      	str	r0, [sp, #4]
 8001b1c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001b1e:	9000      	str	r0, [sp, #0]
 8001b20:	4620      	mov	r0, r4
 8001b22:	6889      	ldr	r1, [r1, #8]
 8001b24:	f7ff fdd0 	bl	80016c8 <ai_dict_decompress_f32>
 8001b28:	b10c      	cbz	r4, 8001b2e <forward_conv2d_nl_pool+0x17a>
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	e000      	b.n	8001b30 <forward_conv2d_nl_pool+0x17c>
 8001b2e:	4653      	mov	r3, sl
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	6814      	ldr	r4, [r2, #0]
 8001b34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b36:	6814      	ldr	r4, [r2, #0]
 8001b38:	6827      	ldr	r7, [r4, #0]
 8001b3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8001b3e:	68e2      	ldr	r2, [r4, #12]
 8001b40:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8001b42:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001b46:	6830      	ldr	r0, [r6, #0]
 8001b48:	4357      	muls	r7, r2
 8001b4a:	fb0c f707 	mul.w	r7, ip, r7
 8001b4e:	00bf      	lsls	r7, r7, #2
 8001b50:	9736      	str	r7, [sp, #216]	; 0xd8
 8001b52:	2100      	movs	r1, #0
 8001b54:	af16      	add	r7, sp, #88	; 0x58
 8001b56:	f1c9 0900 	rsb	r9, r9, #0
 8001b5a:	5e7f      	ldrsh	r7, [r7, r1]
 8001b5c:	9735      	str	r7, [sp, #212]	; 0xd4
 8001b5e:	b22d      	sxth	r5, r5
 8001b60:	9f02      	ldr	r7, [sp, #8]
 8001b62:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001b66:	fb0e f707 	mul.w	r7, lr, r7
 8001b6a:	9734      	str	r7, [sp, #208]	; 0xd0
 8001b6c:	462e      	mov	r6, r5
 8001b6e:	9f02      	ldr	r7, [sp, #8]
 8001b70:	4357      	muls	r7, r2
 8001b72:	9733      	str	r7, [sp, #204]	; 0xcc
 8001b74:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8001b78:	f1c8 0800 	rsb	r8, r8, #0
 8001b7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001b7e:	9731      	str	r7, [sp, #196]	; 0xc4
 8001b80:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8001b82:	2f00      	cmp	r7, #0
 8001b84:	f000 8100 	beq.w	8001d88 <forward_conv2d_nl_pool+0x3d4>
 8001b88:	46e1      	mov	r9, ip
 8001b8a:	9337      	str	r3, [sp, #220]	; 0xdc
 8001b8c:	9026      	str	r0, [sp, #152]	; 0x98
 8001b8e:	912f      	str	r1, [sp, #188]	; 0xbc
 8001b90:	9225      	str	r2, [sp, #148]	; 0x94
 8001b92:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8001b96:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	dd5d      	ble.n	8001c58 <forward_conv2d_nl_pool+0x2a4>
 8001b9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001b9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001ba2:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001ba4:	4249      	negs	r1, r1
 8001ba6:	bfd8      	it	le
 8001ba8:	2100      	movle	r1, #0
 8001baa:	1ad2      	subs	r2, r2, r3
 8001bac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	bf3d      	ittte	cc
 8001bb2:	9b1c      	ldrcc	r3, [sp, #112]	; 0x70
 8001bb4:	9a17      	ldrcc	r2, [sp, #92]	; 0x5c
 8001bb6:	1a9a      	subcc	r2, r3, r2
 8001bb8:	461a      	movcs	r2, r3
 8001bba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8001bc6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8001bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8001bce:	900b      	str	r0, [sp, #44]	; 0x2c
 8001bd0:	9109      	str	r1, [sp, #36]	; 0x24
 8001bd2:	920a      	str	r2, [sp, #40]	; 0x28
 8001bd4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001bd6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001bda:	9008      	str	r0, [sp, #32]
 8001bdc:	9107      	str	r1, [sp, #28]
 8001bde:	f8cd 9008 	str.w	r9, [sp, #8]
 8001be2:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001be4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001be6:	9006      	str	r0, [sp, #24]
 8001be8:	9105      	str	r1, [sp, #20]
 8001bea:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001bec:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8001bee:	9004      	str	r0, [sp, #16]
 8001bf0:	9103      	str	r1, [sp, #12]
 8001bf2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001bf4:	991d      	ldr	r1, [sp, #116]	; 0x74
 8001bf6:	9001      	str	r0, [sp, #4]
 8001bf8:	9100      	str	r1, [sp, #0]
 8001bfa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001bfc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001bfe:	4651      	mov	r1, sl
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fb33 	bl	800126c <ai_conv2d_stripe_f32>
 8001c06:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001c08:	b320      	cbz	r0, 8001c54 <forward_conv2d_nl_pool+0x2a0>
 8001c0a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001c0e:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8001c10:	4683      	mov	fp, r0
 8001c12:	4643      	mov	r3, r8
 8001c14:	464a      	mov	r2, r9
 8001c16:	4651      	mov	r1, sl
 8001c18:	4650      	mov	r0, sl
 8001c1a:	47b8      	blx	r7
 8001c1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c1e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8001c20:	4480      	add	r8, r0
 8001c22:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001c24:	eba8 0101 	sub.w	r1, r8, r1
 8001c28:	4281      	cmp	r1, r0
 8001c2a:	6820      	ldr	r0, [r4, #0]
 8001c2c:	6841      	ldr	r1, [r0, #4]
 8001c2e:	68c0      	ldr	r0, [r0, #12]
 8001c30:	bfa8      	it	ge
 8001c32:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8001c36:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 8001c3a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001c3e:	4592      	cmp	sl, r2
 8001c40:	d302      	bcc.n	8001c48 <forward_conv2d_nl_pool+0x294>
 8001c42:	0089      	lsls	r1, r1, #2
 8001c44:	4249      	negs	r1, r1
 8001c46:	448a      	add	sl, r1
 8001c48:	f1bb 0b01 	subs.w	fp, fp, #1
 8001c4c:	d1e1      	bne.n	8001c12 <forward_conv2d_nl_pool+0x25e>
 8001c4e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8001c52:	9730      	str	r7, [sp, #192]	; 0xc0
 8001c54:	1c76      	adds	r6, r6, #1
 8001c56:	b236      	sxth	r6, r6
 8001c58:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001c5a:	1e40      	subs	r0, r0, #1
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	9011      	str	r0, [sp, #68]	; 0x44
 8001c60:	dc4e      	bgt.n	8001d00 <forward_conv2d_nl_pool+0x34c>
 8001c62:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001c64:	4370      	muls	r0, r6
 8001c66:	0080      	lsls	r0, r0, #2
 8001c68:	4240      	negs	r0, r0
 8001c6a:	eb0a 0100 	add.w	r1, sl, r0
 8001c6e:	6820      	ldr	r0, [r4, #0]
 8001c70:	68c2      	ldr	r2, [r0, #12]
 8001c72:	4291      	cmp	r1, r2
 8001c74:	bf3c      	itt	cc
 8001c76:	6843      	ldrcc	r3, [r0, #4]
 8001c78:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	4657      	mov	r7, sl
 8001c80:	d232      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c82:	ab12      	add	r3, sp, #72	; 0x48
 8001c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c88:	429e      	cmp	r6, r3
 8001c8a:	d02d      	beq.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c8c:	6843      	ldr	r3, [r0, #4]
 8001c8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001c92:	4291      	cmp	r1, r2
 8001c94:	f080 8028 	bcs.w	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c98:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c9c:	f84a 3b04 	str.w	r3, [sl], #4
 8001ca0:	68c2      	ldr	r2, [r0, #12]
 8001ca2:	6843      	ldr	r3, [r0, #4]
 8001ca4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ca8:	4291      	cmp	r1, r2
 8001caa:	d21d      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cac:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cb0:	f84a 2b04 	str.w	r2, [sl], #4
 8001cb4:	6843      	ldr	r3, [r0, #4]
 8001cb6:	68c2      	ldr	r2, [r0, #12]
 8001cb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cbc:	4291      	cmp	r1, r2
 8001cbe:	d213      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cc0:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cc4:	f84a 2b04 	str.w	r2, [sl], #4
 8001cc8:	6843      	ldr	r3, [r0, #4]
 8001cca:	68c2      	ldr	r2, [r0, #12]
 8001ccc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cd0:	4291      	cmp	r1, r2
 8001cd2:	d209      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cd4:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cd8:	f84a 2b04 	str.w	r2, [sl], #4
 8001cdc:	6843      	ldr	r3, [r0, #4]
 8001cde:	68c2      	ldr	r2, [r0, #12]
 8001ce0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ce4:	4291      	cmp	r1, r2
 8001ce6:	d3d7      	bcc.n	8001c98 <forward_conv2d_nl_pool+0x2e4>
 8001ce8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d506      	bpl.n	8001cfc <forward_conv2d_nl_pool+0x348>
 8001cee:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8001cf0:	4650      	mov	r0, sl
 8001cf2:	f009 fdd4 	bl	800b89e <__aeabi_memclr>
 8001cf6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001cf8:	1986      	adds	r6, r0, r6
 8001cfa:	b236      	sxth	r6, r6
 8001cfc:	9612      	str	r6, [sp, #72]	; 0x48
 8001cfe:	46ba      	mov	sl, r7
 8001d00:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001d02:	4286      	cmp	r6, r0
 8001d04:	d136      	bne.n	8001d74 <forward_conv2d_nl_pool+0x3c0>
 8001d06:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001d0a:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8001d0e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001d10:	1c40      	adds	r0, r0, #1
 8001d12:	902f      	str	r0, [sp, #188]	; 0xbc
 8001d14:	b292      	uxth	r2, r2
 8001d16:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d18:	9008      	str	r0, [sp, #32]
 8001d1a:	9206      	str	r2, [sp, #24]
 8001d1c:	fa1f f389 	uxth.w	r3, r9
 8001d20:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001d24:	b280      	uxth	r0, r0
 8001d26:	9005      	str	r0, [sp, #20]
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001d2c:	b280      	uxth	r0, r0
 8001d2e:	9002      	str	r0, [sp, #8]
 8001d30:	1a76      	subs	r6, r6, r1
 8001d32:	2101      	movs	r1, #1
 8001d34:	9107      	str	r1, [sp, #28]
 8001d36:	b236      	sxth	r6, r6
 8001d38:	992b      	ldr	r1, [sp, #172]	; 0xac
 8001d3a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001d3c:	b289      	uxth	r1, r1
 8001d3e:	9104      	str	r1, [sp, #16]
 8001d40:	b280      	uxth	r0, r0
 8001d42:	b2a9      	uxth	r1, r5
 8001d44:	9103      	str	r1, [sp, #12]
 8001d46:	9000      	str	r0, [sp, #0]
 8001d48:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001d4a:	b289      	uxth	r1, r1
 8001d4c:	9101      	str	r1, [sp, #4]
 8001d4e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001d50:	6820      	ldr	r0, [r4, #0]
 8001d52:	b289      	uxth	r1, r1
 8001d54:	47e0      	blx	ip
 8001d56:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d58:	6881      	ldr	r1, [r0, #8]
 8001d5a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8001d5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001d60:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001d62:	608a      	str	r2, [r1, #8]
 8001d64:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001d66:	1a28      	subs	r0, r5, r0
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	bfc3      	ittte	gt
 8001d6c:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8001d6e:	1a2d      	subgt	r5, r5, r0
 8001d70:	b22d      	sxthgt	r5, r5
 8001d72:	2500      	movle	r5, #0
 8001d74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001d76:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001d78:	1808      	adds	r0, r1, r0
 8001d7a:	9017      	str	r0, [sp, #92]	; 0x5c
 8001d7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001d7e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d80:	4288      	cmp	r0, r1
 8001d82:	f4ff af08 	bcc.w	8001b96 <forward_conv2d_nl_pool+0x1e2>
 8001d86:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d88:	6821      	ldr	r1, [r4, #0]
 8001d8a:	68ca      	ldr	r2, [r1, #12]
 8001d8c:	608a      	str	r2, [r1, #8]
 8001d8e:	68c1      	ldr	r1, [r0, #12]
 8001d90:	6081      	str	r1, [r0, #8]
 8001d92:	b039      	add	sp, #228	; 0xe4
 8001d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d98 <forward_dense>:
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	b081      	sub	sp, #4
 8001d9e:	ed2d 8b02 	vpush	{d8}
 8001da2:	b088      	sub	sp, #32
 8001da4:	6940      	ldr	r0, [r0, #20]
 8001da6:	6800      	ldr	r0, [r0, #0]
 8001da8:	6801      	ldr	r1, [r0, #0]
 8001daa:	680a      	ldr	r2, [r1, #0]
 8001dac:	68c3      	ldr	r3, [r0, #12]
 8001dae:	6981      	ldr	r1, [r0, #24]
 8001db0:	8c00      	ldrh	r0, [r0, #32]
 8001db2:	681f      	ldr	r7, [r3, #0]
 8001db4:	f8d1 e000 	ldr.w	lr, [r1]
 8001db8:	6894      	ldr	r4, [r2, #8]
 8001dba:	f8de 9000 	ldr.w	r9, [lr]
 8001dbe:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001dc2:	f8d9 5000 	ldr.w	r5, [r9]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	bfac      	ite	ge
 8001dcc:	684b      	ldrge	r3, [r1, #4]
 8001dce:	2300      	movlt	r3, #0
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	6938      	ldr	r0, [r7, #16]
 8001dd4:	683f      	ldr	r7, [r7, #0]
 8001dd6:	68bf      	ldr	r7, [r7, #8]
 8001dd8:	4341      	muls	r1, r0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	11ee      	asrs	r6, r5, #7
 8001dde:	f006 087f 	and.w	r8, r6, #127	; 0x7f
 8001de2:	156e      	asrs	r6, r5, #21
 8001de4:	146d      	asrs	r5, r5, #17
 8001de6:	f005 050f 	and.w	r5, r5, #15
 8001dea:	2d04      	cmp	r5, #4
 8001dec:	bf14      	ite	ne
 8001dee:	2d08      	cmpne	r5, #8
 8001df0:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 8001df4:	6895      	ldr	r5, [r2, #8]
 8001df6:	f8de 9018 	ldr.w	r9, [lr, #24]
 8001dfa:	f006 0603 	and.w	r6, r6, #3
 8001dfe:	2900      	cmp	r1, #0
 8001e00:	fa28 f806 	lsr.w	r8, r8, r6
 8001e04:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8001e08:	f000 80eb 	beq.w	8001fe2 <forward_dense+0x24a>
 8001e0c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001e10:	9305      	str	r3, [sp, #20]
 8001e12:	f8cd c018 	str.w	ip, [sp, #24]
 8001e16:	9201      	str	r2, [sp, #4]
 8001e18:	9104      	str	r1, [sp, #16]
 8001e1a:	9907      	ldr	r1, [sp, #28]
 8001e1c:	680a      	ldr	r2, [r1, #0]
 8001e1e:	9905      	ldr	r1, [sp, #20]
 8001e20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001e24:	9b01      	ldr	r3, [sp, #4]
 8001e26:	2900      	cmp	r1, #0
 8001e28:	bf1a      	itte	ne
 8001e2a:	680a      	ldrne	r2, [r1, #0]
 8001e2c:	6892      	ldrne	r2, [r2, #8]
 8001e2e:	2200      	moveq	r2, #0
 8001e30:	2800      	cmp	r0, #0
 8001e32:	f040 80ab 	bne.w	8001f8c <forward_dense+0x1f4>
 8001e36:	429f      	cmp	r7, r3
 8001e38:	f080 80c7 	bcs.w	8001fca <forward_dense+0x232>
 8001e3c:	9003      	str	r0, [sp, #12]
 8001e3e:	2a00      	cmp	r2, #0
 8001e40:	bf0e      	itee	eq
 8001e42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8001ff0 <.text_17>
 8001e46:	ed92 0a00 	vldrne	s0, [r2]
 8001e4a:	1d12      	addne	r2, r2, #4
 8001e4c:	2c04      	cmp	r4, #4
 8001e4e:	4620      	mov	r0, r4
 8001e50:	46ae      	mov	lr, r5
 8001e52:	46dc      	mov	ip, fp
 8001e54:	eddf 0a66 	vldr	s1, [pc, #408]	; 8001ff0 <.text_17>
 8001e58:	d35d      	bcc.n	8001f16 <forward_dense+0x17e>
 8001e5a:	08a1      	lsrs	r1, r4, #2
 8001e5c:	07ce      	lsls	r6, r1, #31
 8001e5e:	d51c      	bpl.n	8001e9a <forward_dense+0x102>
 8001e60:	ed9c 4a00 	vldr	s8, [ip]
 8001e64:	edde 4a00 	vldr	s9, [lr]
 8001e68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001e6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001e70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001e74:	edde 2a02 	vldr	s5, [lr, #8]
 8001e78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001e7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001e80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001e84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001e88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001e8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e90:	f10e 0e10 	add.w	lr, lr, #16
 8001e94:	f10c 0c10 	add.w	ip, ip, #16
 8001e98:	1f00      	subs	r0, r0, #4
 8001e9a:	0849      	lsrs	r1, r1, #1
 8001e9c:	f000 803b 	beq.w	8001f16 <forward_dense+0x17e>
 8001ea0:	edde 4a00 	vldr	s9, [lr]
 8001ea4:	edde 3a01 	vldr	s7, [lr, #4]
 8001ea8:	edde 2a02 	vldr	s5, [lr, #8]
 8001eac:	edde 1a03 	vldr	s3, [lr, #12]
 8001eb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001eb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001eb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001ebc:	ed9c 4a00 	vldr	s8, [ip]
 8001ec0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001ec4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001ec8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001ecc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ed0:	f10e 0610 	add.w	r6, lr, #16
 8001ed4:	f10c 0c10 	add.w	ip, ip, #16
 8001ed8:	edd6 8a00 	vldr	s17, [r6]
 8001edc:	ed9c 8a00 	vldr	s16, [ip]
 8001ee0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001ee4:	edd6 7a01 	vldr	s15, [r6, #4]
 8001ee8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001eec:	edd6 6a02 	vldr	s13, [r6, #8]
 8001ef0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ef4:	edd6 5a03 	vldr	s11, [r6, #12]
 8001ef8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001efc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8001f00:	3808      	subs	r0, #8
 8001f02:	ee46 0a26 	vmla.f32	s1, s12, s13
 8001f06:	1e49      	subs	r1, r1, #1
 8001f08:	ee45 0a25 	vmla.f32	s1, s10, s11
 8001f0c:	f106 0e10 	add.w	lr, r6, #16
 8001f10:	f10c 0c10 	add.w	ip, ip, #16
 8001f14:	d1c4      	bne.n	8001ea0 <forward_dense+0x108>
 8001f16:	b378      	cbz	r0, 8001f78 <forward_dense+0x1e0>
 8001f18:	f010 0103 	ands.w	r1, r0, #3
 8001f1c:	f000 800c 	beq.w	8001f38 <forward_dense+0x1a0>
 8001f20:	ed9c 1a00 	vldr	s2, [ip]
 8001f24:	edde 1a00 	vldr	s3, [lr]
 8001f28:	1e49      	subs	r1, r1, #1
 8001f2a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f2e:	f10e 0e04 	add.w	lr, lr, #4
 8001f32:	f10c 0c04 	add.w	ip, ip, #4
 8001f36:	d1f3      	bne.n	8001f20 <forward_dense+0x188>
 8001f38:	0880      	lsrs	r0, r0, #2
 8001f3a:	d01d      	beq.n	8001f78 <forward_dense+0x1e0>
 8001f3c:	ed9c 2a00 	vldr	s4, [ip]
 8001f40:	ed9e 1a00 	vldr	s2, [lr]
 8001f44:	eddc 1a01 	vldr	s3, [ip, #4]
 8001f48:	edde 2a01 	vldr	s5, [lr, #4]
 8001f4c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f50:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f54:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f58:	ed9e 1a02 	vldr	s2, [lr, #8]
 8001f5c:	eddc 1a03 	vldr	s3, [ip, #12]
 8001f60:	edde 2a03 	vldr	s5, [lr, #12]
 8001f64:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f68:	1e40      	subs	r0, r0, #1
 8001f6a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f6e:	f10e 0e10 	add.w	lr, lr, #16
 8001f72:	f10c 0c10 	add.w	ip, ip, #16
 8001f76:	d1e1      	bne.n	8001f3c <forward_dense+0x1a4>
 8001f78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001f7c:	ed87 0a00 	vstr	s0, [r7]
 8001f80:	1d3f      	adds	r7, r7, #4
 8001f82:	429f      	cmp	r7, r3
 8001f84:	44cb      	add	fp, r9
 8001f86:	f4ff af5a 	bcc.w	8001e3e <forward_dense+0xa6>
 8001f8a:	e01d      	b.n	8001fc8 <forward_dense+0x230>
 8001f8c:	429f      	cmp	r7, r3
 8001f8e:	d21c      	bcs.n	8001fca <forward_dense+0x232>
 8001f90:	469a      	mov	sl, r3
 8001f92:	9003      	str	r0, [sp, #12]
 8001f94:	4616      	mov	r6, r2
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	f856 0b04 	ldrne.w	r0, [r6], #4
 8001f9e:	2000      	moveq	r0, #0
 8001fa0:	9002      	str	r0, [sp, #8]
 8001fa2:	f1b8 0f04 	cmp.w	r8, #4
 8001fa6:	9a03      	ldr	r2, [sp, #12]
 8001fa8:	9400      	str	r4, [sp, #0]
 8001faa:	462b      	mov	r3, r5
 8001fac:	4659      	mov	r1, fp
 8001fae:	a802      	add	r0, sp, #8
 8001fb0:	d102      	bne.n	8001fb8 <forward_dense+0x220>
 8001fb2:	f7ff fb39 	bl	8001628 <ai_dict4_dot_array_f32>
 8001fb6:	e001      	b.n	8001fbc <forward_dense+0x224>
 8001fb8:	f7ff f9ca 	bl	8001350 <ai_dict8_dot_array_f32>
 8001fbc:	9802      	ldr	r0, [sp, #8]
 8001fbe:	f847 0b04 	str.w	r0, [r7], #4
 8001fc2:	4557      	cmp	r7, sl
 8001fc4:	44cb      	add	fp, r9
 8001fc6:	d3e6      	bcc.n	8001f96 <forward_dense+0x1fe>
 8001fc8:	9803      	ldr	r0, [sp, #12]
 8001fca:	9901      	ldr	r1, [sp, #4]
 8001fcc:	9a06      	ldr	r2, [sp, #24]
 8001fce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001fd2:	9904      	ldr	r1, [sp, #16]
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	1e49      	subs	r1, r1, #1
 8001fd8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001fdc:	9104      	str	r1, [sp, #16]
 8001fde:	f47f af1c 	bne.w	8001e1a <forward_dense+0x82>
 8001fe2:	b008      	add	sp, #32
 8001fe4:	ecbd 8b02 	vpop	{d8}
 8001fe8:	b001      	add	sp, #4
 8001fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001ff0 <.text_17>:
 8001ff0:	00000000 	.word	0x00000000

08001ff4 <arm_mat_gemm_f32>:
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff8:	4615      	mov	r5, r2
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	6842      	ldr	r2, [r0, #4]
 8001ffe:	9203      	str	r2, [sp, #12]
 8002000:	4699      	mov	r9, r3
 8002002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002004:	686c      	ldr	r4, [r5, #4]
 8002006:	9400      	str	r4, [sp, #0]
 8002008:	468b      	mov	fp, r1
 800200a:	685e      	ldr	r6, [r3, #4]
 800200c:	8804      	ldrh	r4, [r0, #0]
 800200e:	f8b3 c000 	ldrh.w	ip, [r3]
 8002012:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8002016:	8840      	ldrh	r0, [r0, #2]
 8002018:	f8bb 1000 	ldrh.w	r1, [fp]
 800201c:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8002020:	f8b5 e000 	ldrh.w	lr, [r5]
 8002024:	886f      	ldrh	r7, [r5, #2]
 8002026:	f8db 3004 	ldr.w	r3, [fp, #4]
 800202a:	9306      	str	r3, [sp, #24]
 800202c:	9305      	str	r3, [sp, #20]
 800202e:	2500      	movs	r5, #0
 8002030:	fa4f f389 	sxtb.w	r3, r9
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	46a0      	moveq	r8, r4
 800203a:	4680      	movne	r8, r0
 800203c:	2f01      	cmp	r7, #1
 800203e:	bf0c      	ite	eq
 8002040:	2300      	moveq	r3, #0
 8002042:	2304      	movne	r3, #4
 8002044:	f1be 0f01 	cmp.w	lr, #1
 8002048:	d104      	bne.n	8002054 <arm_mat_gemm_f32+0x60>
 800204a:	2f01      	cmp	r7, #1
 800204c:	d007      	beq.n	800205e <arm_mat_gemm_f32+0x6a>
 800204e:	f1ca 0e00 	rsb	lr, sl, #0
 8002052:	e005      	b.n	8002060 <arm_mat_gemm_f32+0x6c>
 8002054:	2f01      	cmp	r7, #1
 8002056:	bf08      	it	eq
 8002058:	f04f 0e01 	moveq.w	lr, #1
 800205c:	d000      	beq.n	8002060 <arm_mat_gemm_f32+0x6c>
 800205e:	46ae      	mov	lr, r5
 8002060:	fa0f f78e 	sxth.w	r7, lr
 8002064:	9704      	str	r7, [sp, #16]
 8002066:	fa4f f789 	sxtb.w	r7, r9
 800206a:	2f00      	cmp	r7, #0
 800206c:	bf0c      	ite	eq
 800206e:	46a3      	moveq	fp, r4
 8002070:	4683      	movne	fp, r0
 8002072:	45e3      	cmp	fp, ip
 8002074:	d117      	bne.n	80020a6 <arm_mat_gemm_f32+0xb2>
 8002076:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 800207a:	f1be 0f00 	cmp.w	lr, #0
 800207e:	bf0c      	ite	eq
 8002080:	9201      	streq	r2, [sp, #4]
 8002082:	9101      	strne	r1, [sp, #4]
 8002084:	9f01      	ldr	r7, [sp, #4]
 8002086:	4557      	cmp	r7, sl
 8002088:	d10d      	bne.n	80020a6 <arm_mat_gemm_f32+0xb2>
 800208a:	fa4f f789 	sxtb.w	r7, r9
 800208e:	2f00      	cmp	r7, #0
 8002090:	bf0c      	ite	eq
 8002092:	4683      	moveq	fp, r0
 8002094:	46a3      	movne	fp, r4
 8002096:	f1be 0f00 	cmp.w	lr, #0
 800209a:	bf0c      	ite	eq
 800209c:	460f      	moveq	r7, r1
 800209e:	4617      	movne	r7, r2
 80020a0:	45bb      	cmp	fp, r7
 80020a2:	f000 808d 	beq.w	80021c0 <arm_mat_gemm_f32+0x1cc>
 80020a6:	fb0a f30c 	mul.w	r3, sl, ip
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f06f 0002 	mvn.w	r0, #2
 80020b0:	f340 8083 	ble.w	80021ba <arm_mat_gemm_f32+0x1c6>
 80020b4:	1c6d      	adds	r5, r5, #1
 80020b6:	2100      	movs	r1, #0
 80020b8:	b2aa      	uxth	r2, r5
 80020ba:	6031      	str	r1, [r6, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	bfbf      	itttt	lt
 80020c0:	6071      	strlt	r1, [r6, #4]
 80020c2:	1c6d      	addlt	r5, r5, #1
 80020c4:	b2aa      	uxthlt	r2, r5
 80020c6:	429a      	cmplt	r2, r3
 80020c8:	da77      	bge.n	80021ba <arm_mat_gemm_f32+0x1c6>
 80020ca:	1c6d      	adds	r5, r5, #1
 80020cc:	b2aa      	uxth	r2, r5
 80020ce:	429a      	cmp	r2, r3
 80020d0:	60b1      	str	r1, [r6, #8]
 80020d2:	da72      	bge.n	80021ba <arm_mat_gemm_f32+0x1c6>
 80020d4:	60f1      	str	r1, [r6, #12]
 80020d6:	1c6d      	adds	r5, r5, #1
 80020d8:	3610      	adds	r6, #16
 80020da:	b2aa      	uxth	r2, r5
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbe9      	blt.n	80020b4 <arm_mat_gemm_f32+0xc0>
 80020e0:	b00a      	add	sp, #40	; 0x28
 80020e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e6:	9d06      	ldr	r5, [sp, #24]
 80020e8:	0097      	lsls	r7, r2, #2
 80020ea:	9708      	str	r7, [sp, #32]
 80020ec:	0087      	lsls	r7, r0, #2
 80020ee:	9707      	str	r7, [sp, #28]
 80020f0:	f8cd c00c 	str.w	ip, [sp, #12]
 80020f4:	f8ad 4008 	strh.w	r4, [sp, #8]
 80020f8:	ea4f 0408 	mov.w	r4, r8
 80020fc:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002100:	fa4f f789 	sxtb.w	r7, r9
 8002104:	2f00      	cmp	r7, #0
 8002106:	bf0c      	ite	eq
 8002108:	4682      	moveq	sl, r0
 800210a:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 800210e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002112:	f1ba 0f00 	cmp.w	sl, #0
 8002116:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80023e8 <.text_21>
 800211a:	d018      	beq.n	800214e <arm_mat_gemm_f32+0x15a>
 800211c:	fa4f f789 	sxtb.w	r7, r9
 8002120:	2f00      	cmp	r7, #0
 8002122:	bf0c      	ite	eq
 8002124:	2704      	moveq	r7, #4
 8002126:	9f07      	ldrne	r7, [sp, #28]
 8002128:	f1be 0f00 	cmp.w	lr, #0
 800212c:	f1aa 0a01 	sub.w	sl, sl, #1
 8002130:	edd8 1a00 	vldr	s3, [r8]
 8002134:	ed95 2a00 	vldr	s4, [r5]
 8002138:	44b8      	add	r8, r7
 800213a:	bf0c      	ite	eq
 800213c:	9f08      	ldreq	r7, [sp, #32]
 800213e:	2704      	movne	r7, #4
 8002140:	19ed      	adds	r5, r5, r7
 8002142:	fa1f f78a 	uxth.w	r7, sl
 8002146:	2f00      	cmp	r7, #0
 8002148:	ee01 1a82 	vmla.f32	s2, s3, s4
 800214c:	d1e6      	bne.n	800211c <arm_mat_gemm_f32+0x128>
 800214e:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002152:	eddb 1a00 	vldr	s3, [fp]
 8002156:	ee00 1aa1 	vmla.f32	s2, s1, s3
 800215a:	ed86 1a00 	vstr	s2, [r6]
 800215e:	1d36      	adds	r6, r6, #4
 8002160:	1e64      	subs	r4, r4, #1
 8002162:	b2a4      	uxth	r4, r4
 8002164:	f1be 0f00 	cmp.w	lr, #0
 8002168:	bf0e      	itee	eq
 800216a:	1b15      	subeq	r5, r2, r4
 800216c:	1b0d      	subne	r5, r1, r4
 800216e:	4355      	mulne	r5, r2
 8002170:	2c00      	cmp	r4, #0
 8002172:	449b      	add	fp, r3
 8002174:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8002178:	d1c2      	bne.n	8002100 <arm_mat_gemm_f32+0x10c>
 800217a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800217e:	9d03      	ldr	r5, [sp, #12]
 8002180:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8002184:	f8cd c014 	str.w	ip, [sp, #20]
 8002188:	9f01      	ldr	r7, [sp, #4]
 800218a:	443e      	add	r6, r7
 800218c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8002190:	fa4f f689 	sxtb.w	r6, r9
 8002194:	2e00      	cmp	r6, #0
 8002196:	bf0c      	ite	eq
 8002198:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 800219c:	f04f 0c04 	movne.w	ip, #4
 80021a0:	44ac      	add	ip, r5
 80021a2:	9d04      	ldr	r5, [sp, #16]
 80021a4:	f8bd 6000 	ldrh.w	r6, [sp]
 80021a8:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80021ac:	1e75      	subs	r5, r6, #1
 80021ae:	f8ad 5000 	strh.w	r5, [sp]
 80021b2:	f8bd 5000 	ldrh.w	r5, [sp]
 80021b6:	b965      	cbnz	r5, 80021d2 <arm_mat_gemm_f32+0x1de>
 80021b8:	2000      	movs	r0, #0
 80021ba:	b00a      	add	sp, #40	; 0x28
 80021bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80021c4:	f8dd b000 	ldr.w	fp, [sp]
 80021c8:	9609      	str	r6, [sp, #36]	; 0x24
 80021ca:	f8ad 5002 	strh.w	r5, [sp, #2]
 80021ce:	f8ad 8000 	strh.w	r8, [sp]
 80021d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80021d4:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 80021d8:	f1be 0f00 	cmp.w	lr, #0
 80021dc:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 80021e0:	bf0c      	ite	eq
 80021e2:	4690      	moveq	r8, r2
 80021e4:	4688      	movne	r8, r1
 80021e6:	e77e      	b.n	80020e6 <arm_mat_gemm_f32+0xf2>

080021e8 <forward_gemm>:
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	4604      	mov	r4, r0
 80021ec:	b08b      	sub	sp, #44	; 0x2c
 80021ee:	6960      	ldr	r0, [r4, #20]
 80021f0:	6800      	ldr	r0, [r0, #0]
 80021f2:	6801      	ldr	r1, [r0, #0]
 80021f4:	68c3      	ldr	r3, [r0, #12]
 80021f6:	8902      	ldrh	r2, [r0, #8]
 80021f8:	2600      	movs	r6, #0
 80021fa:	2700      	movs	r7, #0
 80021fc:	680d      	ldr	r5, [r1, #0]
 80021fe:	f8d3 c000 	ldr.w	ip, [r3]
 8002202:	2a03      	cmp	r2, #3
 8002204:	d102      	bne.n	800220c <forward_gemm+0x24>
 8002206:	684e      	ldr	r6, [r1, #4]
 8002208:	688f      	ldr	r7, [r1, #8]
 800220a:	e00a      	b.n	8002222 <forward_gemm+0x3a>
 800220c:	2a02      	cmp	r2, #2
 800220e:	d103      	bne.n	8002218 <forward_gemm+0x30>
 8002210:	6980      	ldr	r0, [r0, #24]
 8002212:	684e      	ldr	r6, [r1, #4]
 8002214:	6807      	ldr	r7, [r0, #0]
 8002216:	e004      	b.n	8002222 <forward_gemm+0x3a>
 8002218:	2a01      	cmp	r2, #1
 800221a:	d102      	bne.n	8002222 <forward_gemm+0x3a>
 800221c:	6980      	ldr	r0, [r0, #24]
 800221e:	6806      	ldr	r6, [r0, #0]
 8002220:	6847      	ldr	r7, [r0, #4]
 8002222:	f8dc 0000 	ldr.w	r0, [ip]
 8002226:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800222a:	6883      	ldr	r3, [r0, #8]
 800222c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8002230:	b292      	uxth	r2, r2
 8002232:	b289      	uxth	r1, r1
 8002234:	a808      	add	r0, sp, #32
 8002236:	f002 fb1b 	bl	8004870 <arm_mat_init_f32>
 800223a:	6829      	ldr	r1, [r5, #0]
 800223c:	688b      	ldr	r3, [r1, #8]
 800223e:	68aa      	ldr	r2, [r5, #8]
 8002240:	6929      	ldr	r1, [r5, #16]
 8002242:	b292      	uxth	r2, r2
 8002244:	b289      	uxth	r1, r1
 8002246:	a806      	add	r0, sp, #24
 8002248:	f002 fb12 	bl	8004870 <arm_mat_init_f32>
 800224c:	6830      	ldr	r0, [r6, #0]
 800224e:	68b2      	ldr	r2, [r6, #8]
 8002250:	6883      	ldr	r3, [r0, #8]
 8002252:	6931      	ldr	r1, [r6, #16]
 8002254:	b292      	uxth	r2, r2
 8002256:	b289      	uxth	r1, r1
 8002258:	a804      	add	r0, sp, #16
 800225a:	f002 fb09 	bl	8004870 <arm_mat_init_f32>
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	6883      	ldr	r3, [r0, #8]
 8002264:	6939      	ldr	r1, [r7, #16]
 8002266:	b292      	uxth	r2, r2
 8002268:	b289      	uxth	r1, r1
 800226a:	a802      	add	r0, sp, #8
 800226c:	f002 fb00 	bl	8004870 <arm_mat_init_f32>
 8002270:	a808      	add	r0, sp, #32
 8002272:	9001      	str	r0, [sp, #4]
 8002274:	aa02      	add	r2, sp, #8
 8002276:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 800227a:	9100      	str	r1, [sp, #0]
 800227c:	a904      	add	r1, sp, #16
 800227e:	f994 3020 	ldrsb.w	r3, [r4, #32]
 8002282:	edd4 0a07 	vldr	s1, [r4, #28]
 8002286:	ed94 0a06 	vldr	s0, [r4, #24]
 800228a:	a806      	add	r0, sp, #24
 800228c:	f7ff feb2 	bl	8001ff4 <arm_mat_gemm_f32>
 8002290:	b00b      	add	sp, #44	; 0x2c
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002294 <forward_matmul>:
 8002294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002298:	b08b      	sub	sp, #44	; 0x2c
 800229a:	6940      	ldr	r0, [r0, #20]
 800229c:	6801      	ldr	r1, [r0, #0]
 800229e:	680a      	ldr	r2, [r1, #0]
 80022a0:	6810      	ldr	r0, [r2, #0]
 80022a2:	6857      	ldr	r7, [r2, #4]
 80022a4:	68ca      	ldr	r2, [r1, #12]
 80022a6:	6814      	ldr	r4, [r2, #0]
 80022a8:	b90f      	cbnz	r7, 80022ae <forward_matmul+0x1a>
 80022aa:	6989      	ldr	r1, [r1, #24]
 80022ac:	680f      	ldr	r7, [r1, #0]
 80022ae:	68a2      	ldr	r2, [r4, #8]
 80022b0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80022b4:	687d      	ldr	r5, [r7, #4]
 80022b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80022ba:	68c1      	ldr	r1, [r0, #12]
 80022bc:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80022c0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80022c4:	6923      	ldr	r3, [r4, #16]
 80022c6:	9306      	str	r3, [sp, #24]
 80022c8:	fb01 fa0e 	mul.w	sl, r1, lr
 80022cc:	6824      	ldr	r4, [r4, #0]
 80022ce:	68a3      	ldr	r3, [r4, #8]
 80022d0:	6904      	ldr	r4, [r0, #16]
 80022d2:	434c      	muls	r4, r1
 80022d4:	fb0e f404 	mul.w	r4, lr, r4
 80022d8:	940a      	str	r4, [sp, #40]	; 0x28
 80022da:	693e      	ldr	r6, [r7, #16]
 80022dc:	fb08 f606 	mul.w	r6, r8, r6
 80022e0:	436e      	muls	r6, r5
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	9609      	str	r6, [sp, #36]	; 0x24
 80022e6:	fb08 f805 	mul.w	r8, r8, r5
 80022ea:	d079      	beq.n	80023e0 <forward_matmul+0x14c>
 80022ec:	2400      	movs	r4, #0
 80022ee:	46a1      	mov	r9, r4
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	9a06      	ldr	r2, [sp, #24]
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d069      	beq.n	80023cc <forward_matmul+0x138>
 80022f8:	2600      	movs	r6, #0
 80022fa:	9600      	str	r6, [sp, #0]
 80022fc:	f8cd a014 	str.w	sl, [sp, #20]
 8002300:	f8cd b00c 	str.w	fp, [sp, #12]
 8002304:	9a06      	ldr	r2, [sp, #24]
 8002306:	f8dd a000 	ldr.w	sl, [sp]
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	9a03      	ldr	r2, [sp, #12]
 800230e:	2a00      	cmp	r2, #0
 8002310:	d052      	beq.n	80023b8 <forward_matmul+0x124>
 8002312:	9507      	str	r5, [sp, #28]
 8002314:	f04f 0b00 	mov.w	fp, #0
 8002318:	f8cd c010 	str.w	ip, [sp, #16]
 800231c:	9200      	str	r2, [sp, #0]
 800231e:	9a04      	ldr	r2, [sp, #16]
 8002320:	2a00      	cmp	r2, #0
 8002322:	d03f      	beq.n	80023a4 <forward_matmul+0x110>
 8002324:	f04f 0c00 	mov.w	ip, #0
 8002328:	9008      	str	r0, [sp, #32]
 800232a:	9808      	ldr	r0, [sp, #32]
 800232c:	6805      	ldr	r5, [r0, #0]
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	68ae      	ldr	r6, [r5, #8]
 8002332:	6880      	ldr	r0, [r0, #8]
 8002334:	1936      	adds	r6, r6, r4
 8002336:	4456      	add	r6, sl
 8002338:	4448      	add	r0, r9
 800233a:	eb06 050c 	add.w	r5, r6, ip
 800233e:	4458      	add	r0, fp
 8002340:	eb00 060c 	add.w	r6, r0, ip
 8002344:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80023e8 <.text_21>
 8002348:	b321      	cbz	r1, 8002394 <forward_matmul+0x100>
 800234a:	07c8      	lsls	r0, r1, #31
 800234c:	d509      	bpl.n	8002362 <forward_matmul+0xce>
 800234e:	edd5 0a00 	vldr	s1, [r5]
 8002352:	ed96 1a00 	vldr	s2, [r6]
 8002356:	ee00 0a81 	vmla.f32	s0, s1, s2
 800235a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800235e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002362:	0848      	lsrs	r0, r1, #1
 8002364:	f000 8016 	beq.w	8002394 <forward_matmul+0x100>
 8002368:	edd5 0a00 	vldr	s1, [r5]
 800236c:	ed96 1a00 	vldr	s2, [r6]
 8002370:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002374:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002378:	ee00 0a81 	vmla.f32	s0, s1, s2
 800237c:	edd5 0a00 	vldr	s1, [r5]
 8002380:	ed96 1a00 	vldr	s2, [r6]
 8002384:	1e40      	subs	r0, r0, #1
 8002386:	ee00 0a81 	vmla.f32	s0, s1, s2
 800238a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800238e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002392:	d1e9      	bne.n	8002368 <forward_matmul+0xd4>
 8002394:	ed83 0a00 	vstr	s0, [r3]
 8002398:	1d1b      	adds	r3, r3, #4
 800239a:	1e52      	subs	r2, r2, #1
 800239c:	f10c 0c04 	add.w	ip, ip, #4
 80023a0:	d1c3      	bne.n	800232a <forward_matmul+0x96>
 80023a2:	9808      	ldr	r0, [sp, #32]
 80023a4:	9d00      	ldr	r5, [sp, #0]
 80023a6:	9a07      	ldr	r2, [sp, #28]
 80023a8:	1e6d      	subs	r5, r5, #1
 80023aa:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80023ae:	9500      	str	r5, [sp, #0]
 80023b0:	d1b5      	bne.n	800231e <forward_matmul+0x8a>
 80023b2:	4615      	mov	r5, r2
 80023b4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023b8:	9e01      	ldr	r6, [sp, #4]
 80023ba:	9a05      	ldr	r2, [sp, #20]
 80023bc:	1e76      	subs	r6, r6, #1
 80023be:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80023c2:	9601      	str	r6, [sp, #4]
 80023c4:	d1a2      	bne.n	800230c <forward_matmul+0x78>
 80023c6:	4692      	mov	sl, r2
 80023c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80023cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80023d0:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80023d4:	9a02      	ldr	r2, [sp, #8]
 80023d6:	1e52      	subs	r2, r2, #1
 80023d8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80023dc:	9202      	str	r2, [sp, #8]
 80023de:	d188      	bne.n	80022f2 <forward_matmul+0x5e>
 80023e0:	b00b      	add	sp, #44	; 0x2c
 80023e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023e8 <.text_21>:
 80023e8:	00000000 	.word	0x00000000

080023ec <.text_22>:
 80023ec:	0800134d 	.word	0x0800134d

080023f0 <nl_func_sm_channel_f32>:
 80023f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f4:	460f      	mov	r7, r1
 80023f6:	4614      	mov	r4, r2
 80023f8:	ed2d 8b02 	vpush	{d8}
 80023fc:	2c02      	cmp	r4, #2
 80023fe:	4606      	mov	r6, r0
 8002400:	ed97 8a00 	vldr	s16, [r7]
 8002404:	eddf 8ac5 	vldr	s17, [pc, #788]	; 800271c <.text_12>
 8002408:	d33d      	bcc.n	8002486 <nl_func_sm_channel_f32+0x96>
 800240a:	1e61      	subs	r1, r4, #1
 800240c:	1d3a      	adds	r2, r7, #4
 800240e:	f011 0003 	ands.w	r0, r1, #3
 8002412:	d00c      	beq.n	800242e <nl_func_sm_channel_f32+0x3e>
 8002414:	ed92 0a00 	vldr	s0, [r2]
 8002418:	eeb4 0a48 	vcmp.f32	s0, s16
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	bf58      	it	pl
 8002422:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002426:	1e40      	subs	r0, r0, #1
 8002428:	f102 0204 	add.w	r2, r2, #4
 800242c:	d1f2      	bne.n	8002414 <nl_func_sm_channel_f32+0x24>
 800242e:	0889      	lsrs	r1, r1, #2
 8002430:	f000 802b 	beq.w	800248a <nl_func_sm_channel_f32+0x9a>
 8002434:	ed92 0a00 	vldr	s0, [r2]
 8002438:	eeb4 0a48 	vcmp.f32	s0, s16
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	bf58      	it	pl
 8002442:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002446:	ed92 0a01 	vldr	s0, [r2, #4]
 800244a:	eeb4 0a48 	vcmp.f32	s0, s16
 800244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002452:	bf58      	it	pl
 8002454:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002458:	ed92 0a02 	vldr	s0, [r2, #8]
 800245c:	eeb4 0a48 	vcmp.f32	s0, s16
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	bf58      	it	pl
 8002466:	eeb0 8a40 	vmovpl.f32	s16, s0
 800246a:	ed92 0a03 	vldr	s0, [r2, #12]
 800246e:	eeb4 0a48 	vcmp.f32	s0, s16
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	bf58      	it	pl
 8002478:	eeb0 8a40 	vmovpl.f32	s16, s0
 800247c:	1e49      	subs	r1, r1, #1
 800247e:	f102 0210 	add.w	r2, r2, #16
 8002482:	d1d7      	bne.n	8002434 <nl_func_sm_channel_f32+0x44>
 8002484:	e001      	b.n	800248a <nl_func_sm_channel_f32+0x9a>
 8002486:	2c00      	cmp	r4, #0
 8002488:	d040      	beq.n	800250c <nl_func_sm_channel_f32+0x11c>
 800248a:	46b0      	mov	r8, r6
 800248c:	ea4f 0504 	mov.w	r5, r4
 8002490:	ed97 0a00 	vldr	s0, [r7]
 8002494:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002498:	f00a fa36 	bl	800c908 <expf>
 800249c:	1d3f      	adds	r7, r7, #4
 800249e:	ed88 0a00 	vstr	s0, [r8]
 80024a2:	1e6d      	subs	r5, r5, #1
 80024a4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80024a8:	f108 0804 	add.w	r8, r8, #4
 80024ac:	d1f0      	bne.n	8002490 <nl_func_sm_channel_f32+0xa0>
 80024ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024b2:	f014 0003 	ands.w	r0, r4, #3
 80024b6:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80024ba:	d009      	beq.n	80024d0 <nl_func_sm_channel_f32+0xe0>
 80024bc:	edd6 0a00 	vldr	s1, [r6]
 80024c0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024c4:	edc6 0a00 	vstr	s1, [r6]
 80024c8:	1e40      	subs	r0, r0, #1
 80024ca:	f106 0604 	add.w	r6, r6, #4
 80024ce:	d1f5      	bne.n	80024bc <nl_func_sm_channel_f32+0xcc>
 80024d0:	08a4      	lsrs	r4, r4, #2
 80024d2:	d01b      	beq.n	800250c <nl_func_sm_channel_f32+0x11c>
 80024d4:	edd6 0a00 	vldr	s1, [r6]
 80024d8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024dc:	edc6 0a00 	vstr	s1, [r6]
 80024e0:	1e64      	subs	r4, r4, #1
 80024e2:	ed96 1a01 	vldr	s2, [r6, #4]
 80024e6:	edd6 0a02 	vldr	s1, [r6, #8]
 80024ea:	ee21 1a00 	vmul.f32	s2, s2, s0
 80024ee:	ed86 1a01 	vstr	s2, [r6, #4]
 80024f2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024f6:	ed96 1a03 	vldr	s2, [r6, #12]
 80024fa:	edc6 0a02 	vstr	s1, [r6, #8]
 80024fe:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002502:	ed86 1a03 	vstr	s2, [r6, #12]
 8002506:	f106 0610 	add.w	r6, r6, #16
 800250a:	d1e3      	bne.n	80024d4 <nl_func_sm_channel_f32+0xe4>
 800250c:	ecbd 8b02 	vpop	{d8}
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002514 <nl_func_sm_array_f32>:
 8002514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002518:	b081      	sub	sp, #4
 800251a:	460c      	mov	r4, r1
 800251c:	9f08      	ldr	r7, [sp, #32]
 800251e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002520:	00bf      	lsls	r7, r7, #2
 8002522:	427f      	negs	r7, r7
 8002524:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002528:	19cd      	adds	r5, r1, r7
 800252a:	00b6      	lsls	r6, r6, #2
 800252c:	4276      	negs	r6, r6
 800252e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002532:	42a5      	cmp	r5, r4
 8002534:	4698      	mov	r8, r3
 8002536:	eb00 0906 	add.w	r9, r0, r6
 800253a:	d309      	bcc.n	8002550 <nl_func_sm_array_f32+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	4642      	mov	r2, r8
 8002540:	4629      	mov	r1, r5
 8002542:	4648      	mov	r0, r9
 8002544:	f7ff ff54 	bl	80023f0 <nl_func_sm_channel_f32>
 8002548:	19ed      	adds	r5, r5, r7
 800254a:	42a5      	cmp	r5, r4
 800254c:	44b1      	add	r9, r6
 800254e:	d2f5      	bcs.n	800253c <nl_func_sm_array_f32+0x28>
 8002550:	b001      	add	sp, #4
 8002552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002558 <nl_func_tanh_array_f32>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	460c      	mov	r4, r1
 800255c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002560:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002564:	1f0d      	subs	r5, r1, #4
 8002566:	1f06      	subs	r6, r0, #4
 8002568:	42a5      	cmp	r5, r4
 800256a:	d309      	bcc.n	8002580 <nl_func_tanh_array_f32+0x28>
 800256c:	ed95 0a00 	vldr	s0, [r5]
 8002570:	f00a f978 	bl	800c864 <tanhf>
 8002574:	ed86 0a00 	vstr	s0, [r6]
 8002578:	1f2d      	subs	r5, r5, #4
 800257a:	1f36      	subs	r6, r6, #4
 800257c:	42a5      	cmp	r5, r4
 800257e:	d2f5      	bcs.n	800256c <nl_func_tanh_array_f32+0x14>
 8002580:	bd70      	pop	{r4, r5, r6, pc}
	...

08002584 <nl_func_sigmoid_array_f32>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	460c      	mov	r4, r1
 8002588:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800258c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002590:	1f0d      	subs	r5, r1, #4
 8002592:	1f06      	subs	r6, r0, #4
 8002594:	42a5      	cmp	r5, r4
 8002596:	d313      	bcc.n	80025c0 <nl_func_sigmoid_array_f32+0x3c>
 8002598:	ed95 0a00 	vldr	s0, [r5]
 800259c:	eeb1 0a40 	vneg.f32	s0, s0
 80025a0:	f00a f9b2 	bl	800c908 <expf>
 80025a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80025a8:	ee70 0a20 	vadd.f32	s1, s0, s1
 80025ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025b0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80025b4:	ed86 0a00 	vstr	s0, [r6]
 80025b8:	1f2d      	subs	r5, r5, #4
 80025ba:	1f36      	subs	r6, r6, #4
 80025bc:	42a5      	cmp	r5, r4
 80025be:	d2eb      	bcs.n	8002598 <nl_func_sigmoid_array_f32+0x14>
 80025c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080025c4 <nl_func_hard_sigmoid_array_f32>:
 80025c4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80025c8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80025cc:	1f1b      	subs	r3, r3, #4
 80025ce:	1f00      	subs	r0, r0, #4
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d321      	bcc.n	8002618 <nl_func_hard_sigmoid_array_f32+0x54>
 80025d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025d8:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8002874 <.text_16>
 80025dc:	edd3 1a00 	vldr	s3, [r3]
 80025e0:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 8002878 <.text_17>
 80025e4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80025e8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80025ec:	eeb4 1a60 	vcmp.f32	s2, s1
 80025f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f4:	da08      	bge.n	8002608 <nl_func_hard_sigmoid_array_f32+0x44>
 80025f6:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	d505      	bpl.n	800260c <nl_func_hard_sigmoid_array_f32+0x48>
 8002600:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800271c <.text_12>
 8002604:	e002      	b.n	800260c <nl_func_hard_sigmoid_array_f32+0x48>
 8002606:	bf00      	nop
 8002608:	eeb0 1a40 	vmov.f32	s2, s0
 800260c:	ed80 1a00 	vstr	s2, [r0]
 8002610:	1f1b      	subs	r3, r3, #4
 8002612:	1f00      	subs	r0, r0, #4
 8002614:	428b      	cmp	r3, r1
 8002616:	d2e1      	bcs.n	80025dc <nl_func_hard_sigmoid_array_f32+0x18>
 8002618:	4770      	bx	lr
	...

0800261c <nl_func_exp_array_f32>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	460c      	mov	r4, r1
 8002620:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002624:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002628:	1f0d      	subs	r5, r1, #4
 800262a:	1f06      	subs	r6, r0, #4
 800262c:	42a5      	cmp	r5, r4
 800262e:	d309      	bcc.n	8002644 <nl_func_exp_array_f32+0x28>
 8002630:	ed95 0a00 	vldr	s0, [r5]
 8002634:	f00a f968 	bl	800c908 <expf>
 8002638:	ed86 0a00 	vstr	s0, [r6]
 800263c:	1f2d      	subs	r5, r5, #4
 800263e:	1f36      	subs	r6, r6, #4
 8002640:	42a5      	cmp	r5, r4
 8002642:	d2f5      	bcs.n	8002630 <nl_func_exp_array_f32+0x14>
 8002644:	bd70      	pop	{r4, r5, r6, pc}
	...

08002648 <nl_func_sqrt_array_f32>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	460c      	mov	r4, r1
 800264c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002650:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002654:	1f0d      	subs	r5, r1, #4
 8002656:	1f06      	subs	r6, r0, #4
 8002658:	42a5      	cmp	r5, r4
 800265a:	d309      	bcc.n	8002670 <nl_func_sqrt_array_f32+0x28>
 800265c:	ed95 0a00 	vldr	s0, [r5]
 8002660:	f001 f9a8 	bl	80039b4 <ai_math_sqrt>
 8002664:	ed86 0a00 	vstr	s0, [r6]
 8002668:	1f2d      	subs	r5, r5, #4
 800266a:	1f36      	subs	r6, r6, #4
 800266c:	42a5      	cmp	r5, r4
 800266e:	d2f5      	bcs.n	800265c <nl_func_sqrt_array_f32+0x14>
 8002670:	bd70      	pop	{r4, r5, r6, pc}
	...

08002674 <nl_func_soft_plus_array_f32>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	460c      	mov	r4, r1
 8002678:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800267c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002680:	1f0d      	subs	r5, r1, #4
 8002682:	1f06      	subs	r6, r0, #4
 8002684:	42a5      	cmp	r5, r4
 8002686:	d30f      	bcc.n	80026a8 <nl_func_soft_plus_array_f32+0x34>
 8002688:	ed95 0a00 	vldr	s0, [r5]
 800268c:	f00a f93c 	bl	800c908 <expf>
 8002690:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002694:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002698:	f00a f9b0 	bl	800c9fc <logf>
 800269c:	ed86 0a00 	vstr	s0, [r6]
 80026a0:	1f2d      	subs	r5, r5, #4
 80026a2:	1f36      	subs	r6, r6, #4
 80026a4:	42a5      	cmp	r5, r4
 80026a6:	d2ef      	bcs.n	8002688 <nl_func_soft_plus_array_f32+0x14>
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026ac <nl_func_soft_sign_array_f32>:
 80026ac:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026b4:	1f1b      	subs	r3, r3, #4
 80026b6:	1f00      	subs	r0, r0, #4
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d30f      	bcc.n	80026dc <nl_func_soft_sign_array_f32+0x30>
 80026bc:	ed93 0a00 	vldr	s0, [r3]
 80026c0:	eef0 0ac0 	vabs.f32	s1, s0
 80026c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80026c8:	ee70 0a81 	vadd.f32	s1, s1, s2
 80026cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80026d0:	ed80 0a00 	vstr	s0, [r0]
 80026d4:	1f1b      	subs	r3, r3, #4
 80026d6:	1f00      	subs	r0, r0, #4
 80026d8:	428b      	cmp	r3, r1
 80026da:	d2ef      	bcs.n	80026bc <nl_func_soft_sign_array_f32+0x10>
 80026dc:	4770      	bx	lr
	...

080026e0 <nl_func_sign_array_f32>:
 80026e0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026e8:	1f1b      	subs	r3, r3, #4
 80026ea:	1f00      	subs	r0, r0, #4
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d314      	bcc.n	800271a <nl_func_sign_array_f32+0x3a>
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	ed93 0a00 	vldr	s0, [r3]
 80026f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002700:	bfcc      	ite	gt
 8002702:	ed9f 0ab9 	vldrgt	s0, [pc, #740]	; 80029e8 <.text_21>
 8002706:	ee00 2a10 	vmovle	s0, r2
 800270a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800270e:	ed80 0a00 	vstr	s0, [r0]
 8002712:	1f1b      	subs	r3, r3, #4
 8002714:	1f00      	subs	r0, r0, #4
 8002716:	428b      	cmp	r3, r1
 8002718:	d2ec      	bcs.n	80026f4 <nl_func_sign_array_f32+0x14>
 800271a:	4770      	bx	lr

0800271c <.text_12>:
 800271c:	00000000 	.word	0x00000000

08002720 <nl_func_clip_array_f32>:
 8002720:	ed93 0a00 	vldr	s0, [r3]
 8002724:	edd3 0a01 	vldr	s1, [r3, #4]
 8002728:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800272c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002730:	1f1b      	subs	r3, r3, #4
 8002732:	1f00      	subs	r0, r0, #4
 8002734:	428b      	cmp	r3, r1
 8002736:	d315      	bcc.n	8002764 <nl_func_clip_array_f32+0x44>
 8002738:	ed93 1a00 	vldr	s2, [r3]
 800273c:	eeb4 0a41 	vcmp.f32	s0, s2
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	bf58      	it	pl
 8002746:	eeb0 1a40 	vmovpl.f32	s2, s0
 800274a:	eeb4 1a60 	vcmp.f32	s2, s1
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	bf58      	it	pl
 8002754:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002758:	ed80 1a00 	vstr	s2, [r0]
 800275c:	1f1b      	subs	r3, r3, #4
 800275e:	1f00      	subs	r0, r0, #4
 8002760:	428b      	cmp	r3, r1
 8002762:	d2e9      	bcs.n	8002738 <nl_func_clip_array_f32+0x18>
 8002764:	4770      	bx	lr
	...

08002768 <nl_func_hardmax_array_f32>:
 8002768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800276c:	6856      	ldr	r6, [r2, #4]
 800276e:	68d4      	ldr	r4, [r2, #12]
 8002770:	4688      	mov	r8, r1
 8002772:	4374      	muls	r4, r6
 8002774:	4605      	mov	r5, r0
 8002776:	00a1      	lsls	r1, r4, #2
 8002778:	f009 f891 	bl	800b89e <__aeabi_memclr>
 800277c:	2200      	movs	r2, #0
 800277e:	2c00      	cmp	r4, #0
 8002780:	4643      	mov	r3, r8
 8002782:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002786:	d05a      	beq.n	800283e <nl_func_hardmax_array_f32+0xd6>
 8002788:	f102 0c01 	add.w	ip, r2, #1
 800278c:	eb06 0e02 	add.w	lr, r6, r2
 8002790:	45f4      	cmp	ip, lr
 8002792:	edd3 0a00 	vldr	s1, [r3]
 8002796:	d249      	bcs.n	800282c <nl_func_hardmax_array_f32+0xc4>
 8002798:	1e71      	subs	r1, r6, #1
 800279a:	f011 0003 	ands.w	r0, r1, #3
 800279e:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 80027a2:	d00f      	beq.n	80027c4 <nl_func_hardmax_array_f32+0x5c>
 80027a4:	ed97 1a00 	vldr	s2, [r7]
 80027a8:	eef4 0a41 	vcmp.f32	s1, s2
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	bf44      	itt	mi
 80027b2:	eef0 0a41 	vmovmi.f32	s1, s2
 80027b6:	4662      	movmi	r2, ip
 80027b8:	1e40      	subs	r0, r0, #1
 80027ba:	f10c 0c01 	add.w	ip, ip, #1
 80027be:	f107 0704 	add.w	r7, r7, #4
 80027c2:	d1ef      	bne.n	80027a4 <nl_func_hardmax_array_f32+0x3c>
 80027c4:	0889      	lsrs	r1, r1, #2
 80027c6:	d031      	beq.n	800282c <nl_func_hardmax_array_f32+0xc4>
 80027c8:	ed97 1a00 	vldr	s2, [r7]
 80027cc:	eef4 0a41 	vcmp.f32	s1, s2
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	bf44      	itt	mi
 80027d6:	eef0 0a41 	vmovmi.f32	s1, s2
 80027da:	4662      	movmi	r2, ip
 80027dc:	ed97 1a01 	vldr	s2, [r7, #4]
 80027e0:	eef4 0a41 	vcmp.f32	s1, s2
 80027e4:	f10c 0001 	add.w	r0, ip, #1
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	bf44      	itt	mi
 80027ee:	eef0 0a41 	vmovmi.f32	s1, s2
 80027f2:	4602      	movmi	r2, r0
 80027f4:	ed97 1a02 	vldr	s2, [r7, #8]
 80027f8:	1c40      	adds	r0, r0, #1
 80027fa:	eef4 0a41 	vcmp.f32	s1, s2
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	bf44      	itt	mi
 8002804:	eef0 0a41 	vmovmi.f32	s1, s2
 8002808:	4602      	movmi	r2, r0
 800280a:	ed97 1a03 	vldr	s2, [r7, #12]
 800280e:	1c40      	adds	r0, r0, #1
 8002810:	eef4 0a41 	vcmp.f32	s1, s2
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	bf44      	itt	mi
 800281a:	eef0 0a41 	vmovmi.f32	s1, s2
 800281e:	4602      	movmi	r2, r0
 8002820:	1e49      	subs	r1, r1, #1
 8002822:	f100 0c01 	add.w	ip, r0, #1
 8002826:	f107 0710 	add.w	r7, r7, #16
 800282a:	d1cd      	bne.n	80027c8 <nl_func_hardmax_array_f32+0x60>
 800282c:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8002830:	4672      	mov	r2, lr
 8002832:	42a2      	cmp	r2, r4
 8002834:	ed80 0a00 	vstr	s0, [r0]
 8002838:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800283c:	d3a4      	bcc.n	8002788 <nl_func_hardmax_array_f32+0x20>
 800283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002844 <nl_func_relu_array_f32>:
 8002844:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002848:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800284c:	1f1b      	subs	r3, r3, #4
 800284e:	1f00      	subs	r0, r0, #4
 8002850:	428b      	cmp	r3, r1
 8002852:	d30e      	bcc.n	8002872 <nl_func_relu_array_f32+0x2e>
 8002854:	ed93 0a00 	vldr	s0, [r3]
 8002858:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	bf48      	it	mi
 8002862:	ed9f 0ab9 	vldrmi	s0, [pc, #740]	; 8002b48 <.text_25>
 8002866:	ed80 0a00 	vstr	s0, [r0]
 800286a:	1f1b      	subs	r3, r3, #4
 800286c:	1f00      	subs	r0, r0, #4
 800286e:	428b      	cmp	r3, r1
 8002870:	d2f0      	bcs.n	8002854 <nl_func_relu_array_f32+0x10>
 8002872:	4770      	bx	lr

08002874 <.text_16>:
 8002874:	3f800001 	.word	0x3f800001

08002878 <.text_17>:
 8002878:	3e4ccccd 	.word	0x3e4ccccd

0800287c <nl_func_relu_generic_array_f32>:
 800287c:	ed93 0a00 	vldr	s0, [r3]
 8002880:	edd3 0a01 	vldr	s1, [r3, #4]
 8002884:	ed93 1a02 	vldr	s2, [r3, #8]
 8002888:	1f00      	subs	r0, r0, #4
 800288a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800288e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002892:	1f0b      	subs	r3, r1, #4
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800289c:	d52a      	bpl.n	80028f4 <nl_func_relu_generic_array_f32+0x78>
 800289e:	eef5 0a40 	vcmp.f32	s1, #0.0
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	d013      	beq.n	80028d0 <nl_func_relu_generic_array_f32+0x54>
 80028a8:	428a      	cmp	r2, r1
 80028aa:	d310      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028ac:	ed92 1a00 	vldr	s2, [r2]
 80028b0:	eeb4 1a40 	vcmp.f32	s2, s0
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	bf44      	itt	mi
 80028ba:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80028be:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80028c2:	ed80 1a00 	vstr	s2, [r0]
 80028c6:	1f12      	subs	r2, r2, #4
 80028c8:	1f00      	subs	r0, r0, #4
 80028ca:	428a      	cmp	r2, r1
 80028cc:	d2ee      	bcs.n	80028ac <nl_func_relu_generic_array_f32+0x30>
 80028ce:	4770      	bx	lr
 80028d0:	428a      	cmp	r2, r1
 80028d2:	d3fc      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028d4:	edd2 0a00 	vldr	s1, [r2]
 80028d8:	eef4 0a40 	vcmp.f32	s1, s0
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	bf48      	it	mi
 80028e2:	eddf 0a99 	vldrmi	s1, [pc, #612]	; 8002b48 <.text_25>
 80028e6:	edc0 0a00 	vstr	s1, [r0]
 80028ea:	1f12      	subs	r2, r2, #4
 80028ec:	1f00      	subs	r0, r0, #4
 80028ee:	428a      	cmp	r2, r1
 80028f0:	d2f0      	bcs.n	80028d4 <nl_func_relu_generic_array_f32+0x58>
 80028f2:	4770      	bx	lr
 80028f4:	428a      	cmp	r2, r1
 80028f6:	d3ea      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028f8:	edd2 1a00 	vldr	s3, [r2]
 80028fc:	eef4 1a41 	vcmp.f32	s3, s2
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d50a      	bpl.n	800291c <nl_func_relu_generic_array_f32+0xa0>
 8002906:	eef4 1a40 	vcmp.f32	s3, s0
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	d507      	bpl.n	8002920 <nl_func_relu_generic_array_f32+0xa4>
 8002910:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8002914:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8002918:	e002      	b.n	8002920 <nl_func_relu_generic_array_f32+0xa4>
 800291a:	bf00      	nop
 800291c:	eef0 1a41 	vmov.f32	s3, s2
 8002920:	edc0 1a00 	vstr	s3, [r0]
 8002924:	1f12      	subs	r2, r2, #4
 8002926:	1f00      	subs	r0, r0, #4
 8002928:	428a      	cmp	r2, r1
 800292a:	d2e5      	bcs.n	80028f8 <nl_func_relu_generic_array_f32+0x7c>
 800292c:	4770      	bx	lr
	...

08002930 <nl_func_relu_thresholded_array_f32>:
 8002930:	ed93 0a00 	vldr	s0, [r3]
 8002934:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002938:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800293c:	1f1b      	subs	r3, r3, #4
 800293e:	1f00      	subs	r0, r0, #4
 8002940:	428b      	cmp	r3, r1
 8002942:	d30e      	bcc.n	8002962 <nl_func_relu_thresholded_array_f32+0x32>
 8002944:	edd3 0a00 	vldr	s1, [r3]
 8002948:	eef4 0a40 	vcmp.f32	s1, s0
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	bf48      	it	mi
 8002952:	eddf 0a7d 	vldrmi	s1, [pc, #500]	; 8002b48 <.text_25>
 8002956:	edc0 0a00 	vstr	s1, [r0]
 800295a:	1f1b      	subs	r3, r3, #4
 800295c:	1f00      	subs	r0, r0, #4
 800295e:	428b      	cmp	r3, r1
 8002960:	d2f0      	bcs.n	8002944 <nl_func_relu_thresholded_array_f32+0x14>
 8002962:	4770      	bx	lr

08002964 <nl_func_elu_array_f32>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	460c      	mov	r4, r1
 8002968:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800296c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002970:	1f0d      	subs	r5, r1, #4
 8002972:	1f06      	subs	r6, r0, #4
 8002974:	ed2d 8b04 	vpush	{d8-d9}
 8002978:	42a5      	cmp	r5, r4
 800297a:	ed93 8a00 	vldr	s16, [r3]
 800297e:	d32f      	bcc.n	80029e0 <nl_func_elu_array_f32+0x7c>
 8002980:	edd5 8a00 	vldr	s17, [r5]
 8002984:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	bf4c      	ite	mi
 800298e:	ed9f 9a6e 	vldrmi	s18, [pc, #440]	; 8002b48 <.text_25>
 8002992:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002996:	eeb0 0a68 	vmov.f32	s0, s17
 800299a:	f009 ffb5 	bl	800c908 <expf>
 800299e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029a2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80029aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	dd05      	ble.n	80029c0 <nl_func_elu_array_f32+0x5c>
 80029b4:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002b48 <.text_25>
 80029b8:	ee39 9a01 	vadd.f32	s18, s18, s2
 80029bc:	e00a      	b.n	80029d4 <nl_func_elu_array_f32+0x70>
 80029be:	bf00      	nop
 80029c0:	eeb0 0a68 	vmov.f32	s0, s17
 80029c4:	f009 ffa0 	bl	800c908 <expf>
 80029c8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029cc:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029d0:	ee00 9a08 	vmla.f32	s18, s0, s16
 80029d4:	ed86 9a00 	vstr	s18, [r6]
 80029d8:	1f2d      	subs	r5, r5, #4
 80029da:	1f36      	subs	r6, r6, #4
 80029dc:	42a5      	cmp	r5, r4
 80029de:	d2cf      	bcs.n	8002980 <nl_func_elu_array_f32+0x1c>
 80029e0:	ecbd 8b04 	vpop	{d8-d9}
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029e8 <.text_21>:
 80029e8:	00000001 	.word	0x00000001

080029ec <nl_func_selu_array_f32>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	460c      	mov	r4, r1
 80029f0:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80029f8:	1f0d      	subs	r5, r1, #4
 80029fa:	1f06      	subs	r6, r0, #4
 80029fc:	ed2d 8b04 	vpush	{d8-d9}
 8002a00:	42a5      	cmp	r5, r4
 8002a02:	ed93 8a00 	vldr	s16, [r3]
 8002a06:	edd3 8a01 	vldr	s17, [r3, #4]
 8002a0a:	d331      	bcc.n	8002a70 <nl_func_selu_array_f32+0x84>
 8002a0c:	ed95 9a00 	vldr	s18, [r5]
 8002a10:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	bf4c      	ite	mi
 8002a1a:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8002b48 <.text_25>
 8002a1e:	eef0 9a49 	vmovpl.f32	s19, s18
 8002a22:	eeb0 0a49 	vmov.f32	s0, s18
 8002a26:	f009 ff6f 	bl	800c908 <expf>
 8002a2a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a2e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a32:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002a36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	dd05      	ble.n	8002a4c <nl_func_selu_array_f32+0x60>
 8002a40:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002b48 <.text_25>
 8002a44:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002a48:	e00a      	b.n	8002a60 <nl_func_selu_array_f32+0x74>
 8002a4a:	bf00      	nop
 8002a4c:	eeb0 0a49 	vmov.f32	s0, s18
 8002a50:	f009 ff5a 	bl	800c908 <expf>
 8002a54:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a58:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a5c:	ee40 9a08 	vmla.f32	s19, s0, s16
 8002a60:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8002a64:	ed86 0a00 	vstr	s0, [r6]
 8002a68:	1f2d      	subs	r5, r5, #4
 8002a6a:	1f36      	subs	r6, r6, #4
 8002a6c:	42a5      	cmp	r5, r4
 8002a6e:	d2cd      	bcs.n	8002a0c <nl_func_selu_array_f32+0x20>
 8002a70:	ecbd 8b04 	vpop	{d8-d9}
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a78 <nl_func_prelu_array_f32>:
 8002a78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002a7c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8002a80:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002a84:	1f1b      	subs	r3, r3, #4
 8002a86:	f1ac 0c04 	sub.w	ip, ip, #4
 8002a8a:	1f00      	subs	r0, r0, #4
 8002a8c:	458c      	cmp	ip, r1
 8002a8e:	d320      	bcc.n	8002ad2 <nl_func_prelu_array_f32+0x5a>
 8002a90:	ed9c 0a00 	vldr	s0, [ip]
 8002a94:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	bf4c      	ite	mi
 8002a9e:	eddf 0a2a 	vldrmi	s1, [pc, #168]	; 8002b48 <.text_25>
 8002aa2:	eef0 0a40 	vmovpl.f32	s1, s0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	eeb1 0a40 	vneg.f32	s0, s0
 8002aac:	1f13      	subs	r3, r2, #4
 8002aae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	bf48      	it	mi
 8002ab8:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8002b48 <.text_25>
 8002abc:	ed92 1a00 	vldr	s2, [r2]
 8002ac0:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002ac4:	edc0 0a00 	vstr	s1, [r0]
 8002ac8:	f1ac 0c04 	sub.w	ip, ip, #4
 8002acc:	1f00      	subs	r0, r0, #4
 8002ace:	458c      	cmp	ip, r1
 8002ad0:	d2de      	bcs.n	8002a90 <nl_func_prelu_array_f32+0x18>
 8002ad2:	4770      	bx	lr

08002ad4 <forward_relu>:
 8002ad4:	b430      	push	{r4, r5}
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6950      	ldr	r0, [r2, #20]
 8002ada:	6800      	ldr	r0, [r0, #0]
 8002adc:	6801      	ldr	r1, [r0, #0]
 8002ade:	68c0      	ldr	r0, [r0, #12]
 8002ae0:	680b      	ldr	r3, [r1, #0]
 8002ae2:	6805      	ldr	r5, [r0, #0]
 8002ae4:	685c      	ldr	r4, [r3, #4]
 8002ae6:	6898      	ldr	r0, [r3, #8]
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	682d      	ldr	r5, [r5, #0]
 8002aec:	6992      	ldr	r2, [r2, #24]
 8002aee:	4344      	muls	r4, r0
 8002af0:	6918      	ldr	r0, [r3, #16]
 8002af2:	434c      	muls	r4, r1
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	6889      	ldr	r1, [r1, #8]
 8002af8:	4344      	muls	r4, r0
 8002afa:	68a8      	ldr	r0, [r5, #8]
 8002afc:	b9ca      	cbnz	r2, 8002b32 <forward_relu+0x5e>
 8002afe:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8002b02:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002b06:	1f12      	subs	r2, r2, #4
 8002b08:	1f00      	subs	r0, r0, #4
 8002b0a:	428a      	cmp	r2, r1
 8002b0c:	f0c0 801a 	bcc.w	8002b44 <forward_relu+0x70>
 8002b10:	ed92 0a00 	vldr	s0, [r2]
 8002b14:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	bf48      	it	mi
 8002b1e:	ed9f 0a0a 	vldrmi	s0, [pc, #40]	; 8002b48 <.text_25>
 8002b22:	ed80 0a00 	vstr	s0, [r0]
 8002b26:	1f12      	subs	r2, r2, #4
 8002b28:	1f00      	subs	r0, r0, #4
 8002b2a:	428a      	cmp	r2, r1
 8002b2c:	d2f0      	bcs.n	8002b10 <forward_relu+0x3c>
 8002b2e:	bc30      	pop	{r4, r5}
 8002b30:	4770      	bx	lr
 8002b32:	6893      	ldr	r3, [r2, #8]
 8002b34:	6852      	ldr	r2, [r2, #4]
 8002b36:	2a01      	cmp	r2, #1
 8002b38:	4622      	mov	r2, r4
 8002b3a:	d101      	bne.n	8002b40 <forward_relu+0x6c>
 8002b3c:	bc30      	pop	{r4, r5}
 8002b3e:	e6f7      	b.n	8002930 <nl_func_relu_thresholded_array_f32>
 8002b40:	bc30      	pop	{r4, r5}
 8002b42:	e69b      	b.n	800287c <nl_func_relu_generic_array_f32>
 8002b44:	bc30      	pop	{r4, r5}
 8002b46:	4770      	bx	lr

08002b48 <.text_25>:
 8002b48:	00000000 	.word	0x00000000

08002b4c <forward_relu_thresholded>:
 8002b4c:	b430      	push	{r4, r5}
 8002b4e:	6941      	ldr	r1, [r0, #20]
 8002b50:	6980      	ldr	r0, [r0, #24]
 8002b52:	680c      	ldr	r4, [r1, #0]
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	6815      	ldr	r5, [r2, #0]
 8002b58:	686b      	ldr	r3, [r5, #4]
 8002b5a:	68a9      	ldr	r1, [r5, #8]
 8002b5c:	68ea      	ldr	r2, [r5, #12]
 8002b5e:	434b      	muls	r3, r1
 8002b60:	6929      	ldr	r1, [r5, #16]
 8002b62:	682d      	ldr	r5, [r5, #0]
 8002b64:	4353      	muls	r3, r2
 8002b66:	6882      	ldr	r2, [r0, #8]
 8002b68:	ed92 0a00 	vldr	s0, [r2]
 8002b6c:	68e2      	ldr	r2, [r4, #12]
 8002b6e:	6814      	ldr	r4, [r2, #0]
 8002b70:	434b      	muls	r3, r1
 8002b72:	68a9      	ldr	r1, [r5, #8]
 8002b74:	6825      	ldr	r5, [r4, #0]
 8002b76:	68aa      	ldr	r2, [r5, #8]
 8002b78:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b80:	1f00      	subs	r0, r0, #4
 8002b82:	1f1a      	subs	r2, r3, #4
 8002b84:	4288      	cmp	r0, r1
 8002b86:	d30e      	bcc.n	8002ba6 <forward_relu_thresholded+0x5a>
 8002b88:	edd0 0a00 	vldr	s1, [r0]
 8002b8c:	eef4 0a40 	vcmp.f32	s1, s0
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	bf48      	it	mi
 8002b96:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8002e9c <.text_34>
 8002b9a:	edc2 0a00 	vstr	s1, [r2]
 8002b9e:	1f00      	subs	r0, r0, #4
 8002ba0:	1f12      	subs	r2, r2, #4
 8002ba2:	4288      	cmp	r0, r1
 8002ba4:	d2f0      	bcs.n	8002b88 <forward_relu_thresholded+0x3c>
 8002ba6:	bc30      	pop	{r4, r5}
 8002ba8:	4770      	bx	lr
	...

08002bac <forward_elu>:
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	ed2d 8b04 	vpush	{d8-d9}
 8002bb2:	6941      	ldr	r1, [r0, #20]
 8002bb4:	680e      	ldr	r6, [r1, #0]
 8002bb6:	6832      	ldr	r2, [r6, #0]
 8002bb8:	6814      	ldr	r4, [r2, #0]
 8002bba:	6863      	ldr	r3, [r4, #4]
 8002bbc:	68a1      	ldr	r1, [r4, #8]
 8002bbe:	68e2      	ldr	r2, [r4, #12]
 8002bc0:	6980      	ldr	r0, [r0, #24]
 8002bc2:	434b      	muls	r3, r1
 8002bc4:	6921      	ldr	r1, [r4, #16]
 8002bc6:	6824      	ldr	r4, [r4, #0]
 8002bc8:	68a4      	ldr	r4, [r4, #8]
 8002bca:	4353      	muls	r3, r2
 8002bcc:	434b      	muls	r3, r1
 8002bce:	6881      	ldr	r1, [r0, #8]
 8002bd0:	ed91 8a00 	vldr	s16, [r1]
 8002bd4:	68f1      	ldr	r1, [r6, #12]
 8002bd6:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8002bda:	1f05      	subs	r5, r0, #4
 8002bdc:	6808      	ldr	r0, [r1, #0]
 8002bde:	6802      	ldr	r2, [r0, #0]
 8002be0:	6891      	ldr	r1, [r2, #8]
 8002be2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002be6:	1f06      	subs	r6, r0, #4
 8002be8:	42a5      	cmp	r5, r4
 8002bea:	d32f      	bcc.n	8002c4c <forward_elu+0xa0>
 8002bec:	edd5 8a00 	vldr	s17, [r5]
 8002bf0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	bf4c      	ite	mi
 8002bfa:	ed9f 9aa8 	vldrmi	s18, [pc, #672]	; 8002e9c <.text_34>
 8002bfe:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002c02:	eeb0 0a68 	vmov.f32	s0, s17
 8002c06:	f009 fe7f 	bl	800c908 <expf>
 8002c0a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c0e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c12:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002c16:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	dd05      	ble.n	8002c2c <forward_elu+0x80>
 8002c20:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8002e9c <.text_34>
 8002c24:	ee39 9a01 	vadd.f32	s18, s18, s2
 8002c28:	e00a      	b.n	8002c40 <forward_elu+0x94>
 8002c2a:	bf00      	nop
 8002c2c:	eeb0 0a68 	vmov.f32	s0, s17
 8002c30:	f009 fe6a 	bl	800c908 <expf>
 8002c34:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c38:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c3c:	ee00 9a08 	vmla.f32	s18, s0, s16
 8002c40:	ed86 9a00 	vstr	s18, [r6]
 8002c44:	1f2d      	subs	r5, r5, #4
 8002c46:	1f36      	subs	r6, r6, #4
 8002c48:	42a5      	cmp	r5, r4
 8002c4a:	d2cf      	bcs.n	8002bec <forward_elu+0x40>
 8002c4c:	ecbd 8b04 	vpop	{d8-d9}
 8002c50:	bd70      	pop	{r4, r5, r6, pc}

08002c52 <forward_selu>:
 8002c52:	b430      	push	{r4, r5}
 8002c54:	6941      	ldr	r1, [r0, #20]
 8002c56:	680c      	ldr	r4, [r1, #0]
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	6980      	ldr	r0, [r0, #24]
 8002c5c:	6815      	ldr	r5, [r2, #0]
 8002c5e:	6883      	ldr	r3, [r0, #8]
 8002c60:	686a      	ldr	r2, [r5, #4]
 8002c62:	68a8      	ldr	r0, [r5, #8]
 8002c64:	68e9      	ldr	r1, [r5, #12]
 8002c66:	4342      	muls	r2, r0
 8002c68:	6928      	ldr	r0, [r5, #16]
 8002c6a:	682d      	ldr	r5, [r5, #0]
 8002c6c:	434a      	muls	r2, r1
 8002c6e:	4342      	muls	r2, r0
 8002c70:	68e0      	ldr	r0, [r4, #12]
 8002c72:	6804      	ldr	r4, [r0, #0]
 8002c74:	68a9      	ldr	r1, [r5, #8]
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	68a8      	ldr	r0, [r5, #8]
 8002c7a:	bc30      	pop	{r4, r5}
 8002c7c:	e6b6      	b.n	80029ec <nl_func_selu_array_f32>

08002c7e <forward_prelu>:
 8002c7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c82:	b081      	sub	sp, #4
 8002c84:	6940      	ldr	r0, [r0, #20]
 8002c86:	6800      	ldr	r0, [r0, #0]
 8002c88:	6801      	ldr	r1, [r0, #0]
 8002c8a:	68c2      	ldr	r2, [r0, #12]
 8002c8c:	6980      	ldr	r0, [r0, #24]
 8002c8e:	6804      	ldr	r4, [r0, #0]
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	680d      	ldr	r5, [r1, #0]
 8002c94:	6817      	ldr	r7, [r2, #0]
 8002c96:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8002c9a:	b12c      	cbz	r4, 8002ca8 <forward_prelu+0x2a>
 8002c9c:	6841      	ldr	r1, [r0, #4]
 8002c9e:	6800      	ldr	r0, [r0, #0]
 8002ca0:	f000 fd32 	bl	8003708 <ai_array_get_byte_size>
 8002ca4:	4681      	mov	r9, r0
 8002ca6:	e001      	b.n	8002cac <forward_prelu+0x2e>
 8002ca8:	f04f 0901 	mov.w	r9, #1
 8002cac:	6828      	ldr	r0, [r5, #0]
 8002cae:	6841      	ldr	r1, [r0, #4]
 8002cb0:	6800      	ldr	r0, [r0, #0]
 8002cb2:	f000 fd29 	bl	8003708 <ai_array_get_byte_size>
 8002cb6:	6829      	ldr	r1, [r5, #0]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	688e      	ldr	r6, [r1, #8]
 8002cbc:	6895      	ldr	r5, [r2, #8]
 8002cbe:	1837      	adds	r7, r6, r0
 8002cc0:	42be      	cmp	r6, r7
 8002cc2:	d20f      	bcs.n	8002ce4 <forward_prelu+0x66>
 8002cc4:	6862      	ldr	r2, [r4, #4]
 8002cc6:	68a0      	ldr	r0, [r4, #8]
 8002cc8:	68e1      	ldr	r1, [r4, #12]
 8002cca:	4342      	muls	r2, r0
 8002ccc:	6920      	ldr	r0, [r4, #16]
 8002cce:	434a      	muls	r2, r1
 8002cd0:	4342      	muls	r2, r0
 8002cd2:	4643      	mov	r3, r8
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f7ff fece 	bl	8002a78 <nl_func_prelu_array_f32>
 8002cdc:	444e      	add	r6, r9
 8002cde:	42be      	cmp	r6, r7
 8002ce0:	444d      	add	r5, r9
 8002ce2:	d3ef      	bcc.n	8002cc4 <forward_prelu+0x46>
 8002ce4:	b001      	add	sp, #4
 8002ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002cec <forward_sign>:
 8002cec:	b430      	push	{r4, r5}
 8002cee:	6940      	ldr	r0, [r0, #20]
 8002cf0:	6802      	ldr	r2, [r0, #0]
 8002cf2:	6811      	ldr	r1, [r2, #0]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	680b      	ldr	r3, [r1, #0]
 8002cf8:	685c      	ldr	r4, [r3, #4]
 8002cfa:	6898      	ldr	r0, [r3, #8]
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	4344      	muls	r4, r0
 8002d00:	6918      	ldr	r0, [r3, #16]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	434c      	muls	r4, r1
 8002d06:	4344      	muls	r4, r0
 8002d08:	6898      	ldr	r0, [r3, #8]
 8002d0a:	6813      	ldr	r3, [r2, #0]
 8002d0c:	681d      	ldr	r5, [r3, #0]
 8002d0e:	68aa      	ldr	r2, [r5, #8]
 8002d10:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002d14:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002d18:	1f09      	subs	r1, r1, #4
 8002d1a:	1f1a      	subs	r2, r3, #4
 8002d1c:	4281      	cmp	r1, r0
 8002d1e:	d314      	bcc.n	8002d4a <forward_sign+0x5e>
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	ed91 0a00 	vldr	s0, [r1]
 8002d28:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	bfcc      	ite	gt
 8002d32:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 8002ea0 <.text_35>
 8002d36:	ee00 3a10 	vmovle	s0, r3
 8002d3a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d3e:	ed82 0a00 	vstr	s0, [r2]
 8002d42:	1f09      	subs	r1, r1, #4
 8002d44:	1f12      	subs	r2, r2, #4
 8002d46:	4281      	cmp	r1, r0
 8002d48:	d2ec      	bcs.n	8002d24 <forward_sign+0x38>
 8002d4a:	bc30      	pop	{r4, r5}
 8002d4c:	4770      	bx	lr
	...

08002d50 <forward_clip>:
 8002d50:	b430      	push	{r4, r5}
 8002d52:	6941      	ldr	r1, [r0, #20]
 8002d54:	680c      	ldr	r4, [r1, #0]
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	6815      	ldr	r5, [r2, #0]
 8002d5a:	686b      	ldr	r3, [r5, #4]
 8002d5c:	68a9      	ldr	r1, [r5, #8]
 8002d5e:	68ea      	ldr	r2, [r5, #12]
 8002d60:	6980      	ldr	r0, [r0, #24]
 8002d62:	434b      	muls	r3, r1
 8002d64:	6929      	ldr	r1, [r5, #16]
 8002d66:	4353      	muls	r3, r2
 8002d68:	434b      	muls	r3, r1
 8002d6a:	682a      	ldr	r2, [r5, #0]
 8002d6c:	6881      	ldr	r1, [r0, #8]
 8002d6e:	6890      	ldr	r0, [r2, #8]
 8002d70:	68e2      	ldr	r2, [r4, #12]
 8002d72:	ed91 0a00 	vldr	s0, [r1]
 8002d76:	6814      	ldr	r4, [r2, #0]
 8002d78:	edd1 0a01 	vldr	s1, [r1, #4]
 8002d7c:	6825      	ldr	r5, [r4, #0]
 8002d7e:	68aa      	ldr	r2, [r5, #8]
 8002d80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8002d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d88:	1f09      	subs	r1, r1, #4
 8002d8a:	1f1a      	subs	r2, r3, #4
 8002d8c:	4281      	cmp	r1, r0
 8002d8e:	d315      	bcc.n	8002dbc <forward_clip+0x6c>
 8002d90:	ed91 1a00 	vldr	s2, [r1]
 8002d94:	eeb4 0a41 	vcmp.f32	s0, s2
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	bf58      	it	pl
 8002d9e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002da2:	eeb4 1a60 	vcmp.f32	s2, s1
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	bf58      	it	pl
 8002dac:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002db0:	ed82 1a00 	vstr	s2, [r2]
 8002db4:	1f09      	subs	r1, r1, #4
 8002db6:	1f12      	subs	r2, r2, #4
 8002db8:	4281      	cmp	r1, r0
 8002dba:	d2e9      	bcs.n	8002d90 <forward_clip+0x40>
 8002dbc:	bc30      	pop	{r4, r5}
 8002dbe:	4770      	bx	lr

08002dc0 <forward_sigmoid>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	6940      	ldr	r0, [r0, #20]
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	6811      	ldr	r1, [r2, #0]
 8002dc8:	680b      	ldr	r3, [r1, #0]
 8002dca:	685e      	ldr	r6, [r3, #4]
 8002dcc:	6898      	ldr	r0, [r3, #8]
 8002dce:	68d9      	ldr	r1, [r3, #12]
 8002dd0:	4346      	muls	r6, r0
 8002dd2:	6918      	ldr	r0, [r3, #16]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689c      	ldr	r4, [r3, #8]
 8002dd8:	434e      	muls	r6, r1
 8002dda:	4346      	muls	r6, r0
 8002ddc:	68d1      	ldr	r1, [r2, #12]
 8002dde:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002de2:	1f05      	subs	r5, r0, #4
 8002de4:	6808      	ldr	r0, [r1, #0]
 8002de6:	6802      	ldr	r2, [r0, #0]
 8002de8:	6891      	ldr	r1, [r2, #8]
 8002dea:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002dee:	1f06      	subs	r6, r0, #4
 8002df0:	42a5      	cmp	r5, r4
 8002df2:	d313      	bcc.n	8002e1c <forward_sigmoid+0x5c>
 8002df4:	ed95 0a00 	vldr	s0, [r5]
 8002df8:	eeb1 0a40 	vneg.f32	s0, s0
 8002dfc:	f009 fd84 	bl	800c908 <expf>
 8002e00:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002e04:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002e08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e0c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002e10:	ed86 0a00 	vstr	s0, [r6]
 8002e14:	1f2d      	subs	r5, r5, #4
 8002e16:	1f36      	subs	r6, r6, #4
 8002e18:	42a5      	cmp	r5, r4
 8002e1a:	d2eb      	bcs.n	8002df4 <forward_sigmoid+0x34>
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e20 <forward_hard_sigmoid>:
 8002e20:	b430      	push	{r4, r5}
 8002e22:	6940      	ldr	r0, [r0, #20]
 8002e24:	6802      	ldr	r2, [r0, #0]
 8002e26:	6811      	ldr	r1, [r2, #0]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	680b      	ldr	r3, [r1, #0]
 8002e2c:	685c      	ldr	r4, [r3, #4]
 8002e2e:	6898      	ldr	r0, [r3, #8]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	4344      	muls	r4, r0
 8002e34:	6918      	ldr	r0, [r3, #16]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	434c      	muls	r4, r1
 8002e3a:	4344      	muls	r4, r0
 8002e3c:	6898      	ldr	r0, [r3, #8]
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	681d      	ldr	r5, [r3, #0]
 8002e42:	68aa      	ldr	r2, [r5, #8]
 8002e44:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002e48:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002e4c:	1f09      	subs	r1, r1, #4
 8002e4e:	1f1a      	subs	r2, r3, #4
 8002e50:	4281      	cmp	r1, r0
 8002e52:	d321      	bcc.n	8002e98 <forward_hard_sigmoid+0x78>
 8002e54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e58:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002ea4 <.text_36>
 8002e5c:	edd1 1a00 	vldr	s3, [r1]
 8002e60:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8002ea8 <.text_37>
 8002e64:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002e68:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002e6c:	eeb4 1a60 	vcmp.f32	s2, s1
 8002e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e74:	da08      	bge.n	8002e88 <forward_hard_sigmoid+0x68>
 8002e76:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	d505      	bpl.n	8002e8c <forward_hard_sigmoid+0x6c>
 8002e80:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8002e9c <.text_34>
 8002e84:	e002      	b.n	8002e8c <forward_hard_sigmoid+0x6c>
 8002e86:	bf00      	nop
 8002e88:	eeb0 1a40 	vmov.f32	s2, s0
 8002e8c:	ed82 1a00 	vstr	s2, [r2]
 8002e90:	1f09      	subs	r1, r1, #4
 8002e92:	1f12      	subs	r2, r2, #4
 8002e94:	4281      	cmp	r1, r0
 8002e96:	d2e1      	bcs.n	8002e5c <forward_hard_sigmoid+0x3c>
 8002e98:	bc30      	pop	{r4, r5}
 8002e9a:	4770      	bx	lr

08002e9c <.text_34>:
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <.text_35>:
 8002ea0:	00000001 	.word	0x00000001

08002ea4 <.text_36>:
 8002ea4:	3f800001 	.word	0x3f800001

08002ea8 <.text_37>:
 8002ea8:	3e4ccccd 	.word	0x3e4ccccd

08002eac <forward_exp>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	6940      	ldr	r0, [r0, #20]
 8002eb0:	6802      	ldr	r2, [r0, #0]
 8002eb2:	6811      	ldr	r1, [r2, #0]
 8002eb4:	680b      	ldr	r3, [r1, #0]
 8002eb6:	685e      	ldr	r6, [r3, #4]
 8002eb8:	6898      	ldr	r0, [r3, #8]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	4346      	muls	r6, r0
 8002ebe:	6918      	ldr	r0, [r3, #16]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689c      	ldr	r4, [r3, #8]
 8002ec4:	434e      	muls	r6, r1
 8002ec6:	4346      	muls	r6, r0
 8002ec8:	68d1      	ldr	r1, [r2, #12]
 8002eca:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002ece:	1f05      	subs	r5, r0, #4
 8002ed0:	6808      	ldr	r0, [r1, #0]
 8002ed2:	6802      	ldr	r2, [r0, #0]
 8002ed4:	6891      	ldr	r1, [r2, #8]
 8002ed6:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002eda:	1f06      	subs	r6, r0, #4
 8002edc:	42a5      	cmp	r5, r4
 8002ede:	d309      	bcc.n	8002ef4 <forward_exp+0x48>
 8002ee0:	ed95 0a00 	vldr	s0, [r5]
 8002ee4:	f009 fd10 	bl	800c908 <expf>
 8002ee8:	ed86 0a00 	vstr	s0, [r6]
 8002eec:	1f2d      	subs	r5, r5, #4
 8002eee:	1f36      	subs	r6, r6, #4
 8002ef0:	42a5      	cmp	r5, r4
 8002ef2:	d2f5      	bcs.n	8002ee0 <forward_exp+0x34>
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ef8 <forward_sqrt>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	6940      	ldr	r0, [r0, #20]
 8002efc:	6802      	ldr	r2, [r0, #0]
 8002efe:	6811      	ldr	r1, [r2, #0]
 8002f00:	680b      	ldr	r3, [r1, #0]
 8002f02:	685e      	ldr	r6, [r3, #4]
 8002f04:	6898      	ldr	r0, [r3, #8]
 8002f06:	68d9      	ldr	r1, [r3, #12]
 8002f08:	4346      	muls	r6, r0
 8002f0a:	6918      	ldr	r0, [r3, #16]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689c      	ldr	r4, [r3, #8]
 8002f10:	434e      	muls	r6, r1
 8002f12:	4346      	muls	r6, r0
 8002f14:	68d1      	ldr	r1, [r2, #12]
 8002f16:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f1a:	1f05      	subs	r5, r0, #4
 8002f1c:	6808      	ldr	r0, [r1, #0]
 8002f1e:	6802      	ldr	r2, [r0, #0]
 8002f20:	6891      	ldr	r1, [r2, #8]
 8002f22:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f26:	1f06      	subs	r6, r0, #4
 8002f28:	42a5      	cmp	r5, r4
 8002f2a:	d309      	bcc.n	8002f40 <forward_sqrt+0x48>
 8002f2c:	ed95 0a00 	vldr	s0, [r5]
 8002f30:	f000 fd40 	bl	80039b4 <ai_math_sqrt>
 8002f34:	ed86 0a00 	vstr	s0, [r6]
 8002f38:	1f2d      	subs	r5, r5, #4
 8002f3a:	1f36      	subs	r6, r6, #4
 8002f3c:	42a5      	cmp	r5, r4
 8002f3e:	d2f5      	bcs.n	8002f2c <forward_sqrt+0x34>
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f44 <forward_soft_plus>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	6940      	ldr	r0, [r0, #20]
 8002f48:	6802      	ldr	r2, [r0, #0]
 8002f4a:	6811      	ldr	r1, [r2, #0]
 8002f4c:	680b      	ldr	r3, [r1, #0]
 8002f4e:	685e      	ldr	r6, [r3, #4]
 8002f50:	6898      	ldr	r0, [r3, #8]
 8002f52:	68d9      	ldr	r1, [r3, #12]
 8002f54:	4346      	muls	r6, r0
 8002f56:	6918      	ldr	r0, [r3, #16]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689c      	ldr	r4, [r3, #8]
 8002f5c:	434e      	muls	r6, r1
 8002f5e:	4346      	muls	r6, r0
 8002f60:	68d1      	ldr	r1, [r2, #12]
 8002f62:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f66:	1f05      	subs	r5, r0, #4
 8002f68:	6808      	ldr	r0, [r1, #0]
 8002f6a:	6802      	ldr	r2, [r0, #0]
 8002f6c:	6891      	ldr	r1, [r2, #8]
 8002f6e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f72:	1f06      	subs	r6, r0, #4
 8002f74:	42a5      	cmp	r5, r4
 8002f76:	d30f      	bcc.n	8002f98 <forward_soft_plus+0x54>
 8002f78:	ed95 0a00 	vldr	s0, [r5]
 8002f7c:	f009 fcc4 	bl	800c908 <expf>
 8002f80:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f84:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002f88:	f009 fd38 	bl	800c9fc <logf>
 8002f8c:	ed86 0a00 	vstr	s0, [r6]
 8002f90:	1f2d      	subs	r5, r5, #4
 8002f92:	1f36      	subs	r6, r6, #4
 8002f94:	42a5      	cmp	r5, r4
 8002f96:	d2ef      	bcs.n	8002f78 <forward_soft_plus+0x34>
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f9c <forward_soft_sign>:
 8002f9c:	b430      	push	{r4, r5}
 8002f9e:	6940      	ldr	r0, [r0, #20]
 8002fa0:	6802      	ldr	r2, [r0, #0]
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	680b      	ldr	r3, [r1, #0]
 8002fa8:	685c      	ldr	r4, [r3, #4]
 8002faa:	6898      	ldr	r0, [r3, #8]
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	4344      	muls	r4, r0
 8002fb0:	6918      	ldr	r0, [r3, #16]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	434c      	muls	r4, r1
 8002fb6:	4344      	muls	r4, r0
 8002fb8:	6898      	ldr	r0, [r3, #8]
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	681d      	ldr	r5, [r3, #0]
 8002fbe:	68aa      	ldr	r2, [r5, #8]
 8002fc0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002fc4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002fc8:	1f09      	subs	r1, r1, #4
 8002fca:	1f1a      	subs	r2, r3, #4
 8002fcc:	4281      	cmp	r1, r0
 8002fce:	d30f      	bcc.n	8002ff0 <forward_soft_sign+0x54>
 8002fd0:	ed91 0a00 	vldr	s0, [r1]
 8002fd4:	eef0 0ac0 	vabs.f32	s1, s0
 8002fd8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fdc:	ee70 0a81 	vadd.f32	s1, s1, s2
 8002fe0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002fe4:	ed82 0a00 	vstr	s0, [r2]
 8002fe8:	1f09      	subs	r1, r1, #4
 8002fea:	1f12      	subs	r2, r2, #4
 8002fec:	4281      	cmp	r1, r0
 8002fee:	d2ef      	bcs.n	8002fd0 <forward_soft_sign+0x34>
 8002ff0:	bc30      	pop	{r4, r5}
 8002ff2:	4770      	bx	lr

08002ff4 <forward_tanh>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	6940      	ldr	r0, [r0, #20]
 8002ff8:	6802      	ldr	r2, [r0, #0]
 8002ffa:	6811      	ldr	r1, [r2, #0]
 8002ffc:	680b      	ldr	r3, [r1, #0]
 8002ffe:	685e      	ldr	r6, [r3, #4]
 8003000:	6898      	ldr	r0, [r3, #8]
 8003002:	68d9      	ldr	r1, [r3, #12]
 8003004:	4346      	muls	r6, r0
 8003006:	6918      	ldr	r0, [r3, #16]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689c      	ldr	r4, [r3, #8]
 800300c:	434e      	muls	r6, r1
 800300e:	4346      	muls	r6, r0
 8003010:	68d1      	ldr	r1, [r2, #12]
 8003012:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003016:	1f05      	subs	r5, r0, #4
 8003018:	6808      	ldr	r0, [r1, #0]
 800301a:	6802      	ldr	r2, [r0, #0]
 800301c:	6891      	ldr	r1, [r2, #8]
 800301e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003022:	1f06      	subs	r6, r0, #4
 8003024:	42a5      	cmp	r5, r4
 8003026:	d309      	bcc.n	800303c <forward_tanh+0x48>
 8003028:	ed95 0a00 	vldr	s0, [r5]
 800302c:	f009 fc1a 	bl	800c864 <tanhf>
 8003030:	ed86 0a00 	vstr	s0, [r6]
 8003034:	1f2d      	subs	r5, r5, #4
 8003036:	1f36      	subs	r6, r6, #4
 8003038:	42a5      	cmp	r5, r4
 800303a:	d2f5      	bcs.n	8003028 <forward_tanh+0x34>
 800303c:	bd70      	pop	{r4, r5, r6, pc}

0800303e <forward_sm>:
 800303e:	b570      	push	{r4, r5, r6, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	6940      	ldr	r0, [r0, #20]
 8003044:	6800      	ldr	r0, [r0, #0]
 8003046:	6801      	ldr	r1, [r0, #0]
 8003048:	68c0      	ldr	r0, [r0, #12]
 800304a:	680c      	ldr	r4, [r1, #0]
 800304c:	6805      	ldr	r5, [r0, #0]
 800304e:	68a2      	ldr	r2, [r4, #8]
 8003050:	68a8      	ldr	r0, [r5, #8]
 8003052:	9001      	str	r0, [sp, #4]
 8003054:	9200      	str	r2, [sp, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	6866      	ldr	r6, [r4, #4]
 800305a:	68e1      	ldr	r1, [r4, #12]
 800305c:	6920      	ldr	r0, [r4, #16]
 800305e:	6824      	ldr	r4, [r4, #0]
 8003060:	4372      	muls	r2, r6
 8003062:	434a      	muls	r2, r1
 8003064:	4342      	muls	r2, r0
 8003066:	6828      	ldr	r0, [r5, #0]
 8003068:	68a1      	ldr	r1, [r4, #8]
 800306a:	6880      	ldr	r0, [r0, #8]
 800306c:	f7ff fa52 	bl	8002514 <nl_func_sm_array_f32>
 8003070:	b002      	add	sp, #8
 8003072:	bd70      	pop	{r4, r5, r6, pc}

08003074 <forward_hardmax>:
 8003074:	b430      	push	{r4, r5}
 8003076:	6941      	ldr	r1, [r0, #20]
 8003078:	680c      	ldr	r4, [r1, #0]
 800307a:	6980      	ldr	r0, [r0, #24]
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	6883      	ldr	r3, [r0, #8]
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	6808      	ldr	r0, [r1, #0]
 8003084:	1d0a      	adds	r2, r1, #4
 8003086:	6881      	ldr	r1, [r0, #8]
 8003088:	68e0      	ldr	r0, [r4, #12]
 800308a:	6804      	ldr	r4, [r0, #0]
 800308c:	6825      	ldr	r5, [r4, #0]
 800308e:	68a8      	ldr	r0, [r5, #8]
 8003090:	bc30      	pop	{r4, r5}
 8003092:	f7ff bb69 	b.w	8002768 <nl_func_hardmax_array_f32>
	...

08003098 <ai_array_fmt_name>:
 8003098:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800309c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80030a0:	d062      	beq.n	8003168 <ai_array_fmt_name+0xd0>
 80030a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80030a6:	1a89      	subs	r1, r1, r2
 80030a8:	f000 8094 	beq.w	80031d4 <ai_array_fmt_name+0x13c>
 80030ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b0:	1a89      	subs	r1, r1, r2
 80030b2:	d071      	beq.n	8003198 <ai_array_fmt_name+0x100>
 80030b4:	1a89      	subs	r1, r1, r2
 80030b6:	d063      	beq.n	8003180 <ai_array_fmt_name+0xe8>
 80030b8:	1fc9      	subs	r1, r1, #7
 80030ba:	f000 808e 	beq.w	80031da <ai_array_fmt_name+0x142>
 80030be:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80030c2:	1a89      	subs	r1, r1, r2
 80030c4:	d05f      	beq.n	8003186 <ai_array_fmt_name+0xee>
 80030c6:	390f      	subs	r1, #15
 80030c8:	f000 808a 	beq.w	80031e0 <ai_array_fmt_name+0x148>
 80030cc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80030d0:	1a89      	subs	r1, r1, r2
 80030d2:	d05b      	beq.n	800318c <ai_array_fmt_name+0xf4>
 80030d4:	391f      	subs	r1, #31
 80030d6:	f000 8086 	beq.w	80031e6 <ai_array_fmt_name+0x14e>
 80030da:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80030de:	1a89      	subs	r1, r1, r2
 80030e0:	d057      	beq.n	8003192 <ai_array_fmt_name+0xfa>
 80030e2:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 80036b8 <.text_15>
 80030e6:	1a89      	subs	r1, r1, r2
 80030e8:	f000 808f 	beq.w	800320a <ai_array_fmt_name+0x172>
 80030ec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80030f0:	1a89      	subs	r1, r1, r2
 80030f2:	f000 8087 	beq.w	8003204 <ai_array_fmt_name+0x16c>
 80030f6:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 80036bc <.text_16>
 80030fa:	1a89      	subs	r1, r1, r2
 80030fc:	d05e      	beq.n	80031bc <ai_array_fmt_name+0x124>
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	1a89      	subs	r1, r1, r2
 8003104:	d057      	beq.n	80031b6 <ai_array_fmt_name+0x11e>
 8003106:	1a89      	subs	r1, r1, r2
 8003108:	d049      	beq.n	800319e <ai_array_fmt_name+0x106>
 800310a:	1fc9      	subs	r1, r1, #7
 800310c:	d059      	beq.n	80031c2 <ai_array_fmt_name+0x12a>
 800310e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003112:	1a89      	subs	r1, r1, r2
 8003114:	d046      	beq.n	80031a4 <ai_array_fmt_name+0x10c>
 8003116:	390f      	subs	r1, #15
 8003118:	d056      	beq.n	80031c8 <ai_array_fmt_name+0x130>
 800311a:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800311e:	1a89      	subs	r1, r1, r2
 8003120:	d043      	beq.n	80031aa <ai_array_fmt_name+0x112>
 8003122:	391f      	subs	r1, #31
 8003124:	d053      	beq.n	80031ce <ai_array_fmt_name+0x136>
 8003126:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800312a:	1a89      	subs	r1, r1, r2
 800312c:	d040      	beq.n	80031b0 <ai_array_fmt_name+0x118>
 800312e:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 80036b8 <.text_15>
 8003132:	1a89      	subs	r1, r1, r2
 8003134:	d063      	beq.n	80031fe <ai_array_fmt_name+0x166>
 8003136:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800313a:	1a89      	subs	r1, r1, r2
 800313c:	d05c      	beq.n	80031f8 <ai_array_fmt_name+0x160>
 800313e:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 80036c0 <.text_17>
 8003142:	1a89      	subs	r1, r1, r2
 8003144:	d019      	beq.n	800317a <ai_array_fmt_name+0xe2>
 8003146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800314a:	1a89      	subs	r1, r1, r2
 800314c:	d00f      	beq.n	800316e <ai_array_fmt_name+0xd6>
 800314e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003152:	1a89      	subs	r1, r1, r2
 8003154:	d00e      	beq.n	8003174 <ai_array_fmt_name+0xdc>
 8003156:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 80036c4 <.text_18>
 800315a:	1a89      	subs	r1, r1, r2
 800315c:	d049      	beq.n	80031f2 <ai_array_fmt_name+0x15a>
 800315e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003162:	1a89      	subs	r1, r1, r2
 8003164:	d042      	beq.n	80031ec <ai_array_fmt_name+0x154>
 8003166:	e053      	b.n	8003210 <ai_array_fmt_name+0x178>
 8003168:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 800316c:	4770      	bx	lr
 800316e:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8003172:	4770      	bx	lr
 8003174:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8003178:	4770      	bx	lr
 800317a:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 800317e:	4770      	bx	lr
 8003180:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8003184:	4770      	bx	lr
 8003186:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 800318a:	4770      	bx	lr
 800318c:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8003190:	4770      	bx	lr
 8003192:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8003196:	4770      	bx	lr
 8003198:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 800319c:	4770      	bx	lr
 800319e:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031a2:	4770      	bx	lr
 80031a4:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031a8:	4770      	bx	lr
 80031aa:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031ae:	4770      	bx	lr
 80031b0:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031b4:	4770      	bx	lr
 80031b6:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031ba:	4770      	bx	lr
 80031bc:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031c0:	4770      	bx	lr
 80031c2:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031c6:	4770      	bx	lr
 80031c8:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031cc:	4770      	bx	lr
 80031ce:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031d2:	4770      	bx	lr
 80031d4:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031d8:	4770      	bx	lr
 80031da:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031de:	4770      	bx	lr
 80031e0:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031e4:	4770      	bx	lr
 80031e6:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 80031ea:	4770      	bx	lr
 80031ec:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 80031f0:	4770      	bx	lr
 80031f2:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 80031f6:	4770      	bx	lr
 80031f8:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 80031fc:	4770      	bx	lr
 80031fe:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8003202:	4770      	bx	lr
 8003204:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8003208:	4770      	bx	lr
 800320a:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800320e:	4770      	bx	lr
 8003210:	f36f 000d 	bfc	r0, #0, #14
 8003214:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003218:	2840      	cmp	r0, #64	; 0x40
 800321a:	d009      	beq.n	8003230 <ai_array_fmt_name+0x198>
 800321c:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 80036c8 <.text_19>
 8003220:	4288      	cmp	r0, r1
 8003222:	d00b      	beq.n	800323c <ai_array_fmt_name+0x1a4>
 8003224:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 80036cc <.text_20>
 8003228:	4288      	cmp	r0, r1
 800322a:	d004      	beq.n	8003236 <ai_array_fmt_name+0x19e>
 800322c:	a07a      	add	r0, pc, #488	; (adr r0, 8003418 <.text_8>)
 800322e:	4770      	bx	lr
 8003230:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8003234:	4770      	bx	lr
 8003236:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 800323a:	4770      	bx	lr
 800323c:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8003240:	4770      	bx	lr

08003242 <ai_array_fmt_exported>:
 8003242:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003246:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800324a:	d068      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800324c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003250:	1a89      	subs	r1, r1, r2
 8003252:	d064      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003258:	1a89      	subs	r1, r1, r2
 800325a:	d062      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800325c:	1a89      	subs	r1, r1, r2
 800325e:	d05e      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003260:	1fc9      	subs	r1, r1, #7
 8003262:	d05c      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003264:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003268:	1a89      	subs	r1, r1, r2
 800326a:	d058      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800326c:	390f      	subs	r1, #15
 800326e:	d056      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003270:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003274:	1a89      	subs	r1, r1, r2
 8003276:	d054      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003278:	391f      	subs	r1, #31
 800327a:	d052      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800327c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003280:	1a89      	subs	r1, r1, r2
 8003282:	d04e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003284:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 80036b8 <.text_15>
 8003288:	1a89      	subs	r1, r1, r2
 800328a:	d04a      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800328c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003290:	1a89      	subs	r1, r1, r2
 8003292:	d046      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003294:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 80036bc <.text_16>
 8003298:	1a89      	subs	r1, r1, r2
 800329a:	d040      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	1a89      	subs	r1, r1, r2
 80032a2:	d03e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032a4:	1a89      	subs	r1, r1, r2
 80032a6:	d03a      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032a8:	1fc9      	subs	r1, r1, #7
 80032aa:	d038      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032ac:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80032b0:	1a89      	subs	r1, r1, r2
 80032b2:	d034      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032b4:	390f      	subs	r1, #15
 80032b6:	d032      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032b8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80032bc:	1a89      	subs	r1, r1, r2
 80032be:	d030      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032c0:	391f      	subs	r1, #31
 80032c2:	d02e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032c4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80032c8:	1a89      	subs	r1, r1, r2
 80032ca:	d02a      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032cc:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 80036b8 <.text_15>
 80032d0:	1a89      	subs	r1, r1, r2
 80032d2:	d026      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032d4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80032d8:	1a89      	subs	r1, r1, r2
 80032da:	d022      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032dc:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 80036c0 <.text_17>
 80032e0:	1a89      	subs	r1, r1, r2
 80032e2:	d01e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e8:	1a89      	subs	r1, r1, r2
 80032ea:	d018      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032f0:	1a89      	subs	r1, r1, r2
 80032f2:	d016      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032f4:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 80036c4 <.text_18>
 80032f8:	1a89      	subs	r1, r1, r2
 80032fa:	d012      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032fc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003300:	1a89      	subs	r1, r1, r2
 8003302:	d00e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003304:	f36f 000d 	bfc	r0, #0, #14
 8003308:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800330c:	2840      	cmp	r0, #64	; 0x40
 800330e:	bf1f      	itttt	ne
 8003310:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036c8 <.text_19>
 8003314:	4298      	cmpne	r0, r3
 8003316:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036cc <.text_20>
 800331a:	4298      	cmpne	r0, r3
 800331c:	d101      	bne.n	8003322 <ai_array_fmt_exported+0xe0>
 800331e:	2001      	movs	r0, #1
 8003320:	4770      	bx	lr
 8003322:	2000      	movs	r0, #0
 8003324:	4770      	bx	lr

08003326 <ai_array_fmt_valid>:
 8003326:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800332a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800332e:	d069      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003330:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003334:	1a89      	subs	r1, r1, r2
 8003336:	d065      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333c:	1a89      	subs	r1, r1, r2
 800333e:	d061      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003340:	1a89      	subs	r1, r1, r2
 8003342:	d05f      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003344:	1fc9      	subs	r1, r1, #7
 8003346:	d05d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003348:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800334c:	1a89      	subs	r1, r1, r2
 800334e:	d059      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003350:	390f      	subs	r1, #15
 8003352:	d057      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003354:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003358:	1a89      	subs	r1, r1, r2
 800335a:	d053      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800335c:	391f      	subs	r1, #31
 800335e:	d051      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003360:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003364:	1a89      	subs	r1, r1, r2
 8003366:	d04d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003368:	f8df 234c 	ldr.w	r2, [pc, #844]	; 80036b8 <.text_15>
 800336c:	1a89      	subs	r1, r1, r2
 800336e:	d049      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003370:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003374:	1a89      	subs	r1, r1, r2
 8003376:	d045      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003378:	f8df 2340 	ldr.w	r2, [pc, #832]	; 80036bc <.text_16>
 800337c:	1a89      	subs	r1, r1, r2
 800337e:	d041      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003384:	1a89      	subs	r1, r1, r2
 8003386:	d03d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003388:	1a89      	subs	r1, r1, r2
 800338a:	d03b      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800338c:	1fc9      	subs	r1, r1, #7
 800338e:	d039      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003390:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003394:	1a89      	subs	r1, r1, r2
 8003396:	d035      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003398:	390f      	subs	r1, #15
 800339a:	d033      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800339c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80033a0:	1a89      	subs	r1, r1, r2
 80033a2:	d02f      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033a4:	391f      	subs	r1, #31
 80033a6:	d02d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033a8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80033ac:	1a89      	subs	r1, r1, r2
 80033ae:	d029      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033b0:	f8df 2304 	ldr.w	r2, [pc, #772]	; 80036b8 <.text_15>
 80033b4:	1a89      	subs	r1, r1, r2
 80033b6:	d025      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033b8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033bc:	1a89      	subs	r1, r1, r2
 80033be:	d021      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033c0:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 80036c0 <.text_17>
 80033c4:	1a89      	subs	r1, r1, r2
 80033c6:	d01d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033cc:	1a89      	subs	r1, r1, r2
 80033ce:	d019      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033d4:	1a89      	subs	r1, r1, r2
 80033d6:	d015      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033d8:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 80036c4 <.text_18>
 80033dc:	1a89      	subs	r1, r1, r2
 80033de:	d011      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033e0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033e4:	1a89      	subs	r1, r1, r2
 80033e6:	bf1e      	ittt	ne
 80033e8:	f36f 000d 	bfcne	r0, #0, #14
 80033ec:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 80033f0:	2840      	cmpne	r0, #64	; 0x40
 80033f2:	d007      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033f4:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 80036c8 <.text_19>
 80033f8:	4298      	cmp	r0, r3
 80033fa:	bf1c      	itt	ne
 80033fc:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 80036cc <.text_20>
 8003400:	4298      	cmpne	r0, r3
 8003402:	d101      	bne.n	8003408 <ai_array_fmt_valid+0xe2>
 8003404:	2001      	movs	r0, #1
 8003406:	4770      	bx	lr
 8003408:	2000      	movs	r0, #0
 800340a:	4770      	bx	lr

0800340c <ai_array_fmt_get_formats>:
 800340c:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 80036d0 <.text_21>
 8003410:	6001      	str	r1, [r0, #0]
 8003412:	201c      	movs	r0, #28
 8003414:	4770      	bx	lr
	...

08003418 <.text_8>:
 8003418:	00000000 	.word	0x00000000

0800341c <ai_buffer_fmt_name>:
 800341c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003420:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003424:	d022      	beq.n	800346c <ai_buffer_fmt_name+0x50>
 8003426:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800342a:	1a89      	subs	r1, r1, r2
 800342c:	d039      	beq.n	80034a2 <ai_buffer_fmt_name+0x86>
 800342e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003432:	1a89      	subs	r1, r1, r2
 8003434:	d020      	beq.n	8003478 <ai_buffer_fmt_name+0x5c>
 8003436:	1fc9      	subs	r1, r1, #7
 8003438:	d036      	beq.n	80034a8 <ai_buffer_fmt_name+0x8c>
 800343a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800343e:	1a89      	subs	r1, r1, r2
 8003440:	d01d      	beq.n	800347e <ai_buffer_fmt_name+0x62>
 8003442:	390f      	subs	r1, #15
 8003444:	d033      	beq.n	80034ae <ai_buffer_fmt_name+0x92>
 8003446:	4aa3      	ldr	r2, [pc, #652]	; (80036d4 <.text_22>)
 8003448:	1a89      	subs	r1, r1, r2
 800344a:	d021      	beq.n	8003490 <ai_buffer_fmt_name+0x74>
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	1a89      	subs	r1, r1, r2
 8003452:	d017      	beq.n	8003484 <ai_buffer_fmt_name+0x68>
 8003454:	1fc9      	subs	r1, r1, #7
 8003456:	d01e      	beq.n	8003496 <ai_buffer_fmt_name+0x7a>
 8003458:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800345c:	1a89      	subs	r1, r1, r2
 800345e:	d014      	beq.n	800348a <ai_buffer_fmt_name+0x6e>
 8003460:	390f      	subs	r1, #15
 8003462:	d01b      	beq.n	800349c <ai_buffer_fmt_name+0x80>
 8003464:	4a9c      	ldr	r2, [pc, #624]	; (80036d8 <.text_23>)
 8003466:	1a89      	subs	r1, r1, r2
 8003468:	d003      	beq.n	8003472 <ai_buffer_fmt_name+0x56>
 800346a:	e023      	b.n	80034b4 <ai_buffer_fmt_name+0x98>
 800346c:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8003470:	4770      	bx	lr
 8003472:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8003476:	4770      	bx	lr
 8003478:	f20f 3094 	addw	r0, pc, #916	; 0x394
 800347c:	4770      	bx	lr
 800347e:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8003482:	4770      	bx	lr
 8003484:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8003488:	4770      	bx	lr
 800348a:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 800348e:	4770      	bx	lr
 8003490:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8003494:	4770      	bx	lr
 8003496:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 800349a:	4770      	bx	lr
 800349c:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80034a0:	4770      	bx	lr
 80034a2:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034a6:	4770      	bx	lr
 80034a8:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034ac:	4770      	bx	lr
 80034ae:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80034b2:	4770      	bx	lr
 80034b4:	0b80      	lsrs	r0, r0, #14
 80034b6:	0380      	lsls	r0, r0, #14
 80034b8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80034bc:	2840      	cmp	r0, #64	; 0x40
 80034be:	d007      	beq.n	80034d0 <ai_buffer_fmt_name+0xb4>
 80034c0:	4981      	ldr	r1, [pc, #516]	; (80036c8 <.text_19>)
 80034c2:	4288      	cmp	r0, r1
 80034c4:	d00a      	beq.n	80034dc <ai_buffer_fmt_name+0xc0>
 80034c6:	4981      	ldr	r1, [pc, #516]	; (80036cc <.text_20>)
 80034c8:	4288      	cmp	r0, r1
 80034ca:	d004      	beq.n	80034d6 <ai_buffer_fmt_name+0xba>
 80034cc:	a079      	add	r0, pc, #484	; (adr r0, 80036b4 <.text_14>)
 80034ce:	4770      	bx	lr
 80034d0:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 80034d4:	4770      	bx	lr
 80034d6:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 80034da:	4770      	bx	lr
 80034dc:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 80034e0:	4770      	bx	lr

080034e2 <ai_buffer_fmt_valid>:
 80034e2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80034e6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80034ea:	d02d      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80034f0:	1a89      	subs	r1, r1, r2
 80034f2:	d029      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f8:	1a89      	subs	r1, r1, r2
 80034fa:	d025      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034fc:	1fc9      	subs	r1, r1, #7
 80034fe:	d023      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003500:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003504:	1a89      	subs	r1, r1, r2
 8003506:	d01f      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003508:	390f      	subs	r1, #15
 800350a:	d01d      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800350c:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <.text_22>)
 800350e:	1a89      	subs	r1, r1, r2
 8003510:	d01a      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003516:	1a89      	subs	r1, r1, r2
 8003518:	d016      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800351a:	1fc9      	subs	r1, r1, #7
 800351c:	d014      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800351e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003522:	1a89      	subs	r1, r1, r2
 8003524:	d010      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003526:	390f      	subs	r1, #15
 8003528:	d00e      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800352a:	4a6b      	ldr	r2, [pc, #428]	; (80036d8 <.text_23>)
 800352c:	1a89      	subs	r1, r1, r2
 800352e:	bf1f      	itttt	ne
 8003530:	0b80      	lsrne	r0, r0, #14
 8003532:	0380      	lslne	r0, r0, #14
 8003534:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8003538:	2840      	cmpne	r0, #64	; 0x40
 800353a:	d005      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800353c:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <.text_19>)
 800353e:	4298      	cmp	r0, r3
 8003540:	bf1c      	itt	ne
 8003542:	4b62      	ldrne	r3, [pc, #392]	; (80036cc <.text_20>)
 8003544:	4298      	cmpne	r0, r3
 8003546:	d101      	bne.n	800354c <ai_buffer_fmt_valid+0x6a>
 8003548:	2001      	movs	r0, #1
 800354a:	4770      	bx	lr
 800354c:	2000      	movs	r0, #0
 800354e:	4770      	bx	lr

08003550 <ai_buffer_fmt_get_formats>:
 8003550:	4962      	ldr	r1, [pc, #392]	; (80036dc <.text_24>)
 8003552:	6001      	str	r1, [r0, #0]
 8003554:	200c      	movs	r0, #12
 8003556:	4770      	bx	lr

08003558 <ai_array_to_buffer_fmt>:
 8003558:	4601      	mov	r1, r0
 800355a:	2040      	movs	r0, #64	; 0x40
 800355c:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8003560:	2a02      	cmp	r2, #2
 8003562:	d104      	bne.n	800356e <ai_array_to_buffer_fmt+0x16>
 8003564:	485e      	ldr	r0, [pc, #376]	; (80036e0 <.text_25>)
 8003566:	4008      	ands	r0, r1
 8003568:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800356c:	e037      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 800356e:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8003572:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <.text_19>)
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	d02d      	beq.n	80035d4 <ai_array_to_buffer_fmt+0x7c>
 8003578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	d01b      	beq.n	80035b8 <ai_array_to_buffer_fmt+0x60>
 8003580:	1fd2      	subs	r2, r2, #7
 8003582:	d029      	beq.n	80035d8 <ai_array_to_buffer_fmt+0x80>
 8003584:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	d017      	beq.n	80035bc <ai_array_to_buffer_fmt+0x64>
 800358c:	3a0f      	subs	r2, #15
 800358e:	d025      	beq.n	80035dc <ai_array_to_buffer_fmt+0x84>
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <.text_22>)
 8003592:	1ad2      	subs	r2, r2, r3
 8003594:	d018      	beq.n	80035c8 <ai_array_to_buffer_fmt+0x70>
 8003596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359a:	1ad2      	subs	r2, r2, r3
 800359c:	d010      	beq.n	80035c0 <ai_array_to_buffer_fmt+0x68>
 800359e:	1fd2      	subs	r2, r2, #7
 80035a0:	d014      	beq.n	80035cc <ai_array_to_buffer_fmt+0x74>
 80035a2:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80035a6:	1ad2      	subs	r2, r2, r3
 80035a8:	d00c      	beq.n	80035c4 <ai_array_to_buffer_fmt+0x6c>
 80035aa:	3a0f      	subs	r2, #15
 80035ac:	d010      	beq.n	80035d0 <ai_array_to_buffer_fmt+0x78>
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <.text_23>)
 80035b0:	1ad2      	subs	r2, r2, r3
 80035b2:	d114      	bne.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035b4:	484b      	ldr	r0, [pc, #300]	; (80036e4 <.text_26>)
 80035b6:	e012      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035b8:	484b      	ldr	r0, [pc, #300]	; (80036e8 <.text_27>)
 80035ba:	e010      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035bc:	484b      	ldr	r0, [pc, #300]	; (80036ec <.text_28>)
 80035be:	e00e      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c0:	484b      	ldr	r0, [pc, #300]	; (80036f0 <.text_29>)
 80035c2:	e00c      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c4:	484b      	ldr	r0, [pc, #300]	; (80036f4 <.text_30>)
 80035c6:	e00a      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c8:	4840      	ldr	r0, [pc, #256]	; (80036cc <.text_20>)
 80035ca:	e008      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035cc:	484a      	ldr	r0, [pc, #296]	; (80036f8 <.text_31>)
 80035ce:	e006      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d0:	484a      	ldr	r0, [pc, #296]	; (80036fc <.text_32>)
 80035d2:	e004      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d4:	4618      	mov	r0, r3
 80035d6:	e002      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d8:	4849      	ldr	r0, [pc, #292]	; (8003700 <.text_33>)
 80035da:	e000      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035dc:	4849      	ldr	r0, [pc, #292]	; (8003704 <.text_34>)
 80035de:	004a      	lsls	r2, r1, #1
 80035e0:	bf4c      	ite	mi
 80035e2:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 80035e6:	2200      	movpl	r2, #0
 80035e8:	4310      	orrs	r0, r2
 80035ea:	008a      	lsls	r2, r1, #2
 80035ec:	bf4c      	ite	mi
 80035ee:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 80035f2:	2200      	movpl	r2, #0
 80035f4:	4310      	orrs	r0, r2
 80035f6:	0109      	lsls	r1, r1, #4
 80035f8:	bf4c      	ite	mi
 80035fa:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 80035fe:	2100      	movpl	r1, #0
 8003600:	4308      	orrs	r0, r1
 8003602:	4770      	bx	lr

08003604 <ai_buffer_to_array_fmt>:
 8003604:	4602      	mov	r2, r0
 8003606:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 800360a:	3840      	subs	r0, #64	; 0x40
 800360c:	d022      	beq.n	8003654 <ai_buffer_to_array_fmt+0x50>
 800360e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003612:	1a40      	subs	r0, r0, r1
 8003614:	d030      	beq.n	8003678 <ai_buffer_to_array_fmt+0x74>
 8003616:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800361a:	1a40      	subs	r0, r0, r1
 800361c:	d01e      	beq.n	800365c <ai_buffer_to_array_fmt+0x58>
 800361e:	1fc0      	subs	r0, r0, #7
 8003620:	d02c      	beq.n	800367c <ai_buffer_to_array_fmt+0x78>
 8003622:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8003626:	1a40      	subs	r0, r0, r1
 8003628:	d01a      	beq.n	8003660 <ai_buffer_to_array_fmt+0x5c>
 800362a:	380f      	subs	r0, #15
 800362c:	d028      	beq.n	8003680 <ai_buffer_to_array_fmt+0x7c>
 800362e:	4929      	ldr	r1, [pc, #164]	; (80036d4 <.text_22>)
 8003630:	1a40      	subs	r0, r0, r1
 8003632:	d01b      	beq.n	800366c <ai_buffer_to_array_fmt+0x68>
 8003634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003638:	1a40      	subs	r0, r0, r1
 800363a:	d013      	beq.n	8003664 <ai_buffer_to_array_fmt+0x60>
 800363c:	1fc0      	subs	r0, r0, #7
 800363e:	d017      	beq.n	8003670 <ai_buffer_to_array_fmt+0x6c>
 8003640:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8003644:	1a40      	subs	r0, r0, r1
 8003646:	d00f      	beq.n	8003668 <ai_buffer_to_array_fmt+0x64>
 8003648:	380f      	subs	r0, #15
 800364a:	d013      	beq.n	8003674 <ai_buffer_to_array_fmt+0x70>
 800364c:	4922      	ldr	r1, [pc, #136]	; (80036d8 <.text_23>)
 800364e:	1a40      	subs	r0, r0, r1
 8003650:	d002      	beq.n	8003658 <ai_buffer_to_array_fmt+0x54>
 8003652:	e017      	b.n	8003684 <ai_buffer_to_array_fmt+0x80>
 8003654:	2040      	movs	r0, #64	; 0x40
 8003656:	e01f      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003658:	4822      	ldr	r0, [pc, #136]	; (80036e4 <.text_26>)
 800365a:	e01d      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800365c:	4822      	ldr	r0, [pc, #136]	; (80036e8 <.text_27>)
 800365e:	e01b      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <.text_28>)
 8003662:	e019      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003664:	4822      	ldr	r0, [pc, #136]	; (80036f0 <.text_29>)
 8003666:	e017      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003668:	4822      	ldr	r0, [pc, #136]	; (80036f4 <.text_30>)
 800366a:	e015      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800366c:	4817      	ldr	r0, [pc, #92]	; (80036cc <.text_20>)
 800366e:	e013      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003670:	4821      	ldr	r0, [pc, #132]	; (80036f8 <.text_31>)
 8003672:	e011      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003674:	4821      	ldr	r0, [pc, #132]	; (80036fc <.text_32>)
 8003676:	e00f      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003678:	4813      	ldr	r0, [pc, #76]	; (80036c8 <.text_19>)
 800367a:	e00d      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800367c:	4820      	ldr	r0, [pc, #128]	; (8003700 <.text_33>)
 800367e:	e00b      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003680:	4820      	ldr	r0, [pc, #128]	; (8003704 <.text_34>)
 8003682:	e009      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003684:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8003688:	f3c2 000d 	ubfx	r0, r2, #0, #14
 800368c:	2900      	cmp	r1, #0
 800368e:	bf14      	ite	ne
 8003690:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8003694:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8003698:	0051      	lsls	r1, r2, #1
 800369a:	bf48      	it	mi
 800369c:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80036a0:	0091      	lsls	r1, r2, #2
 80036a2:	bf48      	it	mi
 80036a4:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80036a8:	0111      	lsls	r1, r2, #4
 80036aa:	bf48      	it	mi
 80036ac:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80036b0:	4770      	bx	lr
	...

080036b4 <.text_14>:
 80036b4:	00000000 	.word	0x00000000

080036b8 <.text_15>:
 80036b8:	002be80f 	.word	0x002be80f

080036bc <.text_16>:
 80036bc:	003bf7f1 	.word	0x003bf7f1

080036c0 <.text_17>:
 80036c0:	00b9fff1 	.word	0x00b9fff1

080036c4 <.text_18>:
 80036c4:	004df000 	.word	0x004df000

080036c8 <.text_19>:
 80036c8:	00040040 	.word	0x00040040

080036cc <.text_20>:
 80036cc:	00840040 	.word	0x00840040

080036d0 <.text_21>:
 80036d0:	0800dbac 	.word	0x0800dbac

080036d4 <.text_22>:
 80036d4:	007ff7f1 	.word	0x007ff7f1

080036d8 <.text_23>:
 80036d8:	00fe07f1 	.word	0x00fe07f1

080036dc <.text_24>:
 80036dc:	0800dc1c 	.word	0x0800dc1c

080036e0 <.text_25>:
 80036e0:	00803fff 	.word	0x00803fff

080036e4 <.text_26>:
 80036e4:	01821040 	.word	0x01821040

080036e8 <.text_27>:
 80036e8:	00040440 	.word	0x00040440

080036ec <.text_28>:
 80036ec:	00040840 	.word	0x00040840

080036f0 <.text_29>:
 80036f0:	00840440 	.word	0x00840440

080036f4 <.text_30>:
 80036f4:	00840840 	.word	0x00840840

080036f8 <.text_31>:
 80036f8:	00840447 	.word	0x00840447

080036fc <.text_32>:
 80036fc:	0084084f 	.word	0x0084084f

08003700 <.text_33>:
 8003700:	00040447 	.word	0x00040447

08003704 <.text_34>:
 8003704:	0004084f 	.word	0x0004084f

08003708 <ai_array_get_byte_size>:
 8003708:	b909      	cbnz	r1, 800370e <ai_array_get_byte_size+0x6>
 800370a:	2000      	movs	r0, #0
 800370c:	4770      	bx	lr
 800370e:	11c2      	asrs	r2, r0, #7
 8003710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003714:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8003718:	189b      	adds	r3, r3, r2
 800371a:	4359      	muls	r1, r3
 800371c:	1dc9      	adds	r1, r1, #7
 800371e:	08c9      	lsrs	r1, r1, #3
 8003720:	1543      	asrs	r3, r0, #21
 8003722:	00c9      	lsls	r1, r1, #3
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	ea4f 4c60 	mov.w	ip, r0, asr #17
 800372c:	40d9      	lsrs	r1, r3
 800372e:	f00c 0c0f 	and.w	ip, ip, #15
 8003732:	f1bc 0f04 	cmp.w	ip, #4
 8003736:	d00a      	beq.n	800374e <ai_array_get_byte_size+0x46>
 8003738:	f1bc 0f08 	cmp.w	ip, #8
 800373c:	bf02      	ittt	eq
 800373e:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8003742:	1882      	addeq	r2, r0, r2
 8003744:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8003748:	1dc9      	adds	r1, r1, #7
 800374a:	08c8      	lsrs	r0, r1, #3
 800374c:	4770      	bx	lr
 800374e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8003752:	1882      	adds	r2, r0, r2
 8003754:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003758:	1dc9      	adds	r1, r1, #7
 800375a:	08c8      	lsrs	r0, r1, #3
 800375c:	4770      	bx	lr

0800375e <ai_array_get_data_byte_size>:
 800375e:	b909      	cbnz	r1, 8003764 <ai_array_get_data_byte_size+0x6>
 8003760:	2000      	movs	r0, #0
 8003762:	4770      	bx	lr
 8003764:	11c2      	asrs	r2, r0, #7
 8003766:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800376a:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800376e:	189a      	adds	r2, r3, r2
 8003770:	4351      	muls	r1, r2
 8003772:	1dc9      	adds	r1, r1, #7
 8003774:	08c9      	lsrs	r1, r1, #3
 8003776:	1540      	asrs	r0, r0, #21
 8003778:	00c9      	lsls	r1, r1, #3
 800377a:	f000 0003 	and.w	r0, r0, #3
 800377e:	40c1      	lsrs	r1, r0
 8003780:	1dc9      	adds	r1, r1, #7
 8003782:	08c8      	lsrs	r0, r1, #3
 8003784:	4770      	bx	lr

08003786 <ai_array_get_elems_from_size>:
 8003786:	b909      	cbnz	r1, 800378c <ai_array_get_elems_from_size+0x6>
 8003788:	2000      	movs	r0, #0
 800378a:	4770      	bx	lr
 800378c:	1442      	asrs	r2, r0, #17
 800378e:	00c9      	lsls	r1, r1, #3
 8003790:	f002 020f 	and.w	r2, r2, #15
 8003794:	2a04      	cmp	r2, #4
 8003796:	d002      	beq.n	800379e <ai_array_get_elems_from_size+0x18>
 8003798:	2a08      	cmp	r2, #8
 800379a:	d009      	beq.n	80037b0 <ai_array_get_elems_from_size+0x2a>
 800379c:	e010      	b.n	80037c0 <ai_array_get_elems_from_size+0x3a>
 800379e:	11c3      	asrs	r3, r0, #7
 80037a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a4:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80037a8:	18d2      	adds	r2, r2, r3
 80037aa:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80037ae:	e007      	b.n	80037c0 <ai_array_get_elems_from_size+0x3a>
 80037b0:	11c2      	asrs	r2, r0, #7
 80037b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037b6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80037ba:	189a      	adds	r2, r3, r2
 80037bc:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 80037c0:	1542      	asrs	r2, r0, #21
 80037c2:	f002 0203 	and.w	r2, r2, #3
 80037c6:	4091      	lsls	r1, r2
 80037c8:	1dc9      	adds	r1, r1, #7
 80037ca:	11c2      	asrs	r2, r0, #7
 80037cc:	08c9      	lsrs	r1, r1, #3
 80037ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037d2:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80037d6:	00c9      	lsls	r1, r1, #3
 80037d8:	1880      	adds	r0, r0, r2
 80037da:	fbb1 f0f0 	udiv	r0, r1, r0
 80037de:	4770      	bx	lr

080037e0 <.text_38>:
 80037e0:	5f544d46 	.word	0x5f544d46
 80037e4:	454e4f4e 	.word	0x454e4f4e
 80037e8:	00000000 	.word	0x00000000

080037ec <.text_39>:
 80037ec:	5f544d46 	.word	0x5f544d46
 80037f0:	414f4c46 	.word	0x414f4c46
 80037f4:	0054      	.short	0x0054
	...

080037f8 <.text_40>:
 80037f8:	5f544d46 	.word	0x5f544d46
 80037fc:	414f4c46 	.word	0x414f4c46
 8003800:	00343654 	.word	0x00343654

08003804 <.text_41>:
 8003804:	5f544d46 	.word	0x5f544d46
 8003808:	414f4c46 	.word	0x414f4c46
 800380c:	00363154 	.word	0x00363154

08003810 <.text_42>:
 8003810:	5f544d46 	.word	0x5f544d46
 8003814:	3855      	.short	0x3855
	...

08003818 <.text_43>:
 8003818:	5f544d46 	.word	0x5f544d46
 800381c:	00363155 	.word	0x00363155

08003820 <.text_44>:
 8003820:	5f544d46 	.word	0x5f544d46
 8003824:	00323355 	.word	0x00323355

08003828 <.text_45>:
 8003828:	5f544d46 	.word	0x5f544d46
 800382c:	00343655 	.word	0x00343655

08003830 <.text_46>:
 8003830:	5f544d46 	.word	0x5f544d46
 8003834:	3455      	.short	0x3455
	...

08003838 <.text_47>:
 8003838:	5f544d46 	.word	0x5f544d46
 800383c:	3853      	.short	0x3853
	...

08003840 <.text_48>:
 8003840:	5f544d46 	.word	0x5f544d46
 8003844:	00363153 	.word	0x00363153

08003848 <.text_49>:
 8003848:	5f544d46 	.word	0x5f544d46
 800384c:	00323353 	.word	0x00323353

08003850 <.text_50>:
 8003850:	5f544d46 	.word	0x5f544d46
 8003854:	00343653 	.word	0x00343653

08003858 <.text_51>:
 8003858:	5f544d46 	.word	0x5f544d46
 800385c:	3453      	.short	0x3453
	...

08003860 <.text_52>:
 8003860:	5f544d46 	.word	0x5f544d46
 8003864:	0051      	.short	0x0051
	...

08003868 <.text_53>:
 8003868:	5f544d46 	.word	0x5f544d46
 800386c:	3751      	.short	0x3751
	...

08003870 <.text_54>:
 8003870:	5f544d46 	.word	0x5f544d46
 8003874:	00353151 	.word	0x00353151

08003878 <.text_55>:
 8003878:	5f544d46 	.word	0x5f544d46
 800387c:	00313351 	.word	0x00313351

08003880 <.text_56>:
 8003880:	5f544d46 	.word	0x5f544d46
 8003884:	5155      	.short	0x5155
	...

08003888 <.text_57>:
 8003888:	5f544d46 	.word	0x5f544d46
 800388c:	00375155 	.word	0x00375155

08003890 <.text_58>:
 8003890:	5f544d46 	.word	0x5f544d46
 8003894:	35315155 	.word	0x35315155
 8003898:	00000000 	.word	0x00000000

0800389c <.text_59>:
 800389c:	5f544d46 	.word	0x5f544d46
 80038a0:	31335155 	.word	0x31335155
 80038a4:	00000000 	.word	0x00000000

080038a8 <.text_60>:
 80038a8:	5f544d46 	.word	0x5f544d46
 80038ac:	3454554c 	.word	0x3454554c
 80038b0:	4f4c465f 	.word	0x4f4c465f
 80038b4:	5441      	.short	0x5441
	...

080038b8 <.text_61>:
 80038b8:	5f544d46 	.word	0x5f544d46
 80038bc:	3854554c 	.word	0x3854554c
 80038c0:	4f4c465f 	.word	0x4f4c465f
 80038c4:	5441      	.short	0x5441
	...

080038c8 <.text_62>:
 80038c8:	5f544d46 	.word	0x5f544d46
 80038cc:	3454554c 	.word	0x3454554c
 80038d0:	3531515f 	.word	0x3531515f
 80038d4:	00000000 	.word	0x00000000

080038d8 <.text_63>:
 80038d8:	5f544d46 	.word	0x5f544d46
 80038dc:	3854554c 	.word	0x3854554c
 80038e0:	3531515f 	.word	0x3531515f
 80038e4:	00000000 	.word	0x00000000

080038e8 <.text_64>:
 80038e8:	5f544d46 	.word	0x5f544d46
 80038ec:	3454554c 	.word	0x3454554c
 80038f0:	3151555f 	.word	0x3151555f
 80038f4:	0035      	.short	0x0035
	...

080038f8 <.text_65>:
 80038f8:	5f544d46 	.word	0x5f544d46
 80038fc:	3854554c 	.word	0x3854554c
 8003900:	3151555f 	.word	0x3151555f
 8003904:	0035      	.short	0x0035
	...

08003908 <.text_66>:
 8003908:	415f4941 	.word	0x415f4941
 800390c:	59415252 	.word	0x59415252
 8003910:	524f465f 	.word	0x524f465f
 8003914:	5f54414d 	.word	0x5f54414d
 8003918:	454e4f4e 	.word	0x454e4f4e
 800391c:	00000000 	.word	0x00000000

08003920 <.text_67>:
 8003920:	415f4941 	.word	0x415f4941
 8003924:	59415252 	.word	0x59415252
 8003928:	524f465f 	.word	0x524f465f
 800392c:	5f54414d 	.word	0x5f54414d
 8003930:	0051      	.short	0x0051
	...

08003934 <.text_68>:
 8003934:	415f4941 	.word	0x415f4941
 8003938:	59415252 	.word	0x59415252
 800393c:	524f465f 	.word	0x524f465f
 8003940:	5f54414d 	.word	0x5f54414d
 8003944:	5155      	.short	0x5155
	...

08003948 <.text_69>:
 8003948:	425f4941 	.word	0x425f4941
 800394c:	45464655 	.word	0x45464655
 8003950:	4f465f52 	.word	0x4f465f52
 8003954:	54414d52 	.word	0x54414d52
 8003958:	4e4f4e5f 	.word	0x4e4f4e5f
 800395c:	0045      	.short	0x0045
	...

08003960 <.text_70>:
 8003960:	425f4941 	.word	0x425f4941
 8003964:	45464655 	.word	0x45464655
 8003968:	4f465f52 	.word	0x4f465f52
 800396c:	54414d52 	.word	0x54414d52
 8003970:	515f      	.short	0x515f
	...

08003974 <.text_71>:
 8003974:	425f4941 	.word	0x425f4941
 8003978:	45464655 	.word	0x45464655
 800397c:	4f465f52 	.word	0x4f465f52
 8003980:	54414d52 	.word	0x54414d52
 8003984:	0051555f 	.word	0x0051555f

08003988 <ai_math_dot_array>:
 8003988:	b530      	push	{r4, r5, lr}
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	b081      	sub	sp, #4
 8003990:	4611      	mov	r1, r2
 8003992:	461a      	mov	r2, r3
 8003994:	2500      	movs	r5, #0
 8003996:	9500      	str	r5, [sp, #0]
 8003998:	466b      	mov	r3, sp
 800399a:	f000 fee7 	bl	800476c <arm_dot_prod_f32>
 800399e:	ed94 0a00 	vldr	s0, [r4]
 80039a2:	eddd 0a00 	vldr	s1, [sp]
 80039a6:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039aa:	edc4 0a00 	vstr	s1, [r4]
 80039ae:	b001      	add	sp, #4
 80039b0:	bd30      	pop	{r4, r5, pc}
	...

080039b4 <ai_math_sqrt>:
 80039b4:	eef0 0a40 	vmov.f32	s1, s0
 80039b8:	eef5 0a40 	vcmp.f32	s1, #0.0
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003a64 <.text_12>
 80039c4:	db01      	blt.n	80039ca <ai_math_sqrt+0x16>
 80039c6:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80039ca:	4770      	bx	lr

080039cc <ai_math_exp>:
 80039cc:	f008 bf9c 	b.w	800c908 <expf>

080039d0 <ai_math_pow>:
 80039d0:	f009 b88a 	b.w	800cae8 <powf>

080039d4 <ai_math_tanh>:
 80039d4:	f008 bf46 	b.w	800c864 <tanhf>

080039d8 <ai_math_relu>:
 80039d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	bf48      	it	mi
 80039e2:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8003a64 <.text_12>
 80039e6:	4770      	bx	lr

080039e8 <ai_math_prelu>:
 80039e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	bf48      	it	mi
 80039f2:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 80039f6:	4770      	bx	lr

080039f8 <ai_math_sigmoid>:
 80039f8:	b500      	push	{lr}
 80039fa:	b081      	sub	sp, #4
 80039fc:	eeb1 0a40 	vneg.f32	s0, s0
 8003a00:	f008 ff82 	bl	800c908 <expf>
 8003a04:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a08:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a10:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8003a14:	b001      	add	sp, #4
 8003a16:	bd00      	pop	{pc}

08003a18 <ai_math_hard_sigmoid>:
 8003a18:	eef0 0a40 	vmov.f32	s1, s0
 8003a1c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003a68 <.text_13>
 8003a20:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003a24:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003a28:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003a6c <.text_14>
 8003a2c:	eeb4 0a60 	vcmp.f32	s0, s1
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	da07      	bge.n	8003a46 <ai_math_hard_sigmoid+0x2e>
 8003a36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	d504      	bpl.n	8003a4a <ai_math_hard_sigmoid+0x32>
 8003a40:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003a64 <.text_12>
 8003a44:	4770      	bx	lr
 8003a46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a4a:	4770      	bx	lr

08003a4c <ai_math_sign>:
 8003a4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	bfcc      	ite	gt
 8003a56:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8003a70 <.text_15>
 8003a5a:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8003a74 <.text_16>
 8003a5e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003a62:	4770      	bx	lr

08003a64 <.text_12>:
 8003a64:	00000000 	.word	0x00000000

08003a68 <.text_13>:
 8003a68:	3e4ccccd 	.word	0x3e4ccccd

08003a6c <.text_14>:
 8003a6c:	3f800001 	.word	0x3f800001

08003a70 <.text_15>:
 8003a70:	00000001 	.word	0x00000001

08003a74 <.text_16>:
 8003a74:	ffffffff 	.word	0xffffffff

08003a78 <ai_sum>:
 8003a78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a7c:	4770      	bx	lr

08003a7e <ai_sub>:
 8003a7e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003a82:	4770      	bx	lr

08003a84 <ai_mul>:
 8003a84:	ee20 0a20 	vmul.f32	s0, s0, s1
 8003a88:	4770      	bx	lr

08003a8a <ai_div>:
 8003a8a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a8e:	4770      	bx	lr

08003a90 <ai_max>:
 8003a90:	eef4 0a40 	vcmp.f32	s1, s0
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	bf58      	it	pl
 8003a9a:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003a9e:	4770      	bx	lr

08003aa0 <ai_min>:
 8003aa0:	eeb4 0a60 	vcmp.f32	s0, s1
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bf58      	it	pl
 8003aaa:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003aae:	4770      	bx	lr

08003ab0 <__aeabi_memset>:
 8003ab0:	b470      	push	{r4, r5, r6}
 8003ab2:	0784      	lsls	r4, r0, #30
 8003ab4:	d046      	beq.n	8003b44 <__aeabi_memset+0x94>
 8003ab6:	1e4c      	subs	r4, r1, #1
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d041      	beq.n	8003b40 <__aeabi_memset+0x90>
 8003abc:	b2d5      	uxtb	r5, r2
 8003abe:	4603      	mov	r3, r0
 8003ac0:	e002      	b.n	8003ac8 <__aeabi_memset+0x18>
 8003ac2:	1e61      	subs	r1, r4, #1
 8003ac4:	b3e4      	cbz	r4, 8003b40 <__aeabi_memset+0x90>
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	f803 5b01 	strb.w	r5, [r3], #1
 8003acc:	0799      	lsls	r1, r3, #30
 8003ace:	d1f8      	bne.n	8003ac2 <__aeabi_memset+0x12>
 8003ad0:	2c03      	cmp	r4, #3
 8003ad2:	d92e      	bls.n	8003b32 <__aeabi_memset+0x82>
 8003ad4:	b2d5      	uxtb	r5, r2
 8003ad6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003ada:	2c0f      	cmp	r4, #15
 8003adc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003ae0:	d919      	bls.n	8003b16 <__aeabi_memset+0x66>
 8003ae2:	4626      	mov	r6, r4
 8003ae4:	f103 0110 	add.w	r1, r3, #16
 8003ae8:	3e10      	subs	r6, #16
 8003aea:	2e0f      	cmp	r6, #15
 8003aec:	f841 5c10 	str.w	r5, [r1, #-16]
 8003af0:	f841 5c0c 	str.w	r5, [r1, #-12]
 8003af4:	f841 5c08 	str.w	r5, [r1, #-8]
 8003af8:	f841 5c04 	str.w	r5, [r1, #-4]
 8003afc:	f101 0110 	add.w	r1, r1, #16
 8003b00:	d8f2      	bhi.n	8003ae8 <__aeabi_memset+0x38>
 8003b02:	f1a4 0110 	sub.w	r1, r4, #16
 8003b06:	f021 010f 	bic.w	r1, r1, #15
 8003b0a:	f004 040f 	and.w	r4, r4, #15
 8003b0e:	3110      	adds	r1, #16
 8003b10:	2c03      	cmp	r4, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	d90d      	bls.n	8003b32 <__aeabi_memset+0x82>
 8003b16:	461e      	mov	r6, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	3904      	subs	r1, #4
 8003b1c:	2903      	cmp	r1, #3
 8003b1e:	f846 5b04 	str.w	r5, [r6], #4
 8003b22:	d8fa      	bhi.n	8003b1a <__aeabi_memset+0x6a>
 8003b24:	1f21      	subs	r1, r4, #4
 8003b26:	f021 0103 	bic.w	r1, r1, #3
 8003b2a:	3104      	adds	r1, #4
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f004 0403 	and.w	r4, r4, #3
 8003b32:	b12c      	cbz	r4, 8003b40 <__aeabi_memset+0x90>
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	441c      	add	r4, r3
 8003b38:	f803 2b01 	strb.w	r2, [r3], #1
 8003b3c:	42a3      	cmp	r3, r4
 8003b3e:	d1fb      	bne.n	8003b38 <__aeabi_memset+0x88>
 8003b40:	bc70      	pop	{r4, r5, r6}
 8003b42:	4770      	bx	lr
 8003b44:	460c      	mov	r4, r1
 8003b46:	4603      	mov	r3, r0
 8003b48:	e7c2      	b.n	8003ad0 <__aeabi_memset+0x20>
 8003b4a:	0000      	movs	r0, r0
 8003b4c:	0000      	movs	r0, r0
	...

08003b50 <memchr>:
 8003b50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003b54:	2a10      	cmp	r2, #16
 8003b56:	db2b      	blt.n	8003bb0 <memchr+0x60>
 8003b58:	f010 0f07 	tst.w	r0, #7
 8003b5c:	d008      	beq.n	8003b70 <memchr+0x20>
 8003b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003b62:	3a01      	subs	r2, #1
 8003b64:	428b      	cmp	r3, r1
 8003b66:	d02d      	beq.n	8003bc4 <memchr+0x74>
 8003b68:	f010 0f07 	tst.w	r0, #7
 8003b6c:	b342      	cbz	r2, 8003bc0 <memchr+0x70>
 8003b6e:	d1f6      	bne.n	8003b5e <memchr+0xe>
 8003b70:	b4f0      	push	{r4, r5, r6, r7}
 8003b72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003b76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8003b7a:	f022 0407 	bic.w	r4, r2, #7
 8003b7e:	f07f 0700 	mvns.w	r7, #0
 8003b82:	2300      	movs	r3, #0
 8003b84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003b88:	3c08      	subs	r4, #8
 8003b8a:	ea85 0501 	eor.w	r5, r5, r1
 8003b8e:	ea86 0601 	eor.w	r6, r6, r1
 8003b92:	fa85 f547 	uadd8	r5, r5, r7
 8003b96:	faa3 f587 	sel	r5, r3, r7
 8003b9a:	fa86 f647 	uadd8	r6, r6, r7
 8003b9e:	faa5 f687 	sel	r6, r5, r7
 8003ba2:	b98e      	cbnz	r6, 8003bc8 <memchr+0x78>
 8003ba4:	d1ee      	bne.n	8003b84 <memchr+0x34>
 8003ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ba8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003bac:	f002 0207 	and.w	r2, r2, #7
 8003bb0:	b132      	cbz	r2, 8003bc0 <memchr+0x70>
 8003bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	ea83 0301 	eor.w	r3, r3, r1
 8003bbc:	b113      	cbz	r3, 8003bc4 <memchr+0x74>
 8003bbe:	d1f8      	bne.n	8003bb2 <memchr+0x62>
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	4770      	bx	lr
 8003bc4:	3801      	subs	r0, #1
 8003bc6:	4770      	bx	lr
 8003bc8:	2d00      	cmp	r5, #0
 8003bca:	bf06      	itte	eq
 8003bcc:	4635      	moveq	r5, r6
 8003bce:	3803      	subeq	r0, #3
 8003bd0:	3807      	subne	r0, #7
 8003bd2:	f015 0f01 	tst.w	r5, #1
 8003bd6:	d107      	bne.n	8003be8 <memchr+0x98>
 8003bd8:	3001      	adds	r0, #1
 8003bda:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003bde:	bf02      	ittt	eq
 8003be0:	3001      	addeq	r0, #1
 8003be2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003be6:	3001      	addeq	r0, #1
 8003be8:	bcf0      	pop	{r4, r5, r6, r7}
 8003bea:	3801      	subs	r0, #1
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <__aeabi_drsub>:
 8003bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003bf4:	e002      	b.n	8003bfc <__adddf3>
 8003bf6:	bf00      	nop

08003bf8 <__aeabi_dsub>:
 8003bf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003bfc <__adddf3>:
 8003bfc:	b530      	push	{r4, r5, lr}
 8003bfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003c02:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003c06:	ea94 0f05 	teq	r4, r5
 8003c0a:	bf08      	it	eq
 8003c0c:	ea90 0f02 	teqeq	r0, r2
 8003c10:	bf1f      	itttt	ne
 8003c12:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003c16:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003c1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003c1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003c22:	f000 80e2 	beq.w	8003dea <__adddf3+0x1ee>
 8003c26:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003c2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003c2e:	bfb8      	it	lt
 8003c30:	426d      	neglt	r5, r5
 8003c32:	dd0c      	ble.n	8003c4e <__adddf3+0x52>
 8003c34:	442c      	add	r4, r5
 8003c36:	ea80 0202 	eor.w	r2, r0, r2
 8003c3a:	ea81 0303 	eor.w	r3, r1, r3
 8003c3e:	ea82 0000 	eor.w	r0, r2, r0
 8003c42:	ea83 0101 	eor.w	r1, r3, r1
 8003c46:	ea80 0202 	eor.w	r2, r0, r2
 8003c4a:	ea81 0303 	eor.w	r3, r1, r3
 8003c4e:	2d36      	cmp	r5, #54	; 0x36
 8003c50:	bf88      	it	hi
 8003c52:	bd30      	pophi	{r4, r5, pc}
 8003c54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003c58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003c5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003c60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003c64:	d002      	beq.n	8003c6c <__adddf3+0x70>
 8003c66:	4240      	negs	r0, r0
 8003c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003c6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003c70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003c74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003c78:	d002      	beq.n	8003c80 <__adddf3+0x84>
 8003c7a:	4252      	negs	r2, r2
 8003c7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003c80:	ea94 0f05 	teq	r4, r5
 8003c84:	f000 80a7 	beq.w	8003dd6 <__adddf3+0x1da>
 8003c88:	f1a4 0401 	sub.w	r4, r4, #1
 8003c8c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003c90:	db0d      	blt.n	8003cae <__adddf3+0xb2>
 8003c92:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003c96:	fa22 f205 	lsr.w	r2, r2, r5
 8003c9a:	1880      	adds	r0, r0, r2
 8003c9c:	f141 0100 	adc.w	r1, r1, #0
 8003ca0:	fa03 f20e 	lsl.w	r2, r3, lr
 8003ca4:	1880      	adds	r0, r0, r2
 8003ca6:	fa43 f305 	asr.w	r3, r3, r5
 8003caa:	4159      	adcs	r1, r3
 8003cac:	e00e      	b.n	8003ccc <__adddf3+0xd0>
 8003cae:	f1a5 0520 	sub.w	r5, r5, #32
 8003cb2:	f10e 0e20 	add.w	lr, lr, #32
 8003cb6:	2a01      	cmp	r2, #1
 8003cb8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003cbc:	bf28      	it	cs
 8003cbe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003cc2:	fa43 f305 	asr.w	r3, r3, r5
 8003cc6:	18c0      	adds	r0, r0, r3
 8003cc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003ccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003cd0:	d507      	bpl.n	8003ce2 <__adddf3+0xe6>
 8003cd2:	f04f 0e00 	mov.w	lr, #0
 8003cd6:	f1dc 0c00 	rsbs	ip, ip, #0
 8003cda:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003cde:	eb6e 0101 	sbc.w	r1, lr, r1
 8003ce2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003ce6:	d31b      	bcc.n	8003d20 <__adddf3+0x124>
 8003ce8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003cec:	d30c      	bcc.n	8003d08 <__adddf3+0x10c>
 8003cee:	0849      	lsrs	r1, r1, #1
 8003cf0:	ea5f 0030 	movs.w	r0, r0, rrx
 8003cf4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003cf8:	f104 0401 	add.w	r4, r4, #1
 8003cfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003d00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003d04:	f080 809a 	bcs.w	8003e3c <__adddf3+0x240>
 8003d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003d0c:	bf08      	it	eq
 8003d0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003d12:	f150 0000 	adcs.w	r0, r0, #0
 8003d16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003d1a:	ea41 0105 	orr.w	r1, r1, r5
 8003d1e:	bd30      	pop	{r4, r5, pc}
 8003d20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003d24:	4140      	adcs	r0, r0
 8003d26:	eb41 0101 	adc.w	r1, r1, r1
 8003d2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d2e:	f1a4 0401 	sub.w	r4, r4, #1
 8003d32:	d1e9      	bne.n	8003d08 <__adddf3+0x10c>
 8003d34:	f091 0f00 	teq	r1, #0
 8003d38:	bf04      	itt	eq
 8003d3a:	4601      	moveq	r1, r0
 8003d3c:	2000      	moveq	r0, #0
 8003d3e:	fab1 f381 	clz	r3, r1
 8003d42:	bf08      	it	eq
 8003d44:	3320      	addeq	r3, #32
 8003d46:	f1a3 030b 	sub.w	r3, r3, #11
 8003d4a:	f1b3 0220 	subs.w	r2, r3, #32
 8003d4e:	da0c      	bge.n	8003d6a <__adddf3+0x16e>
 8003d50:	320c      	adds	r2, #12
 8003d52:	dd08      	ble.n	8003d66 <__adddf3+0x16a>
 8003d54:	f102 0c14 	add.w	ip, r2, #20
 8003d58:	f1c2 020c 	rsb	r2, r2, #12
 8003d5c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003d60:	fa21 f102 	lsr.w	r1, r1, r2
 8003d64:	e00c      	b.n	8003d80 <__adddf3+0x184>
 8003d66:	f102 0214 	add.w	r2, r2, #20
 8003d6a:	bfd8      	it	le
 8003d6c:	f1c2 0c20 	rsble	ip, r2, #32
 8003d70:	fa01 f102 	lsl.w	r1, r1, r2
 8003d74:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003d78:	bfdc      	itt	le
 8003d7a:	ea41 010c 	orrle.w	r1, r1, ip
 8003d7e:	4090      	lslle	r0, r2
 8003d80:	1ae4      	subs	r4, r4, r3
 8003d82:	bfa2      	ittt	ge
 8003d84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003d88:	4329      	orrge	r1, r5
 8003d8a:	bd30      	popge	{r4, r5, pc}
 8003d8c:	ea6f 0404 	mvn.w	r4, r4
 8003d90:	3c1f      	subs	r4, #31
 8003d92:	da1c      	bge.n	8003dce <__adddf3+0x1d2>
 8003d94:	340c      	adds	r4, #12
 8003d96:	dc0e      	bgt.n	8003db6 <__adddf3+0x1ba>
 8003d98:	f104 0414 	add.w	r4, r4, #20
 8003d9c:	f1c4 0220 	rsb	r2, r4, #32
 8003da0:	fa20 f004 	lsr.w	r0, r0, r4
 8003da4:	fa01 f302 	lsl.w	r3, r1, r2
 8003da8:	ea40 0003 	orr.w	r0, r0, r3
 8003dac:	fa21 f304 	lsr.w	r3, r1, r4
 8003db0:	ea45 0103 	orr.w	r1, r5, r3
 8003db4:	bd30      	pop	{r4, r5, pc}
 8003db6:	f1c4 040c 	rsb	r4, r4, #12
 8003dba:	f1c4 0220 	rsb	r2, r4, #32
 8003dbe:	fa20 f002 	lsr.w	r0, r0, r2
 8003dc2:	fa01 f304 	lsl.w	r3, r1, r4
 8003dc6:	ea40 0003 	orr.w	r0, r0, r3
 8003dca:	4629      	mov	r1, r5
 8003dcc:	bd30      	pop	{r4, r5, pc}
 8003dce:	fa21 f004 	lsr.w	r0, r1, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	bd30      	pop	{r4, r5, pc}
 8003dd6:	f094 0f00 	teq	r4, #0
 8003dda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003dde:	bf06      	itte	eq
 8003de0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003de4:	3401      	addeq	r4, #1
 8003de6:	3d01      	subne	r5, #1
 8003de8:	e74e      	b.n	8003c88 <__adddf3+0x8c>
 8003dea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003dee:	bf18      	it	ne
 8003df0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003df4:	d029      	beq.n	8003e4a <__adddf3+0x24e>
 8003df6:	ea94 0f05 	teq	r4, r5
 8003dfa:	bf08      	it	eq
 8003dfc:	ea90 0f02 	teqeq	r0, r2
 8003e00:	d005      	beq.n	8003e0e <__adddf3+0x212>
 8003e02:	ea54 0c00 	orrs.w	ip, r4, r0
 8003e06:	bf04      	itt	eq
 8003e08:	4619      	moveq	r1, r3
 8003e0a:	4610      	moveq	r0, r2
 8003e0c:	bd30      	pop	{r4, r5, pc}
 8003e0e:	ea91 0f03 	teq	r1, r3
 8003e12:	bf1e      	ittt	ne
 8003e14:	2100      	movne	r1, #0
 8003e16:	2000      	movne	r0, #0
 8003e18:	bd30      	popne	{r4, r5, pc}
 8003e1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003e1e:	d105      	bne.n	8003e2c <__adddf3+0x230>
 8003e20:	0040      	lsls	r0, r0, #1
 8003e22:	4149      	adcs	r1, r1
 8003e24:	bf28      	it	cs
 8003e26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003e2a:	bd30      	pop	{r4, r5, pc}
 8003e2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003e30:	bf3c      	itt	cc
 8003e32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003e36:	bd30      	popcc	{r4, r5, pc}
 8003e38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003e3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003e40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	bd30      	pop	{r4, r5, pc}
 8003e4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003e4e:	bf1a      	itte	ne
 8003e50:	4619      	movne	r1, r3
 8003e52:	4610      	movne	r0, r2
 8003e54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003e58:	bf1c      	itt	ne
 8003e5a:	460b      	movne	r3, r1
 8003e5c:	4602      	movne	r2, r0
 8003e5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003e62:	bf06      	itte	eq
 8003e64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003e68:	ea91 0f03 	teqeq	r1, r3
 8003e6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003e70:	bd30      	pop	{r4, r5, pc}
 8003e72:	bf00      	nop

08003e74 <__aeabi_ui2d>:
 8003e74:	f090 0f00 	teq	r0, #0
 8003e78:	bf04      	itt	eq
 8003e7a:	2100      	moveq	r1, #0
 8003e7c:	4770      	bxeq	lr
 8003e7e:	b530      	push	{r4, r5, lr}
 8003e80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003e84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003e88:	f04f 0500 	mov.w	r5, #0
 8003e8c:	f04f 0100 	mov.w	r1, #0
 8003e90:	e750      	b.n	8003d34 <__adddf3+0x138>
 8003e92:	bf00      	nop

08003e94 <__aeabi_i2d>:
 8003e94:	f090 0f00 	teq	r0, #0
 8003e98:	bf04      	itt	eq
 8003e9a:	2100      	moveq	r1, #0
 8003e9c:	4770      	bxeq	lr
 8003e9e:	b530      	push	{r4, r5, lr}
 8003ea0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003ea4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ea8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003eac:	bf48      	it	mi
 8003eae:	4240      	negmi	r0, r0
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	e73e      	b.n	8003d34 <__adddf3+0x138>
 8003eb6:	bf00      	nop

08003eb8 <__aeabi_f2d>:
 8003eb8:	0042      	lsls	r2, r0, #1
 8003eba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003ebe:	ea4f 0131 	mov.w	r1, r1, rrx
 8003ec2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003ec6:	bf1f      	itttt	ne
 8003ec8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003ecc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003ed0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003ed4:	4770      	bxne	lr
 8003ed6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8003eda:	bf08      	it	eq
 8003edc:	4770      	bxeq	lr
 8003ede:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003ee2:	bf04      	itt	eq
 8003ee4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003ee8:	4770      	bxeq	lr
 8003eea:	b530      	push	{r4, r5, lr}
 8003eec:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003ef0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003ef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003ef8:	e71c      	b.n	8003d34 <__adddf3+0x138>
 8003efa:	bf00      	nop

08003efc <__aeabi_ul2d>:
 8003efc:	ea50 0201 	orrs.w	r2, r0, r1
 8003f00:	bf08      	it	eq
 8003f02:	4770      	bxeq	lr
 8003f04:	b530      	push	{r4, r5, lr}
 8003f06:	f04f 0500 	mov.w	r5, #0
 8003f0a:	e00a      	b.n	8003f22 <__aeabi_l2d+0x16>

08003f0c <__aeabi_l2d>:
 8003f0c:	ea50 0201 	orrs.w	r2, r0, r1
 8003f10:	bf08      	it	eq
 8003f12:	4770      	bxeq	lr
 8003f14:	b530      	push	{r4, r5, lr}
 8003f16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003f1a:	d502      	bpl.n	8003f22 <__aeabi_l2d+0x16>
 8003f1c:	4240      	negs	r0, r0
 8003f1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003f22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003f26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003f2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003f2e:	f43f aed8 	beq.w	8003ce2 <__adddf3+0xe6>
 8003f32:	f04f 0203 	mov.w	r2, #3
 8003f36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003f3a:	bf18      	it	ne
 8003f3c:	3203      	addne	r2, #3
 8003f3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003f42:	bf18      	it	ne
 8003f44:	3203      	addne	r2, #3
 8003f46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003f4a:	f1c2 0320 	rsb	r3, r2, #32
 8003f4e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003f52:	fa20 f002 	lsr.w	r0, r0, r2
 8003f56:	fa01 fe03 	lsl.w	lr, r1, r3
 8003f5a:	ea40 000e 	orr.w	r0, r0, lr
 8003f5e:	fa21 f102 	lsr.w	r1, r1, r2
 8003f62:	4414      	add	r4, r2
 8003f64:	e6bd      	b.n	8003ce2 <__adddf3+0xe6>
 8003f66:	bf00      	nop

08003f68 <__aeabi_dmul>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003f6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003f72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003f76:	bf1d      	ittte	ne
 8003f78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003f7c:	ea94 0f0c 	teqne	r4, ip
 8003f80:	ea95 0f0c 	teqne	r5, ip
 8003f84:	f000 f8de 	bleq	8004144 <__aeabi_dmul+0x1dc>
 8003f88:	442c      	add	r4, r5
 8003f8a:	ea81 0603 	eor.w	r6, r1, r3
 8003f8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003f92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003f96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003f9a:	bf18      	it	ne
 8003f9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003fa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa8:	d038      	beq.n	800401c <__aeabi_dmul+0xb4>
 8003faa:	fba0 ce02 	umull	ip, lr, r0, r2
 8003fae:	f04f 0500 	mov.w	r5, #0
 8003fb2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003fb6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003fba:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003fbe:	f04f 0600 	mov.w	r6, #0
 8003fc2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003fc6:	f09c 0f00 	teq	ip, #0
 8003fca:	bf18      	it	ne
 8003fcc:	f04e 0e01 	orrne.w	lr, lr, #1
 8003fd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003fd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003fd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003fdc:	d204      	bcs.n	8003fe8 <__aeabi_dmul+0x80>
 8003fde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003fe2:	416d      	adcs	r5, r5
 8003fe4:	eb46 0606 	adc.w	r6, r6, r6
 8003fe8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003fec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003ff0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003ff4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003ff8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003ffc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004000:	bf88      	it	hi
 8004002:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004006:	d81e      	bhi.n	8004046 <__aeabi_dmul+0xde>
 8004008:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800400c:	bf08      	it	eq
 800400e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004012:	f150 0000 	adcs.w	r0, r0, #0
 8004016:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004020:	ea46 0101 	orr.w	r1, r6, r1
 8004024:	ea40 0002 	orr.w	r0, r0, r2
 8004028:	ea81 0103 	eor.w	r1, r1, r3
 800402c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004030:	bfc2      	ittt	gt
 8004032:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004036:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800403a:	bd70      	popgt	{r4, r5, r6, pc}
 800403c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004040:	f04f 0e00 	mov.w	lr, #0
 8004044:	3c01      	subs	r4, #1
 8004046:	f300 80ab 	bgt.w	80041a0 <__aeabi_dmul+0x238>
 800404a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800404e:	bfde      	ittt	le
 8004050:	2000      	movle	r0, #0
 8004052:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004056:	bd70      	pople	{r4, r5, r6, pc}
 8004058:	f1c4 0400 	rsb	r4, r4, #0
 800405c:	3c20      	subs	r4, #32
 800405e:	da35      	bge.n	80040cc <__aeabi_dmul+0x164>
 8004060:	340c      	adds	r4, #12
 8004062:	dc1b      	bgt.n	800409c <__aeabi_dmul+0x134>
 8004064:	f104 0414 	add.w	r4, r4, #20
 8004068:	f1c4 0520 	rsb	r5, r4, #32
 800406c:	fa00 f305 	lsl.w	r3, r0, r5
 8004070:	fa20 f004 	lsr.w	r0, r0, r4
 8004074:	fa01 f205 	lsl.w	r2, r1, r5
 8004078:	ea40 0002 	orr.w	r0, r0, r2
 800407c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004084:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004088:	fa21 f604 	lsr.w	r6, r1, r4
 800408c:	eb42 0106 	adc.w	r1, r2, r6
 8004090:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004094:	bf08      	it	eq
 8004096:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800409a:	bd70      	pop	{r4, r5, r6, pc}
 800409c:	f1c4 040c 	rsb	r4, r4, #12
 80040a0:	f1c4 0520 	rsb	r5, r4, #32
 80040a4:	fa00 f304 	lsl.w	r3, r0, r4
 80040a8:	fa20 f005 	lsr.w	r0, r0, r5
 80040ac:	fa01 f204 	lsl.w	r2, r1, r4
 80040b0:	ea40 0002 	orr.w	r0, r0, r2
 80040b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80040b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80040bc:	f141 0100 	adc.w	r1, r1, #0
 80040c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80040c4:	bf08      	it	eq
 80040c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f1c4 0520 	rsb	r5, r4, #32
 80040d0:	fa00 f205 	lsl.w	r2, r0, r5
 80040d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80040d8:	fa20 f304 	lsr.w	r3, r0, r4
 80040dc:	fa01 f205 	lsl.w	r2, r1, r5
 80040e0:	ea43 0302 	orr.w	r3, r3, r2
 80040e4:	fa21 f004 	lsr.w	r0, r1, r4
 80040e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80040ec:	fa21 f204 	lsr.w	r2, r1, r4
 80040f0:	ea20 0002 	bic.w	r0, r0, r2
 80040f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80040f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80040fc:	bf08      	it	eq
 80040fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	f094 0f00 	teq	r4, #0
 8004108:	d10f      	bne.n	800412a <__aeabi_dmul+0x1c2>
 800410a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800410e:	0040      	lsls	r0, r0, #1
 8004110:	eb41 0101 	adc.w	r1, r1, r1
 8004114:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004118:	bf08      	it	eq
 800411a:	3c01      	subeq	r4, #1
 800411c:	d0f7      	beq.n	800410e <__aeabi_dmul+0x1a6>
 800411e:	ea41 0106 	orr.w	r1, r1, r6
 8004122:	f095 0f00 	teq	r5, #0
 8004126:	bf18      	it	ne
 8004128:	4770      	bxne	lr
 800412a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800412e:	0052      	lsls	r2, r2, #1
 8004130:	eb43 0303 	adc.w	r3, r3, r3
 8004134:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004138:	bf08      	it	eq
 800413a:	3d01      	subeq	r5, #1
 800413c:	d0f7      	beq.n	800412e <__aeabi_dmul+0x1c6>
 800413e:	ea43 0306 	orr.w	r3, r3, r6
 8004142:	4770      	bx	lr
 8004144:	ea94 0f0c 	teq	r4, ip
 8004148:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800414c:	bf18      	it	ne
 800414e:	ea95 0f0c 	teqne	r5, ip
 8004152:	d00c      	beq.n	800416e <__aeabi_dmul+0x206>
 8004154:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004158:	bf18      	it	ne
 800415a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800415e:	d1d1      	bne.n	8004104 <__aeabi_dmul+0x19c>
 8004160:	ea81 0103 	eor.w	r1, r1, r3
 8004164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004168:	f04f 0000 	mov.w	r0, #0
 800416c:	bd70      	pop	{r4, r5, r6, pc}
 800416e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004172:	bf06      	itte	eq
 8004174:	4610      	moveq	r0, r2
 8004176:	4619      	moveq	r1, r3
 8004178:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800417c:	d019      	beq.n	80041b2 <__aeabi_dmul+0x24a>
 800417e:	ea94 0f0c 	teq	r4, ip
 8004182:	d102      	bne.n	800418a <__aeabi_dmul+0x222>
 8004184:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004188:	d113      	bne.n	80041b2 <__aeabi_dmul+0x24a>
 800418a:	ea95 0f0c 	teq	r5, ip
 800418e:	d105      	bne.n	800419c <__aeabi_dmul+0x234>
 8004190:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004194:	bf1c      	itt	ne
 8004196:	4610      	movne	r0, r2
 8004198:	4619      	movne	r1, r3
 800419a:	d10a      	bne.n	80041b2 <__aeabi_dmul+0x24a>
 800419c:	ea81 0103 	eor.w	r1, r1, r3
 80041a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80041a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80041a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	bd70      	pop	{r4, r5, r6, pc}
 80041b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80041b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80041ba:	bd70      	pop	{r4, r5, r6, pc}

080041bc <__aeabi_ddiv>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80041c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80041c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80041ca:	bf1d      	ittte	ne
 80041cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80041d0:	ea94 0f0c 	teqne	r4, ip
 80041d4:	ea95 0f0c 	teqne	r5, ip
 80041d8:	f000 f8a7 	bleq	800432a <__aeabi_ddiv+0x16e>
 80041dc:	eba4 0405 	sub.w	r4, r4, r5
 80041e0:	ea81 0e03 	eor.w	lr, r1, r3
 80041e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80041e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80041ec:	f000 8088 	beq.w	8004300 <__aeabi_ddiv+0x144>
 80041f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80041f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80041f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80041fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004200:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004204:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004208:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800420c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004210:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004214:	429d      	cmp	r5, r3
 8004216:	bf08      	it	eq
 8004218:	4296      	cmpeq	r6, r2
 800421a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800421e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004222:	d202      	bcs.n	800422a <__aeabi_ddiv+0x6e>
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	ea4f 0232 	mov.w	r2, r2, rrx
 800422a:	1ab6      	subs	r6, r6, r2
 800422c:	eb65 0503 	sbc.w	r5, r5, r3
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	ea4f 0232 	mov.w	r2, r2, rrx
 8004236:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800423a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800423e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004242:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004246:	bf22      	ittt	cs
 8004248:	1ab6      	subcs	r6, r6, r2
 800424a:	4675      	movcs	r5, lr
 800424c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	ea4f 0232 	mov.w	r2, r2, rrx
 8004256:	ebb6 0e02 	subs.w	lr, r6, r2
 800425a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800425e:	bf22      	ittt	cs
 8004260:	1ab6      	subcs	r6, r6, r2
 8004262:	4675      	movcs	r5, lr
 8004264:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	ea4f 0232 	mov.w	r2, r2, rrx
 800426e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004272:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004276:	bf22      	ittt	cs
 8004278:	1ab6      	subcs	r6, r6, r2
 800427a:	4675      	movcs	r5, lr
 800427c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	ea4f 0232 	mov.w	r2, r2, rrx
 8004286:	ebb6 0e02 	subs.w	lr, r6, r2
 800428a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800428e:	bf22      	ittt	cs
 8004290:	1ab6      	subcs	r6, r6, r2
 8004292:	4675      	movcs	r5, lr
 8004294:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004298:	ea55 0e06 	orrs.w	lr, r5, r6
 800429c:	d018      	beq.n	80042d0 <__aeabi_ddiv+0x114>
 800429e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80042a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80042a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80042aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80042ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80042b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80042b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80042ba:	d1c0      	bne.n	800423e <__aeabi_ddiv+0x82>
 80042bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80042c0:	d10b      	bne.n	80042da <__aeabi_ddiv+0x11e>
 80042c2:	ea41 0100 	orr.w	r1, r1, r0
 80042c6:	f04f 0000 	mov.w	r0, #0
 80042ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80042ce:	e7b6      	b.n	800423e <__aeabi_ddiv+0x82>
 80042d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80042d4:	bf04      	itt	eq
 80042d6:	4301      	orreq	r1, r0
 80042d8:	2000      	moveq	r0, #0
 80042da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80042de:	bf88      	it	hi
 80042e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80042e4:	f63f aeaf 	bhi.w	8004046 <__aeabi_dmul+0xde>
 80042e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80042ec:	bf04      	itt	eq
 80042ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80042f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80042f6:	f150 0000 	adcs.w	r0, r0, #0
 80042fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004304:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004308:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800430c:	bfc2      	ittt	gt
 800430e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004312:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004316:	bd70      	popgt	{r4, r5, r6, pc}
 8004318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800431c:	f04f 0e00 	mov.w	lr, #0
 8004320:	3c01      	subs	r4, #1
 8004322:	e690      	b.n	8004046 <__aeabi_dmul+0xde>
 8004324:	ea45 0e06 	orr.w	lr, r5, r6
 8004328:	e68d      	b.n	8004046 <__aeabi_dmul+0xde>
 800432a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800432e:	ea94 0f0c 	teq	r4, ip
 8004332:	bf08      	it	eq
 8004334:	ea95 0f0c 	teqeq	r5, ip
 8004338:	f43f af3b 	beq.w	80041b2 <__aeabi_dmul+0x24a>
 800433c:	ea94 0f0c 	teq	r4, ip
 8004340:	d10a      	bne.n	8004358 <__aeabi_ddiv+0x19c>
 8004342:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004346:	f47f af34 	bne.w	80041b2 <__aeabi_dmul+0x24a>
 800434a:	ea95 0f0c 	teq	r5, ip
 800434e:	f47f af25 	bne.w	800419c <__aeabi_dmul+0x234>
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	e72c      	b.n	80041b2 <__aeabi_dmul+0x24a>
 8004358:	ea95 0f0c 	teq	r5, ip
 800435c:	d106      	bne.n	800436c <__aeabi_ddiv+0x1b0>
 800435e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004362:	f43f aefd 	beq.w	8004160 <__aeabi_dmul+0x1f8>
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	e722      	b.n	80041b2 <__aeabi_dmul+0x24a>
 800436c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004370:	bf18      	it	ne
 8004372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004376:	f47f aec5 	bne.w	8004104 <__aeabi_dmul+0x19c>
 800437a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800437e:	f47f af0d 	bne.w	800419c <__aeabi_dmul+0x234>
 8004382:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004386:	f47f aeeb 	bne.w	8004160 <__aeabi_dmul+0x1f8>
 800438a:	e712      	b.n	80041b2 <__aeabi_dmul+0x24a>

0800438c <__aeabi_d2uiz>:
 800438c:	004a      	lsls	r2, r1, #1
 800438e:	d211      	bcs.n	80043b4 <__aeabi_d2uiz+0x28>
 8004390:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004394:	d211      	bcs.n	80043ba <__aeabi_d2uiz+0x2e>
 8004396:	d50d      	bpl.n	80043b4 <__aeabi_d2uiz+0x28>
 8004398:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800439c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80043a0:	d40e      	bmi.n	80043c0 <__aeabi_d2uiz+0x34>
 80043a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80043a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80043ae:	fa23 f002 	lsr.w	r0, r3, r2
 80043b2:	4770      	bx	lr
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	4770      	bx	lr
 80043ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80043be:	d102      	bne.n	80043c6 <__aeabi_d2uiz+0x3a>
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	4770      	bx	lr
 80043c6:	f04f 0000 	mov.w	r0, #0
 80043ca:	4770      	bx	lr

080043cc <__aeabi_d2f>:
 80043cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80043d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80043d4:	bf24      	itt	cs
 80043d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80043da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80043de:	d90d      	bls.n	80043fc <__aeabi_d2f+0x30>
 80043e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80043e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80043e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80043ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80043f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80043f4:	bf08      	it	eq
 80043f6:	f020 0001 	biceq.w	r0, r0, #1
 80043fa:	4770      	bx	lr
 80043fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004400:	d121      	bne.n	8004446 <__aeabi_d2f+0x7a>
 8004402:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004406:	bfbc      	itt	lt
 8004408:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800440c:	4770      	bxlt	lr
 800440e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004412:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004416:	f1c2 0218 	rsb	r2, r2, #24
 800441a:	f1c2 0c20 	rsb	ip, r2, #32
 800441e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004422:	fa20 f002 	lsr.w	r0, r0, r2
 8004426:	bf18      	it	ne
 8004428:	f040 0001 	orrne.w	r0, r0, #1
 800442c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004430:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004434:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004438:	ea40 000c 	orr.w	r0, r0, ip
 800443c:	fa23 f302 	lsr.w	r3, r3, r2
 8004440:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004444:	e7cc      	b.n	80043e0 <__aeabi_d2f+0x14>
 8004446:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800444a:	d107      	bne.n	800445c <__aeabi_d2f+0x90>
 800444c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004450:	bf1e      	ittt	ne
 8004452:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004456:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800445a:	4770      	bxne	lr
 800445c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004460:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004464:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <__aeabi_uldivmod>:
 800446c:	b953      	cbnz	r3, 8004484 <__aeabi_uldivmod+0x18>
 800446e:	b94a      	cbnz	r2, 8004484 <__aeabi_uldivmod+0x18>
 8004470:	2900      	cmp	r1, #0
 8004472:	bf08      	it	eq
 8004474:	2800      	cmpeq	r0, #0
 8004476:	bf1c      	itt	ne
 8004478:	f04f 31ff 	movne.w	r1, #4294967295
 800447c:	f04f 30ff 	movne.w	r0, #4294967295
 8004480:	f000 b972 	b.w	8004768 <__aeabi_idiv0>
 8004484:	f1ad 0c08 	sub.w	ip, sp, #8
 8004488:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800448c:	f000 f806 	bl	800449c <__udivmoddi4>
 8004490:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004498:	b004      	add	sp, #16
 800449a:	4770      	bx	lr

0800449c <__udivmoddi4>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	9e08      	ldr	r6, [sp, #32]
 80044a2:	4604      	mov	r4, r0
 80044a4:	4688      	mov	r8, r1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d14b      	bne.n	8004542 <__udivmoddi4+0xa6>
 80044aa:	428a      	cmp	r2, r1
 80044ac:	4615      	mov	r5, r2
 80044ae:	d967      	bls.n	8004580 <__udivmoddi4+0xe4>
 80044b0:	fab2 f282 	clz	r2, r2
 80044b4:	b14a      	cbz	r2, 80044ca <__udivmoddi4+0x2e>
 80044b6:	f1c2 0720 	rsb	r7, r2, #32
 80044ba:	fa01 f302 	lsl.w	r3, r1, r2
 80044be:	fa20 f707 	lsr.w	r7, r0, r7
 80044c2:	4095      	lsls	r5, r2
 80044c4:	ea47 0803 	orr.w	r8, r7, r3
 80044c8:	4094      	lsls	r4, r2
 80044ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80044ce:	0c23      	lsrs	r3, r4, #16
 80044d0:	fbb8 f7fe 	udiv	r7, r8, lr
 80044d4:	fa1f fc85 	uxth.w	ip, r5
 80044d8:	fb0e 8817 	mls	r8, lr, r7, r8
 80044dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80044e0:	fb07 f10c 	mul.w	r1, r7, ip
 80044e4:	4299      	cmp	r1, r3
 80044e6:	d909      	bls.n	80044fc <__udivmoddi4+0x60>
 80044e8:	18eb      	adds	r3, r5, r3
 80044ea:	f107 30ff 	add.w	r0, r7, #4294967295
 80044ee:	f080 811b 	bcs.w	8004728 <__udivmoddi4+0x28c>
 80044f2:	4299      	cmp	r1, r3
 80044f4:	f240 8118 	bls.w	8004728 <__udivmoddi4+0x28c>
 80044f8:	3f02      	subs	r7, #2
 80044fa:	442b      	add	r3, r5
 80044fc:	1a5b      	subs	r3, r3, r1
 80044fe:	b2a4      	uxth	r4, r4
 8004500:	fbb3 f0fe 	udiv	r0, r3, lr
 8004504:	fb0e 3310 	mls	r3, lr, r0, r3
 8004508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800450c:	fb00 fc0c 	mul.w	ip, r0, ip
 8004510:	45a4      	cmp	ip, r4
 8004512:	d909      	bls.n	8004528 <__udivmoddi4+0x8c>
 8004514:	192c      	adds	r4, r5, r4
 8004516:	f100 33ff 	add.w	r3, r0, #4294967295
 800451a:	f080 8107 	bcs.w	800472c <__udivmoddi4+0x290>
 800451e:	45a4      	cmp	ip, r4
 8004520:	f240 8104 	bls.w	800472c <__udivmoddi4+0x290>
 8004524:	3802      	subs	r0, #2
 8004526:	442c      	add	r4, r5
 8004528:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800452c:	eba4 040c 	sub.w	r4, r4, ip
 8004530:	2700      	movs	r7, #0
 8004532:	b11e      	cbz	r6, 800453c <__udivmoddi4+0xa0>
 8004534:	40d4      	lsrs	r4, r2
 8004536:	2300      	movs	r3, #0
 8004538:	e9c6 4300 	strd	r4, r3, [r6]
 800453c:	4639      	mov	r1, r7
 800453e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004542:	428b      	cmp	r3, r1
 8004544:	d909      	bls.n	800455a <__udivmoddi4+0xbe>
 8004546:	2e00      	cmp	r6, #0
 8004548:	f000 80eb 	beq.w	8004722 <__udivmoddi4+0x286>
 800454c:	2700      	movs	r7, #0
 800454e:	e9c6 0100 	strd	r0, r1, [r6]
 8004552:	4638      	mov	r0, r7
 8004554:	4639      	mov	r1, r7
 8004556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455a:	fab3 f783 	clz	r7, r3
 800455e:	2f00      	cmp	r7, #0
 8004560:	d147      	bne.n	80045f2 <__udivmoddi4+0x156>
 8004562:	428b      	cmp	r3, r1
 8004564:	d302      	bcc.n	800456c <__udivmoddi4+0xd0>
 8004566:	4282      	cmp	r2, r0
 8004568:	f200 80fa 	bhi.w	8004760 <__udivmoddi4+0x2c4>
 800456c:	1a84      	subs	r4, r0, r2
 800456e:	eb61 0303 	sbc.w	r3, r1, r3
 8004572:	2001      	movs	r0, #1
 8004574:	4698      	mov	r8, r3
 8004576:	2e00      	cmp	r6, #0
 8004578:	d0e0      	beq.n	800453c <__udivmoddi4+0xa0>
 800457a:	e9c6 4800 	strd	r4, r8, [r6]
 800457e:	e7dd      	b.n	800453c <__udivmoddi4+0xa0>
 8004580:	b902      	cbnz	r2, 8004584 <__udivmoddi4+0xe8>
 8004582:	deff      	udf	#255	; 0xff
 8004584:	fab2 f282 	clz	r2, r2
 8004588:	2a00      	cmp	r2, #0
 800458a:	f040 808f 	bne.w	80046ac <__udivmoddi4+0x210>
 800458e:	1b49      	subs	r1, r1, r5
 8004590:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004594:	fa1f f885 	uxth.w	r8, r5
 8004598:	2701      	movs	r7, #1
 800459a:	fbb1 fcfe 	udiv	ip, r1, lr
 800459e:	0c23      	lsrs	r3, r4, #16
 80045a0:	fb0e 111c 	mls	r1, lr, ip, r1
 80045a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80045a8:	fb08 f10c 	mul.w	r1, r8, ip
 80045ac:	4299      	cmp	r1, r3
 80045ae:	d907      	bls.n	80045c0 <__udivmoddi4+0x124>
 80045b0:	18eb      	adds	r3, r5, r3
 80045b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80045b6:	d202      	bcs.n	80045be <__udivmoddi4+0x122>
 80045b8:	4299      	cmp	r1, r3
 80045ba:	f200 80cd 	bhi.w	8004758 <__udivmoddi4+0x2bc>
 80045be:	4684      	mov	ip, r0
 80045c0:	1a59      	subs	r1, r3, r1
 80045c2:	b2a3      	uxth	r3, r4
 80045c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80045c8:	fb0e 1410 	mls	r4, lr, r0, r1
 80045cc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80045d0:	fb08 f800 	mul.w	r8, r8, r0
 80045d4:	45a0      	cmp	r8, r4
 80045d6:	d907      	bls.n	80045e8 <__udivmoddi4+0x14c>
 80045d8:	192c      	adds	r4, r5, r4
 80045da:	f100 33ff 	add.w	r3, r0, #4294967295
 80045de:	d202      	bcs.n	80045e6 <__udivmoddi4+0x14a>
 80045e0:	45a0      	cmp	r8, r4
 80045e2:	f200 80b6 	bhi.w	8004752 <__udivmoddi4+0x2b6>
 80045e6:	4618      	mov	r0, r3
 80045e8:	eba4 0408 	sub.w	r4, r4, r8
 80045ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80045f0:	e79f      	b.n	8004532 <__udivmoddi4+0x96>
 80045f2:	f1c7 0c20 	rsb	ip, r7, #32
 80045f6:	40bb      	lsls	r3, r7
 80045f8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80045fc:	ea4e 0e03 	orr.w	lr, lr, r3
 8004600:	fa01 f407 	lsl.w	r4, r1, r7
 8004604:	fa20 f50c 	lsr.w	r5, r0, ip
 8004608:	fa21 f30c 	lsr.w	r3, r1, ip
 800460c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8004610:	4325      	orrs	r5, r4
 8004612:	fbb3 f9f8 	udiv	r9, r3, r8
 8004616:	0c2c      	lsrs	r4, r5, #16
 8004618:	fb08 3319 	mls	r3, r8, r9, r3
 800461c:	fa1f fa8e 	uxth.w	sl, lr
 8004620:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004624:	fb09 f40a 	mul.w	r4, r9, sl
 8004628:	429c      	cmp	r4, r3
 800462a:	fa02 f207 	lsl.w	r2, r2, r7
 800462e:	fa00 f107 	lsl.w	r1, r0, r7
 8004632:	d90b      	bls.n	800464c <__udivmoddi4+0x1b0>
 8004634:	eb1e 0303 	adds.w	r3, lr, r3
 8004638:	f109 30ff 	add.w	r0, r9, #4294967295
 800463c:	f080 8087 	bcs.w	800474e <__udivmoddi4+0x2b2>
 8004640:	429c      	cmp	r4, r3
 8004642:	f240 8084 	bls.w	800474e <__udivmoddi4+0x2b2>
 8004646:	f1a9 0902 	sub.w	r9, r9, #2
 800464a:	4473      	add	r3, lr
 800464c:	1b1b      	subs	r3, r3, r4
 800464e:	b2ad      	uxth	r5, r5
 8004650:	fbb3 f0f8 	udiv	r0, r3, r8
 8004654:	fb08 3310 	mls	r3, r8, r0, r3
 8004658:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800465c:	fb00 fa0a 	mul.w	sl, r0, sl
 8004660:	45a2      	cmp	sl, r4
 8004662:	d908      	bls.n	8004676 <__udivmoddi4+0x1da>
 8004664:	eb1e 0404 	adds.w	r4, lr, r4
 8004668:	f100 33ff 	add.w	r3, r0, #4294967295
 800466c:	d26b      	bcs.n	8004746 <__udivmoddi4+0x2aa>
 800466e:	45a2      	cmp	sl, r4
 8004670:	d969      	bls.n	8004746 <__udivmoddi4+0x2aa>
 8004672:	3802      	subs	r0, #2
 8004674:	4474      	add	r4, lr
 8004676:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800467a:	fba0 8902 	umull	r8, r9, r0, r2
 800467e:	eba4 040a 	sub.w	r4, r4, sl
 8004682:	454c      	cmp	r4, r9
 8004684:	46c2      	mov	sl, r8
 8004686:	464b      	mov	r3, r9
 8004688:	d354      	bcc.n	8004734 <__udivmoddi4+0x298>
 800468a:	d051      	beq.n	8004730 <__udivmoddi4+0x294>
 800468c:	2e00      	cmp	r6, #0
 800468e:	d069      	beq.n	8004764 <__udivmoddi4+0x2c8>
 8004690:	ebb1 050a 	subs.w	r5, r1, sl
 8004694:	eb64 0403 	sbc.w	r4, r4, r3
 8004698:	fa04 fc0c 	lsl.w	ip, r4, ip
 800469c:	40fd      	lsrs	r5, r7
 800469e:	40fc      	lsrs	r4, r7
 80046a0:	ea4c 0505 	orr.w	r5, ip, r5
 80046a4:	e9c6 5400 	strd	r5, r4, [r6]
 80046a8:	2700      	movs	r7, #0
 80046aa:	e747      	b.n	800453c <__udivmoddi4+0xa0>
 80046ac:	f1c2 0320 	rsb	r3, r2, #32
 80046b0:	fa20 f703 	lsr.w	r7, r0, r3
 80046b4:	4095      	lsls	r5, r2
 80046b6:	fa01 f002 	lsl.w	r0, r1, r2
 80046ba:	fa21 f303 	lsr.w	r3, r1, r3
 80046be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80046c2:	4338      	orrs	r0, r7
 80046c4:	0c01      	lsrs	r1, r0, #16
 80046c6:	fbb3 f7fe 	udiv	r7, r3, lr
 80046ca:	fa1f f885 	uxth.w	r8, r5
 80046ce:	fb0e 3317 	mls	r3, lr, r7, r3
 80046d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80046d6:	fb07 f308 	mul.w	r3, r7, r8
 80046da:	428b      	cmp	r3, r1
 80046dc:	fa04 f402 	lsl.w	r4, r4, r2
 80046e0:	d907      	bls.n	80046f2 <__udivmoddi4+0x256>
 80046e2:	1869      	adds	r1, r5, r1
 80046e4:	f107 3cff 	add.w	ip, r7, #4294967295
 80046e8:	d22f      	bcs.n	800474a <__udivmoddi4+0x2ae>
 80046ea:	428b      	cmp	r3, r1
 80046ec:	d92d      	bls.n	800474a <__udivmoddi4+0x2ae>
 80046ee:	3f02      	subs	r7, #2
 80046f0:	4429      	add	r1, r5
 80046f2:	1acb      	subs	r3, r1, r3
 80046f4:	b281      	uxth	r1, r0
 80046f6:	fbb3 f0fe 	udiv	r0, r3, lr
 80046fa:	fb0e 3310 	mls	r3, lr, r0, r3
 80046fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004702:	fb00 f308 	mul.w	r3, r0, r8
 8004706:	428b      	cmp	r3, r1
 8004708:	d907      	bls.n	800471a <__udivmoddi4+0x27e>
 800470a:	1869      	adds	r1, r5, r1
 800470c:	f100 3cff 	add.w	ip, r0, #4294967295
 8004710:	d217      	bcs.n	8004742 <__udivmoddi4+0x2a6>
 8004712:	428b      	cmp	r3, r1
 8004714:	d915      	bls.n	8004742 <__udivmoddi4+0x2a6>
 8004716:	3802      	subs	r0, #2
 8004718:	4429      	add	r1, r5
 800471a:	1ac9      	subs	r1, r1, r3
 800471c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8004720:	e73b      	b.n	800459a <__udivmoddi4+0xfe>
 8004722:	4637      	mov	r7, r6
 8004724:	4630      	mov	r0, r6
 8004726:	e709      	b.n	800453c <__udivmoddi4+0xa0>
 8004728:	4607      	mov	r7, r0
 800472a:	e6e7      	b.n	80044fc <__udivmoddi4+0x60>
 800472c:	4618      	mov	r0, r3
 800472e:	e6fb      	b.n	8004528 <__udivmoddi4+0x8c>
 8004730:	4541      	cmp	r1, r8
 8004732:	d2ab      	bcs.n	800468c <__udivmoddi4+0x1f0>
 8004734:	ebb8 0a02 	subs.w	sl, r8, r2
 8004738:	eb69 020e 	sbc.w	r2, r9, lr
 800473c:	3801      	subs	r0, #1
 800473e:	4613      	mov	r3, r2
 8004740:	e7a4      	b.n	800468c <__udivmoddi4+0x1f0>
 8004742:	4660      	mov	r0, ip
 8004744:	e7e9      	b.n	800471a <__udivmoddi4+0x27e>
 8004746:	4618      	mov	r0, r3
 8004748:	e795      	b.n	8004676 <__udivmoddi4+0x1da>
 800474a:	4667      	mov	r7, ip
 800474c:	e7d1      	b.n	80046f2 <__udivmoddi4+0x256>
 800474e:	4681      	mov	r9, r0
 8004750:	e77c      	b.n	800464c <__udivmoddi4+0x1b0>
 8004752:	3802      	subs	r0, #2
 8004754:	442c      	add	r4, r5
 8004756:	e747      	b.n	80045e8 <__udivmoddi4+0x14c>
 8004758:	f1ac 0c02 	sub.w	ip, ip, #2
 800475c:	442b      	add	r3, r5
 800475e:	e72f      	b.n	80045c0 <__udivmoddi4+0x124>
 8004760:	4638      	mov	r0, r7
 8004762:	e708      	b.n	8004576 <__udivmoddi4+0xda>
 8004764:	4637      	mov	r7, r6
 8004766:	e6e9      	b.n	800453c <__udivmoddi4+0xa0>

08004768 <__aeabi_idiv0>:
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop

0800476c <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8004786:	e04a      	b.n	800481e <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	60fa      	str	r2, [r7, #12]
 800478e:	ed93 7a00 	vldr	s14, [r3]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1d1a      	adds	r2, r3, #4
 8004796:	60ba      	str	r2, [r7, #8]
 8004798:	edd3 7a00 	vldr	s15, [r3]
 800479c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80047a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047a8:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	60fa      	str	r2, [r7, #12]
 80047b2:	ed93 7a00 	vldr	s14, [r3]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	1d1a      	adds	r2, r3, #4
 80047ba:	60ba      	str	r2, [r7, #8]
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80047c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047cc:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	60fa      	str	r2, [r7, #12]
 80047d6:	ed93 7a00 	vldr	s14, [r3]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	60ba      	str	r2, [r7, #8]
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80047ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f0:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	60fa      	str	r2, [r7, #12]
 80047fa:	ed93 7a00 	vldr	s14, [r3]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	60ba      	str	r2, [r7, #8]
 8004804:	edd3 7a00 	vldr	s15, [r3]
 8004808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004814:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	3b01      	subs	r3, #1
 800481c:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1b1      	bne.n	8004788 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 800482c:	e014      	b.n	8004858 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1d1a      	adds	r2, r3, #4
 8004832:	60fa      	str	r2, [r7, #12]
 8004834:	ed93 7a00 	vldr	s14, [r3]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	60ba      	str	r2, [r7, #8]
 800483e:	edd3 7a00 	vldr	s15, [r3]
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	ed97 7a05 	vldr	s14, [r7, #20]
 800484a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3b01      	subs	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e7      	bne.n	800482e <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	4613      	mov	r3, r2
 8004880:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	897a      	ldrh	r2, [r7, #10]
 8004886:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	893a      	ldrh	r2, [r7, #8]
 800488c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	605a      	str	r2, [r3, #4]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <HAL_Init+0x40>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <HAL_Init+0x40>)
 80048aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_Init+0x40>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_Init+0x40>)
 80048b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_Init+0x40>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <HAL_Init+0x40>)
 80048c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048c8:	2003      	movs	r0, #3
 80048ca:	f000 f94d 	bl	8004b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048ce:	2000      	movs	r0, #0
 80048d0:	f000 f808 	bl	80048e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048d4:	f006 fca2 	bl	800b21c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_InitTick+0x54>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_InitTick+0x58>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f965 	bl	8004bd2 <HAL_SYSTICK_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e00e      	b.n	8004930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b0f      	cmp	r3, #15
 8004916:	d80a      	bhi.n	800492e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004918:	2200      	movs	r2, #0
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	f000 f92d 	bl	8004b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004924:	4a06      	ldr	r2, [pc, #24]	; (8004940 <HAL_InitTick+0x5c>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000488 	.word	0x20000488
 800493c:	20000004 	.word	0x20000004
 8004940:	20000000 	.word	0x20000000

08004944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_IncTick+0x20>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_IncTick+0x24>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4413      	add	r3, r2
 8004954:	4a04      	ldr	r2, [pc, #16]	; (8004968 <HAL_IncTick+0x24>)
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000004 	.word	0x20000004
 8004968:	20001a04 	.word	0x20001a04

0800496c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return uwTick;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_GetTick+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20001a04 	.word	0x20001a04

08004984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7ff ffee 	bl	800496c <HAL_GetTick>
 8004990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d005      	beq.n	80049aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_Delay+0x40>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049aa:	bf00      	nop
 80049ac:	f7ff ffde 	bl	800496c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d8f7      	bhi.n	80049ac <HAL_Delay+0x28>
  {
  }
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20000004 	.word	0x20000004

080049c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	60d3      	str	r3, [r2, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <__NVIC_GetPriorityGrouping+0x18>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	f003 0307 	and.w	r3, r3, #7
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	db0b      	blt.n	8004a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	f003 021f 	and.w	r2, r3, #31
 8004a44:	4907      	ldr	r1, [pc, #28]	; (8004a64 <__NVIC_EnableIRQ+0x38>)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	e000e100 	.word	0xe000e100

08004a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	db0a      	blt.n	8004a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <__NVIC_SetPriority+0x4c>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	0112      	lsls	r2, r2, #4
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a90:	e00a      	b.n	8004aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4908      	ldr	r1, [pc, #32]	; (8004ab8 <__NVIC_SetPriority+0x50>)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	761a      	strb	r2, [r3, #24]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	e000e100 	.word	0xe000e100
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f1c3 0307 	rsb	r3, r3, #7
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf28      	it	cs
 8004ada:	2304      	movcs	r3, #4
 8004adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d902      	bls.n	8004aec <NVIC_EncodePriority+0x30>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3b03      	subs	r3, #3
 8004aea:	e000      	b.n	8004aee <NVIC_EncodePriority+0x32>
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43da      	mvns	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	401a      	ands	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b04:	f04f 31ff 	mov.w	r1, #4294967295
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	43d9      	mvns	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b14:	4313      	orrs	r3, r2
         );
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	; 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b34:	d301      	bcc.n	8004b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b36:	2301      	movs	r3, #1
 8004b38:	e00f      	b.n	8004b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <SysTick_Config+0x40>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b42:	210f      	movs	r1, #15
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	f7ff ff8e 	bl	8004a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <SysTick_Config+0x40>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b52:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <SysTick_Config+0x40>)
 8004b54:	2207      	movs	r2, #7
 8004b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	e000e010 	.word	0xe000e010

08004b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff29 	bl	80049c8 <__NVIC_SetPriorityGrouping>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	4603      	mov	r3, r0
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b90:	f7ff ff3e 	bl	8004a10 <__NVIC_GetPriorityGrouping>
 8004b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	f7ff ff8e 	bl	8004abc <NVIC_EncodePriority>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff5d 	bl	8004a68 <__NVIC_SetPriority>
}
 8004bae:	bf00      	nop
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff31 	bl	8004a2c <__NVIC_EnableIRQ>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff ffa2 	bl	8004b24 <SysTick_Config>
 8004be0:	4603      	mov	r3, r0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d106      	bne.n	8004c08 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004bfa:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c00:	f043 0304 	orr.w	r3, r3, #4
 8004c04:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004c06:	e005      	b.n	8004c14 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c0e:	f023 0304 	bic.w	r3, r3, #4
 8004c12:	6013      	str	r3, [r2, #0]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000e010 	.word	0xe000e010

08004c24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e011      	b.n	8004c5a <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	795b      	ldrb	r3, [r3, #5]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f006 fb10 	bl	800b26c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_DCMI_Start_DMA+0x20>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e086      	b.n	8004d92 <HAL_DCMI_Start_DMA+0x12e>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0202 	bic.w	r2, r2, #2
 8004cb2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6819      	ldr	r1, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	4a34      	ldr	r2, [pc, #208]	; (8004d9c <HAL_DCMI_Start_DMA+0x138>)
 8004cca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	4a33      	ldr	r2, [pc, #204]	; (8004da0 <HAL_DCMI_Start_DMA+0x13c>)
 8004cd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	2200      	movs	r2, #0
 8004cda:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cee:	d20a      	bcs.n	8004d06 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3328      	adds	r3, #40	; 0x28
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	f000 fab6 	bl	8005270 <HAL_DMA_Start_IT>
 8004d04:	e038      	b.n	8004d78 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	4a24      	ldr	r2, [pc, #144]	; (8004d9c <HAL_DCMI_Start_DMA+0x138>)
 8004d0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8004d20:	e009      	b.n	8004d36 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	085a      	lsrs	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	005a      	lsls	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3e:	d2f0      	bcs.n	8004d22 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	1e9a      	subs	r2, r3, #2
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3328      	adds	r3, #40	; 0x28
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	f000 fd66 	bl	8005844 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08004ef1 	.word	0x08004ef1
 8004da0:	0800501b 	.word	0x0800501b

08004da4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d016      	beq.n	8004dec <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	f043 0202 	orr.w	r2, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	4a2f      	ldr	r2, [pc, #188]	; (8004e9c <HAL_DCMI_IRQHandler+0xf8>)
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 faa2 	bl	8005330 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	f043 0201 	orr.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <HAL_DCMI_IRQHandler+0xf8>)
 8004e18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa86 	bl	8005330 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d006      	beq.n	8004e3c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2210      	movs	r2, #16
 8004e34:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f83c 	bl	8004eb4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d006      	beq.n	8004e54 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f83a 	bl	8004ec8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d019      	beq.n	8004e92 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d107      	bne.n	8004e7c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 021e 	bic.w	r2, r2, #30
 8004e7a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f825 	bl	8004edc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	0800501b 	.word	0x0800501b

08004ea0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d043      	beq.n	8004f92 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f16:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d118      	bne.n	8004f56 <DCMI_DMAXferCplt+0x66>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d015      	beq.n	8004f56 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	00da      	lsls	r2, r3, #3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	4619      	mov	r1, r3
 8004f46:	f001 fdc5 	bl	8006ad4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28
 8004f54:	e044      	b.n	8004fe0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d13c      	bne.n	8004fe0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	00da      	lsls	r2, r3, #3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4619      	mov	r1, r3
 8004f82:	f001 fda7 	bl	8006ad4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	1e5a      	subs	r2, r3, #1
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f90:	e026      	b.n	8004fe0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d006      	beq.n	8004fb0 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	e017      	b.n	8004fe0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	0099      	lsls	r1, r3, #2
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d112      	bne.n	8005012 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d103      	bne.n	8005012 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	2b02      	cmp	r3, #2
 8005030:	d003      	beq.n	800503a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f7ff ff30 	bl	8004ea0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e058      	b.n	800510c <HAL_DCMI_Init+0xc4>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f006 f922 	bl	800b2b0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005082:	f023 0308 	bic.w	r3, r3, #8
 8005086:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6819      	ldr	r1, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800509c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80050a8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80050b4:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d112      	bne.n	80050ec <HAL_DCMI_Init+0xa4>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	7f1b      	ldrb	r3, [r3, #28]
 80050ca:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	7f5b      	ldrb	r3, [r3, #29]
 80050d0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80050d2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	7f9b      	ldrb	r3, [r3, #30]
 80050d8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80050da:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	7fdb      	ldrb	r3, [r3, #31]
 80050e2:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80050e8:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80050ea:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 021e 	orr.w	r2, r2, #30
 80050fa:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005120:	f7ff fc24 	bl	800496c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e099      	b.n	8005264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005150:	e00f      	b.n	8005172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005152:	f7ff fc0b 	bl	800496c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b05      	cmp	r3, #5
 800515e:	d908      	bls.n	8005172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2203      	movs	r2, #3
 800516a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e078      	b.n	8005264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e8      	bne.n	8005152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4b38      	ldr	r3, [pc, #224]	; (800526c <HAL_DMA_Init+0x158>)
 800518c:	4013      	ands	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800519e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d107      	bne.n	80051dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	4313      	orrs	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b04      	cmp	r3, #4
 8005204:	d117      	bne.n	8005236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa99 	bl	8005750 <DMA_CheckFifoParam>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005232:	2301      	movs	r3, #1
 8005234:	e016      	b.n	8005264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fa50 	bl	80056e4 <DMA_CalcBaseAndBitshift>
 8005244:	4603      	mov	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	223f      	movs	r2, #63	; 0x3f
 800524e:	409a      	lsls	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	f010803f 	.word	0xf010803f

08005270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Start_IT+0x26>
 8005292:	2302      	movs	r3, #2
 8005294:	e048      	b.n	8005328 <HAL_DMA_Start_IT+0xb8>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d137      	bne.n	800531a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f9e2 	bl	8005688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	223f      	movs	r2, #63	; 0x3f
 80052ca:	409a      	lsls	r2, r3
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0216 	orr.w	r2, r2, #22
 80052de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052ee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e005      	b.n	8005326 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d004      	beq.n	800534e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e00c      	b.n	8005368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2205      	movs	r2, #5
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005380:	4b92      	ldr	r3, [pc, #584]	; (80055cc <HAL_DMA_IRQHandler+0x258>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a92      	ldr	r2, [pc, #584]	; (80055d0 <HAL_DMA_IRQHandler+0x25c>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539e:	2208      	movs	r2, #8
 80053a0:	409a      	lsls	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01a      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d013      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	2208      	movs	r2, #8
 80053ce:	409a      	lsls	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f043 0201 	orr.w	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	2201      	movs	r2, #1
 8005404:	409a      	lsls	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f043 0202 	orr.w	r2, r3, #2
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	2204      	movs	r2, #4
 800541c:	409a      	lsls	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d012      	beq.n	800544c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	2204      	movs	r2, #4
 800543a:	409a      	lsls	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f043 0204 	orr.w	r2, r3, #4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005450:	2210      	movs	r2, #16
 8005452:	409a      	lsls	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d043      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d03c      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	2210      	movs	r2, #16
 8005470:	409a      	lsls	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d018      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d024      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
 80054a2:	e01f      	b.n	80054e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
 80054b4:	e016      	b.n	80054e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d107      	bne.n	80054d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0208 	bic.w	r2, r2, #8
 80054d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	2220      	movs	r2, #32
 80054ea:	409a      	lsls	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 808e 	beq.w	8005612 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8086 	beq.w	8005612 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550a:	2220      	movs	r2, #32
 800550c:	409a      	lsls	r2, r3
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b05      	cmp	r3, #5
 800551c:	d136      	bne.n	800558c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0216 	bic.w	r2, r2, #22
 800552c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800553c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <HAL_DMA_IRQHandler+0x1da>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0208 	bic.w	r2, r2, #8
 800555c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005562:	223f      	movs	r2, #63	; 0x3f
 8005564:	409a      	lsls	r2, r3
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557e:	2b00      	cmp	r3, #0
 8005580:	d07d      	beq.n	800567e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
        }
        return;
 800558a:	e078      	b.n	800567e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01c      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d108      	bne.n	80055ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d030      	beq.n	8005612 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
 80055b8:	e02b      	b.n	8005612 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d027      	beq.n	8005612 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
 80055ca:	e022      	b.n	8005612 <HAL_DMA_IRQHandler+0x29e>
 80055cc:	20000488 	.word	0x20000488
 80055d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0210 	bic.w	r2, r2, #16
 80055f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	2b00      	cmp	r3, #0
 8005618:	d032      	beq.n	8005680 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d022      	beq.n	800566c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2205      	movs	r2, #5
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	3301      	adds	r3, #1
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	429a      	cmp	r2, r3
 8005648:	d307      	bcc.n	800565a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f2      	bne.n	800563e <HAL_DMA_IRQHandler+0x2ca>
 8005658:	e000      	b.n	800565c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800565a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
 800567c:	e000      	b.n	8005680 <HAL_DMA_IRQHandler+0x30c>
        return;
 800567e:	bf00      	nop
    }
  }
}
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop

08005688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d108      	bne.n	80056c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056c6:	e007      	b.n	80056d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	3b10      	subs	r3, #16
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <DMA_CalcBaseAndBitshift+0x64>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056fe:	4a13      	ldr	r2, [pc, #76]	; (800574c <DMA_CalcBaseAndBitshift+0x68>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d909      	bls.n	8005726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	659a      	str	r2, [r3, #88]	; 0x58
 8005724:	e007      	b.n	8005736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	aaaaaaab 	.word	0xaaaaaaab
 800574c:	0800dc4c 	.word	0x0800dc4c

08005750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11f      	bne.n	80057aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d855      	bhi.n	800581c <DMA_CheckFifoParam+0xcc>
 8005770:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <DMA_CheckFifoParam+0x28>)
 8005772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005776:	bf00      	nop
 8005778:	08005789 	.word	0x08005789
 800577c:	0800579b 	.word	0x0800579b
 8005780:	08005789 	.word	0x08005789
 8005784:	0800581d 	.word	0x0800581d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d045      	beq.n	8005820 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005798:	e042      	b.n	8005820 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057a2:	d13f      	bne.n	8005824 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a8:	e03c      	b.n	8005824 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b2:	d121      	bne.n	80057f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d836      	bhi.n	8005828 <DMA_CheckFifoParam+0xd8>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <DMA_CheckFifoParam+0x70>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057d7 	.word	0x080057d7
 80057c8:	080057d1 	.word	0x080057d1
 80057cc:	080057e9 	.word	0x080057e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e02f      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d024      	beq.n	800582c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e6:	e021      	b.n	800582c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057f0:	d11e      	bne.n	8005830 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057f6:	e01b      	b.n	8005830 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d902      	bls.n	8005804 <DMA_CheckFifoParam+0xb4>
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d003      	beq.n	800580a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005802:	e018      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      break;
 8005808:	e015      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
      break;
 800581a:	e00b      	b.n	8005834 <DMA_CheckFifoParam+0xe4>
      break;
 800581c:	bf00      	nop
 800581e:	e00a      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      break;
 8005820:	bf00      	nop
 8005822:	e008      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      break;
 8005824:	bf00      	nop
 8005826:	e006      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      break;
 8005828:	bf00      	nop
 800582a:	e004      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      break;
 800582c:	bf00      	nop
 800582e:	e002      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      break;   
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      break;
 8005834:	bf00      	nop
    }
  } 
  
  return status; 
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d106      	bne.n	800586c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f001 b913 	b.w	8006a92 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2240      	movs	r2, #64	; 0x40
 8005888:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f001 b901 	b.w	8006a92 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005896:	2b01      	cmp	r3, #1
 8005898:	d102      	bne.n	80058a0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800589a:	2302      	movs	r3, #2
 800589c:	f001 b8f9 	b.w	8006a92 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	f041 80e7 	bne.w	8006a84 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80058d2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f001 f910 	bl	8006b08 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b99      	ldr	r3, [pc, #612]	; (8005b54 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d960      	bls.n	80059b6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a97      	ldr	r2, [pc, #604]	; (8005b58 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d057      	beq.n	80059ae <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a96      	ldr	r2, [pc, #600]	; (8005b5c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d050      	beq.n	80059aa <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a94      	ldr	r2, [pc, #592]	; (8005b60 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d049      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a93      	ldr	r2, [pc, #588]	; (8005b64 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d042      	beq.n	80059a2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a91      	ldr	r2, [pc, #580]	; (8005b68 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d03a      	beq.n	800599c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a90      	ldr	r2, [pc, #576]	; (8005b6c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d032      	beq.n	8005996 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a8e      	ldr	r2, [pc, #568]	; (8005b70 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d02a      	beq.n	8005990 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a8d      	ldr	r2, [pc, #564]	; (8005b74 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d022      	beq.n	800598a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a8b      	ldr	r2, [pc, #556]	; (8005b78 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01a      	beq.n	8005984 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a8a      	ldr	r2, [pc, #552]	; (8005b7c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d012      	beq.n	800597e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a88      	ldr	r2, [pc, #544]	; (8005b80 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00a      	beq.n	8005978 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a87      	ldr	r2, [pc, #540]	; (8005b84 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d102      	bne.n	8005972 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800596c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005970:	e01e      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005972:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005976:	e01b      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005978:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800597c:	e018      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800597e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005982:	e015      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005984:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005988:	e012      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800598a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800598e:	e00f      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005994:	e00c      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800599a:	e009      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800599c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059a0:	e006      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80059a2:	2320      	movs	r3, #32
 80059a4:	e004      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80059a6:	2320      	movs	r3, #32
 80059a8:	e002      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80059aa:	2320      	movs	r3, #32
 80059ac:	e000      	b.n	80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80059ae:	2320      	movs	r3, #32
 80059b0:	4a75      	ldr	r2, [pc, #468]	; (8005b88 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 80059b2:	60d3      	str	r3, [r2, #12]
 80059b4:	e150      	b.n	8005c58 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	4b73      	ldr	r3, [pc, #460]	; (8005b8c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 80059be:	429a      	cmp	r2, r3
 80059c0:	d960      	bls.n	8005a84 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a64      	ldr	r2, [pc, #400]	; (8005b58 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d057      	beq.n	8005a7c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a62      	ldr	r2, [pc, #392]	; (8005b5c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d050      	beq.n	8005a78 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a61      	ldr	r2, [pc, #388]	; (8005b60 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d049      	beq.n	8005a74 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a5f      	ldr	r2, [pc, #380]	; (8005b64 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d042      	beq.n	8005a70 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a5e      	ldr	r2, [pc, #376]	; (8005b68 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d03a      	beq.n	8005a6a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a5c      	ldr	r2, [pc, #368]	; (8005b6c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d032      	beq.n	8005a64 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a5b      	ldr	r2, [pc, #364]	; (8005b70 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d02a      	beq.n	8005a5e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a59      	ldr	r2, [pc, #356]	; (8005b74 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d022      	beq.n	8005a58 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a58      	ldr	r2, [pc, #352]	; (8005b78 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d01a      	beq.n	8005a52 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a56      	ldr	r2, [pc, #344]	; (8005b7c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d012      	beq.n	8005a4c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a55      	ldr	r2, [pc, #340]	; (8005b80 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00a      	beq.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a53      	ldr	r2, [pc, #332]	; (8005b84 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d102      	bne.n	8005a40 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8005a3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a3e:	e01e      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a44:	e01b      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a4a:	e018      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a50:	e015      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a56:	e012      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a5c:	e00f      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a62:	e00c      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a68:	e009      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a6e:	e006      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a70:	2320      	movs	r3, #32
 8005a72:	e004      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a74:	2320      	movs	r3, #32
 8005a76:	e002      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a78:	2320      	movs	r3, #32
 8005a7a:	e000      	b.n	8005a7e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	4a42      	ldr	r2, [pc, #264]	; (8005b88 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8005a80:	6093      	str	r3, [r2, #8]
 8005a82:	e0e9      	b.n	8005c58 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	f240 8083 	bls.w	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a30      	ldr	r2, [pc, #192]	; (8005b58 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d057      	beq.n	8005b4c <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2e      	ldr	r2, [pc, #184]	; (8005b5c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d050      	beq.n	8005b48 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2d      	ldr	r2, [pc, #180]	; (8005b60 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d049      	beq.n	8005b44 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d042      	beq.n	8005b40 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a2a      	ldr	r2, [pc, #168]	; (8005b68 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d03a      	beq.n	8005b3a <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a28      	ldr	r2, [pc, #160]	; (8005b6c <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d032      	beq.n	8005b34 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a27      	ldr	r2, [pc, #156]	; (8005b70 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d02a      	beq.n	8005b2e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a25      	ldr	r2, [pc, #148]	; (8005b74 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d022      	beq.n	8005b28 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a24      	ldr	r2, [pc, #144]	; (8005b78 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d01a      	beq.n	8005b22 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d012      	beq.n	8005b1c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00a      	beq.n	8005b16 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d102      	bne.n	8005b10 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8005b0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b0e:	e01e      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b14:	e01b      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b1a:	e018      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b20:	e015      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b26:	e012      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b2c:	e00f      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b32:	e00c      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b38:	e009      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b3e:	e006      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b40:	2320      	movs	r3, #32
 8005b42:	e004      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b44:	2320      	movs	r3, #32
 8005b46:	e002      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b48:	2320      	movs	r3, #32
 8005b4a:	e000      	b.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8005b50:	60d3      	str	r3, [r2, #12]
 8005b52:	e081      	b.n	8005c58 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8005b54:	40026458 	.word	0x40026458
 8005b58:	40026010 	.word	0x40026010
 8005b5c:	40026410 	.word	0x40026410
 8005b60:	40026070 	.word	0x40026070
 8005b64:	40026470 	.word	0x40026470
 8005b68:	40026028 	.word	0x40026028
 8005b6c:	40026428 	.word	0x40026428
 8005b70:	40026088 	.word	0x40026088
 8005b74:	40026488 	.word	0x40026488
 8005b78:	40026040 	.word	0x40026040
 8005b7c:	40026440 	.word	0x40026440
 8005b80:	400260a0 	.word	0x400260a0
 8005b84:	400264a0 	.word	0x400264a0
 8005b88:	40026400 	.word	0x40026400
 8005b8c:	400260b8 	.word	0x400260b8
 8005b90:	40026058 	.word	0x40026058
 8005b94:	40026000 	.word	0x40026000
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a96      	ldr	r2, [pc, #600]	; (8005df8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d057      	beq.n	8005c52 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a95      	ldr	r2, [pc, #596]	; (8005dfc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d050      	beq.n	8005c4e <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a93      	ldr	r2, [pc, #588]	; (8005e00 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d049      	beq.n	8005c4a <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a92      	ldr	r2, [pc, #584]	; (8005e04 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d042      	beq.n	8005c46 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a90      	ldr	r2, [pc, #576]	; (8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d03a      	beq.n	8005c40 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a8f      	ldr	r2, [pc, #572]	; (8005e0c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d032      	beq.n	8005c3a <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a8d      	ldr	r2, [pc, #564]	; (8005e10 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d02a      	beq.n	8005c34 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a8c      	ldr	r2, [pc, #560]	; (8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d022      	beq.n	8005c2e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a8a      	ldr	r2, [pc, #552]	; (8005e18 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01a      	beq.n	8005c28 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a89      	ldr	r2, [pc, #548]	; (8005e1c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d012      	beq.n	8005c22 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a87      	ldr	r2, [pc, #540]	; (8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00a      	beq.n	8005c1c <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a86      	ldr	r2, [pc, #536]	; (8005e24 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d102      	bne.n	8005c16 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8005c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c14:	e01e      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c1a:	e01b      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c20:	e018      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c26:	e015      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c2c:	e012      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c32:	e00f      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c38:	e00c      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c3e:	e009      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c44:	e006      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c46:	2320      	movs	r3, #32
 8005c48:	e004      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c4a:	2320      	movs	r3, #32
 8005c4c:	e002      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c4e:	2320      	movs	r3, #32
 8005c50:	e000      	b.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005c52:	2320      	movs	r3, #32
 8005c54:	4a74      	ldr	r2, [pc, #464]	; (8005e28 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8005c56:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b73      	ldr	r3, [pc, #460]	; (8005e2c <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d960      	bls.n	8005d26 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a63      	ldr	r2, [pc, #396]	; (8005df8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d057      	beq.n	8005d1e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a62      	ldr	r2, [pc, #392]	; (8005dfc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d050      	beq.n	8005d1a <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a60      	ldr	r2, [pc, #384]	; (8005e00 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d049      	beq.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a5f      	ldr	r2, [pc, #380]	; (8005e04 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d042      	beq.n	8005d12 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a5d      	ldr	r2, [pc, #372]	; (8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d03a      	beq.n	8005d0c <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a5c      	ldr	r2, [pc, #368]	; (8005e0c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d032      	beq.n	8005d06 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a5a      	ldr	r2, [pc, #360]	; (8005e10 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02a      	beq.n	8005d00 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a59      	ldr	r2, [pc, #356]	; (8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a57      	ldr	r2, [pc, #348]	; (8005e18 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01a      	beq.n	8005cf4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a56      	ldr	r2, [pc, #344]	; (8005e1c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d012      	beq.n	8005cee <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a54      	ldr	r2, [pc, #336]	; (8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00a      	beq.n	8005ce8 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a53      	ldr	r2, [pc, #332]	; (8005e24 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d102      	bne.n	8005ce2 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8005cdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ce0:	e01e      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005ce2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ce6:	e01b      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005ce8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005cec:	e018      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005cee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005cf2:	e015      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005cf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005cf8:	e012      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cfe:	e00f      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d04:	e00c      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d0a:	e009      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d10:	e006      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005d12:	2310      	movs	r3, #16
 8005d14:	e004      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005d16:	2310      	movs	r3, #16
 8005d18:	e002      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005d1a:	2310      	movs	r3, #16
 8005d1c:	e000      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005d1e:	2310      	movs	r3, #16
 8005d20:	4a43      	ldr	r2, [pc, #268]	; (8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8005d22:	60d3      	str	r3, [r2, #12]
 8005d24:	e14f      	b.n	8005fc6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	f240 8082 	bls.w	8005e38 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a2f      	ldr	r2, [pc, #188]	; (8005df8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d057      	beq.n	8005dee <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2e      	ldr	r2, [pc, #184]	; (8005dfc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d050      	beq.n	8005dea <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a2c      	ldr	r2, [pc, #176]	; (8005e00 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d049      	beq.n	8005de6 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2b      	ldr	r2, [pc, #172]	; (8005e04 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d042      	beq.n	8005de2 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a29      	ldr	r2, [pc, #164]	; (8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d03a      	beq.n	8005ddc <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a28      	ldr	r2, [pc, #160]	; (8005e0c <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d032      	beq.n	8005dd6 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a26      	ldr	r2, [pc, #152]	; (8005e10 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d02a      	beq.n	8005dd0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a25      	ldr	r2, [pc, #148]	; (8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a23      	ldr	r2, [pc, #140]	; (8005e18 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01a      	beq.n	8005dc4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d012      	beq.n	8005dbe <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a20      	ldr	r2, [pc, #128]	; (8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00a      	beq.n	8005db8 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d102      	bne.n	8005db2 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8005dac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005db0:	e01e      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005db2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005db6:	e01b      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005db8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005dbc:	e018      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005dbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005dc2:	e015      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005dc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005dc8:	e012      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dce:	e00f      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dd4:	e00c      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dda:	e009      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de0:	e006      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005de2:	2310      	movs	r3, #16
 8005de4:	e004      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005de6:	2310      	movs	r3, #16
 8005de8:	e002      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005dea:	2310      	movs	r3, #16
 8005dec:	e000      	b.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8005dee:	2310      	movs	r3, #16
 8005df0:	4a0f      	ldr	r2, [pc, #60]	; (8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8005df2:	6093      	str	r3, [r2, #8]
 8005df4:	e0e7      	b.n	8005fc6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8005df6:	bf00      	nop
 8005df8:	40026010 	.word	0x40026010
 8005dfc:	40026410 	.word	0x40026410
 8005e00:	40026070 	.word	0x40026070
 8005e04:	40026470 	.word	0x40026470
 8005e08:	40026028 	.word	0x40026028
 8005e0c:	40026428 	.word	0x40026428
 8005e10:	40026088 	.word	0x40026088
 8005e14:	40026488 	.word	0x40026488
 8005e18:	40026040 	.word	0x40026040
 8005e1c:	40026440 	.word	0x40026440
 8005e20:	400260a0 	.word	0x400260a0
 8005e24:	400264a0 	.word	0x400264a0
 8005e28:	40026000 	.word	0x40026000
 8005e2c:	40026458 	.word	0x40026458
 8005e30:	40026400 	.word	0x40026400
 8005e34:	400260b8 	.word	0x400260b8
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b96      	ldr	r3, [pc, #600]	; (8006098 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d960      	bls.n	8005f06 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a94      	ldr	r2, [pc, #592]	; (800609c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d057      	beq.n	8005efe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a93      	ldr	r2, [pc, #588]	; (80060a0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d050      	beq.n	8005efa <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a91      	ldr	r2, [pc, #580]	; (80060a4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d049      	beq.n	8005ef6 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a90      	ldr	r2, [pc, #576]	; (80060a8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d042      	beq.n	8005ef2 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a8e      	ldr	r2, [pc, #568]	; (80060ac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d03a      	beq.n	8005eec <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a8d      	ldr	r2, [pc, #564]	; (80060b0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d032      	beq.n	8005ee6 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a8b      	ldr	r2, [pc, #556]	; (80060b4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d02a      	beq.n	8005ee0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a8a      	ldr	r2, [pc, #552]	; (80060b8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d022      	beq.n	8005eda <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a88      	ldr	r2, [pc, #544]	; (80060bc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01a      	beq.n	8005ed4 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a87      	ldr	r2, [pc, #540]	; (80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d012      	beq.n	8005ece <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a85      	ldr	r2, [pc, #532]	; (80060c4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a84      	ldr	r2, [pc, #528]	; (80060c8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d102      	bne.n	8005ec2 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8005ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ec0:	e01e      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005ec2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ec6:	e01b      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005ec8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ecc:	e018      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005ece:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ed2:	e015      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005ed4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ed8:	e012      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ede:	e00f      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee4:	e00c      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eea:	e009      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef0:	e006      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	e004      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	e002      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005efa:	2310      	movs	r3, #16
 8005efc:	e000      	b.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8005efe:	2310      	movs	r3, #16
 8005f00:	4a72      	ldr	r2, [pc, #456]	; (80060cc <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8005f02:	60d3      	str	r3, [r2, #12]
 8005f04:	e05f      	b.n	8005fc6 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a64      	ldr	r2, [pc, #400]	; (800609c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d057      	beq.n	8005fc0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a62      	ldr	r2, [pc, #392]	; (80060a0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d050      	beq.n	8005fbc <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a61      	ldr	r2, [pc, #388]	; (80060a4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d049      	beq.n	8005fb8 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a5f      	ldr	r2, [pc, #380]	; (80060a8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d042      	beq.n	8005fb4 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a5e      	ldr	r2, [pc, #376]	; (80060ac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d03a      	beq.n	8005fae <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a5c      	ldr	r2, [pc, #368]	; (80060b0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d032      	beq.n	8005fa8 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a5b      	ldr	r2, [pc, #364]	; (80060b4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d02a      	beq.n	8005fa2 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a59      	ldr	r2, [pc, #356]	; (80060b8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d022      	beq.n	8005f9c <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a58      	ldr	r2, [pc, #352]	; (80060bc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d01a      	beq.n	8005f96 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a56      	ldr	r2, [pc, #344]	; (80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d012      	beq.n	8005f90 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a55      	ldr	r2, [pc, #340]	; (80060c4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00a      	beq.n	8005f8a <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a53      	ldr	r2, [pc, #332]	; (80060c8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d102      	bne.n	8005f84 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8005f7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f82:	e01e      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005f84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f88:	e01b      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005f8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f8e:	e018      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005f90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f94:	e015      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005f96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f9a:	e012      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fa0:	e00f      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fa6:	e00c      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fac:	e009      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb2:	e006      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	e004      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	e002      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	e000      	b.n	8005fc2 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	4a42      	ldr	r2, [pc, #264]	; (80060cc <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8005fc4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4b40      	ldr	r3, [pc, #256]	; (80060d0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	f240 8082 	bls.w	80060d8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a30      	ldr	r2, [pc, #192]	; (800609c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d057      	beq.n	800608e <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d050      	beq.n	800608a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2d      	ldr	r2, [pc, #180]	; (80060a4 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d049      	beq.n	8006086 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d042      	beq.n	8006082 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d03a      	beq.n	800607c <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a29      	ldr	r2, [pc, #164]	; (80060b0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d032      	beq.n	8006076 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a27      	ldr	r2, [pc, #156]	; (80060b4 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d02a      	beq.n	8006070 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a26      	ldr	r2, [pc, #152]	; (80060b8 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a24      	ldr	r2, [pc, #144]	; (80060bc <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01a      	beq.n	8006064 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a23      	ldr	r2, [pc, #140]	; (80060c0 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d012      	beq.n	800605e <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00a      	beq.n	8006058 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d102      	bne.n	8006052 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 800604c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006050:	e01e      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006056:	e01b      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006058:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800605c:	e018      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800605e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006062:	e015      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006064:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006068:	e012      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800606a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800606e:	e00f      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006074:	e00c      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800607a:	e009      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800607c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006080:	e006      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006082:	2308      	movs	r3, #8
 8006084:	e004      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006086:	2308      	movs	r3, #8
 8006088:	e002      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800608a:	2308      	movs	r3, #8
 800608c:	e000      	b.n	8006090 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800608e:	2308      	movs	r3, #8
 8006090:	4a10      	ldr	r2, [pc, #64]	; (80060d4 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8006092:	60d3      	str	r3, [r2, #12]
 8006094:	e16f      	b.n	8006376 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8006096:	bf00      	nop
 8006098:	40026058 	.word	0x40026058
 800609c:	40026010 	.word	0x40026010
 80060a0:	40026410 	.word	0x40026410
 80060a4:	40026070 	.word	0x40026070
 80060a8:	40026470 	.word	0x40026470
 80060ac:	40026028 	.word	0x40026028
 80060b0:	40026428 	.word	0x40026428
 80060b4:	40026088 	.word	0x40026088
 80060b8:	40026488 	.word	0x40026488
 80060bc:	40026040 	.word	0x40026040
 80060c0:	40026440 	.word	0x40026440
 80060c4:	400260a0 	.word	0x400260a0
 80060c8:	400264a0 	.word	0x400264a0
 80060cc:	40026000 	.word	0x40026000
 80060d0:	40026458 	.word	0x40026458
 80060d4:	40026400 	.word	0x40026400
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	4b94      	ldr	r3, [pc, #592]	; (8006330 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d960      	bls.n	80061a6 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a92      	ldr	r2, [pc, #584]	; (8006334 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d057      	beq.n	800619e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a91      	ldr	r2, [pc, #580]	; (8006338 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d050      	beq.n	800619a <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a8f      	ldr	r2, [pc, #572]	; (800633c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d049      	beq.n	8006196 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a8e      	ldr	r2, [pc, #568]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d042      	beq.n	8006192 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a8c      	ldr	r2, [pc, #560]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d03a      	beq.n	800618c <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a8b      	ldr	r2, [pc, #556]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d032      	beq.n	8006186 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a89      	ldr	r2, [pc, #548]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02a      	beq.n	8006180 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a88      	ldr	r2, [pc, #544]	; (8006350 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a86      	ldr	r2, [pc, #536]	; (8006354 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01a      	beq.n	8006174 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a85      	ldr	r2, [pc, #532]	; (8006358 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d012      	beq.n	800616e <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a83      	ldr	r2, [pc, #524]	; (800635c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00a      	beq.n	8006168 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a82      	ldr	r2, [pc, #520]	; (8006360 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d102      	bne.n	8006162 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 800615c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006160:	e01e      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006166:	e01b      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006168:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800616c:	e018      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800616e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006172:	e015      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006174:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006178:	e012      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800617a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617e:	e00f      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006184:	e00c      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800618a:	e009      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800618c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006190:	e006      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006192:	2308      	movs	r3, #8
 8006194:	e004      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006196:	2308      	movs	r3, #8
 8006198:	e002      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800619a:	2308      	movs	r3, #8
 800619c:	e000      	b.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800619e:	2308      	movs	r3, #8
 80061a0:	4a70      	ldr	r2, [pc, #448]	; (8006364 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80061a2:	6093      	str	r3, [r2, #8]
 80061a4:	e0e7      	b.n	8006376 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	4b6e      	ldr	r3, [pc, #440]	; (8006368 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d960      	bls.n	8006274 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a5f      	ldr	r2, [pc, #380]	; (8006334 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d057      	beq.n	800626c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a5d      	ldr	r2, [pc, #372]	; (8006338 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d050      	beq.n	8006268 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a5c      	ldr	r2, [pc, #368]	; (800633c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d049      	beq.n	8006264 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a5a      	ldr	r2, [pc, #360]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d042      	beq.n	8006260 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a59      	ldr	r2, [pc, #356]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d03a      	beq.n	800625a <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a57      	ldr	r2, [pc, #348]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d032      	beq.n	8006254 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a56      	ldr	r2, [pc, #344]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d02a      	beq.n	800624e <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a54      	ldr	r2, [pc, #336]	; (8006350 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d022      	beq.n	8006248 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a53      	ldr	r2, [pc, #332]	; (8006354 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d01a      	beq.n	8006242 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a51      	ldr	r2, [pc, #324]	; (8006358 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d012      	beq.n	800623c <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a50      	ldr	r2, [pc, #320]	; (800635c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00a      	beq.n	8006236 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a4e      	ldr	r2, [pc, #312]	; (8006360 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d102      	bne.n	8006230 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800622a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800622e:	e01e      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006234:	e01b      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006236:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800623a:	e018      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800623c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006240:	e015      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006242:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006246:	e012      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800624c:	e00f      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800624e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006252:	e00c      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006258:	e009      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800625a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800625e:	e006      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006260:	2308      	movs	r3, #8
 8006262:	e004      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006264:	2308      	movs	r3, #8
 8006266:	e002      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006268:	2308      	movs	r3, #8
 800626a:	e000      	b.n	800626e <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800626c:	2308      	movs	r3, #8
 800626e:	4a3f      	ldr	r2, [pc, #252]	; (800636c <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8006270:	60d3      	str	r3, [r2, #12]
 8006272:	e080      	b.n	8006376 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2e      	ldr	r2, [pc, #184]	; (8006334 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d078      	beq.n	8006370 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2d      	ldr	r2, [pc, #180]	; (8006338 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d050      	beq.n	800632a <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2b      	ldr	r2, [pc, #172]	; (800633c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d049      	beq.n	8006326 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d042      	beq.n	8006322 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a28      	ldr	r2, [pc, #160]	; (8006344 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d03a      	beq.n	800631c <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a27      	ldr	r2, [pc, #156]	; (8006348 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d032      	beq.n	8006316 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a25      	ldr	r2, [pc, #148]	; (800634c <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d02a      	beq.n	8006310 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a24      	ldr	r2, [pc, #144]	; (8006350 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a22      	ldr	r2, [pc, #136]	; (8006354 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01a      	beq.n	8006304 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a21      	ldr	r2, [pc, #132]	; (8006358 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d012      	beq.n	80062fe <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1f      	ldr	r2, [pc, #124]	; (800635c <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00a      	beq.n	80062f8 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d102      	bne.n	80062f2 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80062ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062f0:	e03f      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80062f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062f6:	e03c      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80062f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062fc:	e039      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80062fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006302:	e036      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006304:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006308:	e033      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800630a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800630e:	e030      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006314:	e02d      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800631a:	e02a      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800631c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006320:	e027      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006322:	2308      	movs	r3, #8
 8006324:	e025      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006326:	2308      	movs	r3, #8
 8006328:	e023      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800632a:	2308      	movs	r3, #8
 800632c:	e021      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800632e:	bf00      	nop
 8006330:	400260b8 	.word	0x400260b8
 8006334:	40026010 	.word	0x40026010
 8006338:	40026410 	.word	0x40026410
 800633c:	40026070 	.word	0x40026070
 8006340:	40026470 	.word	0x40026470
 8006344:	40026028 	.word	0x40026028
 8006348:	40026428 	.word	0x40026428
 800634c:	40026088 	.word	0x40026088
 8006350:	40026488 	.word	0x40026488
 8006354:	40026040 	.word	0x40026040
 8006358:	40026440 	.word	0x40026440
 800635c:	400260a0 	.word	0x400260a0
 8006360:	400264a0 	.word	0x400264a0
 8006364:	40026400 	.word	0x40026400
 8006368:	40026058 	.word	0x40026058
 800636c:	40026000 	.word	0x40026000
 8006370:	2308      	movs	r3, #8
 8006372:	4a9a      	ldr	r2, [pc, #616]	; (80065dc <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8006374:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	4b98      	ldr	r3, [pc, #608]	; (80065e0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800637e:	429a      	cmp	r2, r3
 8006380:	d960      	bls.n	8006444 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a97      	ldr	r2, [pc, #604]	; (80065e4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d057      	beq.n	800643c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a95      	ldr	r2, [pc, #596]	; (80065e8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d050      	beq.n	8006438 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a94      	ldr	r2, [pc, #592]	; (80065ec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d049      	beq.n	8006434 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a92      	ldr	r2, [pc, #584]	; (80065f0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d042      	beq.n	8006430 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a91      	ldr	r2, [pc, #580]	; (80065f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d03a      	beq.n	800642a <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a8f      	ldr	r2, [pc, #572]	; (80065f8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d032      	beq.n	8006424 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a8e      	ldr	r2, [pc, #568]	; (80065fc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d02a      	beq.n	800641e <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a8c      	ldr	r2, [pc, #560]	; (8006600 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d022      	beq.n	8006418 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a8b      	ldr	r2, [pc, #556]	; (8006604 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d01a      	beq.n	8006412 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a89      	ldr	r2, [pc, #548]	; (8006608 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d012      	beq.n	800640c <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a88      	ldr	r2, [pc, #544]	; (800660c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00a      	beq.n	8006406 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a86      	ldr	r2, [pc, #536]	; (8006610 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d102      	bne.n	8006400 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80063fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80063fe:	e01e      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006404:	e01b      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006406:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800640a:	e018      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800640c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006410:	e015      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006412:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006416:	e012      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800641c:	e00f      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800641e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006422:	e00c      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006428:	e009      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800642a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800642e:	e006      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006430:	2304      	movs	r3, #4
 8006432:	e004      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006434:	2304      	movs	r3, #4
 8006436:	e002      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006438:	2304      	movs	r3, #4
 800643a:	e000      	b.n	800643e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800643c:	2304      	movs	r3, #4
 800643e:	4a75      	ldr	r2, [pc, #468]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8006440:	60d3      	str	r3, [r2, #12]
 8006442:	e151      	b.n	80066e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	4b73      	ldr	r3, [pc, #460]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 800644c:	429a      	cmp	r2, r3
 800644e:	d960      	bls.n	8006512 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a63      	ldr	r2, [pc, #396]	; (80065e4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d057      	beq.n	800650a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a62      	ldr	r2, [pc, #392]	; (80065e8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d050      	beq.n	8006506 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a60      	ldr	r2, [pc, #384]	; (80065ec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d049      	beq.n	8006502 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a5f      	ldr	r2, [pc, #380]	; (80065f0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d042      	beq.n	80064fe <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a5d      	ldr	r2, [pc, #372]	; (80065f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d03a      	beq.n	80064f8 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a5c      	ldr	r2, [pc, #368]	; (80065f8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d032      	beq.n	80064f2 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a5a      	ldr	r2, [pc, #360]	; (80065fc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d02a      	beq.n	80064ec <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a59      	ldr	r2, [pc, #356]	; (8006600 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d022      	beq.n	80064e6 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a57      	ldr	r2, [pc, #348]	; (8006604 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d01a      	beq.n	80064e0 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a56      	ldr	r2, [pc, #344]	; (8006608 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d012      	beq.n	80064da <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a54      	ldr	r2, [pc, #336]	; (800660c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00a      	beq.n	80064d4 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a53      	ldr	r2, [pc, #332]	; (8006610 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d102      	bne.n	80064ce <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80064c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064cc:	e01e      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064d2:	e01b      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064d8:	e018      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064de:	e015      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064e4:	e012      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ea:	e00f      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064f0:	e00c      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064f6:	e009      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064fc:	e006      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80064fe:	2304      	movs	r3, #4
 8006500:	e004      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8006502:	2304      	movs	r3, #4
 8006504:	e002      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8006506:	2304      	movs	r3, #4
 8006508:	e000      	b.n	800650c <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800650a:	2304      	movs	r3, #4
 800650c:	4a41      	ldr	r2, [pc, #260]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 800650e:	6093      	str	r3, [r2, #8]
 8006510:	e0ea      	b.n	80066e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	4b40      	ldr	r3, [pc, #256]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 800651a:	429a      	cmp	r2, r3
 800651c:	f240 8084 	bls.w	8006628 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d07a      	beq.n	8006620 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a2e      	ldr	r2, [pc, #184]	; (80065e8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d050      	beq.n	80065d6 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2c      	ldr	r2, [pc, #176]	; (80065ec <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d049      	beq.n	80065d2 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2b      	ldr	r2, [pc, #172]	; (80065f0 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d042      	beq.n	80065ce <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a29      	ldr	r2, [pc, #164]	; (80065f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d03a      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a28      	ldr	r2, [pc, #160]	; (80065f8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d032      	beq.n	80065c2 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a26      	ldr	r2, [pc, #152]	; (80065fc <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d02a      	beq.n	80065bc <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a25      	ldr	r2, [pc, #148]	; (8006600 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d022      	beq.n	80065b6 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a23      	ldr	r2, [pc, #140]	; (8006604 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d01a      	beq.n	80065b0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a22      	ldr	r2, [pc, #136]	; (8006608 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d012      	beq.n	80065aa <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00a      	beq.n	80065a4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d102      	bne.n	800659e <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8006598:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800659c:	e041      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800659e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065a2:	e03e      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065a8:	e03b      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065ae:	e038      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065b4:	e035      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065ba:	e032      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065c0:	e02f      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065c6:	e02c      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065cc:	e029      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065ce:	2304      	movs	r3, #4
 80065d0:	e027      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065d2:	2304      	movs	r3, #4
 80065d4:	e025      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065d6:	2304      	movs	r3, #4
 80065d8:	e023      	b.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80065da:	bf00      	nop
 80065dc:	40026000 	.word	0x40026000
 80065e0:	40026458 	.word	0x40026458
 80065e4:	40026010 	.word	0x40026010
 80065e8:	40026410 	.word	0x40026410
 80065ec:	40026070 	.word	0x40026070
 80065f0:	40026470 	.word	0x40026470
 80065f4:	40026028 	.word	0x40026028
 80065f8:	40026428 	.word	0x40026428
 80065fc:	40026088 	.word	0x40026088
 8006600:	40026488 	.word	0x40026488
 8006604:	40026040 	.word	0x40026040
 8006608:	40026440 	.word	0x40026440
 800660c:	400260a0 	.word	0x400260a0
 8006610:	400264a0 	.word	0x400264a0
 8006614:	40026400 	.word	0x40026400
 8006618:	400260b8 	.word	0x400260b8
 800661c:	40026058 	.word	0x40026058
 8006620:	2304      	movs	r3, #4
 8006622:	4a94      	ldr	r2, [pc, #592]	; (8006874 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8006624:	60d3      	str	r3, [r2, #12]
 8006626:	e05f      	b.n	80066e8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a92      	ldr	r2, [pc, #584]	; (8006878 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d057      	beq.n	80066e2 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a91      	ldr	r2, [pc, #580]	; (800687c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d050      	beq.n	80066de <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a8f      	ldr	r2, [pc, #572]	; (8006880 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d049      	beq.n	80066da <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a8e      	ldr	r2, [pc, #568]	; (8006884 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d042      	beq.n	80066d6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a8c      	ldr	r2, [pc, #560]	; (8006888 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d03a      	beq.n	80066d0 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a8b      	ldr	r2, [pc, #556]	; (800688c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d032      	beq.n	80066ca <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a89      	ldr	r2, [pc, #548]	; (8006890 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d02a      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a88      	ldr	r2, [pc, #544]	; (8006894 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d022      	beq.n	80066be <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a86      	ldr	r2, [pc, #536]	; (8006898 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d01a      	beq.n	80066b8 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a85      	ldr	r2, [pc, #532]	; (800689c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d012      	beq.n	80066b2 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a83      	ldr	r2, [pc, #524]	; (80068a0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00a      	beq.n	80066ac <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a82      	ldr	r2, [pc, #520]	; (80068a4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d102      	bne.n	80066a6 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80066a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066a4:	e01e      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066aa:	e01b      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066b0:	e018      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066b6:	e015      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066bc:	e012      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066c2:	e00f      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066c8:	e00c      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066ce:	e009      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066d4:	e006      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066d6:	2304      	movs	r3, #4
 80066d8:	e004      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066da:	2304      	movs	r3, #4
 80066dc:	e002      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066de:	2304      	movs	r3, #4
 80066e0:	e000      	b.n	80066e4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80066e2:	2304      	movs	r3, #4
 80066e4:	4a63      	ldr	r2, [pc, #396]	; (8006874 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80066e6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	4b6e      	ldr	r3, [pc, #440]	; (80068a8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d95c      	bls.n	80067ae <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a5f      	ldr	r2, [pc, #380]	; (8006878 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d053      	beq.n	80067a6 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a5e      	ldr	r2, [pc, #376]	; (800687c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d04c      	beq.n	80067a2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a5c      	ldr	r2, [pc, #368]	; (8006880 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d045      	beq.n	800679e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a5b      	ldr	r2, [pc, #364]	; (8006884 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d03e      	beq.n	800679a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a59      	ldr	r2, [pc, #356]	; (8006888 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d037      	beq.n	8006796 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a58      	ldr	r2, [pc, #352]	; (800688c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d030      	beq.n	8006792 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a56      	ldr	r2, [pc, #344]	; (8006890 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d029      	beq.n	800678e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a55      	ldr	r2, [pc, #340]	; (8006894 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d022      	beq.n	800678a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a53      	ldr	r2, [pc, #332]	; (8006898 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d01a      	beq.n	8006784 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a52      	ldr	r2, [pc, #328]	; (800689c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d012      	beq.n	800677e <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a50      	ldr	r2, [pc, #320]	; (80068a0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00a      	beq.n	8006778 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a4f      	ldr	r2, [pc, #316]	; (80068a4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d102      	bne.n	8006772 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800676c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006770:	e01a      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006776:	e017      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800677c:	e014      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800677e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006782:	e011      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006788:	e00e      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800678a:	2340      	movs	r3, #64	; 0x40
 800678c:	e00c      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800678e:	2340      	movs	r3, #64	; 0x40
 8006790:	e00a      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	e008      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006796:	2340      	movs	r3, #64	; 0x40
 8006798:	e006      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800679a:	2301      	movs	r3, #1
 800679c:	e004      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800679e:	2301      	movs	r3, #1
 80067a0:	e002      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4a40      	ldr	r2, [pc, #256]	; (80068ac <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80067aa:	60d3      	str	r3, [r2, #12]
 80067ac:	e141      	b.n	8006a32 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d97c      	bls.n	80068b4 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a2e      	ldr	r2, [pc, #184]	; (8006878 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d053      	beq.n	800686c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a2c      	ldr	r2, [pc, #176]	; (800687c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d04c      	beq.n	8006868 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a2b      	ldr	r2, [pc, #172]	; (8006880 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d045      	beq.n	8006864 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a29      	ldr	r2, [pc, #164]	; (8006884 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d03e      	beq.n	8006860 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a28      	ldr	r2, [pc, #160]	; (8006888 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d037      	beq.n	800685c <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a26      	ldr	r2, [pc, #152]	; (800688c <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d030      	beq.n	8006858 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a25      	ldr	r2, [pc, #148]	; (8006890 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d029      	beq.n	8006854 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a23      	ldr	r2, [pc, #140]	; (8006894 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d022      	beq.n	8006850 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a22      	ldr	r2, [pc, #136]	; (8006898 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d01a      	beq.n	800684a <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a20      	ldr	r2, [pc, #128]	; (800689c <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d012      	beq.n	8006844 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00a      	beq.n	800683e <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d102      	bne.n	8006838 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8006832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006836:	e01a      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006838:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800683c:	e017      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800683e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006842:	e014      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006848:	e011      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800684a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800684e:	e00e      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	e00c      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006854:	2340      	movs	r3, #64	; 0x40
 8006856:	e00a      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006858:	2340      	movs	r3, #64	; 0x40
 800685a:	e008      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800685c:	2340      	movs	r3, #64	; 0x40
 800685e:	e006      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006860:	2301      	movs	r3, #1
 8006862:	e004      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006864:	2301      	movs	r3, #1
 8006866:	e002      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800686c:	2301      	movs	r3, #1
 800686e:	4a0f      	ldr	r2, [pc, #60]	; (80068ac <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8006870:	6093      	str	r3, [r2, #8]
 8006872:	e0de      	b.n	8006a32 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8006874:	40026000 	.word	0x40026000
 8006878:	40026010 	.word	0x40026010
 800687c:	40026410 	.word	0x40026410
 8006880:	40026070 	.word	0x40026070
 8006884:	40026470 	.word	0x40026470
 8006888:	40026028 	.word	0x40026028
 800688c:	40026428 	.word	0x40026428
 8006890:	40026088 	.word	0x40026088
 8006894:	40026488 	.word	0x40026488
 8006898:	40026040 	.word	0x40026040
 800689c:	40026440 	.word	0x40026440
 80068a0:	400260a0 	.word	0x400260a0
 80068a4:	400264a0 	.word	0x400264a0
 80068a8:	40026458 	.word	0x40026458
 80068ac:	40026400 	.word	0x40026400
 80068b0:	400260b8 	.word	0x400260b8
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b78      	ldr	r3, [pc, #480]	; (8006a9c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80068bc:	429a      	cmp	r2, r3
 80068be:	d95c      	bls.n	800697a <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a76      	ldr	r2, [pc, #472]	; (8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d053      	beq.n	8006972 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a75      	ldr	r2, [pc, #468]	; (8006aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d04c      	beq.n	800696e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a73      	ldr	r2, [pc, #460]	; (8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d045      	beq.n	800696a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a72      	ldr	r2, [pc, #456]	; (8006aac <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d03e      	beq.n	8006966 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a70      	ldr	r2, [pc, #448]	; (8006ab0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d037      	beq.n	8006962 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a6f      	ldr	r2, [pc, #444]	; (8006ab4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d030      	beq.n	800695e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a6d      	ldr	r2, [pc, #436]	; (8006ab8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d029      	beq.n	800695a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a6c      	ldr	r2, [pc, #432]	; (8006abc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d022      	beq.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a6a      	ldr	r2, [pc, #424]	; (8006ac0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d01a      	beq.n	8006950 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a69      	ldr	r2, [pc, #420]	; (8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d012      	beq.n	800694a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a67      	ldr	r2, [pc, #412]	; (8006ac8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00a      	beq.n	8006944 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a66      	ldr	r2, [pc, #408]	; (8006acc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d102      	bne.n	800693e <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8006938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800693c:	e01a      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800693e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006942:	e017      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006948:	e014      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800694a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800694e:	e011      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006954:	e00e      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006956:	2340      	movs	r3, #64	; 0x40
 8006958:	e00c      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	e00a      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800695e:	2340      	movs	r3, #64	; 0x40
 8006960:	e008      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006962:	2340      	movs	r3, #64	; 0x40
 8006964:	e006      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006966:	2301      	movs	r3, #1
 8006968:	e004      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800696a:	2301      	movs	r3, #1
 800696c:	e002      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006972:	2301      	movs	r3, #1
 8006974:	4a56      	ldr	r2, [pc, #344]	; (8006ad0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8006976:	60d3      	str	r3, [r2, #12]
 8006978:	e05b      	b.n	8006a32 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a48      	ldr	r2, [pc, #288]	; (8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d053      	beq.n	8006a2c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a46      	ldr	r2, [pc, #280]	; (8006aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d04c      	beq.n	8006a28 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a45      	ldr	r2, [pc, #276]	; (8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d045      	beq.n	8006a24 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a43      	ldr	r2, [pc, #268]	; (8006aac <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d03e      	beq.n	8006a20 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a42      	ldr	r2, [pc, #264]	; (8006ab0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d037      	beq.n	8006a1c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a40      	ldr	r2, [pc, #256]	; (8006ab4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d030      	beq.n	8006a18 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d029      	beq.n	8006a14 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a3d      	ldr	r2, [pc, #244]	; (8006abc <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d022      	beq.n	8006a10 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a3c      	ldr	r2, [pc, #240]	; (8006ac0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d01a      	beq.n	8006a0a <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a3a      	ldr	r2, [pc, #232]	; (8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d012      	beq.n	8006a04 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a39      	ldr	r2, [pc, #228]	; (8006ac8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00a      	beq.n	80069fe <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a37      	ldr	r2, [pc, #220]	; (8006acc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d102      	bne.n	80069f8 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80069f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069f6:	e01a      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80069f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069fc:	e017      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80069fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a02:	e014      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a08:	e011      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a0e:	e00e      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a10:	2340      	movs	r3, #64	; 0x40
 8006a12:	e00c      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a14:	2340      	movs	r3, #64	; 0x40
 8006a16:	e00a      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a18:	2340      	movs	r3, #64	; 0x40
 8006a1a:	e008      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	e006      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e004      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e002      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4a28      	ldr	r2, [pc, #160]	; (8006ad0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8006a30:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0216 	orr.w	r2, r2, #22
 8006a40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695a      	ldr	r2, [r3, #20]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d103      	bne.n	8006a62 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0208 	orr.w	r2, r2, #8
 8006a70:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0201 	orr.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e005      	b.n	8006a90 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40026058 	.word	0x40026058
 8006aa0:	40026010 	.word	0x40026010
 8006aa4:	40026410 	.word	0x40026410
 8006aa8:	40026070 	.word	0x40026070
 8006aac:	40026470 	.word	0x40026470
 8006ab0:	40026028 	.word	0x40026028
 8006ab4:	40026428 	.word	0x40026428
 8006ab8:	40026088 	.word	0x40026088
 8006abc:	40026488 	.word	0x40026488
 8006ac0:	40026040 	.word	0x40026040
 8006ac4:	40026440 	.word	0x40026440
 8006ac8:	400260a0 	.word	0x400260a0
 8006acc:	400264a0 	.word	0x400264a0
 8006ad0:	40026000 	.word	0x40026000

08006ad4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	60da      	str	r2, [r3, #12]
 8006af0:	e003      	b.n	8006afa <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b40      	cmp	r3, #64	; 0x40
 8006b24:	d108      	bne.n	8006b38 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006b36:	e007      	b.n	8006b48 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	60da      	str	r2, [r3, #12]
}
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b089      	sub	sp, #36	; 0x24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	e16b      	b.n	8006e48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b70:	2201      	movs	r2, #1
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4013      	ands	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	f040 815a 	bne.w	8006e42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d003      	beq.n	8006b9e <HAL_GPIO_Init+0x4a>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b12      	cmp	r3, #18
 8006b9c:	d123      	bne.n	8006be6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	08da      	lsrs	r2, r3, #3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3208      	adds	r2, #8
 8006ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	220f      	movs	r2, #15
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	08da      	lsrs	r2, r3, #3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3208      	adds	r2, #8
 8006be0:	69b9      	ldr	r1, [r7, #24]
 8006be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f003 0203 	and.w	r2, r3, #3
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d00b      	beq.n	8006c3a <HAL_GPIO_Init+0xe6>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d007      	beq.n	8006c3a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c2e:	2b11      	cmp	r3, #17
 8006c30:	d003      	beq.n	8006c3a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b12      	cmp	r3, #18
 8006c38:	d130      	bne.n	8006c9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	2203      	movs	r2, #3
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c70:	2201      	movs	r2, #1
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	091b      	lsrs	r3, r3, #4
 8006c86:	f003 0201 	and.w	r2, r3, #1
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	2203      	movs	r2, #3
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	43db      	mvns	r3, r3
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80b4 	beq.w	8006e42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	4b5f      	ldr	r3, [pc, #380]	; (8006e5c <HAL_GPIO_Init+0x308>)
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce2:	4a5e      	ldr	r2, [pc, #376]	; (8006e5c <HAL_GPIO_Init+0x308>)
 8006ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8006cea:	4b5c      	ldr	r3, [pc, #368]	; (8006e5c <HAL_GPIO_Init+0x308>)
 8006cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cf6:	4a5a      	ldr	r2, [pc, #360]	; (8006e60 <HAL_GPIO_Init+0x30c>)
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	089b      	lsrs	r3, r3, #2
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	220f      	movs	r2, #15
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	43db      	mvns	r3, r3
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	4013      	ands	r3, r2
 8006d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a51      	ldr	r2, [pc, #324]	; (8006e64 <HAL_GPIO_Init+0x310>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02b      	beq.n	8006d7a <HAL_GPIO_Init+0x226>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a50      	ldr	r2, [pc, #320]	; (8006e68 <HAL_GPIO_Init+0x314>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d025      	beq.n	8006d76 <HAL_GPIO_Init+0x222>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a4f      	ldr	r2, [pc, #316]	; (8006e6c <HAL_GPIO_Init+0x318>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01f      	beq.n	8006d72 <HAL_GPIO_Init+0x21e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a4e      	ldr	r2, [pc, #312]	; (8006e70 <HAL_GPIO_Init+0x31c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d019      	beq.n	8006d6e <HAL_GPIO_Init+0x21a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a4d      	ldr	r2, [pc, #308]	; (8006e74 <HAL_GPIO_Init+0x320>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <HAL_GPIO_Init+0x216>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a4c      	ldr	r2, [pc, #304]	; (8006e78 <HAL_GPIO_Init+0x324>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00d      	beq.n	8006d66 <HAL_GPIO_Init+0x212>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a4b      	ldr	r2, [pc, #300]	; (8006e7c <HAL_GPIO_Init+0x328>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <HAL_GPIO_Init+0x20e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a4a      	ldr	r2, [pc, #296]	; (8006e80 <HAL_GPIO_Init+0x32c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <HAL_GPIO_Init+0x20a>
 8006d5a:	2307      	movs	r3, #7
 8006d5c:	e00e      	b.n	8006d7c <HAL_GPIO_Init+0x228>
 8006d5e:	2308      	movs	r3, #8
 8006d60:	e00c      	b.n	8006d7c <HAL_GPIO_Init+0x228>
 8006d62:	2306      	movs	r3, #6
 8006d64:	e00a      	b.n	8006d7c <HAL_GPIO_Init+0x228>
 8006d66:	2305      	movs	r3, #5
 8006d68:	e008      	b.n	8006d7c <HAL_GPIO_Init+0x228>
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	e006      	b.n	8006d7c <HAL_GPIO_Init+0x228>
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e004      	b.n	8006d7c <HAL_GPIO_Init+0x228>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e002      	b.n	8006d7c <HAL_GPIO_Init+0x228>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <HAL_GPIO_Init+0x228>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	f002 0203 	and.w	r2, r2, #3
 8006d82:	0092      	lsls	r2, r2, #2
 8006d84:	4093      	lsls	r3, r2
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d8c:	4934      	ldr	r1, [pc, #208]	; (8006e60 <HAL_GPIO_Init+0x30c>)
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	089b      	lsrs	r3, r3, #2
 8006d92:	3302      	adds	r3, #2
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d9a:	4b3a      	ldr	r3, [pc, #232]	; (8006e84 <HAL_GPIO_Init+0x330>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	4013      	ands	r3, r2
 8006da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006dbe:	4a31      	ldr	r2, [pc, #196]	; (8006e84 <HAL_GPIO_Init+0x330>)
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006dc4:	4b2f      	ldr	r3, [pc, #188]	; (8006e84 <HAL_GPIO_Init+0x330>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006de8:	4a26      	ldr	r2, [pc, #152]	; (8006e84 <HAL_GPIO_Init+0x330>)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006dee:	4b25      	ldr	r3, [pc, #148]	; (8006e84 <HAL_GPIO_Init+0x330>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	43db      	mvns	r3, r3
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e12:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <HAL_GPIO_Init+0x330>)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <HAL_GPIO_Init+0x330>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	4013      	ands	r3, r2
 8006e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e3c:	4a11      	ldr	r2, [pc, #68]	; (8006e84 <HAL_GPIO_Init+0x330>)
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	3301      	adds	r3, #1
 8006e46:	61fb      	str	r3, [r7, #28]
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b0f      	cmp	r3, #15
 8006e4c:	f67f ae90 	bls.w	8006b70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e50:	bf00      	nop
 8006e52:	3724      	adds	r7, #36	; 0x24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	40013800 	.word	0x40013800
 8006e64:	40020000 	.word	0x40020000
 8006e68:	40020400 	.word	0x40020400
 8006e6c:	40020800 	.word	0x40020800
 8006e70:	40020c00 	.word	0x40020c00
 8006e74:	40021000 	.word	0x40021000
 8006e78:	40021400 	.word	0x40021400
 8006e7c:	40021800 	.word	0x40021800
 8006e80:	40021c00 	.word	0x40021c00
 8006e84:	40013c00 	.word	0x40013c00

08006e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e001      	b.n	8006eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ec8:	787b      	ldrb	r3, [r7, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ece:	887a      	ldrh	r2, [r7, #2]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ed4:	e003      	b.n	8006ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ed6:	887b      	ldrh	r3, [r7, #2]
 8006ed8:	041a      	lsls	r2, r3, #16
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	619a      	str	r2, [r3, #24]
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e10f      	b.n	800711e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f004 fa90 	bl	800b438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2224      	movs	r2, #36	; 0x24
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f30:	f001 f880 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 8006f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	4a7b      	ldr	r2, [pc, #492]	; (8007128 <HAL_I2C_Init+0x23c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d807      	bhi.n	8006f50 <HAL_I2C_Init+0x64>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a7a      	ldr	r2, [pc, #488]	; (800712c <HAL_I2C_Init+0x240>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bf94      	ite	ls
 8006f48:	2301      	movls	r3, #1
 8006f4a:	2300      	movhi	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	e006      	b.n	8006f5e <HAL_I2C_Init+0x72>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a77      	ldr	r2, [pc, #476]	; (8007130 <HAL_I2C_Init+0x244>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	bf94      	ite	ls
 8006f58:	2301      	movls	r3, #1
 8006f5a:	2300      	movhi	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e0db      	b.n	800711e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4a72      	ldr	r2, [pc, #456]	; (8007134 <HAL_I2C_Init+0x248>)
 8006f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6e:	0c9b      	lsrs	r3, r3, #18
 8006f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	4a64      	ldr	r2, [pc, #400]	; (8007128 <HAL_I2C_Init+0x23c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d802      	bhi.n	8006fa0 <HAL_I2C_Init+0xb4>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	e009      	b.n	8006fb4 <HAL_I2C_Init+0xc8>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006fa6:	fb02 f303 	mul.w	r3, r2, r3
 8006faa:	4a63      	ldr	r2, [pc, #396]	; (8007138 <HAL_I2C_Init+0x24c>)
 8006fac:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb0:	099b      	lsrs	r3, r3, #6
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4956      	ldr	r1, [pc, #344]	; (8007128 <HAL_I2C_Init+0x23c>)
 8006fd0:	428b      	cmp	r3, r1
 8006fd2:	d80d      	bhi.n	8006ff0 <HAL_I2C_Init+0x104>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	1e59      	subs	r1, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	bf38      	it	cc
 8006fec:	2304      	movcc	r3, #4
 8006fee:	e04f      	b.n	8007090 <HAL_I2C_Init+0x1a4>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d111      	bne.n	800701c <HAL_I2C_Init+0x130>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	1e58      	subs	r0, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6859      	ldr	r1, [r3, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	440b      	add	r3, r1
 8007006:	fbb0 f3f3 	udiv	r3, r0, r3
 800700a:	3301      	adds	r3, #1
 800700c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007010:	2b00      	cmp	r3, #0
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	e012      	b.n	8007042 <HAL_I2C_Init+0x156>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	1e58      	subs	r0, r3, #1
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6859      	ldr	r1, [r3, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	0099      	lsls	r1, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007032:	3301      	adds	r3, #1
 8007034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007038:	2b00      	cmp	r3, #0
 800703a:	bf0c      	ite	eq
 800703c:	2301      	moveq	r3, #1
 800703e:	2300      	movne	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_I2C_Init+0x15e>
 8007046:	2301      	movs	r3, #1
 8007048:	e022      	b.n	8007090 <HAL_I2C_Init+0x1a4>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10e      	bne.n	8007070 <HAL_I2C_Init+0x184>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	1e58      	subs	r0, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6859      	ldr	r1, [r3, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	440b      	add	r3, r1
 8007060:	fbb0 f3f3 	udiv	r3, r0, r3
 8007064:	3301      	adds	r3, #1
 8007066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800706a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800706e:	e00f      	b.n	8007090 <HAL_I2C_Init+0x1a4>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	1e58      	subs	r0, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6859      	ldr	r1, [r3, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	0099      	lsls	r1, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	fbb0 f3f3 	udiv	r3, r0, r3
 8007086:	3301      	adds	r3, #1
 8007088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800708c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	6809      	ldr	r1, [r1, #0]
 8007094:	4313      	orrs	r3, r2
 8007096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69da      	ldr	r2, [r3, #28]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80070be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6911      	ldr	r1, [r2, #16]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68d2      	ldr	r2, [r2, #12]
 80070ca:	4311      	orrs	r1, r2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695a      	ldr	r2, [r3, #20]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0201 	orr.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	000186a0 	.word	0x000186a0
 800712c:	001e847f 	.word	0x001e847f
 8007130:	003d08ff 	.word	0x003d08ff
 8007134:	431bde83 	.word	0x431bde83
 8007138:	10624dd3 	.word	0x10624dd3

0800713c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b088      	sub	sp, #32
 8007140:	af02      	add	r7, sp, #8
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	461a      	mov	r2, r3
 800714a:	4603      	mov	r3, r0
 800714c:	817b      	strh	r3, [r7, #10]
 800714e:	460b      	mov	r3, r1
 8007150:	813b      	strh	r3, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007156:	f7fd fc09 	bl	800496c <HAL_GetTick>
 800715a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b20      	cmp	r3, #32
 8007166:	f040 80d9 	bne.w	800731c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	2319      	movs	r3, #25
 8007170:	2201      	movs	r2, #1
 8007172:	496d      	ldr	r1, [pc, #436]	; (8007328 <HAL_I2C_Mem_Write+0x1ec>)
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f965 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007180:	2302      	movs	r3, #2
 8007182:	e0cc      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_I2C_Mem_Write+0x56>
 800718e:	2302      	movs	r3, #2
 8007190:	e0c5      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d007      	beq.n	80071b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2221      	movs	r2, #33	; 0x21
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2240      	movs	r2, #64	; 0x40
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a3a      	ldr	r2, [r7, #32]
 80071e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4a4d      	ldr	r2, [pc, #308]	; (800732c <HAL_I2C_Mem_Write+0x1f0>)
 80071f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071fa:	88f8      	ldrh	r0, [r7, #6]
 80071fc:	893a      	ldrh	r2, [r7, #8]
 80071fe:	8979      	ldrh	r1, [r7, #10]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	4603      	mov	r3, r0
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f890 	bl	8007330 <I2C_RequestMemoryWrite>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d052      	beq.n	80072bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e081      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f9e6 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	2b04      	cmp	r3, #4
 8007230:	d107      	bne.n	8007242 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e06b      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b04      	cmp	r3, #4
 8007282:	d11b      	bne.n	80072bc <HAL_I2C_Mem_Write+0x180>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007288:	2b00      	cmp	r3, #0
 800728a:	d017      	beq.n	80072bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1aa      	bne.n	800721a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f9d2 	bl	8007672 <I2C_WaitOnBTFFlagUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d107      	bne.n	80072ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e016      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e000      	b.n	800731e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	00100002 	.word	0x00100002
 800732c:	ffff0000 	.word	0xffff0000

08007330 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	4608      	mov	r0, r1
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	4603      	mov	r3, r0
 8007340:	817b      	strh	r3, [r7, #10]
 8007342:	460b      	mov	r3, r1
 8007344:	813b      	strh	r3, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	2200      	movs	r2, #0
 8007362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f86c 	bl	8007444 <I2C_WaitOnFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e05f      	b.n	8007436 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007376:	897b      	ldrh	r3, [r7, #10]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	461a      	mov	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	6a3a      	ldr	r2, [r7, #32]
 800738a:	492d      	ldr	r1, [pc, #180]	; (8007440 <I2C_RequestMemoryWrite+0x110>)
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f8b0 	bl	80074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e04c      	b.n	8007436 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b4:	6a39      	ldr	r1, [r7, #32]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f91a 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00d      	beq.n	80073de <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d107      	bne.n	80073da <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e02b      	b.n	8007436 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d105      	bne.n	80073f0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073e4:	893b      	ldrh	r3, [r7, #8]
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	611a      	str	r2, [r3, #16]
 80073ee:	e021      	b.n	8007434 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073f0:	893b      	ldrh	r3, [r7, #8]
 80073f2:	0a1b      	lsrs	r3, r3, #8
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007400:	6a39      	ldr	r1, [r7, #32]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f8f4 	bl	80075f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00d      	beq.n	800742a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	2b04      	cmp	r3, #4
 8007414:	d107      	bne.n	8007426 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e005      	b.n	8007436 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800742a:	893b      	ldrh	r3, [r7, #8]
 800742c:	b2da      	uxtb	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	00010002 	.word	0x00010002

08007444 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007454:	e025      	b.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d021      	beq.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745e:	f7fd fa85 	bl	800496c <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <I2C_WaitOnFlagUntilTimeout+0x30>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d116      	bne.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f043 0220 	orr.w	r2, r3, #32
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e023      	b.n	80074ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d10d      	bne.n	80074c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	43da      	mvns	r2, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	e00c      	b.n	80074e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	43da      	mvns	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4013      	ands	r3, r2
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bf0c      	ite	eq
 80074da:	2301      	moveq	r3, #1
 80074dc:	2300      	movne	r3, #0
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d0b6      	beq.n	8007456 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007500:	e051      	b.n	80075a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800750c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007510:	d123      	bne.n	800755a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007520:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800752a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f043 0204 	orr.w	r2, r3, #4
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e046      	b.n	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d021      	beq.n	80075a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7fd fa03 	bl	800496c <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d116      	bne.n	80075a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f043 0220 	orr.w	r2, r3, #32
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e020      	b.n	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	0c1b      	lsrs	r3, r3, #16
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d10c      	bne.n	80075ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	43da      	mvns	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bf14      	ite	ne
 80075c2:	2301      	movne	r3, #1
 80075c4:	2300      	moveq	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	e00b      	b.n	80075e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	43da      	mvns	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4013      	ands	r3, r2
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d18d      	bne.n	8007502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075fc:	e02d      	b.n	800765a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f878 	bl	80076f4 <I2C_IsAcknowledgeFailed>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e02d      	b.n	800766a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d021      	beq.n	800765a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007616:	f7fd f9a9 	bl	800496c <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	429a      	cmp	r2, r3
 8007624:	d302      	bcc.n	800762c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d116      	bne.n	800765a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	f043 0220 	orr.w	r2, r3, #32
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e007      	b.n	800766a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d1ca      	bne.n	80075fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800767e:	e02d      	b.n	80076dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f837 	bl	80076f4 <I2C_IsAcknowledgeFailed>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e02d      	b.n	80076ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007696:	d021      	beq.n	80076dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007698:	f7fd f968 	bl	800496c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d302      	bcc.n	80076ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d116      	bne.n	80076dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	f043 0220 	orr.w	r2, r3, #32
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e007      	b.n	80076ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f003 0304 	and.w	r3, r3, #4
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d1ca      	bne.n	8007680 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770a:	d11b      	bne.n	8007744 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007714:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	f043 0204 	orr.w	r2, r3, #4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e000      	b.n	8007746 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e22d      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d075      	beq.n	800785e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007772:	4ba3      	ldr	r3, [pc, #652]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 030c 	and.w	r3, r3, #12
 800777a:	2b04      	cmp	r3, #4
 800777c:	d00c      	beq.n	8007798 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800777e:	4ba0      	ldr	r3, [pc, #640]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007786:	2b08      	cmp	r3, #8
 8007788:	d112      	bne.n	80077b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800778a:	4b9d      	ldr	r3, [pc, #628]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007796:	d10b      	bne.n	80077b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007798:	4b99      	ldr	r3, [pc, #612]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d05b      	beq.n	800785c <HAL_RCC_OscConfig+0x108>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d157      	bne.n	800785c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e208      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b8:	d106      	bne.n	80077c8 <HAL_RCC_OscConfig+0x74>
 80077ba:	4b91      	ldr	r3, [pc, #580]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a90      	ldr	r2, [pc, #576]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e01d      	b.n	8007804 <HAL_RCC_OscConfig+0xb0>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d0:	d10c      	bne.n	80077ec <HAL_RCC_OscConfig+0x98>
 80077d2:	4b8b      	ldr	r3, [pc, #556]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a8a      	ldr	r2, [pc, #552]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	4b88      	ldr	r3, [pc, #544]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a87      	ldr	r2, [pc, #540]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	e00b      	b.n	8007804 <HAL_RCC_OscConfig+0xb0>
 80077ec:	4b84      	ldr	r3, [pc, #528]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a83      	ldr	r2, [pc, #524]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	4b81      	ldr	r3, [pc, #516]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a80      	ldr	r2, [pc, #512]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80077fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d013      	beq.n	8007834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780c:	f7fd f8ae 	bl	800496c <HAL_GetTick>
 8007810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007814:	f7fd f8aa 	bl	800496c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b64      	cmp	r3, #100	; 0x64
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e1cd      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007826:	4b76      	ldr	r3, [pc, #472]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0f0      	beq.n	8007814 <HAL_RCC_OscConfig+0xc0>
 8007832:	e014      	b.n	800785e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007834:	f7fd f89a 	bl	800496c <HAL_GetTick>
 8007838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800783a:	e008      	b.n	800784e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800783c:	f7fd f896 	bl	800496c <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b64      	cmp	r3, #100	; 0x64
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e1b9      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784e:	4b6c      	ldr	r3, [pc, #432]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1f0      	bne.n	800783c <HAL_RCC_OscConfig+0xe8>
 800785a:	e000      	b.n	800785e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800785c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d063      	beq.n	8007932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800786a:	4b65      	ldr	r3, [pc, #404]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 030c 	and.w	r3, r3, #12
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007876:	4b62      	ldr	r3, [pc, #392]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787e:	2b08      	cmp	r3, #8
 8007880:	d11c      	bne.n	80078bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007882:	4b5f      	ldr	r3, [pc, #380]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d116      	bne.n	80078bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800788e:	4b5c      	ldr	r3, [pc, #368]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <HAL_RCC_OscConfig+0x152>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d001      	beq.n	80078a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e18d      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a6:	4b56      	ldr	r3, [pc, #344]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4952      	ldr	r1, [pc, #328]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ba:	e03a      	b.n	8007932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d020      	beq.n	8007906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078c4:	4b4f      	ldr	r3, [pc, #316]	; (8007a04 <HAL_RCC_OscConfig+0x2b0>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ca:	f7fd f84f 	bl	800496c <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078d2:	f7fd f84b 	bl	800496c <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e16e      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e4:	4b46      	ldr	r3, [pc, #280]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f0:	4b43      	ldr	r3, [pc, #268]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4940      	ldr	r1, [pc, #256]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007900:	4313      	orrs	r3, r2
 8007902:	600b      	str	r3, [r1, #0]
 8007904:	e015      	b.n	8007932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007906:	4b3f      	ldr	r3, [pc, #252]	; (8007a04 <HAL_RCC_OscConfig+0x2b0>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790c:	f7fd f82e 	bl	800496c <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007914:	f7fd f82a 	bl	800496c <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e14d      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007926:	4b36      	ldr	r3, [pc, #216]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f0      	bne.n	8007914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d030      	beq.n	80079a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d016      	beq.n	8007974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007946:	4b30      	ldr	r3, [pc, #192]	; (8007a08 <HAL_RCC_OscConfig+0x2b4>)
 8007948:	2201      	movs	r2, #1
 800794a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800794c:	f7fd f80e 	bl	800496c <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007954:	f7fd f80a 	bl	800496c <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e12d      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007966:	4b26      	ldr	r3, [pc, #152]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f0      	beq.n	8007954 <HAL_RCC_OscConfig+0x200>
 8007972:	e015      	b.n	80079a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007974:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <HAL_RCC_OscConfig+0x2b4>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800797a:	f7fc fff7 	bl	800496c <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007980:	e008      	b.n	8007994 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007982:	f7fc fff3 	bl	800496c <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e116      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007994:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 8007996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f0      	bne.n	8007982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80a0 	beq.w	8007aee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079b2:	4b13      	ldr	r3, [pc, #76]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10f      	bne.n	80079de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	4b0f      	ldr	r3, [pc, #60]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	4a0e      	ldr	r2, [pc, #56]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80079c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079cc:	6413      	str	r3, [r2, #64]	; 0x40
 80079ce:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <HAL_RCC_OscConfig+0x2ac>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80079da:	2301      	movs	r3, #1
 80079dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079de:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <HAL_RCC_OscConfig+0x2b8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d121      	bne.n	8007a2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079ea:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <HAL_RCC_OscConfig+0x2b8>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a07      	ldr	r2, [pc, #28]	; (8007a0c <HAL_RCC_OscConfig+0x2b8>)
 80079f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f6:	f7fc ffb9 	bl	800496c <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fc:	e011      	b.n	8007a22 <HAL_RCC_OscConfig+0x2ce>
 80079fe:	bf00      	nop
 8007a00:	40023800 	.word	0x40023800
 8007a04:	42470000 	.word	0x42470000
 8007a08:	42470e80 	.word	0x42470e80
 8007a0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a10:	f7fc ffac 	bl	800496c <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d901      	bls.n	8007a22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e0cf      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a22:	4b6a      	ldr	r3, [pc, #424]	; (8007bcc <HAL_RCC_OscConfig+0x478>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0f0      	beq.n	8007a10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d106      	bne.n	8007a44 <HAL_RCC_OscConfig+0x2f0>
 8007a36:	4b66      	ldr	r3, [pc, #408]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3a:	4a65      	ldr	r2, [pc, #404]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	6713      	str	r3, [r2, #112]	; 0x70
 8007a42:	e01c      	b.n	8007a7e <HAL_RCC_OscConfig+0x32a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b05      	cmp	r3, #5
 8007a4a:	d10c      	bne.n	8007a66 <HAL_RCC_OscConfig+0x312>
 8007a4c:	4b60      	ldr	r3, [pc, #384]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a50:	4a5f      	ldr	r2, [pc, #380]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a52:	f043 0304 	orr.w	r3, r3, #4
 8007a56:	6713      	str	r3, [r2, #112]	; 0x70
 8007a58:	4b5d      	ldr	r3, [pc, #372]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	4a5c      	ldr	r2, [pc, #368]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a5e:	f043 0301 	orr.w	r3, r3, #1
 8007a62:	6713      	str	r3, [r2, #112]	; 0x70
 8007a64:	e00b      	b.n	8007a7e <HAL_RCC_OscConfig+0x32a>
 8007a66:	4b5a      	ldr	r3, [pc, #360]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6a:	4a59      	ldr	r2, [pc, #356]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a6c:	f023 0301 	bic.w	r3, r3, #1
 8007a70:	6713      	str	r3, [r2, #112]	; 0x70
 8007a72:	4b57      	ldr	r3, [pc, #348]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a76:	4a56      	ldr	r2, [pc, #344]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007a78:	f023 0304 	bic.w	r3, r3, #4
 8007a7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d015      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a86:	f7fc ff71 	bl	800496c <HAL_GetTick>
 8007a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8c:	e00a      	b.n	8007aa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a8e:	f7fc ff6d 	bl	800496c <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e08e      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aa4:	4b4a      	ldr	r3, [pc, #296]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0ee      	beq.n	8007a8e <HAL_RCC_OscConfig+0x33a>
 8007ab0:	e014      	b.n	8007adc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ab2:	f7fc ff5b 	bl	800496c <HAL_GetTick>
 8007ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ab8:	e00a      	b.n	8007ad0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aba:	f7fc ff57 	bl	800496c <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e078      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1ee      	bne.n	8007aba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d105      	bne.n	8007aee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ae2:	4b3b      	ldr	r3, [pc, #236]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	4a3a      	ldr	r2, [pc, #232]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d064      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007af6:	4b36      	ldr	r3, [pc, #216]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 030c 	and.w	r3, r3, #12
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d05c      	beq.n	8007bbc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d141      	bne.n	8007b8e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b0a:	4b32      	ldr	r3, [pc, #200]	; (8007bd4 <HAL_RCC_OscConfig+0x480>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b10:	f7fc ff2c 	bl	800496c <HAL_GetTick>
 8007b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b16:	e008      	b.n	8007b2a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b18:	f7fc ff28 	bl	800496c <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e04b      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b2a:	4b29      	ldr	r3, [pc, #164]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1f0      	bne.n	8007b18 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69da      	ldr	r2, [r3, #28]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	019b      	lsls	r3, r3, #6
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	085b      	lsrs	r3, r3, #1
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	041b      	lsls	r3, r3, #16
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	061b      	lsls	r3, r3, #24
 8007b5a:	491d      	ldr	r1, [pc, #116]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b60:	4b1c      	ldr	r3, [pc, #112]	; (8007bd4 <HAL_RCC_OscConfig+0x480>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b66:	f7fc ff01 	bl	800496c <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6e:	f7fc fefd 	bl	800496c <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e020      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b80:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0f0      	beq.n	8007b6e <HAL_RCC_OscConfig+0x41a>
 8007b8c:	e018      	b.n	8007bc0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8e:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <HAL_RCC_OscConfig+0x480>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b94:	f7fc feea 	bl	800496c <HAL_GetTick>
 8007b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b9c:	f7fc fee6 	bl	800496c <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e009      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bae:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <HAL_RCC_OscConfig+0x47c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1f0      	bne.n	8007b9c <HAL_RCC_OscConfig+0x448>
 8007bba:	e001      	b.n	8007bc0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e000      	b.n	8007bc2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	40007000 	.word	0x40007000
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	42470060 	.word	0x42470060

08007bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e0ca      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bec:	4b67      	ldr	r3, [pc, #412]	; (8007d8c <HAL_RCC_ClockConfig+0x1b4>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d90c      	bls.n	8007c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bfa:	4b64      	ldr	r3, [pc, #400]	; (8007d8c <HAL_RCC_ClockConfig+0x1b4>)
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c02:	4b62      	ldr	r3, [pc, #392]	; (8007d8c <HAL_RCC_ClockConfig+0x1b4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d001      	beq.n	8007c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0b6      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d020      	beq.n	8007c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c2c:	4b58      	ldr	r3, [pc, #352]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	4a57      	ldr	r2, [pc, #348]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c44:	4b52      	ldr	r3, [pc, #328]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	4a51      	ldr	r2, [pc, #324]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c50:	4b4f      	ldr	r3, [pc, #316]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	494c      	ldr	r1, [pc, #304]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d044      	beq.n	8007cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d107      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c76:	4b46      	ldr	r3, [pc, #280]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d119      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e07d      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d003      	beq.n	8007c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d107      	bne.n	8007ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c96:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e06d      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ca6:	4b3a      	ldr	r3, [pc, #232]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e065      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cb6:	4b36      	ldr	r3, [pc, #216]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f023 0203 	bic.w	r2, r3, #3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	4933      	ldr	r1, [pc, #204]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cc8:	f7fc fe50 	bl	800496c <HAL_GetTick>
 8007ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cce:	e00a      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd0:	f7fc fe4c 	bl	800496c <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e04d      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ce6:	4b2a      	ldr	r3, [pc, #168]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 020c 	and.w	r2, r3, #12
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d1eb      	bne.n	8007cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cf8:	4b24      	ldr	r3, [pc, #144]	; (8007d8c <HAL_RCC_ClockConfig+0x1b4>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d20c      	bcs.n	8007d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d06:	4b21      	ldr	r3, [pc, #132]	; (8007d8c <HAL_RCC_ClockConfig+0x1b4>)
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d0e:	4b1f      	ldr	r3, [pc, #124]	; (8007d8c <HAL_RCC_ClockConfig+0x1b4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d001      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e030      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d008      	beq.n	8007d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d2c:	4b18      	ldr	r3, [pc, #96]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4915      	ldr	r1, [pc, #84]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d4a:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	490d      	ldr	r1, [pc, #52]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d5e:	f000 f885 	bl	8007e6c <HAL_RCC_GetSysClockFreq>
 8007d62:	4601      	mov	r1, r0
 8007d64:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <HAL_RCC_ClockConfig+0x1b8>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	4a09      	ldr	r2, [pc, #36]	; (8007d94 <HAL_RCC_ClockConfig+0x1bc>)
 8007d70:	5cd3      	ldrb	r3, [r2, r3]
 8007d72:	fa21 f303 	lsr.w	r3, r1, r3
 8007d76:	4a08      	ldr	r2, [pc, #32]	; (8007d98 <HAL_RCC_ClockConfig+0x1c0>)
 8007d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f7fc fdb2 	bl	80048e4 <HAL_InitTick>

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40023c00 	.word	0x40023c00
 8007d90:	40023800 	.word	0x40023800
 8007d94:	08072d54 	.word	0x08072d54
 8007d98:	20000488 	.word	0x20000488

08007d9c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08c      	sub	sp, #48	; 0x30
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d129      	bne.n	8007e02 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007dae:	2300      	movs	r3, #0
 8007db0:	61bb      	str	r3, [r7, #24]
 8007db2:	4b2b      	ldr	r3, [pc, #172]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	4a2a      	ldr	r2, [pc, #168]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8007dbe:	4b28      	ldr	r3, [pc, #160]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007de0:	f107 031c 	add.w	r3, r7, #28
 8007de4:	4619      	mov	r1, r3
 8007de6:	481f      	ldr	r0, [pc, #124]	; (8007e64 <HAL_RCC_MCOConfig+0xc8>)
 8007de8:	f7fe feb4 	bl	8006b54 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007dec:	4b1c      	ldr	r3, [pc, #112]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	430b      	orrs	r3, r1
 8007dfa:	4919      	ldr	r1, [pc, #100]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007e00:	e029      	b.n	8007e56 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8007e02:	2300      	movs	r3, #0
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	4a15      	ldr	r2, [pc, #84]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007e0c:	f043 0304 	orr.w	r3, r3, #4
 8007e10:	6313      	str	r3, [r2, #48]	; 0x30
 8007e12:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e24:	2302      	movs	r3, #2
 8007e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007e30:	2300      	movs	r3, #0
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007e34:	f107 031c 	add.w	r3, r7, #28
 8007e38:	4619      	mov	r1, r3
 8007e3a:	480b      	ldr	r0, [pc, #44]	; (8007e68 <HAL_RCC_MCOConfig+0xcc>)
 8007e3c:	f7fe fe8a 	bl	8006b54 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	00d9      	lsls	r1, r3, #3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	430b      	orrs	r3, r1
 8007e50:	4903      	ldr	r1, [pc, #12]	; (8007e60 <HAL_RCC_MCOConfig+0xc4>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	608b      	str	r3, [r1, #8]
}
 8007e56:	bf00      	nop
 8007e58:	3730      	adds	r7, #48	; 0x30
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40023800 	.word	0x40023800
 8007e64:	40020000 	.word	0x40020000
 8007e68:	40020800 	.word	0x40020800

08007e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	607b      	str	r3, [r7, #4]
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e82:	4b63      	ldr	r3, [pc, #396]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 030c 	and.w	r3, r3, #12
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	d007      	beq.n	8007e9e <HAL_RCC_GetSysClockFreq+0x32>
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d008      	beq.n	8007ea4 <HAL_RCC_GetSysClockFreq+0x38>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f040 80b4 	bne.w	8008000 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e98:	4b5e      	ldr	r3, [pc, #376]	; (8008014 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007e9a:	60bb      	str	r3, [r7, #8]
       break;
 8007e9c:	e0b3      	b.n	8008006 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e9e:	4b5e      	ldr	r3, [pc, #376]	; (8008018 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007ea0:	60bb      	str	r3, [r7, #8]
      break;
 8007ea2:	e0b0      	b.n	8008006 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ea4:	4b5a      	ldr	r3, [pc, #360]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eae:	4b58      	ldr	r3, [pc, #352]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d04a      	beq.n	8007f50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eba:	4b55      	ldr	r3, [pc, #340]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	099b      	lsrs	r3, r3, #6
 8007ec0:	f04f 0400 	mov.w	r4, #0
 8007ec4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ec8:	f04f 0200 	mov.w	r2, #0
 8007ecc:	ea03 0501 	and.w	r5, r3, r1
 8007ed0:	ea04 0602 	and.w	r6, r4, r2
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	f04f 0400 	mov.w	r4, #0
 8007ee0:	0154      	lsls	r4, r2, #5
 8007ee2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007ee6:	014b      	lsls	r3, r1, #5
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4622      	mov	r2, r4
 8007eec:	1b49      	subs	r1, r1, r5
 8007eee:	eb62 0206 	sbc.w	r2, r2, r6
 8007ef2:	f04f 0300 	mov.w	r3, #0
 8007ef6:	f04f 0400 	mov.w	r4, #0
 8007efa:	0194      	lsls	r4, r2, #6
 8007efc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f00:	018b      	lsls	r3, r1, #6
 8007f02:	1a5b      	subs	r3, r3, r1
 8007f04:	eb64 0402 	sbc.w	r4, r4, r2
 8007f08:	f04f 0100 	mov.w	r1, #0
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	00e2      	lsls	r2, r4, #3
 8007f12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f16:	00d9      	lsls	r1, r3, #3
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4614      	mov	r4, r2
 8007f1c:	195b      	adds	r3, r3, r5
 8007f1e:	eb44 0406 	adc.w	r4, r4, r6
 8007f22:	f04f 0100 	mov.w	r1, #0
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	0262      	lsls	r2, r4, #9
 8007f2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007f30:	0259      	lsls	r1, r3, #9
 8007f32:	460b      	mov	r3, r1
 8007f34:	4614      	mov	r4, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	4621      	mov	r1, r4
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f04f 0400 	mov.w	r4, #0
 8007f40:	461a      	mov	r2, r3
 8007f42:	4623      	mov	r3, r4
 8007f44:	f7fc fa92 	bl	800446c <__aeabi_uldivmod>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	e049      	b.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f50:	4b2f      	ldr	r3, [pc, #188]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	099b      	lsrs	r3, r3, #6
 8007f56:	f04f 0400 	mov.w	r4, #0
 8007f5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	ea03 0501 	and.w	r5, r3, r1
 8007f66:	ea04 0602 	and.w	r6, r4, r2
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	f04f 0400 	mov.w	r4, #0
 8007f76:	0154      	lsls	r4, r2, #5
 8007f78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f7c:	014b      	lsls	r3, r1, #5
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4622      	mov	r2, r4
 8007f82:	1b49      	subs	r1, r1, r5
 8007f84:	eb62 0206 	sbc.w	r2, r2, r6
 8007f88:	f04f 0300 	mov.w	r3, #0
 8007f8c:	f04f 0400 	mov.w	r4, #0
 8007f90:	0194      	lsls	r4, r2, #6
 8007f92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f96:	018b      	lsls	r3, r1, #6
 8007f98:	1a5b      	subs	r3, r3, r1
 8007f9a:	eb64 0402 	sbc.w	r4, r4, r2
 8007f9e:	f04f 0100 	mov.w	r1, #0
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	00e2      	lsls	r2, r4, #3
 8007fa8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007fac:	00d9      	lsls	r1, r3, #3
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	195b      	adds	r3, r3, r5
 8007fb4:	eb44 0406 	adc.w	r4, r4, r6
 8007fb8:	f04f 0100 	mov.w	r1, #0
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	02a2      	lsls	r2, r4, #10
 8007fc2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007fc6:	0299      	lsls	r1, r3, #10
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4614      	mov	r4, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	4621      	mov	r1, r4
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f04f 0400 	mov.w	r4, #0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	4623      	mov	r3, r4
 8007fda:	f7fc fa47 	bl	800446c <__aeabi_uldivmod>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	0c1b      	lsrs	r3, r3, #16
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	3301      	adds	r3, #1
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffc:	60bb      	str	r3, [r7, #8]
      break;
 8007ffe:	e002      	b.n	8008006 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008000:	4b04      	ldr	r3, [pc, #16]	; (8008014 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008002:	60bb      	str	r3, [r7, #8]
      break;
 8008004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008006:	68bb      	ldr	r3, [r7, #8]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008010:	40023800 	.word	0x40023800
 8008014:	00f42400 	.word	0x00f42400
 8008018:	007a1200 	.word	0x007a1200

0800801c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008020:	4b03      	ldr	r3, [pc, #12]	; (8008030 <HAL_RCC_GetHCLKFreq+0x14>)
 8008022:	681b      	ldr	r3, [r3, #0]
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000488 	.word	0x20000488

08008034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008038:	f7ff fff0 	bl	800801c <HAL_RCC_GetHCLKFreq>
 800803c:	4601      	mov	r1, r0
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	0a9b      	lsrs	r3, r3, #10
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	4a03      	ldr	r2, [pc, #12]	; (8008058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800804a:	5cd3      	ldrb	r3, [r2, r3]
 800804c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008050:	4618      	mov	r0, r3
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	08072d64 	.word	0x08072d64

0800805c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008060:	f7ff ffdc 	bl	800801c <HAL_RCC_GetHCLKFreq>
 8008064:	4601      	mov	r1, r0
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	0b5b      	lsrs	r3, r3, #13
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	4a03      	ldr	r2, [pc, #12]	; (8008080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008072:	5cd3      	ldrb	r3, [r2, r3]
 8008074:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40023800 	.word	0x40023800
 8008080:	08072d64 	.word	0x08072d64

08008084 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e034      	b.n	8008104 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f003 faac 	bl	800b60c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3308      	adds	r3, #8
 80080bc:	4619      	mov	r1, r3
 80080be:	4610      	mov	r0, r2
 80080c0:	f000 fb5e 	bl	8008780 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	461a      	mov	r2, r3
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	f000 fba8 	bl	8008824 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6858      	ldr	r0, [r3, #4]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	f000 fbdd 	bl	80088a0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	6892      	ldr	r2, [r2, #8]
 80080ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	6892      	ldr	r2, [r2, #8]
 80080fa:	f041 0101 	orr.w	r1, r1, #1
 80080fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e03f      	b.n	800819e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d106      	bne.n	8008138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f003 f9b2 	bl	800b49c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2224      	movs	r2, #36	; 0x24
 800813c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800814e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f90b 	bl	800836c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	695a      	ldr	r2, [r3, #20]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b088      	sub	sp, #32
 80081aa:	af02      	add	r7, sp, #8
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	603b      	str	r3, [r7, #0]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	f040 8083 	bne.w	80082ce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <HAL_UART_Transmit+0x2e>
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e07b      	b.n	80082d0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d101      	bne.n	80081e6 <HAL_UART_Transmit+0x40>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e074      	b.n	80082d0 <HAL_UART_Transmit+0x12a>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2221      	movs	r2, #33	; 0x21
 80081f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80081fc:	f7fc fbb6 	bl	800496c <HAL_GetTick>
 8008200:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	88fa      	ldrh	r2, [r7, #6]
 8008206:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800820e:	e042      	b.n	8008296 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008226:	d122      	bne.n	800826e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2200      	movs	r2, #0
 8008230:	2180      	movs	r1, #128	; 0x80
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f850 	bl	80082d8 <UART_WaitOnFlagUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e046      	b.n	80082d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008254:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d103      	bne.n	8008266 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	3302      	adds	r3, #2
 8008262:	60bb      	str	r3, [r7, #8]
 8008264:	e017      	b.n	8008296 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	3301      	adds	r3, #1
 800826a:	60bb      	str	r3, [r7, #8]
 800826c:	e013      	b.n	8008296 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2200      	movs	r2, #0
 8008276:	2180      	movs	r1, #128	; 0x80
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f82d 	bl	80082d8 <UART_WaitOnFlagUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e023      	b.n	80082d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	60ba      	str	r2, [r7, #8]
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800829a:	b29b      	uxth	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1b7      	bne.n	8008210 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2200      	movs	r2, #0
 80082a8:	2140      	movs	r1, #64	; 0x40
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 f814 	bl	80082d8 <UART_WaitOnFlagUntilTimeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e00a      	b.n	80082d0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e000      	b.n	80082d0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80082ce:	2302      	movs	r3, #2
  }
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	4613      	mov	r3, r2
 80082e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e8:	e02c      	b.n	8008344 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f0:	d028      	beq.n	8008344 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <UART_WaitOnFlagUntilTimeout+0x30>
 80082f8:	f7fc fb38 	bl	800496c <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	429a      	cmp	r2, r3
 8008306:	d21d      	bcs.n	8008344 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008316:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	695a      	ldr	r2, [r3, #20]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0201 	bic.w	r2, r2, #1
 8008326:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e00f      	b.n	8008364 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	4013      	ands	r3, r2
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	429a      	cmp	r2, r3
 8008352:	bf0c      	ite	eq
 8008354:	2301      	moveq	r3, #1
 8008356:	2300      	movne	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	461a      	mov	r2, r3
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	429a      	cmp	r2, r3
 8008360:	d0c3      	beq.n	80082ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800836c:	b5b0      	push	{r4, r5, r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	4313      	orrs	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80083ac:	f023 030c 	bic.w	r3, r3, #12
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	6812      	ldr	r2, [r2, #0]
 80083b4:	68f9      	ldr	r1, [r7, #12]
 80083b6:	430b      	orrs	r3, r1
 80083b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699a      	ldr	r2, [r3, #24]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d8:	f040 80e4 	bne.w	80085a4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4aab      	ldr	r2, [pc, #684]	; (8008690 <UART_SetConfig+0x324>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d004      	beq.n	80083f0 <UART_SetConfig+0x84>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4aaa      	ldr	r2, [pc, #680]	; (8008694 <UART_SetConfig+0x328>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d16c      	bne.n	80084ca <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80083f0:	f7ff fe34 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 80083f4:	4602      	mov	r2, r0
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009a      	lsls	r2, r3, #2
 80083fe:	441a      	add	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	fbb2 f3f3 	udiv	r3, r2, r3
 800840a:	4aa3      	ldr	r2, [pc, #652]	; (8008698 <UART_SetConfig+0x32c>)
 800840c:	fba2 2303 	umull	r2, r3, r2, r3
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	011c      	lsls	r4, r3, #4
 8008414:	f7ff fe22 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 8008418:	4602      	mov	r2, r0
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009a      	lsls	r2, r3, #2
 8008422:	441a      	add	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	fbb2 f5f3 	udiv	r5, r2, r3
 800842e:	f7ff fe15 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 8008432:	4602      	mov	r2, r0
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009a      	lsls	r2, r3, #2
 800843c:	441a      	add	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	fbb2 f3f3 	udiv	r3, r2, r3
 8008448:	4a93      	ldr	r2, [pc, #588]	; (8008698 <UART_SetConfig+0x32c>)
 800844a:	fba2 2303 	umull	r2, r3, r2, r3
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	2264      	movs	r2, #100	; 0x64
 8008452:	fb02 f303 	mul.w	r3, r2, r3
 8008456:	1aeb      	subs	r3, r5, r3
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	3332      	adds	r3, #50	; 0x32
 800845c:	4a8e      	ldr	r2, [pc, #568]	; (8008698 <UART_SetConfig+0x32c>)
 800845e:	fba2 2303 	umull	r2, r3, r2, r3
 8008462:	095b      	lsrs	r3, r3, #5
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800846a:	441c      	add	r4, r3
 800846c:	f7ff fdf6 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 8008470:	4602      	mov	r2, r0
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009a      	lsls	r2, r3, #2
 800847a:	441a      	add	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	fbb2 f5f3 	udiv	r5, r2, r3
 8008486:	f7ff fde9 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 800848a:	4602      	mov	r2, r0
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	009a      	lsls	r2, r3, #2
 8008494:	441a      	add	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a0:	4a7d      	ldr	r2, [pc, #500]	; (8008698 <UART_SetConfig+0x32c>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	095b      	lsrs	r3, r3, #5
 80084a8:	2264      	movs	r2, #100	; 0x64
 80084aa:	fb02 f303 	mul.w	r3, r2, r3
 80084ae:	1aeb      	subs	r3, r5, r3
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	3332      	adds	r3, #50	; 0x32
 80084b4:	4a78      	ldr	r2, [pc, #480]	; (8008698 <UART_SetConfig+0x32c>)
 80084b6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ba:	095b      	lsrs	r3, r3, #5
 80084bc:	f003 0207 	and.w	r2, r3, #7
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4422      	add	r2, r4
 80084c6:	609a      	str	r2, [r3, #8]
 80084c8:	e154      	b.n	8008774 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80084ca:	f7ff fdb3 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009a      	lsls	r2, r3, #2
 80084d8:	441a      	add	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e4:	4a6c      	ldr	r2, [pc, #432]	; (8008698 <UART_SetConfig+0x32c>)
 80084e6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ea:	095b      	lsrs	r3, r3, #5
 80084ec:	011c      	lsls	r4, r3, #4
 80084ee:	f7ff fda1 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 80084f2:	4602      	mov	r2, r0
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009a      	lsls	r2, r3, #2
 80084fc:	441a      	add	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	fbb2 f5f3 	udiv	r5, r2, r3
 8008508:	f7ff fd94 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 800850c:	4602      	mov	r2, r0
 800850e:	4613      	mov	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	009a      	lsls	r2, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008522:	4a5d      	ldr	r2, [pc, #372]	; (8008698 <UART_SetConfig+0x32c>)
 8008524:	fba2 2303 	umull	r2, r3, r2, r3
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	2264      	movs	r2, #100	; 0x64
 800852c:	fb02 f303 	mul.w	r3, r2, r3
 8008530:	1aeb      	subs	r3, r5, r3
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	3332      	adds	r3, #50	; 0x32
 8008536:	4a58      	ldr	r2, [pc, #352]	; (8008698 <UART_SetConfig+0x32c>)
 8008538:	fba2 2303 	umull	r2, r3, r2, r3
 800853c:	095b      	lsrs	r3, r3, #5
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008544:	441c      	add	r4, r3
 8008546:	f7ff fd75 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 800854a:	4602      	mov	r2, r0
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009a      	lsls	r2, r3, #2
 8008554:	441a      	add	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	fbb2 f5f3 	udiv	r5, r2, r3
 8008560:	f7ff fd68 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 8008564:	4602      	mov	r2, r0
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009a      	lsls	r2, r3, #2
 800856e:	441a      	add	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	fbb2 f3f3 	udiv	r3, r2, r3
 800857a:	4a47      	ldr	r2, [pc, #284]	; (8008698 <UART_SetConfig+0x32c>)
 800857c:	fba2 2303 	umull	r2, r3, r2, r3
 8008580:	095b      	lsrs	r3, r3, #5
 8008582:	2264      	movs	r2, #100	; 0x64
 8008584:	fb02 f303 	mul.w	r3, r2, r3
 8008588:	1aeb      	subs	r3, r5, r3
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	3332      	adds	r3, #50	; 0x32
 800858e:	4a42      	ldr	r2, [pc, #264]	; (8008698 <UART_SetConfig+0x32c>)
 8008590:	fba2 2303 	umull	r2, r3, r2, r3
 8008594:	095b      	lsrs	r3, r3, #5
 8008596:	f003 0207 	and.w	r2, r3, #7
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4422      	add	r2, r4
 80085a0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80085a2:	e0e7      	b.n	8008774 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a39      	ldr	r2, [pc, #228]	; (8008690 <UART_SetConfig+0x324>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d004      	beq.n	80085b8 <UART_SetConfig+0x24c>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a38      	ldr	r2, [pc, #224]	; (8008694 <UART_SetConfig+0x328>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d171      	bne.n	800869c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80085b8:	f7ff fd50 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 80085bc:	4602      	mov	r2, r0
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009a      	lsls	r2, r3, #2
 80085c6:	441a      	add	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d2:	4a31      	ldr	r2, [pc, #196]	; (8008698 <UART_SetConfig+0x32c>)
 80085d4:	fba2 2303 	umull	r2, r3, r2, r3
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	011c      	lsls	r4, r3, #4
 80085dc:	f7ff fd3e 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 80085e0:	4602      	mov	r2, r0
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009a      	lsls	r2, r3, #2
 80085ea:	441a      	add	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80085f6:	f7ff fd31 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 80085fa:	4602      	mov	r2, r0
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009a      	lsls	r2, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	4a21      	ldr	r2, [pc, #132]	; (8008698 <UART_SetConfig+0x32c>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	2264      	movs	r2, #100	; 0x64
 800861a:	fb02 f303 	mul.w	r3, r2, r3
 800861e:	1aeb      	subs	r3, r5, r3
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	3332      	adds	r3, #50	; 0x32
 8008624:	4a1c      	ldr	r2, [pc, #112]	; (8008698 <UART_SetConfig+0x32c>)
 8008626:	fba2 2303 	umull	r2, r3, r2, r3
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008630:	441c      	add	r4, r3
 8008632:	f7ff fd13 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 8008636:	4602      	mov	r2, r0
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009a      	lsls	r2, r3, #2
 8008640:	441a      	add	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	fbb2 f5f3 	udiv	r5, r2, r3
 800864c:	f7ff fd06 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 8008650:	4602      	mov	r2, r0
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009a      	lsls	r2, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	fbb2 f3f3 	udiv	r3, r2, r3
 8008666:	4a0c      	ldr	r2, [pc, #48]	; (8008698 <UART_SetConfig+0x32c>)
 8008668:	fba2 2303 	umull	r2, r3, r2, r3
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	2264      	movs	r2, #100	; 0x64
 8008670:	fb02 f303 	mul.w	r3, r2, r3
 8008674:	1aeb      	subs	r3, r5, r3
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	3332      	adds	r3, #50	; 0x32
 800867a:	4a07      	ldr	r2, [pc, #28]	; (8008698 <UART_SetConfig+0x32c>)
 800867c:	fba2 2303 	umull	r2, r3, r2, r3
 8008680:	095b      	lsrs	r3, r3, #5
 8008682:	f003 020f 	and.w	r2, r3, #15
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4422      	add	r2, r4
 800868c:	609a      	str	r2, [r3, #8]
 800868e:	e071      	b.n	8008774 <UART_SetConfig+0x408>
 8008690:	40011000 	.word	0x40011000
 8008694:	40011400 	.word	0x40011400
 8008698:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800869c:	f7ff fcca 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 80086a0:	4602      	mov	r2, r0
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	009a      	lsls	r2, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	4a31      	ldr	r2, [pc, #196]	; (800877c <UART_SetConfig+0x410>)
 80086b8:	fba2 2303 	umull	r2, r3, r2, r3
 80086bc:	095b      	lsrs	r3, r3, #5
 80086be:	011c      	lsls	r4, r3, #4
 80086c0:	f7ff fcb8 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 80086c4:	4602      	mov	r2, r0
 80086c6:	4613      	mov	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	009a      	lsls	r2, r3, #2
 80086ce:	441a      	add	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	fbb2 f5f3 	udiv	r5, r2, r3
 80086da:	f7ff fcab 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 80086de:	4602      	mov	r2, r0
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	009a      	lsls	r2, r3, #2
 80086e8:	441a      	add	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f4:	4a21      	ldr	r2, [pc, #132]	; (800877c <UART_SetConfig+0x410>)
 80086f6:	fba2 2303 	umull	r2, r3, r2, r3
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	2264      	movs	r2, #100	; 0x64
 80086fe:	fb02 f303 	mul.w	r3, r2, r3
 8008702:	1aeb      	subs	r3, r5, r3
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	3332      	adds	r3, #50	; 0x32
 8008708:	4a1c      	ldr	r2, [pc, #112]	; (800877c <UART_SetConfig+0x410>)
 800870a:	fba2 2303 	umull	r2, r3, r2, r3
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008714:	441c      	add	r4, r3
 8008716:	f7ff fc8d 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 800871a:	4602      	mov	r2, r0
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009a      	lsls	r2, r3, #2
 8008724:	441a      	add	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	fbb2 f5f3 	udiv	r5, r2, r3
 8008730:	f7ff fc80 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 8008734:	4602      	mov	r2, r0
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009a      	lsls	r2, r3, #2
 800873e:	441a      	add	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	fbb2 f3f3 	udiv	r3, r2, r3
 800874a:	4a0c      	ldr	r2, [pc, #48]	; (800877c <UART_SetConfig+0x410>)
 800874c:	fba2 2303 	umull	r2, r3, r2, r3
 8008750:	095b      	lsrs	r3, r3, #5
 8008752:	2264      	movs	r2, #100	; 0x64
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	1aeb      	subs	r3, r5, r3
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	3332      	adds	r3, #50	; 0x32
 800875e:	4a07      	ldr	r2, [pc, #28]	; (800877c <UART_SetConfig+0x410>)
 8008760:	fba2 2303 	umull	r2, r3, r2, r3
 8008764:	095b      	lsrs	r3, r3, #5
 8008766:	f003 020f 	and.w	r2, r3, #15
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4422      	add	r2, r4
 8008770:	609a      	str	r2, [r3, #8]
}
 8008772:	e7ff      	b.n	8008774 <UART_SetConfig+0x408>
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bdb0      	pop	{r4, r5, r7, pc}
 800877c:	51eb851f 	.word	0x51eb851f

08008780 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008798:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4b20      	ldr	r3, [pc, #128]	; (8008820 <FSMC_NORSRAM_Init+0xa0>)
 800879e:	4013      	ands	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80087aa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80087b0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80087b6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80087bc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80087c2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80087c8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80087ce:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80087d4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80087da:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80087e0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80087e6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80087ec:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d103      	bne.n	8008804 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008802:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68f9      	ldr	r1, [r7, #12]
 800880c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	fff00080 	.word	0xfff00080

08008824 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008846:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008852:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800885a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008862:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	3b01      	subs	r3, #1
 800886a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800886c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	3b02      	subs	r3, #2
 8008874:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008876:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800887c:	4313      	orrs	r3, r2
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6979      	ldr	r1, [r7, #20]
 800888c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
	...

080088a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b8:	d122      	bne.n	8008900 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	4b15      	ldr	r3, [pc, #84]	; (800891c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80088d6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80088de:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80088e6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80088ec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6979      	ldr	r1, [r7, #20]
 80088fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80088fe:	e005      	b.n	800890c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	cff00000 	.word	0xcff00000

08008920 <aiInit>:
   "Bag", "Ankle Boot"};
/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08e      	sub	sp, #56	; 0x38
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8008928:	4b26      	ldr	r3, [pc, #152]	; (80089c4 <aiInit+0xa4>)
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	2301      	movs	r3, #1
 800892e:	823b      	strh	r3, [r7, #16]
 8008930:	2301      	movs	r3, #1
 8008932:	827b      	strh	r3, [r7, #18]
 8008934:	2301      	movs	r3, #1
 8008936:	82bb      	strh	r3, [r7, #20]
 8008938:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <aiInit+0xa8>)
 800893a:	61bb      	str	r3, [r7, #24]
            AI_IMAGECLASSIFY_DATA_WEIGHTS(ai_imageclassify_data_weights_get()),
 800893c:	f001 fb1e 	bl	8009f7c <ai_imageclassify_data_weights_get>
 8008940:	4603      	mov	r3, r0
    const ai_network_params params = {
 8008942:	61fb      	str	r3, [r7, #28]
 8008944:	4b21      	ldr	r3, [pc, #132]	; (80089cc <aiInit+0xac>)
 8008946:	623b      	str	r3, [r7, #32]
 8008948:	2301      	movs	r3, #1
 800894a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800894c:	2301      	movs	r3, #1
 800894e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008950:	2301      	movs	r3, #1
 8008952:	853b      	strh	r3, [r7, #40]	; 0x28
 8008954:	f44f 730a 	mov.w	r3, #552	; 0x228
 8008958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	633b      	str	r3, [r7, #48]	; 0x30
            AI_IMAGECLASSIFY_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_imageclassify_create(&imageclassify, AI_IMAGECLASSIFY_DATA_CONFIG);
 800895e:	2100      	movs	r1, #0
 8008960:	481b      	ldr	r0, [pc, #108]	; (80089d0 <aiInit+0xb0>)
 8008962:	f001 faa5 	bl	8009eb0 <ai_imageclassify_create>
 8008966:	4603      	mov	r3, r0
 8008968:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type != AI_ERROR_NONE) {
 800896a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <aiInit+0x58>
	    return -1;
 8008972:	f04f 33ff 	mov.w	r3, #4294967295
 8008976:	e020      	b.n	80089ba <aiInit+0x9a>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_imageclassify_init(imageclassify, &params)) {
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <aiInit+0xb0>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f107 020c 	add.w	r2, r7, #12
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f001 fab6 	bl	8009ef4 <ai_imageclassify_init>
 8008988:	4603      	mov	r3, r0
 800898a:	f083 0301 	eor.w	r3, r3, #1
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d011      	beq.n	80089b8 <aiInit+0x98>
        err = ai_imageclassify_get_error(imageclassify);
 8008994:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <aiInit+0xb0>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f001 fa7d 	bl	8009e98 <ai_imageclassify_get_error>
 800899e:	4603      	mov	r3, r0
 80089a0:	637b      	str	r3, [r7, #52]	; 0x34
        ai_imageclassify_destroy(imageclassify);
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <aiInit+0xb0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 fa98 	bl	8009edc <ai_imageclassify_destroy>
        imageclassify = AI_HANDLE_NULL;
 80089ac:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <aiInit+0xb0>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
	    return -2;
 80089b2:	f06f 0301 	mvn.w	r3, #1
 80089b6:	e000      	b.n	80089ba <aiInit+0x9a>
    }

    return 0;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3738      	adds	r7, #56	; 0x38
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	40040440 	.word	0x40040440
 80089c8:	00063628 	.word	0x00063628
 80089cc:	00040440 	.word	0x00040440
 80089d0:	20000510 	.word	0x20000510

080089d4 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !imageclassify)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d006      	beq.n	80089f2 <aiRun+0x1e>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <aiRun+0x1e>
 80089ea:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <aiRun+0x74>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d102      	bne.n	80089f8 <aiRun+0x24>
        return -1;
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295
 80089f6:	e022      	b.n	8008a3e <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 80089f8:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <aiRun+0x78>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80089fe:	4a13      	ldr	r2, [pc, #76]	; (8008a4c <aiRun+0x78>)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 8008a04:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <aiRun+0x7c>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8008a0a:	4a11      	ldr	r2, [pc, #68]	; (8008a50 <aiRun+0x7c>)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_imageclassify_run(imageclassify, &ai_input[0], &ai_output[0]);
 8008a10:	4b0d      	ldr	r3, [pc, #52]	; (8008a48 <aiRun+0x74>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a0e      	ldr	r2, [pc, #56]	; (8008a50 <aiRun+0x7c>)
 8008a16:	490d      	ldr	r1, [pc, #52]	; (8008a4c <aiRun+0x78>)
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 fa9e 	bl	8009f5a <ai_imageclassify_run>
 8008a1e:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d00a      	beq.n	8008a3c <aiRun+0x68>
        err = ai_imageclassify_get_error(imageclassify);
 8008a26:	4b08      	ldr	r3, [pc, #32]	; (8008a48 <aiRun+0x74>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f001 fa34 	bl	8009e98 <ai_imageclassify_get_error>
 8008a30:	4603      	mov	r3, r0
 8008a32:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008a3a:	e000      	b.n	8008a3e <aiRun+0x6a>
    }

    return 0;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20000510 	.word	0x20000510
 8008a4c:	20000008 	.word	0x20000008
 8008a50:	2000001c 	.word	0x2000001c

08008a54 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_IMAGECLASSIFY_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8008a58:	4802      	ldr	r0, [pc, #8]	; (8008a64 <MX_X_CUBE_AI_Init+0x10>)
 8008a5a:	f7ff ff61 	bl	8008920 <aiInit>
    /* USER CODE END 0 */
}
 8008a5e:	bf00      	nop
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000514 	.word	0x20000514

08008a68 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b092      	sub	sp, #72	; 0x48
 8008a6c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
	int nb_run = 2;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	647b      	str	r3, [r7, #68]	; 0x44
    int res;
    int ranking[OUTPUT_CLASS_NUMBER];

    for(int i=0; i<OUTPUT_CLASS_NUMBER;i++) ranking[i]=i;
 8008a72:	2300      	movs	r3, #0
 8008a74:	643b      	str	r3, [r7, #64]	; 0x40
 8008a76:	e00a      	b.n	8008a8e <MX_X_CUBE_AI_Process+0x26>
 8008a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008a80:	4413      	add	r3, r2
 8008a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a84:	f843 2c48 	str.w	r2, [r3, #-72]
 8008a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a90:	2b09      	cmp	r3, #9
 8008a92:	ddf1      	ble.n	8008a78 <MX_X_CUBE_AI_Process+0x10>

    AI_ALIGNED(4)
    static ai_i8 out_data[AI_IMAGECLASSIFY_OUT_1_SIZE_BYTES];

    /* Retrieve format/type of the first input tensor - index 0 */
    const ai_buffer_format fmt_ = AI_BUFFER_FORMAT(&ai_input[0]);
 8008a94:	4b3d      	ldr	r3, [pc, #244]	; (8008b8c <MX_X_CUBE_AI_Process+0x124>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008a9c:	63bb      	str	r3, [r7, #56]	; 0x38
    const uint32_t type_ = AI_BUFFER_FMT_GET_TYPE(fmt_);
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	145b      	asrs	r3, r3, #17
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Perform nb_rub inferences (batch = 1) */
    while (--nb_run) {
 8008aa8:	e065      	b.n	8008b76 <MX_X_CUBE_AI_Process+0x10e>

        /* ---------------------------------------- */
        /* Data generation and Pre-Process          */
        /* ---------------------------------------- */
        for (ai_size i=0;  i < AI_IMAGECLASSIFY_IN_1_SIZE; i++ ) {
 8008aaa:	2300      	movs	r3, #0
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aae:	e015      	b.n	8008adc <MX_X_CUBE_AI_Process+0x74>

            /* Fill the input buffer with pixel data */
            float val = resizedImage[i];
 8008ab0:	4a37      	ldr	r2, [pc, #220]	; (8008b90 <MX_X_CUBE_AI_Process+0x128>)
 8008ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab4:	4413      	add	r3, r2
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	ee07 3a90 	vmov	s15, r3
 8008abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

            /* Convert the data if necessary */
            if (type_ == AI_BUFFER_FMT_TYPE_FLOAT) {
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d105      	bne.n	8008ad6 <MX_X_CUBE_AI_Process+0x6e>
                ((float *)in_data)[i] = val;
 8008aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4a31      	ldr	r2, [pc, #196]	; (8008b94 <MX_X_CUBE_AI_Process+0x12c>)
 8008ad0:	4413      	add	r3, r2
 8008ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ad4:	601a      	str	r2, [r3, #0]
        for (ai_size i=0;  i < AI_IMAGECLASSIFY_IN_1_SIZE; i++ ) {
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad8:	3301      	adds	r3, #1
 8008ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ade:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8008ae2:	d3e5      	bcc.n	8008ab0 <MX_X_CUBE_AI_Process+0x48>
            }
        }

        /* Perform the inference */
        t1=HAL_GetTick();
 8008ae4:	f7fb ff42 	bl	800496c <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	4b2b      	ldr	r3, [pc, #172]	; (8008b98 <MX_X_CUBE_AI_Process+0x130>)
 8008aec:	601a      	str	r2, [r3, #0]
        res = aiRun(in_data, out_data);
 8008aee:	492b      	ldr	r1, [pc, #172]	; (8008b9c <MX_X_CUBE_AI_Process+0x134>)
 8008af0:	4828      	ldr	r0, [pc, #160]	; (8008b94 <MX_X_CUBE_AI_Process+0x12c>)
 8008af2:	f7ff ff6f 	bl	80089d4 <aiRun>
 8008af6:	6338      	str	r0, [r7, #48]	; 0x30
        t2=HAL_GetTick();
 8008af8:	f7fb ff38 	bl	800496c <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	4b28      	ldr	r3, [pc, #160]	; (8008ba0 <MX_X_CUBE_AI_Process+0x138>)
 8008b00:	601a      	str	r2, [r3, #0]
        /* Post-Process - process the output buffer */
        if(res==0)
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d136      	bne.n	8008b76 <MX_X_CUBE_AI_Process+0x10e>
               {
               	bubblesort(out_data,ranking,OUTPUT_CLASS_NUMBER);
 8008b08:	463b      	mov	r3, r7
 8008b0a:	220a      	movs	r2, #10
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4823      	ldr	r0, [pc, #140]	; (8008b9c <MX_X_CUBE_AI_Process+0x134>)
 8008b10:	f000 f84e 	bl	8008bb0 <bubblesort>
               	/* Print the classification result */
               	printf("Inference Time: %d ms\n",((t2>=t1)?(t2-t1):((1<<24)-t1+t2)));
 8008b14:	4b22      	ldr	r3, [pc, #136]	; (8008ba0 <MX_X_CUBE_AI_Process+0x138>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	4b1f      	ldr	r3, [pc, #124]	; (8008b98 <MX_X_CUBE_AI_Process+0x130>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d305      	bcc.n	8008b2c <MX_X_CUBE_AI_Process+0xc4>
 8008b20:	4b1f      	ldr	r3, [pc, #124]	; (8008ba0 <MX_X_CUBE_AI_Process+0x138>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	4b1c      	ldr	r3, [pc, #112]	; (8008b98 <MX_X_CUBE_AI_Process+0x130>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	e006      	b.n	8008b3a <MX_X_CUBE_AI_Process+0xd2>
 8008b2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ba0 <MX_X_CUBE_AI_Process+0x138>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	4b19      	ldr	r3, [pc, #100]	; (8008b98 <MX_X_CUBE_AI_Process+0x130>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4819      	ldr	r0, [pc, #100]	; (8008ba4 <MX_X_CUBE_AI_Process+0x13c>)
 8008b3e:	f002 feff 	bl	800b940 <iprintf>
               	printf("The Prediction is: %s",g_classes[ranking[0]]);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	4a18      	ldr	r2, [pc, #96]	; (8008ba8 <MX_X_CUBE_AI_Process+0x140>)
 8008b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4817      	ldr	r0, [pc, #92]	; (8008bac <MX_X_CUBE_AI_Process+0x144>)
 8008b4e:	f002 fef7 	bl	800b940 <iprintf>
               	printf("\n");
 8008b52:	200a      	movs	r0, #10
 8008b54:	f002 ff0c 	bl	800b970 <putchar>
               	uint8_t *ptr = g_classes[ranking[0]];
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	4a13      	ldr	r2, [pc, #76]	; (8008ba8 <MX_X_CUBE_AI_Process+0x140>)
 8008b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b60:	62fb      	str	r3, [r7, #44]	; 0x2c
               	BSP_LCD_SetTextColor(0x07E0);
 8008b62:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8008b66:	f002 f89b 	bl	800aca0 <BSP_LCD_SetTextColor>
               	BSP_LCD_DisplayStringAt(0, 100, ptr , 0x01);
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6e:	2164      	movs	r1, #100	; 0x64
 8008b70:	2000      	movs	r0, #0
 8008b72:	f002 f913 	bl	800ad9c <BSP_LCD_DisplayStringAt>
    while (--nb_run) {
 8008b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d193      	bne.n	8008aaa <MX_X_CUBE_AI_Process+0x42>
               }
    }
    /* USER CODE END 1 */
}
 8008b82:	bf00      	nop
 8008b84:	3748      	adds	r7, #72	; 0x48
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000008 	.word	0x20000008
 8008b90:	20001a10 	.word	0x20001a10
 8008b94:	2000073c 	.word	0x2000073c
 8008b98:	20001a0c 	.word	0x20001a0c
 8008b9c:	2000137c 	.word	0x2000137c
 8008ba0:	20001a08 	.word	0x20001a08
 8008ba4:	0800db54 	.word	0x0800db54
 8008ba8:	20000030 	.word	0x20000030
 8008bac:	0800db6c 	.word	0x0800db6c

08008bb0 <bubblesort>:
  * @brief  Bubble sorting algorithm
  * @param  None
  * @retval None
  */
static void bubblesort(float *prob,int *classes, int size)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b089      	sub	sp, #36	; 0x24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  float p;
  int c;

  for(int i=0; i<size; i++)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	e051      	b.n	8008c66 <bubblesort+0xb6>
  {
    for(int ii=0; ii<size-i-1; ii++)
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61bb      	str	r3, [r7, #24]
 8008bc6:	e044      	b.n	8008c52 <bubblesort+0xa2>
    {
      if(prob[ii]<prob[ii+1])
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	ed93 7a00 	vldr	s14, [r3]
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4413      	add	r3, r2
 8008bde:	edd3 7a00 	vldr	s15, [r3]
 8008be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bea:	d52f      	bpl.n	8008c4c <bubblesort+0x9c>
      {
        p=prob[ii];
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	617b      	str	r3, [r7, #20]
        prob[ii]=prob[ii+1];
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	441a      	add	r2, r3
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	68f9      	ldr	r1, [r7, #12]
 8008c08:	440b      	add	r3, r1
 8008c0a:	6812      	ldr	r2, [r2, #0]
 8008c0c:	601a      	str	r2, [r3, #0]
        prob[ii+1]=p;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	3301      	adds	r3, #1
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	601a      	str	r2, [r3, #0]
        c = classes[ii];
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	4413      	add	r3, r2
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	613b      	str	r3, [r7, #16]
        classes[ii]=classes[ii+1];
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	441a      	add	r2, r3
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	440b      	add	r3, r1
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	601a      	str	r2, [r3, #0]
        classes[ii+1]=c;
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	3301      	adds	r3, #1
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	4413      	add	r3, r2
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	601a      	str	r2, [r3, #0]
    for(int ii=0; ii<size-i-1; ii++)
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	dbb3      	blt.n	8008bc8 <bubblesort+0x18>
  for(int i=0; i<size; i++)
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	3301      	adds	r3, #1
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	dba9      	blt.n	8008bc2 <bubblesort+0x12>
      }
    }
  }
}
 8008c6e:	bf00      	nop
 8008c70:	3724      	adds	r7, #36	; 0x24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <DCMI_OV9655Config>:
  * @param  None
  * @retval None
  */

uint8_t DCMI_OV9655Config(void)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	af00      	add	r7, sp, #0
  
  MCO1_Init();
 8008c7e:	f000 f82f 	bl	8008ce0 <MCO1_Init>
  Delay_ms(0xfff);
 8008c82:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008c86:	f000 fcff 	bl	8009688 <Delay_ms>
  /* Reset and check the presence of the OV9655 camera module */
  if(DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x12, 0x80))
 8008c8a:	2280      	movs	r2, #128	; 0x80
 8008c8c:	2112      	movs	r1, #18
 8008c8e:	2060      	movs	r0, #96	; 0x60
 8008c90:	f001 ff92 	bl	800abb8 <DCMI_SingleRandomWrite>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <DCMI_OV9655Config+0x24>
  {
     return (0xFF);
 8008c9a:	23ff      	movs	r3, #255	; 0xff
 8008c9c:	e017      	b.n	8008cce <DCMI_OV9655Config+0x54>
  }
  Delay_ms(0xfff);
 8008c9e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008ca2:	f000 fcf1 	bl	8009688 <Delay_ms>

  /* OV9655 Camera size setup */    
#if defined (QQVGA_SIZE)
  DCMI_OV9655_QQVGASizeSetup();
#elif defined (QVGA_SIZE)
  DCMI_OV9655_QVGASizeSetup();
 8008ca6:	f000 f822 	bl	8008cee <DCMI_OV9655_QVGASizeSetup>
#endif 

  /* Set the RGB565 mode */
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, OV9655_COM7, 0x63);
 8008caa:	2263      	movs	r2, #99	; 0x63
 8008cac:	2112      	movs	r1, #18
 8008cae:	2060      	movs	r0, #96	; 0x60
 8008cb0:	f001 ff82 	bl	800abb8 <DCMI_SingleRandomWrite>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, OV9655_COM15, 0x10);
 8008cb4:	2210      	movs	r2, #16
 8008cb6:	2140      	movs	r1, #64	; 0x40
 8008cb8:	2060      	movs	r0, #96	; 0x60
 8008cba:	f001 ff7d 	bl	800abb8 <DCMI_SingleRandomWrite>

  /* Invert the HRef signal*/
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, OV9655_COM10, 0x08);
 8008cbe:	2208      	movs	r2, #8
 8008cc0:	2115      	movs	r1, #21
 8008cc2:	2060      	movs	r0, #96	; 0x60
 8008cc4:	f001 ff78 	bl	800abb8 <DCMI_SingleRandomWrite>
  
  
  /* Configure the DCMI to interface with the OV9655 camera module */
  DCMI_Config();
 8008cc8:	f000 f803 	bl	8008cd2 <DCMI_Config>

  return (0x00);
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <DCMI_Config>:

void DCMI_Config(void)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	af00      	add	r7, sp, #0
//  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
//  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
//  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
//     
//  DMA_Init(DMA2_Stream1, &DMA_InitStructure); 
}
 8008cd6:	bf00      	nop
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <MCO1_Init>:
  * @brief  Set PA8 Output SYSCLK/2.
  * @param  None
  * @retval None
  */
void MCO1_Init(void)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;  
//	GPIO_Init(GPIOA, &GPIO_InitStructure);
//	
//	RCC_MCO1Config(RCC_MCO1Source_HSE, RCC_MCO1Div_1);
}
 8008ce4:	bf00      	nop
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <DCMI_OV9655_QVGASizeSetup>:
// uint8_t OV9655_QVGA_table[]=
// {

// };
void DCMI_OV9655_QVGASizeSetup(void)
{  
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	af00      	add	r7, sp, #0
	
  Delay(TIMEOUT);
 8008cf2:	2002      	movs	r0, #2
 8008cf4:	f000 fcb8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x00, 0x00);
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	2060      	movs	r0, #96	; 0x60
 8008cfe:	f001 ff5b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d02:	2002      	movs	r0, #2
 8008d04:	f000 fcb0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x01, 0x80);
 8008d08:	2280      	movs	r2, #128	; 0x80
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	2060      	movs	r0, #96	; 0x60
 8008d0e:	f001 ff53 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d12:	2002      	movs	r0, #2
 8008d14:	f000 fca8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x02, 0x80);
 8008d18:	2280      	movs	r2, #128	; 0x80
 8008d1a:	2102      	movs	r1, #2
 8008d1c:	2060      	movs	r0, #96	; 0x60
 8008d1e:	f001 ff4b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d22:	2002      	movs	r0, #2
 8008d24:	f000 fca0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x03, 0x02);
 8008d28:	2202      	movs	r2, #2
 8008d2a:	2103      	movs	r1, #3
 8008d2c:	2060      	movs	r0, #96	; 0x60
 8008d2e:	f001 ff43 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d32:	2002      	movs	r0, #2
 8008d34:	f000 fc98 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x04, 0x00);
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2104      	movs	r1, #4
 8008d3c:	2060      	movs	r0, #96	; 0x60
 8008d3e:	f001 ff3b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d42:	2002      	movs	r0, #2
 8008d44:	f000 fc90 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x09, 0x03);
 8008d48:	2203      	movs	r2, #3
 8008d4a:	2109      	movs	r1, #9
 8008d4c:	2060      	movs	r0, #96	; 0x60
 8008d4e:	f001 ff33 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d52:	2002      	movs	r0, #2
 8008d54:	f000 fc88 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x0b, 0x57);
 8008d58:	2257      	movs	r2, #87	; 0x57
 8008d5a:	210b      	movs	r1, #11
 8008d5c:	2060      	movs	r0, #96	; 0x60
 8008d5e:	f001 ff2b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d62:	2002      	movs	r0, #2
 8008d64:	f000 fc80 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x0e, 0x1);
 8008d68:	2201      	movs	r2, #1
 8008d6a:	210e      	movs	r1, #14
 8008d6c:	2060      	movs	r0, #96	; 0x60
 8008d6e:	f001 ff23 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d72:	2002      	movs	r0, #2
 8008d74:	f000 fc78 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x0f, 0xc0);
 8008d78:	22c0      	movs	r2, #192	; 0xc0
 8008d7a:	210f      	movs	r1, #15
 8008d7c:	2060      	movs	r0, #96	; 0x60
 8008d7e:	f001 ff1b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d82:	2002      	movs	r0, #2
 8008d84:	f000 fc70 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x10, 0x50);
 8008d88:	2250      	movs	r2, #80	; 0x50
 8008d8a:	2110      	movs	r1, #16
 8008d8c:	2060      	movs	r0, #96	; 0x60
 8008d8e:	f001 ff13 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008d92:	2002      	movs	r0, #2
 8008d94:	f000 fc68 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x11, 0x80);
 8008d98:	2280      	movs	r2, #128	; 0x80
 8008d9a:	2111      	movs	r1, #17
 8008d9c:	2060      	movs	r0, #96	; 0x60
 8008d9e:	f001 ff0b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008da2:	2002      	movs	r0, #2
 8008da4:	f000 fc60 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x12, 0x63);
 8008da8:	2263      	movs	r2, #99	; 0x63
 8008daa:	2112      	movs	r1, #18
 8008dac:	2060      	movs	r0, #96	; 0x60
 8008dae:	f001 ff03 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008db2:	2002      	movs	r0, #2
 8008db4:	f000 fc58 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x13, 0xef);
 8008db8:	22ef      	movs	r2, #239	; 0xef
 8008dba:	2113      	movs	r1, #19
 8008dbc:	2060      	movs	r0, #96	; 0x60
 8008dbe:	f001 fefb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008dc2:	2002      	movs	r0, #2
 8008dc4:	f000 fc50 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x14, 0x3a);
 8008dc8:	223a      	movs	r2, #58	; 0x3a
 8008dca:	2114      	movs	r1, #20
 8008dcc:	2060      	movs	r0, #96	; 0x60
 8008dce:	f001 fef3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008dd2:	2002      	movs	r0, #2
 8008dd4:	f000 fc48 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x15, 0x18);
 8008dd8:	2218      	movs	r2, #24
 8008dda:	2115      	movs	r1, #21
 8008ddc:	2060      	movs	r0, #96	; 0x60
 8008dde:	f001 feeb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008de2:	2002      	movs	r0, #2
 8008de4:	f000 fc40 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x16, 0x24);
 8008de8:	2224      	movs	r2, #36	; 0x24
 8008dea:	2116      	movs	r1, #22
 8008dec:	2060      	movs	r0, #96	; 0x60
 8008dee:	f001 fee3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008df2:	2002      	movs	r0, #2
 8008df4:	f000 fc38 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x17, 0x18);
 8008df8:	2218      	movs	r2, #24
 8008dfa:	2117      	movs	r1, #23
 8008dfc:	2060      	movs	r0, #96	; 0x60
 8008dfe:	f001 fedb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008e02:	2002      	movs	r0, #2
 8008e04:	f000 fc30 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x18, 0x04);
 8008e08:	2204      	movs	r2, #4
 8008e0a:	2118      	movs	r1, #24
 8008e0c:	2060      	movs	r0, #96	; 0x60
 8008e0e:	f001 fed3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008e12:	2002      	movs	r0, #2
 8008e14:	f000 fc28 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x19, 0x01);
 8008e18:	2201      	movs	r2, #1
 8008e1a:	2119      	movs	r1, #25
 8008e1c:	2060      	movs	r0, #96	; 0x60
 8008e1e:	f001 fecb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008e22:	2002      	movs	r0, #2
 8008e24:	f000 fc20 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x1a, 0x81);
 8008e28:	2281      	movs	r2, #129	; 0x81
 8008e2a:	211a      	movs	r1, #26
 8008e2c:	2060      	movs	r0, #96	; 0x60
 8008e2e:	f001 fec3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008e32:	2002      	movs	r0, #2
 8008e34:	f000 fc18 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x1e, 0x00); /*0x20*/
 8008e38:	2200      	movs	r2, #0
 8008e3a:	211e      	movs	r1, #30
 8008e3c:	2060      	movs	r0, #96	; 0x60
 8008e3e:	f001 febb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT); 					                          
 8008e42:	2002      	movs	r0, #2
 8008e44:	f000 fc10 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x24, 0x3c);
 8008e48:	223c      	movs	r2, #60	; 0x3c
 8008e4a:	2124      	movs	r1, #36	; 0x24
 8008e4c:	2060      	movs	r0, #96	; 0x60
 8008e4e:	f001 feb3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008e52:	2002      	movs	r0, #2
 8008e54:	f000 fc08 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x25, 0x36);
 8008e58:	2236      	movs	r2, #54	; 0x36
 8008e5a:	2125      	movs	r1, #37	; 0x25
 8008e5c:	2060      	movs	r0, #96	; 0x60
 8008e5e:	f001 feab 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);						                          
 8008e62:	2002      	movs	r0, #2
 8008e64:	f000 fc00 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x26, 0x72);
 8008e68:	2272      	movs	r2, #114	; 0x72
 8008e6a:	2126      	movs	r1, #38	; 0x26
 8008e6c:	2060      	movs	r0, #96	; 0x60
 8008e6e:	f001 fea3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);							                        
 8008e72:	2002      	movs	r0, #2
 8008e74:	f000 fbf8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x27, 0x08);
 8008e78:	2208      	movs	r2, #8
 8008e7a:	2127      	movs	r1, #39	; 0x27
 8008e7c:	2060      	movs	r0, #96	; 0x60
 8008e7e:	f001 fe9b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008e82:	2002      	movs	r0, #2
 8008e84:	f000 fbf0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x28, 0x08);
 8008e88:	2208      	movs	r2, #8
 8008e8a:	2128      	movs	r1, #40	; 0x28
 8008e8c:	2060      	movs	r0, #96	; 0x60
 8008e8e:	f001 fe93 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008e92:	2002      	movs	r0, #2
 8008e94:	f000 fbe8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x29, 0x15);
 8008e98:	2215      	movs	r2, #21
 8008e9a:	2129      	movs	r1, #41	; 0x29
 8008e9c:	2060      	movs	r0, #96	; 0x60
 8008e9e:	f001 fe8b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008ea2:	2002      	movs	r0, #2
 8008ea4:	f000 fbe0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x2a, 0x00);
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	212a      	movs	r1, #42	; 0x2a
 8008eac:	2060      	movs	r0, #96	; 0x60
 8008eae:	f001 fe83 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008eb2:	2002      	movs	r0, #2
 8008eb4:	f000 fbd8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x2b, 0x00);
 8008eb8:	2200      	movs	r2, #0
 8008eba:	212b      	movs	r1, #43	; 0x2b
 8008ebc:	2060      	movs	r0, #96	; 0x60
 8008ebe:	f001 fe7b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008ec2:	2002      	movs	r0, #2
 8008ec4:	f000 fbd0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x2c, 0x08);
 8008ec8:	2208      	movs	r2, #8
 8008eca:	212c      	movs	r1, #44	; 0x2c
 8008ecc:	2060      	movs	r0, #96	; 0x60
 8008ece:	f001 fe73 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008ed2:	2002      	movs	r0, #2
 8008ed4:	f000 fbc8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x32, 0x12);
 8008ed8:	2212      	movs	r2, #18
 8008eda:	2132      	movs	r1, #50	; 0x32
 8008edc:	2060      	movs	r0, #96	; 0x60
 8008ede:	f001 fe6b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008ee2:	2002      	movs	r0, #2
 8008ee4:	f000 fbc0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x33, 0x00);
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2133      	movs	r1, #51	; 0x33
 8008eec:	2060      	movs	r0, #96	; 0x60
 8008eee:	f001 fe63 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008ef2:	2002      	movs	r0, #2
 8008ef4:	f000 fbb8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x34, 0x3f);
 8008ef8:	223f      	movs	r2, #63	; 0x3f
 8008efa:	2134      	movs	r1, #52	; 0x34
 8008efc:	2060      	movs	r0, #96	; 0x60
 8008efe:	f001 fe5b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f02:	2002      	movs	r0, #2
 8008f04:	f000 fbb0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x35, 0x00);
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2135      	movs	r1, #53	; 0x35
 8008f0c:	2060      	movs	r0, #96	; 0x60
 8008f0e:	f001 fe53 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f12:	2002      	movs	r0, #2
 8008f14:	f000 fba8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x36, 0x3a);
 8008f18:	223a      	movs	r2, #58	; 0x3a
 8008f1a:	2136      	movs	r1, #54	; 0x36
 8008f1c:	2060      	movs	r0, #96	; 0x60
 8008f1e:	f001 fe4b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f22:	2002      	movs	r0, #2
 8008f24:	f000 fba0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x38, 0x72);
 8008f28:	2272      	movs	r2, #114	; 0x72
 8008f2a:	2138      	movs	r1, #56	; 0x38
 8008f2c:	2060      	movs	r0, #96	; 0x60
 8008f2e:	f001 fe43 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f32:	2002      	movs	r0, #2
 8008f34:	f000 fb98 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x39, 0x57);
 8008f38:	2257      	movs	r2, #87	; 0x57
 8008f3a:	2139      	movs	r1, #57	; 0x39
 8008f3c:	2060      	movs	r0, #96	; 0x60
 8008f3e:	f001 fe3b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f42:	2002      	movs	r0, #2
 8008f44:	f000 fb90 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3a, 0xca);
 8008f48:	22ca      	movs	r2, #202	; 0xca
 8008f4a:	213a      	movs	r1, #58	; 0x3a
 8008f4c:	2060      	movs	r0, #96	; 0x60
 8008f4e:	f001 fe33 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f52:	2002      	movs	r0, #2
 8008f54:	f000 fb88 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3b, 0x04);
 8008f58:	2204      	movs	r2, #4
 8008f5a:	213b      	movs	r1, #59	; 0x3b
 8008f5c:	2060      	movs	r0, #96	; 0x60
 8008f5e:	f001 fe2b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f62:	2002      	movs	r0, #2
 8008f64:	f000 fb80 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3d, 0x99);
 8008f68:	2299      	movs	r2, #153	; 0x99
 8008f6a:	213d      	movs	r1, #61	; 0x3d
 8008f6c:	2060      	movs	r0, #96	; 0x60
 8008f6e:	f001 fe23 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f72:	2002      	movs	r0, #2
 8008f74:	f000 fb78 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3e, 0x02); 
 8008f78:	2202      	movs	r2, #2
 8008f7a:	213e      	movs	r1, #62	; 0x3e
 8008f7c:	2060      	movs	r0, #96	; 0x60
 8008f7e:	f001 fe1b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f82:	2002      	movs	r0, #2
 8008f84:	f000 fb70 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3f, 0xc1);
 8008f88:	22c1      	movs	r2, #193	; 0xc1
 8008f8a:	213f      	movs	r1, #63	; 0x3f
 8008f8c:	2060      	movs	r0, #96	; 0x60
 8008f8e:	f001 fe13 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008f92:	2002      	movs	r0, #2
 8008f94:	f000 fb68 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x40, 0xd0);
 8008f98:	22d0      	movs	r2, #208	; 0xd0
 8008f9a:	2140      	movs	r1, #64	; 0x40
 8008f9c:	2060      	movs	r0, #96	; 0x60
 8008f9e:	f001 fe0b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008fa2:	2002      	movs	r0, #2
 8008fa4:	f000 fb60 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x41, 0x41);
 8008fa8:	2241      	movs	r2, #65	; 0x41
 8008faa:	2141      	movs	r1, #65	; 0x41
 8008fac:	2060      	movs	r0, #96	; 0x60
 8008fae:	f001 fe03 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008fb2:	2002      	movs	r0, #2
 8008fb4:	f000 fb58 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x42, 0xc0);
 8008fb8:	22c0      	movs	r2, #192	; 0xc0
 8008fba:	2142      	movs	r1, #66	; 0x42
 8008fbc:	2060      	movs	r0, #96	; 0x60
 8008fbe:	f001 fdfb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008fc2:	2002      	movs	r0, #2
 8008fc4:	f000 fb50 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x43, 0x0a);
 8008fc8:	220a      	movs	r2, #10
 8008fca:	2143      	movs	r1, #67	; 0x43
 8008fcc:	2060      	movs	r0, #96	; 0x60
 8008fce:	f001 fdf3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008fd2:	2002      	movs	r0, #2
 8008fd4:	f000 fb48 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x44, 0xf0);
 8008fd8:	22f0      	movs	r2, #240	; 0xf0
 8008fda:	2144      	movs	r1, #68	; 0x44
 8008fdc:	2060      	movs	r0, #96	; 0x60
 8008fde:	f001 fdeb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008fe2:	2002      	movs	r0, #2
 8008fe4:	f000 fb40 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x45, 0x46);
 8008fe8:	2246      	movs	r2, #70	; 0x46
 8008fea:	2145      	movs	r1, #69	; 0x45
 8008fec:	2060      	movs	r0, #96	; 0x60
 8008fee:	f001 fde3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008ff2:	2002      	movs	r0, #2
 8008ff4:	f000 fb38 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x46, 0x62);
 8008ff8:	2262      	movs	r2, #98	; 0x62
 8008ffa:	2146      	movs	r1, #70	; 0x46
 8008ffc:	2060      	movs	r0, #96	; 0x60
 8008ffe:	f001 fddb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009002:	2002      	movs	r0, #2
 8009004:	f000 fb30 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x47, 0x2a);
 8009008:	222a      	movs	r2, #42	; 0x2a
 800900a:	2147      	movs	r1, #71	; 0x47
 800900c:	2060      	movs	r0, #96	; 0x60
 800900e:	f001 fdd3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009012:	2002      	movs	r0, #2
 8009014:	f000 fb28 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x48, 0x3c);
 8009018:	223c      	movs	r2, #60	; 0x3c
 800901a:	2148      	movs	r1, #72	; 0x48
 800901c:	2060      	movs	r0, #96	; 0x60
 800901e:	f001 fdcb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009022:	2002      	movs	r0, #2
 8009024:	f000 fb20 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4a, 0xfc);
 8009028:	22fc      	movs	r2, #252	; 0xfc
 800902a:	214a      	movs	r1, #74	; 0x4a
 800902c:	2060      	movs	r0, #96	; 0x60
 800902e:	f001 fdc3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009032:	2002      	movs	r0, #2
 8009034:	f000 fb18 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4b, 0xfc);
 8009038:	22fc      	movs	r2, #252	; 0xfc
 800903a:	214b      	movs	r1, #75	; 0x4b
 800903c:	2060      	movs	r0, #96	; 0x60
 800903e:	f001 fdbb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009042:	2002      	movs	r0, #2
 8009044:	f000 fb10 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4c, 0x7f);
 8009048:	227f      	movs	r2, #127	; 0x7f
 800904a:	214c      	movs	r1, #76	; 0x4c
 800904c:	2060      	movs	r0, #96	; 0x60
 800904e:	f001 fdb3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009052:	2002      	movs	r0, #2
 8009054:	f000 fb08 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4d, 0x7f);
 8009058:	227f      	movs	r2, #127	; 0x7f
 800905a:	214d      	movs	r1, #77	; 0x4d
 800905c:	2060      	movs	r0, #96	; 0x60
 800905e:	f001 fdab 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009062:	2002      	movs	r0, #2
 8009064:	f000 fb00 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4e, 0x7f);
 8009068:	227f      	movs	r2, #127	; 0x7f
 800906a:	214e      	movs	r1, #78	; 0x4e
 800906c:	2060      	movs	r0, #96	; 0x60
 800906e:	f001 fda3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009072:	2002      	movs	r0, #2
 8009074:	f000 faf8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4f, 0x98);
 8009078:	2298      	movs	r2, #152	; 0x98
 800907a:	214f      	movs	r1, #79	; 0x4f
 800907c:	2060      	movs	r0, #96	; 0x60
 800907e:	f001 fd9b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009082:	2002      	movs	r0, #2
 8009084:	f000 faf0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x50, 0x98);
 8009088:	2298      	movs	r2, #152	; 0x98
 800908a:	2150      	movs	r1, #80	; 0x50
 800908c:	2060      	movs	r0, #96	; 0x60
 800908e:	f001 fd93 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009092:	2002      	movs	r0, #2
 8009094:	f000 fae8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x51, 0x00);
 8009098:	2200      	movs	r2, #0
 800909a:	2151      	movs	r1, #81	; 0x51
 800909c:	2060      	movs	r0, #96	; 0x60
 800909e:	f001 fd8b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090a2:	2002      	movs	r0, #2
 80090a4:	f000 fae0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x52, 0x28);
 80090a8:	2228      	movs	r2, #40	; 0x28
 80090aa:	2152      	movs	r1, #82	; 0x52
 80090ac:	2060      	movs	r0, #96	; 0x60
 80090ae:	f001 fd83 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090b2:	2002      	movs	r0, #2
 80090b4:	f000 fad8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x53, 0x70);
 80090b8:	2270      	movs	r2, #112	; 0x70
 80090ba:	2153      	movs	r1, #83	; 0x53
 80090bc:	2060      	movs	r0, #96	; 0x60
 80090be:	f001 fd7b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090c2:	2002      	movs	r0, #2
 80090c4:	f000 fad0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x54, 0x98);
 80090c8:	2298      	movs	r2, #152	; 0x98
 80090ca:	2154      	movs	r1, #84	; 0x54
 80090cc:	2060      	movs	r0, #96	; 0x60
 80090ce:	f001 fd73 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090d2:	2002      	movs	r0, #2
 80090d4:	f000 fac8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x58, 0x1a);
 80090d8:	221a      	movs	r2, #26
 80090da:	2158      	movs	r1, #88	; 0x58
 80090dc:	2060      	movs	r0, #96	; 0x60
 80090de:	f001 fd6b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090e2:	2002      	movs	r0, #2
 80090e4:	f000 fac0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x59, 0x85);
 80090e8:	2285      	movs	r2, #133	; 0x85
 80090ea:	2159      	movs	r1, #89	; 0x59
 80090ec:	2060      	movs	r0, #96	; 0x60
 80090ee:	f001 fd63 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090f2:	2002      	movs	r0, #2
 80090f4:	f000 fab8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5a, 0xa9);
 80090f8:	22a9      	movs	r2, #169	; 0xa9
 80090fa:	215a      	movs	r1, #90	; 0x5a
 80090fc:	2060      	movs	r0, #96	; 0x60
 80090fe:	f001 fd5b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009102:	2002      	movs	r0, #2
 8009104:	f000 fab0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5b, 0x64);
 8009108:	2264      	movs	r2, #100	; 0x64
 800910a:	215b      	movs	r1, #91	; 0x5b
 800910c:	2060      	movs	r0, #96	; 0x60
 800910e:	f001 fd53 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009112:	2002      	movs	r0, #2
 8009114:	f000 faa8 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5c, 0x84);
 8009118:	2284      	movs	r2, #132	; 0x84
 800911a:	215c      	movs	r1, #92	; 0x5c
 800911c:	2060      	movs	r0, #96	; 0x60
 800911e:	f001 fd4b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009122:	2002      	movs	r0, #2
 8009124:	f000 faa0 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5d, 0x53);
 8009128:	2253      	movs	r2, #83	; 0x53
 800912a:	215d      	movs	r1, #93	; 0x5d
 800912c:	2060      	movs	r0, #96	; 0x60
 800912e:	f001 fd43 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009132:	2002      	movs	r0, #2
 8009134:	f000 fa98 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5e, 0x0e);
 8009138:	220e      	movs	r2, #14
 800913a:	215e      	movs	r1, #94	; 0x5e
 800913c:	2060      	movs	r0, #96	; 0x60
 800913e:	f001 fd3b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009142:	2002      	movs	r0, #2
 8009144:	f000 fa90 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5f, 0xf0);
 8009148:	22f0      	movs	r2, #240	; 0xf0
 800914a:	215f      	movs	r1, #95	; 0x5f
 800914c:	2060      	movs	r0, #96	; 0x60
 800914e:	f001 fd33 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009152:	2002      	movs	r0, #2
 8009154:	f000 fa88 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x60, 0xf0);
 8009158:	22f0      	movs	r2, #240	; 0xf0
 800915a:	2160      	movs	r1, #96	; 0x60
 800915c:	2060      	movs	r0, #96	; 0x60
 800915e:	f001 fd2b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009162:	2002      	movs	r0, #2
 8009164:	f000 fa80 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x61, 0xf0);
 8009168:	22f0      	movs	r2, #240	; 0xf0
 800916a:	2161      	movs	r1, #97	; 0x61
 800916c:	2060      	movs	r0, #96	; 0x60
 800916e:	f001 fd23 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009172:	2002      	movs	r0, #2
 8009174:	f000 fa78 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x62, 0x00);
 8009178:	2200      	movs	r2, #0
 800917a:	2162      	movs	r1, #98	; 0x62
 800917c:	2060      	movs	r0, #96	; 0x60
 800917e:	f001 fd1b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009182:	2002      	movs	r0, #2
 8009184:	f000 fa70 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x63, 0x00);
 8009188:	2200      	movs	r2, #0
 800918a:	2163      	movs	r1, #99	; 0x63
 800918c:	2060      	movs	r0, #96	; 0x60
 800918e:	f001 fd13 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009192:	2002      	movs	r0, #2
 8009194:	f000 fa68 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x64, 0x02);
 8009198:	2202      	movs	r2, #2
 800919a:	2164      	movs	r1, #100	; 0x64
 800919c:	2060      	movs	r0, #96	; 0x60
 800919e:	f001 fd0b 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091a2:	2002      	movs	r0, #2
 80091a4:	f000 fa60 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x65, 0x20);
 80091a8:	2220      	movs	r2, #32
 80091aa:	2165      	movs	r1, #101	; 0x65
 80091ac:	2060      	movs	r0, #96	; 0x60
 80091ae:	f001 fd03 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091b2:	2002      	movs	r0, #2
 80091b4:	f000 fa58 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x66, 0x00);
 80091b8:	2200      	movs	r2, #0
 80091ba:	2166      	movs	r1, #102	; 0x66
 80091bc:	2060      	movs	r0, #96	; 0x60
 80091be:	f001 fcfb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091c2:	2002      	movs	r0, #2
 80091c4:	f000 fa50 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x69, 0x0a);
 80091c8:	220a      	movs	r2, #10
 80091ca:	2169      	movs	r1, #105	; 0x69
 80091cc:	2060      	movs	r0, #96	; 0x60
 80091ce:	f001 fcf3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091d2:	2002      	movs	r0, #2
 80091d4:	f000 fa48 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6b, 0x0a);
 80091d8:	220a      	movs	r2, #10
 80091da:	216b      	movs	r1, #107	; 0x6b
 80091dc:	2060      	movs	r0, #96	; 0x60
 80091de:	f001 fceb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091e2:	2002      	movs	r0, #2
 80091e4:	f000 fa40 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6c, 0x04);
 80091e8:	2204      	movs	r2, #4
 80091ea:	216c      	movs	r1, #108	; 0x6c
 80091ec:	2060      	movs	r0, #96	; 0x60
 80091ee:	f001 fce3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091f2:	2002      	movs	r0, #2
 80091f4:	f000 fa38 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6d, 0x55);
 80091f8:	2255      	movs	r2, #85	; 0x55
 80091fa:	216d      	movs	r1, #109	; 0x6d
 80091fc:	2060      	movs	r0, #96	; 0x60
 80091fe:	f001 fcdb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009202:	2002      	movs	r0, #2
 8009204:	f000 fa30 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6e, 0x00);
 8009208:	2200      	movs	r2, #0
 800920a:	216e      	movs	r1, #110	; 0x6e
 800920c:	2060      	movs	r0, #96	; 0x60
 800920e:	f001 fcd3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009212:	2002      	movs	r0, #2
 8009214:	f000 fa28 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6f, 0x9d);
 8009218:	229d      	movs	r2, #157	; 0x9d
 800921a:	216f      	movs	r1, #111	; 0x6f
 800921c:	2060      	movs	r0, #96	; 0x60
 800921e:	f001 fccb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009222:	2002      	movs	r0, #2
 8009224:	f000 fa20 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x70, 0x21);
 8009228:	2221      	movs	r2, #33	; 0x21
 800922a:	2170      	movs	r1, #112	; 0x70
 800922c:	2060      	movs	r0, #96	; 0x60
 800922e:	f001 fcc3 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009232:	2002      	movs	r0, #2
 8009234:	f000 fa18 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x71, 0x78);
 8009238:	2278      	movs	r2, #120	; 0x78
 800923a:	2171      	movs	r1, #113	; 0x71
 800923c:	2060      	movs	r0, #96	; 0x60
 800923e:	f001 fcbb 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009242:	2002      	movs	r0, #2
 8009244:	f000 fa10 	bl	8009668 <Delay>
  Delay(TIMEOUT);
 8009248:	2002      	movs	r0, #2
 800924a:	f000 fa0d 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x72, 0x11); 
 800924e:	2211      	movs	r2, #17
 8009250:	2172      	movs	r1, #114	; 0x72
 8009252:	2060      	movs	r0, #96	; 0x60
 8009254:	f001 fcb0 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009258:	2002      	movs	r0, #2
 800925a:	f000 fa05 	bl	8009668 <Delay>
  Delay(TIMEOUT);
 800925e:	2002      	movs	r0, #2
 8009260:	f000 fa02 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x73, 0x01);
 8009264:	2201      	movs	r2, #1
 8009266:	2173      	movs	r1, #115	; 0x73
 8009268:	2060      	movs	r0, #96	; 0x60
 800926a:	f001 fca5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800926e:	2002      	movs	r0, #2
 8009270:	f000 f9fa 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x74, 0x10); 
 8009274:	2210      	movs	r2, #16
 8009276:	2174      	movs	r1, #116	; 0x74
 8009278:	2060      	movs	r0, #96	; 0x60
 800927a:	f001 fc9d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800927e:	2002      	movs	r0, #2
 8009280:	f000 f9f2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x75, 0x10); 
 8009284:	2210      	movs	r2, #16
 8009286:	2175      	movs	r1, #117	; 0x75
 8009288:	2060      	movs	r0, #96	; 0x60
 800928a:	f001 fc95 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800928e:	2002      	movs	r0, #2
 8009290:	f000 f9ea 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x76, 0x01);
 8009294:	2201      	movs	r2, #1
 8009296:	2176      	movs	r1, #118	; 0x76
 8009298:	2060      	movs	r0, #96	; 0x60
 800929a:	f001 fc8d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800929e:	2002      	movs	r0, #2
 80092a0:	f000 f9e2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x77, 0x02);
 80092a4:	2202      	movs	r2, #2
 80092a6:	2177      	movs	r1, #119	; 0x77
 80092a8:	2060      	movs	r0, #96	; 0x60
 80092aa:	f001 fc85 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092ae:	2002      	movs	r0, #2
 80092b0:	f000 f9da 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7A, 0x12);
 80092b4:	2212      	movs	r2, #18
 80092b6:	217a      	movs	r1, #122	; 0x7a
 80092b8:	2060      	movs	r0, #96	; 0x60
 80092ba:	f001 fc7d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092be:	2002      	movs	r0, #2
 80092c0:	f000 f9d2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7B, 0x08);
 80092c4:	2208      	movs	r2, #8
 80092c6:	217b      	movs	r1, #123	; 0x7b
 80092c8:	2060      	movs	r0, #96	; 0x60
 80092ca:	f001 fc75 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092ce:	2002      	movs	r0, #2
 80092d0:	f000 f9ca 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7C, 0x16);
 80092d4:	2216      	movs	r2, #22
 80092d6:	217c      	movs	r1, #124	; 0x7c
 80092d8:	2060      	movs	r0, #96	; 0x60
 80092da:	f001 fc6d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092de:	2002      	movs	r0, #2
 80092e0:	f000 f9c2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7D, 0x30);
 80092e4:	2230      	movs	r2, #48	; 0x30
 80092e6:	217d      	movs	r1, #125	; 0x7d
 80092e8:	2060      	movs	r0, #96	; 0x60
 80092ea:	f001 fc65 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092ee:	2002      	movs	r0, #2
 80092f0:	f000 f9ba 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7E, 0x5e);
 80092f4:	225e      	movs	r2, #94	; 0x5e
 80092f6:	217e      	movs	r1, #126	; 0x7e
 80092f8:	2060      	movs	r0, #96	; 0x60
 80092fa:	f001 fc5d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092fe:	2002      	movs	r0, #2
 8009300:	f000 f9b2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7F, 0x72);
 8009304:	2272      	movs	r2, #114	; 0x72
 8009306:	217f      	movs	r1, #127	; 0x7f
 8009308:	2060      	movs	r0, #96	; 0x60
 800930a:	f001 fc55 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800930e:	2002      	movs	r0, #2
 8009310:	f000 f9aa 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x80, 0x82);
 8009314:	2282      	movs	r2, #130	; 0x82
 8009316:	2180      	movs	r1, #128	; 0x80
 8009318:	2060      	movs	r0, #96	; 0x60
 800931a:	f001 fc4d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800931e:	2002      	movs	r0, #2
 8009320:	f000 f9a2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x81, 0x8e);
 8009324:	228e      	movs	r2, #142	; 0x8e
 8009326:	2181      	movs	r1, #129	; 0x81
 8009328:	2060      	movs	r0, #96	; 0x60
 800932a:	f001 fc45 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800932e:	2002      	movs	r0, #2
 8009330:	f000 f99a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x82, 0x9a);
 8009334:	229a      	movs	r2, #154	; 0x9a
 8009336:	2182      	movs	r1, #130	; 0x82
 8009338:	2060      	movs	r0, #96	; 0x60
 800933a:	f001 fc3d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800933e:	2002      	movs	r0, #2
 8009340:	f000 f992 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x83, 0xa4);
 8009344:	22a4      	movs	r2, #164	; 0xa4
 8009346:	2183      	movs	r1, #131	; 0x83
 8009348:	2060      	movs	r0, #96	; 0x60
 800934a:	f001 fc35 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800934e:	2002      	movs	r0, #2
 8009350:	f000 f98a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x84, 0xac);
 8009354:	22ac      	movs	r2, #172	; 0xac
 8009356:	2184      	movs	r1, #132	; 0x84
 8009358:	2060      	movs	r0, #96	; 0x60
 800935a:	f001 fc2d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800935e:	2002      	movs	r0, #2
 8009360:	f000 f982 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x85, 0xb8);
 8009364:	22b8      	movs	r2, #184	; 0xb8
 8009366:	2185      	movs	r1, #133	; 0x85
 8009368:	2060      	movs	r0, #96	; 0x60
 800936a:	f001 fc25 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800936e:	2002      	movs	r0, #2
 8009370:	f000 f97a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x86, 0xc3);
 8009374:	22c3      	movs	r2, #195	; 0xc3
 8009376:	2186      	movs	r1, #134	; 0x86
 8009378:	2060      	movs	r0, #96	; 0x60
 800937a:	f001 fc1d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800937e:	2002      	movs	r0, #2
 8009380:	f000 f972 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x87, 0xd6);
 8009384:	22d6      	movs	r2, #214	; 0xd6
 8009386:	2187      	movs	r1, #135	; 0x87
 8009388:	2060      	movs	r0, #96	; 0x60
 800938a:	f001 fc15 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800938e:	2002      	movs	r0, #2
 8009390:	f000 f96a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x88, 0xe6);
 8009394:	22e6      	movs	r2, #230	; 0xe6
 8009396:	2188      	movs	r1, #136	; 0x88
 8009398:	2060      	movs	r0, #96	; 0x60
 800939a:	f001 fc0d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800939e:	2002      	movs	r0, #2
 80093a0:	f000 f962 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x89, 0xf2);
 80093a4:	22f2      	movs	r2, #242	; 0xf2
 80093a6:	2189      	movs	r1, #137	; 0x89
 80093a8:	2060      	movs	r0, #96	; 0x60
 80093aa:	f001 fc05 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093ae:	2002      	movs	r0, #2
 80093b0:	f000 f95a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x8a, 0x24);
 80093b4:	2224      	movs	r2, #36	; 0x24
 80093b6:	218a      	movs	r1, #138	; 0x8a
 80093b8:	2060      	movs	r0, #96	; 0x60
 80093ba:	f001 fbfd 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093be:	2002      	movs	r0, #2
 80093c0:	f000 f952 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x8c, 0x80);
 80093c4:	2280      	movs	r2, #128	; 0x80
 80093c6:	218c      	movs	r1, #140	; 0x8c
 80093c8:	2060      	movs	r0, #96	; 0x60
 80093ca:	f001 fbf5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093ce:	2002      	movs	r0, #2
 80093d0:	f000 f94a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x90, 0x7d);
 80093d4:	227d      	movs	r2, #125	; 0x7d
 80093d6:	2190      	movs	r1, #144	; 0x90
 80093d8:	2060      	movs	r0, #96	; 0x60
 80093da:	f001 fbed 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093de:	2002      	movs	r0, #2
 80093e0:	f000 f942 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x91, 0x7b);
 80093e4:	227b      	movs	r2, #123	; 0x7b
 80093e6:	2191      	movs	r1, #145	; 0x91
 80093e8:	2060      	movs	r0, #96	; 0x60
 80093ea:	f001 fbe5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093ee:	2002      	movs	r0, #2
 80093f0:	f000 f93a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x9d, 0x02);
 80093f4:	2202      	movs	r2, #2
 80093f6:	219d      	movs	r1, #157	; 0x9d
 80093f8:	2060      	movs	r0, #96	; 0x60
 80093fa:	f001 fbdd 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093fe:	2002      	movs	r0, #2
 8009400:	f000 f932 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x9e, 0x02);
 8009404:	2202      	movs	r2, #2
 8009406:	219e      	movs	r1, #158	; 0x9e
 8009408:	2060      	movs	r0, #96	; 0x60
 800940a:	f001 fbd5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800940e:	2002      	movs	r0, #2
 8009410:	f000 f92a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x9f, 0x7a);
 8009414:	227a      	movs	r2, #122	; 0x7a
 8009416:	219f      	movs	r1, #159	; 0x9f
 8009418:	2060      	movs	r0, #96	; 0x60
 800941a:	f001 fbcd 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800941e:	2002      	movs	r0, #2
 8009420:	f000 f922 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa0, 0x79);
 8009424:	2279      	movs	r2, #121	; 0x79
 8009426:	21a0      	movs	r1, #160	; 0xa0
 8009428:	2060      	movs	r0, #96	; 0x60
 800942a:	f001 fbc5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800942e:	2002      	movs	r0, #2
 8009430:	f000 f91a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa1, 0x1f);
 8009434:	221f      	movs	r2, #31
 8009436:	21a1      	movs	r1, #161	; 0xa1
 8009438:	2060      	movs	r0, #96	; 0x60
 800943a:	f001 fbbd 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800943e:	2002      	movs	r0, #2
 8009440:	f000 f912 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa4, 0x50);
 8009444:	2250      	movs	r2, #80	; 0x50
 8009446:	21a4      	movs	r1, #164	; 0xa4
 8009448:	2060      	movs	r0, #96	; 0x60
 800944a:	f001 fbb5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800944e:	2002      	movs	r0, #2
 8009450:	f000 f90a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa5, 0x68);
 8009454:	2268      	movs	r2, #104	; 0x68
 8009456:	21a5      	movs	r1, #165	; 0xa5
 8009458:	2060      	movs	r0, #96	; 0x60
 800945a:	f001 fbad 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800945e:	2002      	movs	r0, #2
 8009460:	f000 f902 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa6, 0x4a);
 8009464:	224a      	movs	r2, #74	; 0x4a
 8009466:	21a6      	movs	r1, #166	; 0xa6
 8009468:	2060      	movs	r0, #96	; 0x60
 800946a:	f001 fba5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800946e:	2002      	movs	r0, #2
 8009470:	f000 f8fa 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa8, 0xc1);
 8009474:	22c1      	movs	r2, #193	; 0xc1
 8009476:	21a8      	movs	r1, #168	; 0xa8
 8009478:	2060      	movs	r0, #96	; 0x60
 800947a:	f001 fb9d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800947e:	2002      	movs	r0, #2
 8009480:	f000 f8f2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa9, 0xef);
 8009484:	22ef      	movs	r2, #239	; 0xef
 8009486:	21a9      	movs	r1, #169	; 0xa9
 8009488:	2060      	movs	r0, #96	; 0x60
 800948a:	f001 fb95 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800948e:	2002      	movs	r0, #2
 8009490:	f000 f8ea 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xaa, 0x92);
 8009494:	2292      	movs	r2, #146	; 0x92
 8009496:	21aa      	movs	r1, #170	; 0xaa
 8009498:	2060      	movs	r0, #96	; 0x60
 800949a:	f001 fb8d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800949e:	2002      	movs	r0, #2
 80094a0:	f000 f8e2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xab, 0x04);
 80094a4:	2204      	movs	r2, #4
 80094a6:	21ab      	movs	r1, #171	; 0xab
 80094a8:	2060      	movs	r0, #96	; 0x60
 80094aa:	f001 fb85 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094ae:	2002      	movs	r0, #2
 80094b0:	f000 f8da 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xac, 0x80);
 80094b4:	2280      	movs	r2, #128	; 0x80
 80094b6:	21ac      	movs	r1, #172	; 0xac
 80094b8:	2060      	movs	r0, #96	; 0x60
 80094ba:	f001 fb7d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094be:	2002      	movs	r0, #2
 80094c0:	f000 f8d2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xad, 0x80);
 80094c4:	2280      	movs	r2, #128	; 0x80
 80094c6:	21ad      	movs	r1, #173	; 0xad
 80094c8:	2060      	movs	r0, #96	; 0x60
 80094ca:	f001 fb75 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094ce:	2002      	movs	r0, #2
 80094d0:	f000 f8ca 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xae, 0x80);
 80094d4:	2280      	movs	r2, #128	; 0x80
 80094d6:	21ae      	movs	r1, #174	; 0xae
 80094d8:	2060      	movs	r0, #96	; 0x60
 80094da:	f001 fb6d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094de:	2002      	movs	r0, #2
 80094e0:	f000 f8c2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xaf, 0x80);
 80094e4:	2280      	movs	r2, #128	; 0x80
 80094e6:	21af      	movs	r1, #175	; 0xaf
 80094e8:	2060      	movs	r0, #96	; 0x60
 80094ea:	f001 fb65 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094ee:	2002      	movs	r0, #2
 80094f0:	f000 f8ba 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb2, 0xf2);
 80094f4:	22f2      	movs	r2, #242	; 0xf2
 80094f6:	21b2      	movs	r1, #178	; 0xb2
 80094f8:	2060      	movs	r0, #96	; 0x60
 80094fa:	f001 fb5d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094fe:	2002      	movs	r0, #2
 8009500:	f000 f8b2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb3, 0x20);
 8009504:	2220      	movs	r2, #32
 8009506:	21b3      	movs	r1, #179	; 0xb3
 8009508:	2060      	movs	r0, #96	; 0x60
 800950a:	f001 fb55 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800950e:	2002      	movs	r0, #2
 8009510:	f000 f8aa 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb4, 0x20);
 8009514:	2220      	movs	r2, #32
 8009516:	21b4      	movs	r1, #180	; 0xb4
 8009518:	2060      	movs	r0, #96	; 0x60
 800951a:	f001 fb4d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800951e:	2002      	movs	r0, #2
 8009520:	f000 f8a2 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb5, 0x00);
 8009524:	2200      	movs	r2, #0
 8009526:	21b5      	movs	r1, #181	; 0xb5
 8009528:	2060      	movs	r0, #96	; 0x60
 800952a:	f001 fb45 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800952e:	2002      	movs	r0, #2
 8009530:	f000 f89a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb6, 0xaf);
 8009534:	22af      	movs	r2, #175	; 0xaf
 8009536:	21b6      	movs	r1, #182	; 0xb6
 8009538:	2060      	movs	r0, #96	; 0x60
 800953a:	f001 fb3d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800953e:	2002      	movs	r0, #2
 8009540:	f000 f892 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb6, 0xaf);
 8009544:	22af      	movs	r2, #175	; 0xaf
 8009546:	21b6      	movs	r1, #182	; 0xb6
 8009548:	2060      	movs	r0, #96	; 0x60
 800954a:	f001 fb35 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800954e:	2002      	movs	r0, #2
 8009550:	f000 f88a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbb, 0xae);
 8009554:	22ae      	movs	r2, #174	; 0xae
 8009556:	21bb      	movs	r1, #187	; 0xbb
 8009558:	2060      	movs	r0, #96	; 0x60
 800955a:	f001 fb2d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800955e:	2002      	movs	r0, #2
 8009560:	f000 f882 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbc, 0x7f);
 8009564:	227f      	movs	r2, #127	; 0x7f
 8009566:	21bc      	movs	r1, #188	; 0xbc
 8009568:	2060      	movs	r0, #96	; 0x60
 800956a:	f001 fb25 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800956e:	2002      	movs	r0, #2
 8009570:	f000 f87a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbd, 0x7f);
 8009574:	227f      	movs	r2, #127	; 0x7f
 8009576:	21bd      	movs	r1, #189	; 0xbd
 8009578:	2060      	movs	r0, #96	; 0x60
 800957a:	f001 fb1d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800957e:	2002      	movs	r0, #2
 8009580:	f000 f872 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbe, 0x7f);
 8009584:	227f      	movs	r2, #127	; 0x7f
 8009586:	21be      	movs	r1, #190	; 0xbe
 8009588:	2060      	movs	r0, #96	; 0x60
 800958a:	f001 fb15 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800958e:	2002      	movs	r0, #2
 8009590:	f000 f86a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbf, 0x7f);
 8009594:	227f      	movs	r2, #127	; 0x7f
 8009596:	21bf      	movs	r1, #191	; 0xbf
 8009598:	2060      	movs	r0, #96	; 0x60
 800959a:	f001 fb0d 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800959e:	2002      	movs	r0, #2
 80095a0:	f000 f862 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbf, 0x7f);
 80095a4:	227f      	movs	r2, #127	; 0x7f
 80095a6:	21bf      	movs	r1, #191	; 0xbf
 80095a8:	2060      	movs	r0, #96	; 0x60
 80095aa:	f001 fb05 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095ae:	2002      	movs	r0, #2
 80095b0:	f000 f85a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc0, 0xaa);
 80095b4:	22aa      	movs	r2, #170	; 0xaa
 80095b6:	21c0      	movs	r1, #192	; 0xc0
 80095b8:	2060      	movs	r0, #96	; 0x60
 80095ba:	f001 fafd 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095be:	2002      	movs	r0, #2
 80095c0:	f000 f852 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc1, 0xc0);
 80095c4:	22c0      	movs	r2, #192	; 0xc0
 80095c6:	21c1      	movs	r1, #193	; 0xc1
 80095c8:	2060      	movs	r0, #96	; 0x60
 80095ca:	f001 faf5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095ce:	2002      	movs	r0, #2
 80095d0:	f000 f84a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc2, 0x01);
 80095d4:	2201      	movs	r2, #1
 80095d6:	21c2      	movs	r1, #194	; 0xc2
 80095d8:	2060      	movs	r0, #96	; 0x60
 80095da:	f001 faed 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095de:	2002      	movs	r0, #2
 80095e0:	f000 f842 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc3, 0x4e);
 80095e4:	224e      	movs	r2, #78	; 0x4e
 80095e6:	21c3      	movs	r1, #195	; 0xc3
 80095e8:	2060      	movs	r0, #96	; 0x60
 80095ea:	f001 fae5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095ee:	2002      	movs	r0, #2
 80095f0:	f000 f83a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc6, 0x05);
 80095f4:	2205      	movs	r2, #5
 80095f6:	21c6      	movs	r1, #198	; 0xc6
 80095f8:	2060      	movs	r0, #96	; 0x60
 80095fa:	f001 fadd 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095fe:	2002      	movs	r0, #2
 8009600:	f000 f832 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc7, 0x81);
 8009604:	2281      	movs	r2, #129	; 0x81
 8009606:	21c7      	movs	r1, #199	; 0xc7
 8009608:	2060      	movs	r0, #96	; 0x60
 800960a:	f001 fad5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800960e:	2002      	movs	r0, #2
 8009610:	f000 f82a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc9, 0xe0);
 8009614:	22e0      	movs	r2, #224	; 0xe0
 8009616:	21c9      	movs	r1, #201	; 0xc9
 8009618:	2060      	movs	r0, #96	; 0x60
 800961a:	f001 facd 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800961e:	2002      	movs	r0, #2
 8009620:	f000 f822 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xca, 0xe8);
 8009624:	22e8      	movs	r2, #232	; 0xe8
 8009626:	21ca      	movs	r1, #202	; 0xca
 8009628:	2060      	movs	r0, #96	; 0x60
 800962a:	f001 fac5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800962e:	2002      	movs	r0, #2
 8009630:	f000 f81a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xcb, 0xf0);
 8009634:	22f0      	movs	r2, #240	; 0xf0
 8009636:	21cb      	movs	r1, #203	; 0xcb
 8009638:	2060      	movs	r0, #96	; 0x60
 800963a:	f001 fabd 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800963e:	2002      	movs	r0, #2
 8009640:	f000 f812 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xcc, 0xd8);
 8009644:	22d8      	movs	r2, #216	; 0xd8
 8009646:	21cc      	movs	r1, #204	; 0xcc
 8009648:	2060      	movs	r0, #96	; 0x60
 800964a:	f001 fab5 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800964e:	2002      	movs	r0, #2
 8009650:	f000 f80a 	bl	8009668 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xcd, 0x93);
 8009654:	2293      	movs	r2, #147	; 0x93
 8009656:	21cd      	movs	r1, #205	; 0xcd
 8009658:	2060      	movs	r0, #96	; 0x60
 800965a:	f001 faad 	bl	800abb8 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800965e:	2002      	movs	r0, #2
 8009660:	f000 f802 	bl	8009668 <Delay>
}                                                     
 8009664:	bf00      	nop
 8009666:	bd80      	pop	{r7, pc}

08009668 <Delay>:
 			 			  
/**
  * @}
  */
static void Delay(uint32_t nTime)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  while(nTime--);
 8009670:	bf00      	nop
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	1e5a      	subs	r2, r3, #1
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1fa      	bne.n	8009672 <Delay+0xa>
} 
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <Delay_ms>:

static void Delay_ms(uint32_t nTime)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  while(nTime--)
 8009690:	e003      	b.n	800969a <Delay_ms+0x12>
  	{Delay(1000);}
 8009692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009696:	f7ff ffe7 	bl	8009668 <Delay>
  while(nTime--)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	1e5a      	subs	r2, r3, #1
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1f6      	bne.n	8009692 <Delay_ms+0xa>

}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 80096b0:	bf00      	nop
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
	...

080096bc <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	e00c      	b.n	80096ea <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <LCD_IO_WriteMultipleData+0x40>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	8013      	strh	r3, [r2, #0]
    counter--;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3b01      	subs	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
    pData += 2;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3302      	adds	r3, #2
 80096e2:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1ef      	bne.n	80096d0 <LCD_IO_WriteMultipleData+0x14>
  }
}
 80096f0:	bf00      	nop
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	60010000 	.word	0x60010000

08009700 <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 800970a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800970e:	79fa      	ldrb	r2, [r7, #7]
 8009710:	b292      	uxth	r2, r2
 8009712:	801a      	strh	r2, [r3, #0]

}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 8009724:	4b03      	ldr	r3, [pc, #12]	; (8009734 <LCD_IO_ReadData+0x14>)
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	b29b      	uxth	r3, r3
  
}
 800972a:	4618      	mov	r0, r3
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	60010000 	.word	0x60010000

08009738 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800973c:	f7ff ffb6 	bl	80096ac <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8009740:	2101      	movs	r1, #1
 8009742:	2000      	movs	r0, #0
 8009744:	f000 f9a6 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8009748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800974c:	2001      	movs	r0, #1
 800974e:	f000 f9a1 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8009752:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8009756:	2002      	movs	r0, #2
 8009758:	f000 f99c 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 800975c:	f241 0118 	movw	r1, #4120	; 0x1018
 8009760:	2003      	movs	r0, #3
 8009762:	f000 f997 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8009766:	2100      	movs	r1, #0
 8009768:	2004      	movs	r0, #4
 800976a:	f000 f993 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 800976e:	f240 2102 	movw	r1, #514	; 0x202
 8009772:	2008      	movs	r0, #8
 8009774:	f000 f98e 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8009778:	2100      	movs	r1, #0
 800977a:	2009      	movs	r0, #9
 800977c:	f000 f98a 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8009780:	2100      	movs	r1, #0
 8009782:	200a      	movs	r0, #10
 8009784:	f000 f986 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8009788:	2100      	movs	r1, #0
 800978a:	200c      	movs	r0, #12
 800978c:	f000 f982 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8009790:	2100      	movs	r1, #0
 8009792:	200d      	movs	r0, #13
 8009794:	f000 f97e 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8009798:	2100      	movs	r1, #0
 800979a:	200f      	movs	r0, #15
 800979c:	f000 f97a 	bl	8009a94 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80097a0:	2100      	movs	r1, #0
 80097a2:	2010      	movs	r0, #16
 80097a4:	f000 f976 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80097a8:	2100      	movs	r1, #0
 80097aa:	2011      	movs	r0, #17
 80097ac:	f000 f972 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80097b0:	2100      	movs	r1, #0
 80097b2:	2012      	movs	r0, #18
 80097b4:	f000 f96e 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 80097b8:	2100      	movs	r1, #0
 80097ba:	2013      	movs	r0, #19
 80097bc:	f000 f96a 	bl	8009a94 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80097c0:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80097c4:	2010      	movs	r0, #16
 80097c6:	f000 f965 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80097ca:	f240 1137 	movw	r1, #311	; 0x137
 80097ce:	2011      	movs	r0, #17
 80097d0:	f000 f960 	bl	8009a94 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 80097d4:	f240 1139 	movw	r1, #313	; 0x139
 80097d8:	2012      	movs	r0, #18
 80097da:	f000 f95b 	bl	8009a94 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 80097de:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80097e2:	2013      	movs	r0, #19
 80097e4:	f000 f956 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 80097e8:	2113      	movs	r1, #19
 80097ea:	2029      	movs	r0, #41	; 0x29
 80097ec:	f000 f952 	bl	8009a94 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 80097f0:	2100      	movs	r1, #0
 80097f2:	2020      	movs	r0, #32
 80097f4:	f000 f94e 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 80097f8:	2100      	movs	r1, #0
 80097fa:	2021      	movs	r0, #33	; 0x21
 80097fc:	f000 f94a 	bl	8009a94 <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8009800:	2107      	movs	r1, #7
 8009802:	2030      	movs	r0, #48	; 0x30
 8009804:	f000 f946 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8009808:	f240 3102 	movw	r1, #770	; 0x302
 800980c:	2031      	movs	r0, #49	; 0x31
 800980e:	f000 f941 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 8009812:	f240 1105 	movw	r1, #261	; 0x105
 8009816:	2032      	movs	r0, #50	; 0x32
 8009818:	f000 f93c 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 800981c:	f240 2106 	movw	r1, #518	; 0x206
 8009820:	2035      	movs	r0, #53	; 0x35
 8009822:	f000 f937 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8009826:	f640 0108 	movw	r1, #2056	; 0x808
 800982a:	2036      	movs	r0, #54	; 0x36
 800982c:	f000 f932 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8009830:	f240 2106 	movw	r1, #518	; 0x206
 8009834:	2037      	movs	r0, #55	; 0x37
 8009836:	f000 f92d 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 800983a:	f240 5104 	movw	r1, #1284	; 0x504
 800983e:	2038      	movs	r0, #56	; 0x38
 8009840:	f000 f928 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8009844:	2107      	movs	r1, #7
 8009846:	2039      	movs	r0, #57	; 0x39
 8009848:	f000 f924 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 800984c:	f240 1105 	movw	r1, #261	; 0x105
 8009850:	203c      	movs	r0, #60	; 0x3c
 8009852:	f000 f91f 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8009856:	f640 0108 	movw	r1, #2056	; 0x808
 800985a:	203d      	movs	r0, #61	; 0x3d
 800985c:	f000 f91a 	bl	8009a94 <ili9325_WriteReg>
  HAL_Delay(50); 
 8009860:	2032      	movs	r0, #50	; 0x32
 8009862:	f7fb f88f 	bl	8004984 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8009866:	2100      	movs	r1, #0
 8009868:	2050      	movs	r0, #80	; 0x50
 800986a:	f000 f913 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 800986e:	21ef      	movs	r1, #239	; 0xef
 8009870:	2051      	movs	r0, #81	; 0x51
 8009872:	f000 f90f 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8009876:	2100      	movs	r1, #0
 8009878:	2052      	movs	r0, #82	; 0x52
 800987a:	f000 f90b 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 800987e:	f240 113f 	movw	r1, #319	; 0x13f
 8009882:	2053      	movs	r0, #83	; 0x53
 8009884:	f000 f906 	bl	8009a94 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8009888:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800988c:	2060      	movs	r0, #96	; 0x60
 800988e:	f000 f901 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8009892:	2101      	movs	r1, #1
 8009894:	2061      	movs	r0, #97	; 0x61
 8009896:	f000 f8fd 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 800989a:	2100      	movs	r1, #0
 800989c:	206a      	movs	r0, #106	; 0x6a
 800989e:	f000 f8f9 	bl	8009a94 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 80098a2:	2100      	movs	r1, #0
 80098a4:	2080      	movs	r0, #128	; 0x80
 80098a6:	f000 f8f5 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 80098aa:	2100      	movs	r1, #0
 80098ac:	2081      	movs	r0, #129	; 0x81
 80098ae:	f000 f8f1 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 80098b2:	2100      	movs	r1, #0
 80098b4:	2082      	movs	r0, #130	; 0x82
 80098b6:	f000 f8ed 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 80098ba:	2100      	movs	r1, #0
 80098bc:	2083      	movs	r0, #131	; 0x83
 80098be:	f000 f8e9 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 80098c2:	2100      	movs	r1, #0
 80098c4:	2084      	movs	r0, #132	; 0x84
 80098c6:	f000 f8e5 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 80098ca:	2100      	movs	r1, #0
 80098cc:	2085      	movs	r0, #133	; 0x85
 80098ce:	f000 f8e1 	bl	8009a94 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 80098d2:	2110      	movs	r1, #16
 80098d4:	2090      	movs	r0, #144	; 0x90
 80098d6:	f000 f8dd 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 80098da:	2100      	movs	r1, #0
 80098dc:	2092      	movs	r0, #146	; 0x92
 80098de:	f000 f8d9 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 80098e2:	2103      	movs	r1, #3
 80098e4:	2093      	movs	r0, #147	; 0x93
 80098e6:	f000 f8d5 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 80098ea:	f44f 7188 	mov.w	r1, #272	; 0x110
 80098ee:	2095      	movs	r0, #149	; 0x95
 80098f0:	f000 f8d0 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 80098f4:	2100      	movs	r1, #0
 80098f6:	2097      	movs	r0, #151	; 0x97
 80098f8:	f000 f8cc 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 80098fc:	2100      	movs	r1, #0
 80098fe:	2098      	movs	r0, #152	; 0x98
 8009900:	f000 f8c8 	bl	8009a94 <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x0028);
 8009904:	2128      	movs	r1, #40	; 0x28
 8009906:	2003      	movs	r0, #3
 8009908:	f000 f8c4 	bl	8009a94 <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 800990c:	f240 1173 	movw	r1, #371	; 0x173
 8009910:	2007      	movs	r0, #7
 8009912:	f000 f8bf 	bl	8009a94 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8009916:	2100      	movs	r1, #0
 8009918:	2000      	movs	r0, #0
 800991a:	f000 f86d 	bl	80099f8 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800991e:	2022      	movs	r0, #34	; 0x22
 8009920:	f7ff feee 	bl	8009700 <LCD_IO_WriteReg>
}
 8009924:	bf00      	nop
 8009926:	bd80      	pop	{r7, pc}

08009928 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800992c:	2100      	movs	r1, #0
 800992e:	2010      	movs	r0, #16
 8009930:	f000 f8b0 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8009934:	2100      	movs	r1, #0
 8009936:	2011      	movs	r0, #17
 8009938:	f000 f8ac 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800993c:	2100      	movs	r1, #0
 800993e:	2012      	movs	r0, #18
 8009940:	f000 f8a8 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8009944:	2100      	movs	r1, #0
 8009946:	2013      	movs	r0, #19
 8009948:	f000 f8a4 	bl	8009a94 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800994c:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8009950:	2010      	movs	r0, #16
 8009952:	f000 f89f 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8009956:	f240 1137 	movw	r1, #311	; 0x137
 800995a:	2011      	movs	r0, #17
 800995c:	f000 f89a 	bl	8009a94 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8009960:	f240 1139 	movw	r1, #313	; 0x139
 8009964:	2012      	movs	r0, #18
 8009966:	f000 f895 	bl	8009a94 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 800996a:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800996e:	2013      	movs	r0, #19
 8009970:	f000 f890 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8009974:	2113      	movs	r1, #19
 8009976:	2029      	movs	r0, #41	; 0x29
 8009978:	f000 f88c 	bl	8009a94 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 800997c:	f240 1173 	movw	r1, #371	; 0x173
 8009980:	2007      	movs	r0, #7
 8009982:	f000 f887 	bl	8009a94 <ili9325_WriteReg>
}
 8009986:	bf00      	nop
 8009988:	bd80      	pop	{r7, pc}

0800998a <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800998e:	2100      	movs	r1, #0
 8009990:	2010      	movs	r0, #16
 8009992:	f000 f87f 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8009996:	2100      	movs	r1, #0
 8009998:	2011      	movs	r0, #17
 800999a:	f000 f87b 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800999e:	2100      	movs	r1, #0
 80099a0:	2012      	movs	r0, #18
 80099a2:	f000 f877 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80099a6:	2100      	movs	r1, #0
 80099a8:	2013      	movs	r0, #19
 80099aa:	f000 f873 	bl	8009a94 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 80099ae:	2100      	movs	r1, #0
 80099b0:	2029      	movs	r0, #41	; 0x29
 80099b2:	f000 f86f 	bl	8009a94 <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 80099b6:	2100      	movs	r1, #0
 80099b8:	2007      	movs	r0, #7
 80099ba:	f000 f86b 	bl	8009a94 <ili9325_WriteReg>
}
 80099be:	bf00      	nop
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80099c2:	b480      	push	{r7}
 80099c4:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 80099c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 80099d8:	23f0      	movs	r3, #240	; 0xf0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 80099e8:	f7ff fe60 	bl	80096ac <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 80099ec:	2000      	movs	r0, #0
 80099ee:	f000 f866 	bl	8009abe <ili9325_ReadReg>
 80099f2:	4603      	mov	r3, r0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	460a      	mov	r2, r1
 8009a02:	80fb      	strh	r3, [r7, #6]
 8009a04:	4613      	mov	r3, r2
 8009a06:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 8009a08:	88bb      	ldrh	r3, [r7, #4]
 8009a0a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	4619      	mov	r1, r3
 8009a12:	2020      	movs	r0, #32
 8009a14:	f000 f83e 	bl	8009a94 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	2021      	movs	r0, #33	; 0x21
 8009a1e:	f000 f839 	bl	8009a94 <ili9325_WriteReg>

}
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	4603      	mov	r3, r0
 8009a32:	80fb      	strh	r3, [r7, #6]
 8009a34:	460b      	mov	r3, r1
 8009a36:	80bb      	strh	r3, [r7, #4]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8009a3c:	88ba      	ldrh	r2, [r7, #4]
 8009a3e:	88fb      	ldrh	r3, [r7, #6]
 8009a40:	4611      	mov	r1, r2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff ffd8 	bl	80099f8 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009a48:	2022      	movs	r0, #34	; 0x22
 8009a4a:	f7ff fe59 	bl	8009700 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8009a4e:	1cbb      	adds	r3, r7, #2
 8009a50:	2102      	movs	r1, #2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff fe32 	bl	80096bc <LCD_IO_WriteMultipleData>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	460a      	mov	r2, r1
 8009a6a:	80fb      	strh	r3, [r7, #6]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8009a70:	88ba      	ldrh	r2, [r7, #4]
 8009a72:	88fb      	ldrh	r3, [r7, #6]
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff ffbe 	bl	80099f8 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009a7c:	2022      	movs	r0, #34	; 0x22
 8009a7e:	f7ff fe3f 	bl	8009700 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 8009a82:	f7ff fe4d 	bl	8009720 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8009a86:	f7ff fe4b 	bl	8009720 <LCD_IO_ReadData>
 8009a8a:	4603      	mov	r3, r0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	460a      	mov	r2, r1
 8009a9e:	71fb      	strb	r3, [r7, #7]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff fe2a 	bl	8009700 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8009aac:	1d3b      	adds	r3, r7, #4
 8009aae:	2102      	movs	r1, #2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff fe03 	bl	80096bc <LCD_IO_WriteMultipleData>
}
 8009ab6:	bf00      	nop
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff fe18 	bl	8009700 <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8009ad0:	f7ff fe26 	bl	8009720 <LCD_IO_ReadData>
 8009ad4:	4603      	mov	r3, r0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8009ade:	b590      	push	{r4, r7, lr}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	4611      	mov	r1, r2
 8009aea:	461a      	mov	r2, r3
 8009aec:	4623      	mov	r3, r4
 8009aee:	80fb      	strh	r3, [r7, #6]
 8009af0:	4603      	mov	r3, r0
 8009af2:	80bb      	strh	r3, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	807b      	strh	r3, [r7, #2]
 8009af8:	4613      	mov	r3, r2
 8009afa:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 8009afc:	88bb      	ldrh	r3, [r7, #4]
 8009afe:	425b      	negs	r3, r3
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	883b      	ldrh	r3, [r7, #0]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	33f0      	adds	r3, #240	; 0xf0
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	2050      	movs	r0, #80	; 0x50
 8009b10:	f7ff ffc0 	bl	8009a94 <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 8009b14:	88bb      	ldrh	r3, [r7, #4]
 8009b16:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	2051      	movs	r0, #81	; 0x51
 8009b20:	f7ff ffb8 	bl	8009a94 <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 8009b24:	88fb      	ldrh	r3, [r7, #6]
 8009b26:	4619      	mov	r1, r3
 8009b28:	2052      	movs	r0, #82	; 0x52
 8009b2a:	f7ff ffb3 	bl	8009a94 <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 8009b2e:	88fa      	ldrh	r2, [r7, #6]
 8009b30:	887b      	ldrh	r3, [r7, #2]
 8009b32:	4413      	add	r3, r2
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	2053      	movs	r0, #83	; 0x53
 8009b3e:	f7ff ffa9 	bl	8009a94 <ili9325_WriteReg>
  
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd90      	pop	{r4, r7, pc}
	...

08009b4c <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8009b4c:	b590      	push	{r4, r7, lr}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	4611      	mov	r1, r2
 8009b58:	461a      	mov	r2, r3
 8009b5a:	4623      	mov	r3, r4
 8009b5c:	80fb      	strh	r3, [r7, #6]
 8009b5e:	4603      	mov	r3, r0
 8009b60:	80bb      	strh	r3, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	807b      	strh	r3, [r7, #2]
 8009b66:	4613      	mov	r3, r2
 8009b68:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8009b6e:	887a      	ldrh	r2, [r7, #2]
 8009b70:	88bb      	ldrh	r3, [r7, #4]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff ff3f 	bl	80099f8 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009b7a:	2022      	movs	r0, #34	; 0x22
 8009b7c:	f7ff fdc0 	bl	8009700 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8009b80:	2300      	movs	r3, #0
 8009b82:	81fb      	strh	r3, [r7, #14]
 8009b84:	e007      	b.n	8009b96 <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8009b86:	89fb      	ldrh	r3, [r7, #14]
 8009b88:	490a      	ldr	r1, [pc, #40]	; (8009bb4 <ili9325_DrawHLine+0x68>)
 8009b8a:	88fa      	ldrh	r2, [r7, #6]
 8009b8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8009b90:	89fb      	ldrh	r3, [r7, #14]
 8009b92:	3301      	adds	r3, #1
 8009b94:	81fb      	strh	r3, [r7, #14]
 8009b96:	89fa      	ldrh	r2, [r7, #14]
 8009b98:	883b      	ldrh	r3, [r7, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d3f3      	bcc.n	8009b86 <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8009b9e:	883b      	ldrh	r3, [r7, #0]
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4803      	ldr	r0, [pc, #12]	; (8009bb4 <ili9325_DrawHLine+0x68>)
 8009ba6:	f7ff fd89 	bl	80096bc <LCD_IO_WriteMultipleData>
}
 8009baa:	bf00      	nop
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd90      	pop	{r4, r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	200013a4 	.word	0x200013a4

08009bb8 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4623      	mov	r3, r4
 8009bc8:	80fb      	strh	r3, [r7, #6]
 8009bca:	4603      	mov	r3, r0
 8009bcc:	80bb      	strh	r3, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	807b      	strh	r3, [r7, #2]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 8009bda:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8009bde:	2003      	movs	r0, #3
 8009be0:	f7ff ff58 	bl	8009a94 <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8009be4:	887a      	ldrh	r2, [r7, #2]
 8009be6:	88bb      	ldrh	r3, [r7, #4]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff ff04 	bl	80099f8 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009bf0:	2022      	movs	r0, #34	; 0x22
 8009bf2:	f7ff fd85 	bl	8009700 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	81fb      	strh	r3, [r7, #14]
 8009bfa:	e007      	b.n	8009c0c <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8009bfc:	89fb      	ldrh	r3, [r7, #14]
 8009bfe:	490d      	ldr	r1, [pc, #52]	; (8009c34 <ili9325_DrawVLine+0x7c>)
 8009c00:	88fa      	ldrh	r2, [r7, #6]
 8009c02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8009c06:	89fb      	ldrh	r3, [r7, #14]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	81fb      	strh	r3, [r7, #14]
 8009c0c:	89fa      	ldrh	r2, [r7, #14]
 8009c0e:	883b      	ldrh	r3, [r7, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d3f3      	bcc.n	8009bfc <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8009c14:	883b      	ldrh	r3, [r7, #0]
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4806      	ldr	r0, [pc, #24]	; (8009c34 <ili9325_DrawVLine+0x7c>)
 8009c1c:	f7ff fd4e 	bl	80096bc <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 8009c20:	f241 0128 	movw	r1, #4136	; 0x1028
 8009c24:	2003      	movs	r0, #3
 8009c26:	f7ff ff35 	bl	8009a94 <ili9325_WriteReg>
}
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd90      	pop	{r4, r7, pc}
 8009c32:	bf00      	nop
 8009c34:	200013a4 	.word	0x200013a4

08009c38 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	603a      	str	r2, [r7, #0]
 8009c42:	80fb      	strh	r3, [r7, #6]
 8009c44:	460b      	mov	r3, r1
 8009c46:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	3302      	adds	r3, #2
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	041b      	lsls	r3, r3, #16
 8009c64:	461a      	mov	r2, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	330a      	adds	r3, #10
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	330c      	adds	r3, #12
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	461a      	mov	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	085b      	lsrs	r3, r3, #1
 8009c90:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	4413      	add	r3, r2
 8009c98:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 8009c9a:	f241 0138 	movw	r1, #4152	; 0x1038
 8009c9e:	2003      	movs	r0, #3
 8009ca0:	f7ff fef8 	bl	8009a94 <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8009ca4:	88ba      	ldrh	r2, [r7, #4]
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff fea4 	bl	80099f8 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009cb0:	2022      	movs	r0, #34	; 0x22
 8009cb2:	f7ff fd25 	bl	8009700 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6838      	ldr	r0, [r7, #0]
 8009cbe:	f7ff fcfd 	bl	80096bc <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8009cc2:	f241 0128 	movw	r1, #4136	; 0x1028
 8009cc6:	2003      	movs	r0, #3
 8009cc8:	f7ff fee4 	bl	8009a94 <ili9325_WriteReg>
}
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8009cd4:	b590      	push	{r4, r7, lr}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	4611      	mov	r1, r2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	80fb      	strh	r3, [r7, #6]
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	80bb      	strh	r3, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	807b      	strh	r3, [r7, #2]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8009cf6:	887b      	ldrh	r3, [r7, #2]
 8009cf8:	883a      	ldrh	r2, [r7, #0]
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8009d00:	88ba      	ldrh	r2, [r7, #4]
 8009d02:	88fb      	ldrh	r3, [r7, #6]
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7ff fe76 	bl	80099f8 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009d0c:	2022      	movs	r0, #34	; 0x22
 8009d0e:	f7ff fcf7 	bl	8009700 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	4619      	mov	r1, r3
 8009d18:	6a38      	ldr	r0, [r7, #32]
 8009d1a:	f7ff fccf 	bl	80096bc <LCD_IO_WriteMultipleData>
}
 8009d1e:	bf00      	nop
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd90      	pop	{r4, r7, pc}
	...

08009d28 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 8009d32:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8009d36:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 8009d38:	2100      	movs	r1, #0
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f7ff fe5c 	bl	80099f8 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009d40:	2022      	movs	r0, #34	; 0x22
 8009d42:	f7ff fcdd 	bl	8009700 <LCD_IO_WriteReg>
  
  while((size--) != 0)
 8009d46:	e002      	b.n	8009d4e <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 8009d48:	4a05      	ldr	r2, [pc, #20]	; (8009d60 <ili9325_Clear+0x38>)
 8009d4a:	88fb      	ldrh	r3, [r7, #6]
 8009d4c:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	1e5a      	subs	r2, r3, #1
 8009d52:	60fa      	str	r2, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1f7      	bne.n	8009d48 <ili9325_Clear+0x20>
  }
}
 8009d58:	bf00      	nop
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	60010000 	.word	0x60010000

08009d64 <imageclassify_configure_activations>:


AI_DECLARE_STATIC
ai_bool imageclassify_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	3303      	adds	r3, #3
 8009d74:	f023 0303 	bic.w	r3, r3, #3
 8009d78:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8009d7a:	4b14      	ldr	r3, [pc, #80]	; (8009dcc <imageclassify_configure_activations+0x68>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8009d80:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <imageclassify_configure_activations+0x68>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 8009d86:	4a12      	ldr	r2, [pc, #72]	; (8009dd0 <imageclassify_configure_activations+0x6c>)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 8009d8c:	4a10      	ldr	r2, [pc, #64]	; (8009dd0 <imageclassify_configure_activations+0x6c>)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 8009d92:	4a10      	ldr	r2, [pc, #64]	; (8009dd4 <imageclassify_configure_activations+0x70>)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 8009d98:	4a0e      	ldr	r2, [pc, #56]	; (8009dd4 <imageclassify_configure_activations+0x70>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 512);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009da4:	4a0c      	ldr	r2, [pc, #48]	; (8009dd8 <imageclassify_configure_activations+0x74>)
 8009da6:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 512);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009dae:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <imageclassify_configure_activations+0x74>)
 8009db0:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 8009db2:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <imageclassify_configure_activations+0x78>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 8009db8:	4b08      	ldr	r3, [pc, #32]	; (8009ddc <imageclassify_configure_activations+0x78>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8009dbe:	2301      	movs	r3, #1
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	20000124 	.word	0x20000124
 8009dd0:	20000134 	.word	0x20000134
 8009dd4:	20000144 	.word	0x20000144
 8009dd8:	20000154 	.word	0x20000154
 8009ddc:	20000164 	.word	0x20000164

08009de0 <imageclassify_configure_weights>:


AI_DECLARE_STATIC
ai_bool imageclassify_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8009df0:	4b25      	ldr	r3, [pc, #148]	; (8009e88 <imageclassify_configure_weights+0xa8>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009df8:	4a23      	ldr	r2, [pc, #140]	; (8009e88 <imageclassify_configure_weights+0xa8>)
 8009dfa:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 407040);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 23c6 	add.w	r3, r3, #405504	; 0x63000
 8009e02:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8009e06:	4a20      	ldr	r2, [pc, #128]	; (8009e88 <imageclassify_configure_weights+0xa8>)
 8009e08:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 407040);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f503 23c6 	add.w	r3, r3, #405504	; 0x63000
 8009e10:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8009e14:	4a1c      	ldr	r2, [pc, #112]	; (8009e88 <imageclassify_configure_weights+0xa8>)
 8009e16:	60d3      	str	r3, [r2, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8009e18:	4b1c      	ldr	r3, [pc, #112]	; (8009e8c <imageclassify_configure_weights+0xac>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e20:	4a1a      	ldr	r2, [pc, #104]	; (8009e8c <imageclassify_configure_weights+0xac>)
 8009e22:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 401920);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8009e2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009e2e:	4a17      	ldr	r2, [pc, #92]	; (8009e8c <imageclassify_configure_weights+0xac>)
 8009e30:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 401920);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8009e38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009e3c:	4a13      	ldr	r2, [pc, #76]	; (8009e8c <imageclassify_configure_weights+0xac>)
 8009e3e:	60d3      	str	r3, [r2, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8009e40:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <imageclassify_configure_weights+0xb0>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e48:	4a11      	ldr	r2, [pc, #68]	; (8009e90 <imageclassify_configure_weights+0xb0>)
 8009e4a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 401408);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8009e52:	4a0f      	ldr	r2, [pc, #60]	; (8009e90 <imageclassify_configure_weights+0xb0>)
 8009e54:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 401408);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8009e5c:	4a0c      	ldr	r2, [pc, #48]	; (8009e90 <imageclassify_configure_weights+0xb0>)
 8009e5e:	60d3      	str	r3, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8009e60:	4b0c      	ldr	r3, [pc, #48]	; (8009e94 <imageclassify_configure_weights+0xb4>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e68:	4a0a      	ldr	r2, [pc, #40]	; (8009e94 <imageclassify_configure_weights+0xb4>)
 8009e6a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 8009e6c:	4a09      	ldr	r2, [pc, #36]	; (8009e94 <imageclassify_configure_weights+0xb4>)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 8009e72:	4a08      	ldr	r2, [pc, #32]	; (8009e94 <imageclassify_configure_weights+0xb4>)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 8009e78:	2301      	movs	r3, #1
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	200000e4 	.word	0x200000e4
 8009e8c:	200000f4 	.word	0x200000f4
 8009e90:	20000104 	.word	0x20000104
 8009e94:	20000114 	.word	0x20000114

08009e98 <ai_imageclassify_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_imageclassify_get_error(ai_handle network)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7f6 fbdd 	bl	8000660 <ai_platform_network_get_error>
 8009ea6:	4603      	mov	r3, r0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <ai_imageclassify_create>:

AI_API_ENTRY
ai_error ai_imageclassify_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	4a04      	ldr	r2, [pc, #16]	; (8009ed8 <ai_imageclassify_create+0x28>)
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7f6 fcaf 	bl	800082c <ai_platform_network_create>
 8009ece:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20000094 	.word	0x20000094

08009edc <ai_imageclassify_destroy>:

AI_API_ENTRY
ai_handle ai_imageclassify_destroy(ai_handle network)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7f6 fcdd 	bl	80008a4 <ai_platform_network_destroy>
 8009eea:	4603      	mov	r3, r0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <ai_imageclassify_init>:

AI_API_ENTRY
ai_bool ai_imageclassify_init(
  ai_handle network, const ai_network_params* params)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7f6 fcee 	bl	80008e2 <ai_platform_network_init>
 8009f06:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <ai_imageclassify_init+0x1e>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e01f      	b.n	8009f52 <ai_imageclassify_init+0x5e>

  ai_bool ok = true;
 8009f12:	2301      	movs	r3, #1
 8009f14:	72fb      	strb	r3, [r7, #11]
  ok &= imageclassify_configure_weights(net_ctx, &params->params);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7ff ff60 	bl	8009de0 <imageclassify_configure_weights>
 8009f20:	4603      	mov	r3, r0
 8009f22:	461a      	mov	r2, r3
 8009f24:	7afb      	ldrb	r3, [r7, #11]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	bf14      	ite	ne
 8009f2c:	2301      	movne	r3, #1
 8009f2e:	2300      	moveq	r3, #0
 8009f30:	72fb      	strb	r3, [r7, #11]
  ok &= imageclassify_configure_activations(net_ctx, &params->activations);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	3314      	adds	r3, #20
 8009f36:	4619      	mov	r1, r3
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff ff13 	bl	8009d64 <imageclassify_configure_activations>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	461a      	mov	r2, r3
 8009f42:	7afb      	ldrb	r3, [r7, #11]
 8009f44:	4013      	ands	r3, r2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bf14      	ite	ne
 8009f4a:	2301      	movne	r3, #1
 8009f4c:	2300      	moveq	r3, #0
 8009f4e:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009f50:	7afb      	ldrb	r3, [r7, #11]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <ai_imageclassify_run>:


AI_API_ENTRY
ai_i32 ai_imageclassify_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	68b9      	ldr	r1, [r7, #8]
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7f6 fd0f 	bl	800098e <ai_platform_network_process>
 8009f70:	4603      	mov	r3, r0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <ai_imageclassify_data_weights_get>:
#include "imageclassify_data.h"

ai_handle ai_imageclassify_data_weights_get(void)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0
    0x0b, 0x3e, 0x0f, 0xfa, 0x61, 0x3e, 0x5c, 0x03, 0xaa, 0xbe,
    0xd7, 0x7c, 0x1d, 0x3e, 0xc8, 0xa9, 0xee, 0x3d, 0x67, 0x77,
    0x1f, 0x3e, 0x76, 0x83, 0xf9, 0xbd, 0xa2, 0x7a, 0xd0, 0xbe
  };

  return AI_HANDLE_PTR(s_imageclassify_weights);
 8009f80:	4b02      	ldr	r3, [pc, #8]	; (8009f8c <ai_imageclassify_data_weights_get+0x10>)
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	0800dc74 	.word	0x0800dc74

08009f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08a      	sub	sp, #40	; 0x28
 8009f94:	af08      	add	r7, sp, #32
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f96:	f7fa fc83 	bl	80048a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f9a:	f000 f8fb 	bl	800a194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f9e:	f000 fa21 	bl	800a3e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8009fa2:	f000 f9ff 	bl	800a3a4 <MX_DMA_Init>
  MX_CRC_Init();
 8009fa6:	f000 f969 	bl	800a27c <MX_CRC_Init>
  MX_DCMI_Init();
 8009faa:	f000 f97b 	bl	800a2a4 <MX_DCMI_Init>
  MX_FSMC_Init();
 8009fae:	f000 fb57 	bl	800a660 <MX_FSMC_Init>
  MX_I2C2_Init();
 8009fb2:	f000 f99f 	bl	800a2f4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009fb6:	f000 f9cb 	bl	800a350 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8009fba:	f7fe fd4b 	bl	8008a54 <MX_X_CUBE_AI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t ret = BSP_LCD_Init();
 8009fbe:	f000 fe1d 	bl	800abfc <BSP_LCD_Init>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	71fb      	strb	r3, [r7, #7]
  if(ret==0x00)
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d103      	bne.n	8009fd4 <main+0x44>
  {
	   BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009fcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009fd0:	f000 fe86 	bl	800ace0 <BSP_LCD_Clear>
  }

   printf("Demo Start\r\n");
 8009fd4:	4860      	ldr	r0, [pc, #384]	; (800a158 <main+0x1c8>)
 8009fd6:	f001 fd3b 	bl	800ba50 <puts>
   printf("OV9655 Init: ");
 8009fda:	4860      	ldr	r0, [pc, #384]	; (800a15c <main+0x1cc>)
 8009fdc:	f001 fcb0 	bl	800b940 <iprintf>
   if(DCMI_OV9655Config() == 0)
 8009fe0:	f7fe fe4b 	bl	8008c7a <DCMI_OV9655Config>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d103      	bne.n	8009ff2 <main+0x62>
   {
     printf("OK\r\n");
 8009fea:	485d      	ldr	r0, [pc, #372]	; (800a160 <main+0x1d0>)
 8009fec:	f001 fd30 	bl	800ba50 <puts>
 8009ff0:	e002      	b.n	8009ff8 <main+0x68>
   }
   else
   {
     printf("failed\r\n");
 8009ff2:	485c      	ldr	r0, [pc, #368]	; (800a164 <main+0x1d4>)
 8009ff4:	f001 fd2c 	bl	800ba50 <puts>
   }

	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009ffc:	f000 fe70 	bl	800ace0 <BSP_LCD_Clear>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a000:	2000      	movs	r0, #0
 800a002:	f000 fe4d 	bl	800aca0 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(0, 100, ptr, CENTER_MODE);
 800a006:	4b58      	ldr	r3, [pc, #352]	; (800a168 <main+0x1d8>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	2301      	movs	r3, #1
 800a00c:	2164      	movs	r1, #100	; 0x64
 800a00e:	2000      	movs	r0, #0
 800a010:	f000 fec4 	bl	800ad9c <BSP_LCD_DisplayStringAt>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  pushBtn = HAL_GPIO_ReadPin(Push_button_GPIO_Port, Push_button_Pin);
 800a014:	2101      	movs	r1, #1
 800a016:	4855      	ldr	r0, [pc, #340]	; (800a16c <main+0x1dc>)
 800a018:	f7fc ff36 	bl	8006e88 <HAL_GPIO_ReadPin>
 800a01c:	4603      	mov	r3, r0
 800a01e:	461a      	mov	r2, r3
 800a020:	4b53      	ldr	r3, [pc, #332]	; (800a170 <main+0x1e0>)
 800a022:	701a      	strb	r2, [r3, #0]
	  if(pushBtn == GPIO_PIN_RESET)
 800a024:	4b52      	ldr	r3, [pc, #328]	; (800a170 <main+0x1e0>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d164      	bne.n	800a0f6 <main+0x166>
	  {
		  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Ready, GPIO_PIN_RESET);
 800a02c:	2200      	movs	r2, #0
 800a02e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a032:	4850      	ldr	r0, [pc, #320]	; (800a174 <main+0x1e4>)
 800a034:	f7fc ff40 	bl	8006eb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin, GPIO_PIN_SET);
 800a038:	2201      	movs	r2, #1
 800a03a:	2104      	movs	r1, #4
 800a03c:	484e      	ldr	r0, [pc, #312]	; (800a178 <main+0x1e8>)
 800a03e:	f7fc ff3b 	bl	8006eb8 <HAL_GPIO_WritePin>
		  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)SRAM_Addr, BUFFER_LEN);
 800a042:	4b4e      	ldr	r3, [pc, #312]	; (800a17c <main+0x1ec>)
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800a04a:	2102      	movs	r1, #2
 800a04c:	484c      	ldr	r0, [pc, #304]	; (800a180 <main+0x1f0>)
 800a04e:	f7fa fe09 	bl	8004c64 <HAL_DCMI_Start_DMA>
		  HAL_Delay(1000);
 800a052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a056:	f7fa fc95 	bl	8004984 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin_Capture, GPIO_PIN_SET);
 800a05a:	2201      	movs	r2, #1
 800a05c:	2108      	movs	r1, #8
 800a05e:	4846      	ldr	r0, [pc, #280]	; (800a178 <main+0x1e8>)
 800a060:	f7fc ff2a 	bl	8006eb8 <HAL_GPIO_WritePin>
		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a064:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a068:	f000 fe3a 	bl	800ace0 <BSP_LCD_Clear>
		  ImageResize((uint8_t*)SRAM_Addr, 320, 240, 2, 0, 0, 0, 0, (uint8_t*)resize_160, 160, 120);
 800a06c:	4b43      	ldr	r3, [pc, #268]	; (800a17c <main+0x1ec>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4618      	mov	r0, r3
 800a072:	2378      	movs	r3, #120	; 0x78
 800a074:	9306      	str	r3, [sp, #24]
 800a076:	23a0      	movs	r3, #160	; 0xa0
 800a078:	9305      	str	r3, [sp, #20]
 800a07a:	4b42      	ldr	r3, [pc, #264]	; (800a184 <main+0x1f4>)
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	2300      	movs	r3, #0
 800a080:	9303      	str	r3, [sp, #12]
 800a082:	2300      	movs	r3, #0
 800a084:	9302      	str	r3, [sp, #8]
 800a086:	2300      	movs	r3, #0
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	2300      	movs	r3, #0
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	2302      	movs	r3, #2
 800a090:	22f0      	movs	r2, #240	; 0xf0
 800a092:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a096:	f000 fb8f 	bl	800a7b8 <ImageResize>
		  ili9325_DrawRGBImage(0, 0, 160, 120, (uint8_t*)resize_160);
 800a09a:	4b3a      	ldr	r3, [pc, #232]	; (800a184 <main+0x1f4>)
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	2378      	movs	r3, #120	; 0x78
 800a0a0:	22a0      	movs	r2, #160	; 0xa0
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	f7ff fe15 	bl	8009cd4 <ili9325_DrawRGBImage>
		  convert_8Bit_Grayscale(resize_160);
 800a0aa:	4836      	ldr	r0, [pc, #216]	; (800a184 <main+0x1f4>)
 800a0ac:	f000 fce8 	bl	800aa80 <convert_8Bit_Grayscale>
		  ImageResize((uint8_t*)grayscale, 160, 120, 1, 0, 0, 0, 0, (uint8_t*)resizedImage, 28, 28);
 800a0b0:	231c      	movs	r3, #28
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	231c      	movs	r3, #28
 800a0b6:	9305      	str	r3, [sp, #20]
 800a0b8:	4b33      	ldr	r3, [pc, #204]	; (800a188 <main+0x1f8>)
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	2278      	movs	r2, #120	; 0x78
 800a0d0:	21a0      	movs	r1, #160	; 0xa0
 800a0d2:	482e      	ldr	r0, [pc, #184]	; (800a18c <main+0x1fc>)
 800a0d4:	f000 fb70 	bl	800a7b8 <ImageResize>
		  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Inference, GPIO_PIN_SET);
 800a0d8:	2201      	movs	r2, #1
 800a0da:	2101      	movs	r1, #1
 800a0dc:	4825      	ldr	r0, [pc, #148]	; (800a174 <main+0x1e4>)
 800a0de:	f7fc feeb 	bl	8006eb8 <HAL_GPIO_WritePin>
		  MX_X_CUBE_AI_Process();
 800a0e2:	f7fe fcc1 	bl	8008a68 <MX_X_CUBE_AI_Process>
		  HAL_Delay(1000);
 800a0e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a0ea:	f7fa fc4b 	bl	8004984 <HAL_Delay>
		  clearScreen=1;
 800a0ee:	4b28      	ldr	r3, [pc, #160]	; (800a190 <main+0x200>)
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	701a      	strb	r2, [r3, #0]
 800a0f4:	e78e      	b.n	800a014 <main+0x84>
	  }
	  else if(pushBtn == GPIO_PIN_SET)
 800a0f6:	4b1e      	ldr	r3, [pc, #120]	; (800a170 <main+0x1e0>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d18a      	bne.n	800a014 <main+0x84>
	  {
		  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Ready, GPIO_PIN_SET);
 800a0fe:	2201      	movs	r2, #1
 800a100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a104:	481b      	ldr	r0, [pc, #108]	; (800a174 <main+0x1e4>)
 800a106:	f7fc fed7 	bl	8006eb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin, GPIO_PIN_RESET);
 800a10a:	2200      	movs	r2, #0
 800a10c:	2104      	movs	r1, #4
 800a10e:	481a      	ldr	r0, [pc, #104]	; (800a178 <main+0x1e8>)
 800a110:	f7fc fed2 	bl	8006eb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin_Capture, GPIO_PIN_RESET);
 800a114:	2200      	movs	r2, #0
 800a116:	2108      	movs	r1, #8
 800a118:	4817      	ldr	r0, [pc, #92]	; (800a178 <main+0x1e8>)
 800a11a:	f7fc fecd 	bl	8006eb8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Inference, GPIO_PIN_RESET);
 800a11e:	2200      	movs	r2, #0
 800a120:	2101      	movs	r1, #1
 800a122:	4814      	ldr	r0, [pc, #80]	; (800a174 <main+0x1e4>)
 800a124:	f7fc fec8 	bl	8006eb8 <HAL_GPIO_WritePin>
		  if(clearScreen)
 800a128:	4b19      	ldr	r3, [pc, #100]	; (800a190 <main+0x200>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f43f af71 	beq.w	800a014 <main+0x84>
		  {
			  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a132:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a136:	f000 fdd3 	bl	800ace0 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a13a:	2000      	movs	r0, #0
 800a13c:	f000 fdb0 	bl	800aca0 <BSP_LCD_SetTextColor>
			  BSP_LCD_DisplayStringAt(0, 100, ptr, CENTER_MODE);
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <main+0x1d8>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	2301      	movs	r3, #1
 800a146:	2164      	movs	r1, #100	; 0x64
 800a148:	2000      	movs	r0, #0
 800a14a:	f000 fe27 	bl	800ad9c <BSP_LCD_DisplayStringAt>
			  clearScreen=0;
 800a14e:	4b10      	ldr	r3, [pc, #64]	; (800a190 <main+0x200>)
 800a150:	2200      	movs	r2, #0
 800a152:	701a      	strb	r2, [r3, #0]
	  pushBtn = HAL_GPIO_ReadPin(Push_button_GPIO_Port, Push_button_Pin);
 800a154:	e75e      	b.n	800a014 <main+0x84>
 800a156:	bf00      	nop
 800a158:	0800db84 	.word	0x0800db84
 800a15c:	0800db90 	.word	0x0800db90
 800a160:	0800dba0 	.word	0x0800dba0
 800a164:	0800dba4 	.word	0x0800dba4
 800a168:	2000047c 	.word	0x2000047c
 800a16c:	40020000 	.word	0x40020000
 800a170:	2000b4fc 	.word	0x2000b4fc
 800a174:	40022000 	.word	0x40022000
 800a178:	40021c00 	.word	0x40021c00
 800a17c:	20000464 	.word	0x20000464
 800a180:	2000b42c 	.word	0x2000b42c
 800a184:	20001d20 	.word	0x20001d20
 800a188:	20001a10 	.word	0x20001a10
 800a18c:	2000b500 	.word	0x2000b500
 800a190:	20001684 	.word	0x20001684

0800a194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b094      	sub	sp, #80	; 0x50
 800a198:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
		  RCC_ClkInitTypeDef RCC_ClkInitStruct;

		    /**Configure the main internal regulator output voltage
		    */
		  __HAL_RCC_PWR_CLK_ENABLE();
 800a19a:	2300      	movs	r3, #0
 800a19c:	60bb      	str	r3, [r7, #8]
 800a19e:	4b34      	ldr	r3, [pc, #208]	; (800a270 <SystemClock_Config+0xdc>)
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	4a33      	ldr	r2, [pc, #204]	; (800a270 <SystemClock_Config+0xdc>)
 800a1a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1a8:	6413      	str	r3, [r2, #64]	; 0x40
 800a1aa:	4b31      	ldr	r3, [pc, #196]	; (800a270 <SystemClock_Config+0xdc>)
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1b2:	60bb      	str	r3, [r7, #8]
 800a1b4:	68bb      	ldr	r3, [r7, #8]

		  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	607b      	str	r3, [r7, #4]
 800a1ba:	4b2e      	ldr	r3, [pc, #184]	; (800a274 <SystemClock_Config+0xe0>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a2d      	ldr	r2, [pc, #180]	; (800a274 <SystemClock_Config+0xe0>)
 800a1c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	4b2b      	ldr	r3, [pc, #172]	; (800a274 <SystemClock_Config+0xe0>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1ce:	607b      	str	r3, [r7, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]

		    /**Initializes the CPU, AHB and APB busses clocks
		    */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	623b      	str	r3, [r7, #32]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.HSICalibrationValue = 16;
 800a1da:	2310      	movs	r3, #16
 800a1dc:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLM = 8;
 800a1e6:	2308      	movs	r3, #8
 800a1e8:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLN = 168;
 800a1ea:	23a8      	movs	r3, #168	; 0xa8
 800a1ec:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a1f2:	2304      	movs	r3, #4
 800a1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a1f6:	f107 0320 	add.w	r3, r7, #32
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fd faaa 	bl	8007754 <HAL_RCC_OscConfig>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <SystemClock_Config+0x76>
		  {
		    Error_Handler();
 800a206:	f000 fccf 	bl	800aba8 <Error_Handler>
		  }

		    /**Initializes the CPU, AHB and APB busses clocks
		    */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a20a:	230f      	movs	r3, #15
 800a20c:	60fb      	str	r3, [r7, #12]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a20e:	2302      	movs	r3, #2
 800a210:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a212:	2300      	movs	r3, #0
 800a214:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a216:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a21a:	61bb      	str	r3, [r7, #24]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a21c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a220:	61fb      	str	r3, [r7, #28]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a222:	f107 030c 	add.w	r3, r7, #12
 800a226:	2105      	movs	r1, #5
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fd fcd5 	bl	8007bd8 <HAL_RCC_ClockConfig>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <SystemClock_Config+0xa4>
		  {
		    Error_Handler();
 800a234:	f000 fcb8 	bl	800aba8 <Error_Handler>
		  }

		  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800a238:	2200      	movs	r2, #0
 800a23a:	2100      	movs	r1, #0
 800a23c:	2000      	movs	r0, #0
 800a23e:	f7fd fdad 	bl	8007d9c <HAL_RCC_MCOConfig>

		    /**Configure the Systick interrupt time
		    */
		  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a242:	f7fd feeb 	bl	800801c <HAL_RCC_GetHCLKFreq>
 800a246:	4602      	mov	r2, r0
 800a248:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <SystemClock_Config+0xe4>)
 800a24a:	fba3 2302 	umull	r2, r3, r3, r2
 800a24e:	099b      	lsrs	r3, r3, #6
 800a250:	4618      	mov	r0, r3
 800a252:	f7fa fcbe 	bl	8004bd2 <HAL_SYSTICK_Config>

		    /**Configure the Systick
		    */
		  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a256:	2004      	movs	r0, #4
 800a258:	f7fa fcc8 	bl	8004bec <HAL_SYSTICK_CLKSourceConfig>

		  /* SysTick_IRQn interrupt configuration */
		  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a25c:	2200      	movs	r2, #0
 800a25e:	2100      	movs	r1, #0
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	f7fa fc8b 	bl	8004b7e <HAL_NVIC_SetPriority>
}
 800a268:	bf00      	nop
 800a26a:	3750      	adds	r7, #80	; 0x50
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	40023800 	.word	0x40023800
 800a274:	40007000 	.word	0x40007000
 800a278:	10624dd3 	.word	0x10624dd3

0800a27c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a280:	4b06      	ldr	r3, [pc, #24]	; (800a29c <MX_CRC_Init+0x20>)
 800a282:	4a07      	ldr	r2, [pc, #28]	; (800a2a0 <MX_CRC_Init+0x24>)
 800a284:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a286:	4805      	ldr	r0, [pc, #20]	; (800a29c <MX_CRC_Init+0x20>)
 800a288:	f7fa fccc 	bl	8004c24 <HAL_CRC_Init>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800a292:	f000 fc89 	bl	800aba8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800a296:	bf00      	nop
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	2000b320 	.word	0x2000b320
 800a2a0:	40023000 	.word	0x40023000

0800a2a4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 800a2a8:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2aa:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <MX_DCMI_Init+0x4c>)
 800a2ac:	601a      	str	r2, [r3, #0]
	  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	605a      	str	r2, [r3, #4]
	  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800a2b4:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	609a      	str	r2, [r3, #8]
	  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2bc:	2280      	movs	r2, #128	; 0x80
 800a2be:	60da      	str	r2, [r3, #12]
	  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2c2:	2240      	movs	r2, #64	; 0x40
 800a2c4:	611a      	str	r2, [r3, #16]
	  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	615a      	str	r2, [r3, #20]
	  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800a2cc:	4b07      	ldr	r3, [pc, #28]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	619a      	str	r2, [r3, #24]
	  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800a2d2:	4b06      	ldr	r3, [pc, #24]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800a2d8:	4804      	ldr	r0, [pc, #16]	; (800a2ec <MX_DCMI_Init+0x48>)
 800a2da:	f7fa feb5 	bl	8005048 <HAL_DCMI_Init>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 800a2e4:	f000 fc60 	bl	800aba8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800a2e8:	bf00      	nop
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	2000b42c 	.word	0x2000b42c
 800a2f0:	50050000 	.word	0x50050000

0800a2f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800a2f8:	4b12      	ldr	r3, [pc, #72]	; (800a344 <MX_I2C2_Init+0x50>)
 800a2fa:	4a13      	ldr	r2, [pc, #76]	; (800a348 <MX_I2C2_Init+0x54>)
 800a2fc:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 800a2fe:	4b11      	ldr	r3, [pc, #68]	; (800a344 <MX_I2C2_Init+0x50>)
 800a300:	4a12      	ldr	r2, [pc, #72]	; (800a34c <MX_I2C2_Init+0x58>)
 800a302:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a304:	4b0f      	ldr	r3, [pc, #60]	; (800a344 <MX_I2C2_Init+0x50>)
 800a306:	2200      	movs	r2, #0
 800a308:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 800a30a:	4b0e      	ldr	r3, [pc, #56]	; (800a344 <MX_I2C2_Init+0x50>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a310:	4b0c      	ldr	r3, [pc, #48]	; (800a344 <MX_I2C2_Init+0x50>)
 800a312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a316:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a318:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <MX_I2C2_Init+0x50>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 800a31e:	4b09      	ldr	r3, [pc, #36]	; (800a344 <MX_I2C2_Init+0x50>)
 800a320:	2200      	movs	r2, #0
 800a322:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a324:	4b07      	ldr	r3, [pc, #28]	; (800a344 <MX_I2C2_Init+0x50>)
 800a326:	2200      	movs	r2, #0
 800a328:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a32a:	4b06      	ldr	r3, [pc, #24]	; (800a344 <MX_I2C2_Init+0x50>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a330:	4804      	ldr	r0, [pc, #16]	; (800a344 <MX_I2C2_Init+0x50>)
 800a332:	f7fc fddb 	bl	8006eec <HAL_I2C_Init>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d001      	beq.n	800a340 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800a33c:	f000 fc34 	bl	800aba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a340:	bf00      	nop
 800a342:	bd80      	pop	{r7, pc}
 800a344:	2000b328 	.word	0x2000b328
 800a348:	40005800 	.word	0x40005800
 800a34c:	000186a0 	.word	0x000186a0

0800a350 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a354:	4b11      	ldr	r3, [pc, #68]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a356:	4a12      	ldr	r2, [pc, #72]	; (800a3a0 <MX_USART1_UART_Init+0x50>)
 800a358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a35a:	4b10      	ldr	r3, [pc, #64]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a35c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a362:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a364:	2200      	movs	r2, #0
 800a366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a368:	4b0c      	ldr	r3, [pc, #48]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a36e:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a370:	2200      	movs	r2, #0
 800a372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a374:	4b09      	ldr	r3, [pc, #36]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a376:	220c      	movs	r2, #12
 800a378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a37a:	4b08      	ldr	r3, [pc, #32]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a380:	4b06      	ldr	r3, [pc, #24]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a382:	2200      	movs	r2, #0
 800a384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a386:	4805      	ldr	r0, [pc, #20]	; (800a39c <MX_USART1_UART_Init+0x4c>)
 800a388:	f7fd fec0 	bl	800810c <HAL_UART_Init>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a392:	f000 fc09 	bl	800aba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a396:	bf00      	nop
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	2000b46c 	.word	0x2000b46c
 800a3a0:	40011000 	.word	0x40011000

0800a3a4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	607b      	str	r3, [r7, #4]
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <MX_DMA_Init+0x3c>)
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	4a0b      	ldr	r2, [pc, #44]	; (800a3e0 <MX_DMA_Init+0x3c>)
 800a3b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ba:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <MX_DMA_Init+0x3c>)
 800a3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3c2:	607b      	str	r3, [r7, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	2039      	movs	r0, #57	; 0x39
 800a3cc:	f7fa fbd7 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800a3d0:	2039      	movs	r0, #57	; 0x39
 800a3d2:	f7fa fbf0 	bl	8004bb6 <HAL_NVIC_EnableIRQ>

}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	40023800 	.word	0x40023800

0800a3e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08e      	sub	sp, #56	; 0x38
 800a3e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	605a      	str	r2, [r3, #4]
 800a3f4:	609a      	str	r2, [r3, #8]
 800a3f6:	60da      	str	r2, [r3, #12]
 800a3f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	623b      	str	r3, [r7, #32]
 800a3fe:	4b91      	ldr	r3, [pc, #580]	; (800a644 <MX_GPIO_Init+0x260>)
 800a400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a402:	4a90      	ldr	r2, [pc, #576]	; (800a644 <MX_GPIO_Init+0x260>)
 800a404:	f043 0310 	orr.w	r3, r3, #16
 800a408:	6313      	str	r3, [r2, #48]	; 0x30
 800a40a:	4b8e      	ldr	r3, [pc, #568]	; (800a644 <MX_GPIO_Init+0x260>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	f003 0310 	and.w	r3, r3, #16
 800a412:	623b      	str	r3, [r7, #32]
 800a414:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a416:	2300      	movs	r3, #0
 800a418:	61fb      	str	r3, [r7, #28]
 800a41a:	4b8a      	ldr	r3, [pc, #552]	; (800a644 <MX_GPIO_Init+0x260>)
 800a41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41e:	4a89      	ldr	r2, [pc, #548]	; (800a644 <MX_GPIO_Init+0x260>)
 800a420:	f043 0320 	orr.w	r3, r3, #32
 800a424:	6313      	str	r3, [r2, #48]	; 0x30
 800a426:	4b87      	ldr	r3, [pc, #540]	; (800a644 <MX_GPIO_Init+0x260>)
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	f003 0320 	and.w	r3, r3, #32
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a432:	2300      	movs	r3, #0
 800a434:	61bb      	str	r3, [r7, #24]
 800a436:	4b83      	ldr	r3, [pc, #524]	; (800a644 <MX_GPIO_Init+0x260>)
 800a438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43a:	4a82      	ldr	r2, [pc, #520]	; (800a644 <MX_GPIO_Init+0x260>)
 800a43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a440:	6313      	str	r3, [r2, #48]	; 0x30
 800a442:	4b80      	ldr	r3, [pc, #512]	; (800a644 <MX_GPIO_Init+0x260>)
 800a444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44a:	61bb      	str	r3, [r7, #24]
 800a44c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a44e:	2300      	movs	r3, #0
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	4b7c      	ldr	r3, [pc, #496]	; (800a644 <MX_GPIO_Init+0x260>)
 800a454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a456:	4a7b      	ldr	r2, [pc, #492]	; (800a644 <MX_GPIO_Init+0x260>)
 800a458:	f043 0301 	orr.w	r3, r3, #1
 800a45c:	6313      	str	r3, [r2, #48]	; 0x30
 800a45e:	4b79      	ldr	r3, [pc, #484]	; (800a644 <MX_GPIO_Init+0x260>)
 800a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a46a:	2300      	movs	r3, #0
 800a46c:	613b      	str	r3, [r7, #16]
 800a46e:	4b75      	ldr	r3, [pc, #468]	; (800a644 <MX_GPIO_Init+0x260>)
 800a470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a472:	4a74      	ldr	r2, [pc, #464]	; (800a644 <MX_GPIO_Init+0x260>)
 800a474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a478:	6313      	str	r3, [r2, #48]	; 0x30
 800a47a:	4b72      	ldr	r3, [pc, #456]	; (800a644 <MX_GPIO_Init+0x260>)
 800a47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a482:	613b      	str	r3, [r7, #16]
 800a484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a486:	2300      	movs	r3, #0
 800a488:	60fb      	str	r3, [r7, #12]
 800a48a:	4b6e      	ldr	r3, [pc, #440]	; (800a644 <MX_GPIO_Init+0x260>)
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	4a6d      	ldr	r2, [pc, #436]	; (800a644 <MX_GPIO_Init+0x260>)
 800a490:	f043 0302 	orr.w	r3, r3, #2
 800a494:	6313      	str	r3, [r2, #48]	; 0x30
 800a496:	4b6b      	ldr	r3, [pc, #428]	; (800a644 <MX_GPIO_Init+0x260>)
 800a498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60bb      	str	r3, [r7, #8]
 800a4a6:	4b67      	ldr	r3, [pc, #412]	; (800a644 <MX_GPIO_Init+0x260>)
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4aa:	4a66      	ldr	r2, [pc, #408]	; (800a644 <MX_GPIO_Init+0x260>)
 800a4ac:	f043 0308 	orr.w	r3, r3, #8
 800a4b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4b2:	4b64      	ldr	r3, [pc, #400]	; (800a644 <MX_GPIO_Init+0x260>)
 800a4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b6:	f003 0308 	and.w	r3, r3, #8
 800a4ba:	60bb      	str	r3, [r7, #8]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a4be:	2300      	movs	r3, #0
 800a4c0:	607b      	str	r3, [r7, #4]
 800a4c2:	4b60      	ldr	r3, [pc, #384]	; (800a644 <MX_GPIO_Init+0x260>)
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c6:	4a5f      	ldr	r2, [pc, #380]	; (800a644 <MX_GPIO_Init+0x260>)
 800a4c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4cc:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ce:	4b5d      	ldr	r3, [pc, #372]	; (800a644 <MX_GPIO_Init+0x260>)
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d6:	607b      	str	r3, [r7, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A23_GPIO_Port, A23_Pin, GPIO_PIN_SET);
 800a4da:	2201      	movs	r2, #1
 800a4dc:	2104      	movs	r1, #4
 800a4de:	485a      	ldr	r0, [pc, #360]	; (800a648 <MX_GPIO_Init+0x264>)
 800a4e0:	f7fc fcea 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_SET);
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	2180      	movs	r1, #128	; 0x80
 800a4e8:	4858      	ldr	r0, [pc, #352]	; (800a64c <MX_GPIO_Init+0x268>)
 800a4ea:	f7fc fce5 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_RESET);
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2104      	movs	r1, #4
 800a4f2:	4857      	ldr	r0, [pc, #348]	; (800a650 <MX_GPIO_Init+0x26c>)
 800a4f4:	f7fc fce0 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a4fe:	4855      	ldr	r0, [pc, #340]	; (800a654 <MX_GPIO_Init+0x270>)
 800a500:	f7fc fcda 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A24_GPIO_Port, A24_Pin, GPIO_PIN_SET);
 800a504:	2201      	movs	r2, #1
 800a506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a50a:	4852      	ldr	r0, [pc, #328]	; (800a654 <MX_GPIO_Init+0x270>)
 800a50c:	f7fc fcd4 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin, GPIO_PIN_RESET);
 800a510:	2200      	movs	r2, #0
 800a512:	2104      	movs	r1, #4
 800a514:	484e      	ldr	r0, [pc, #312]	; (800a650 <MX_GPIO_Init+0x26c>)
 800a516:	f7fc fccf 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin_Capture, GPIO_PIN_RESET);
 800a51a:	2200      	movs	r2, #0
 800a51c:	2108      	movs	r1, #8
 800a51e:	484c      	ldr	r0, [pc, #304]	; (800a650 <MX_GPIO_Init+0x26c>)
 800a520:	f7fc fcca 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Inference, GPIO_PIN_RESET);
 800a524:	2200      	movs	r2, #0
 800a526:	2101      	movs	r1, #1
 800a528:	484b      	ldr	r0, [pc, #300]	; (800a658 <MX_GPIO_Init+0x274>)
 800a52a:	f7fc fcc5 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Ready, GPIO_PIN_RESET);
 800a52e:	2200      	movs	r2, #0
 800a530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a534:	4848      	ldr	r0, [pc, #288]	; (800a658 <MX_GPIO_Init+0x274>)
 800a536:	f7fc fcbf 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A23_Pin */
  GPIO_InitStruct.Pin = A23_Pin;
 800a53a:	2304      	movs	r3, #4
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a53e:	2301      	movs	r3, #1
 800a540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a542:	2300      	movs	r3, #0
 800a544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a546:	2300      	movs	r3, #0
 800a548:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(A23_GPIO_Port, &GPIO_InitStruct);
 800a54a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a54e:	4619      	mov	r1, r3
 800a550:	483d      	ldr	r0, [pc, #244]	; (800a648 <MX_GPIO_Init+0x264>)
 800a552:	f7fc faff 	bl	8006b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin_Capture */
    GPIO_InitStruct.Pin = LED_Pin_Capture;
 800a556:	2308      	movs	r3, #8
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a55a:	2301      	movs	r3, #1
 800a55c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a562:	2300      	movs	r3, #0
 800a564:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 800a566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a56a:	4619      	mov	r1, r3
 800a56c:	4838      	ldr	r0, [pc, #224]	; (800a650 <MX_GPIO_Init+0x26c>)
 800a56e:	f7fc faf1 	bl	8006b54 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED_Pin_Inference */
      GPIO_InitStruct.Pin = LED_Pin_Inference;
 800a572:	2301      	movs	r3, #1
 800a574:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a576:	2301      	movs	r3, #1
 800a578:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a57a:	2300      	movs	r3, #0
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a57e:	2300      	movs	r3, #0
 800a580:	633b      	str	r3, [r7, #48]	; 0x30
      HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 800a582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a586:	4619      	mov	r1, r3
 800a588:	4833      	ldr	r0, [pc, #204]	; (800a658 <MX_GPIO_Init+0x274>)
 800a58a:	f7fc fae3 	bl	8006b54 <HAL_GPIO_Init>

      /*Configure GPIO pin : LED_Pin_Ready */
            GPIO_InitStruct.Pin = LED_Pin_Ready;
 800a58e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a594:	2301      	movs	r3, #1
 800a596:	62bb      	str	r3, [r7, #40]	; 0x28
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	62fb      	str	r3, [r7, #44]	; 0x2c
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a59c:	2300      	movs	r3, #0
 800a59e:	633b      	str	r3, [r7, #48]	; 0x30
            HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 800a5a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	482c      	ldr	r0, [pc, #176]	; (800a658 <MX_GPIO_Init+0x274>)
 800a5a8:	f7fc fad4 	bl	8006b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BL_PWM_Pin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 800a5ac:	2380      	movs	r3, #128	; 0x80
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800a5bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4822      	ldr	r0, [pc, #136]	; (800a64c <MX_GPIO_Init+0x268>)
 800a5c4:	f7fc fac6 	bl	8006b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_button_Pin */
  GPIO_InitStruct.Pin = Push_button_Pin;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Push_button_GPIO_Port, &GPIO_InitStruct);
 800a5d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4820      	ldr	r0, [pc, #128]	; (800a65c <MX_GPIO_Init+0x278>)
 800a5dc:	f7fc faba 	bl	8006b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a5f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4816      	ldr	r0, [pc, #88]	; (800a650 <MX_GPIO_Init+0x26c>)
 800a5f8:	f7fc faac 	bl	8006b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a5fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a602:	2302      	movs	r3, #2
 800a604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a606:	2300      	movs	r3, #0
 800a608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a60a:	2300      	movs	r3, #0
 800a60c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a60e:	2300      	movs	r3, #0
 800a610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a616:	4619      	mov	r1, r3
 800a618:	4810      	ldr	r0, [pc, #64]	; (800a65c <MX_GPIO_Init+0x278>)
 800a61a:	f7fc fa9b 	bl	8006b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin A24_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|A24_Pin;
 800a61e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a624:	2301      	movs	r3, #1
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62c:	2300      	movs	r3, #0
 800a62e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a634:	4619      	mov	r1, r3
 800a636:	4807      	ldr	r0, [pc, #28]	; (800a654 <MX_GPIO_Init+0x270>)
 800a638:	f7fc fa8c 	bl	8006b54 <HAL_GPIO_Init>

}
 800a63c:	bf00      	nop
 800a63e:	3738      	adds	r7, #56	; 0x38
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	40023800 	.word	0x40023800
 800a648:	40021000 	.word	0x40021000
 800a64c:	40021400 	.word	0x40021400
 800a650:	40021c00 	.word	0x40021c00
 800a654:	40021800 	.word	0x40021800
 800a658:	40022000 	.word	0x40022000
 800a65c:	40020000 	.word	0x40020000

0800a660 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800a666:	1d3b      	adds	r3, r7, #4
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	605a      	str	r2, [r3, #4]
 800a66e:	609a      	str	r2, [r3, #8]
 800a670:	60da      	str	r2, [r3, #12]
 800a672:	611a      	str	r2, [r3, #16]
 800a674:	615a      	str	r2, [r3, #20]
 800a676:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800a678:	4b4c      	ldr	r3, [pc, #304]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a67a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800a67e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800a680:	4b4a      	ldr	r3, [pc, #296]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a682:	4a4b      	ldr	r2, [pc, #300]	; (800a7b0 <MX_FSMC_Init+0x150>)
 800a684:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800a686:	4b49      	ldr	r3, [pc, #292]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a688:	2200      	movs	r2, #0
 800a68a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800a68c:	4b47      	ldr	r3, [pc, #284]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a68e:	2200      	movs	r2, #0
 800a690:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800a692:	4b46      	ldr	r3, [pc, #280]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a694:	2200      	movs	r2, #0
 800a696:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800a698:	4b44      	ldr	r3, [pc, #272]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a69a:	2210      	movs	r2, #16
 800a69c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800a69e:	4b43      	ldr	r3, [pc, #268]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800a6a4:	4b41      	ldr	r3, [pc, #260]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800a6aa:	4b40      	ldr	r3, [pc, #256]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800a6b0:	4b3e      	ldr	r3, [pc, #248]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800a6b6:	4b3d      	ldr	r3, [pc, #244]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800a6be:	4b3b      	ldr	r3, [pc, #236]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800a6c4:	4b39      	ldr	r3, [pc, #228]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800a6ca:	4b38      	ldr	r3, [pc, #224]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800a6d0:	4b36      	ldr	r3, [pc, #216]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800a6d6:	4b35      	ldr	r3, [pc, #212]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 800a6dc:	2304      	movs	r3, #4
 800a6de:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800a6e0:	230f      	movs	r3, #15
 800a6e2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 20;
 800a6e4:	2314      	movs	r3, #20
 800a6e6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800a6f0:	2311      	movs	r3, #17
 800a6f2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800a6f8:	1d3b      	adds	r3, r7, #4
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	482b      	ldr	r0, [pc, #172]	; (800a7ac <MX_FSMC_Init+0x14c>)
 800a700:	f7fd fcc0 	bl	8008084 <HAL_SRAM_Init>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800a70a:	f000 fa4d 	bl	800aba8 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800a70e:	4b29      	ldr	r3, [pc, #164]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a710:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800a714:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800a716:	4b27      	ldr	r3, [pc, #156]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a718:	4a25      	ldr	r2, [pc, #148]	; (800a7b0 <MX_FSMC_Init+0x150>)
 800a71a:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a71e:	2204      	movs	r2, #4
 800a720:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800a722:	4b24      	ldr	r3, [pc, #144]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a724:	2200      	movs	r2, #0
 800a726:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800a728:	4b22      	ldr	r3, [pc, #136]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800a72e:	4b21      	ldr	r3, [pc, #132]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a730:	2210      	movs	r2, #16
 800a732:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800a734:	4b1f      	ldr	r3, [pc, #124]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a736:	2200      	movs	r2, #0
 800a738:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800a73a:	4b1e      	ldr	r3, [pc, #120]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	61da      	str	r2, [r3, #28]
  hsram2.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800a740:	4b1c      	ldr	r3, [pc, #112]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a742:	2200      	movs	r2, #0
 800a744:	621a      	str	r2, [r3, #32]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800a746:	4b1b      	ldr	r3, [pc, #108]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a748:	2200      	movs	r2, #0
 800a74a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800a74c:	4b19      	ldr	r3, [pc, #100]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a74e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a752:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800a754:	4b17      	ldr	r3, [pc, #92]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a756:	2200      	movs	r2, #0
 800a758:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800a75a:	4b16      	ldr	r3, [pc, #88]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800a760:	4b14      	ldr	r3, [pc, #80]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a762:	2200      	movs	r2, #0
 800a764:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800a766:	4b13      	ldr	r3, [pc, #76]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a768:	2200      	movs	r2, #0
 800a76a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800a76c:	4b11      	ldr	r3, [pc, #68]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a76e:	2200      	movs	r2, #0
 800a770:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 800a772:	2304      	movs	r3, #4
 800a774:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800a776:	230f      	movs	r3, #15
 800a778:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 20;
 800a77a:	2314      	movs	r3, #20
 800a77c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 800a77e:	2302      	movs	r3, #2
 800a780:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800a782:	2310      	movs	r3, #16
 800a784:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800a786:	2311      	movs	r3, #17
 800a788:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800a78a:	2300      	movs	r3, #0
 800a78c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800a78e:	1d3b      	adds	r3, r7, #4
 800a790:	2200      	movs	r2, #0
 800a792:	4619      	mov	r1, r3
 800a794:	4807      	ldr	r0, [pc, #28]	; (800a7b4 <MX_FSMC_Init+0x154>)
 800a796:	f7fd fc75 	bl	8008084 <HAL_SRAM_Init>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <MX_FSMC_Init+0x144>
  {
    Error_Handler( );
 800a7a0:	f000 fa02 	bl	800aba8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800a7a4:	bf00      	nop
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	2000b3dc 	.word	0x2000b3dc
 800a7b0:	a0000104 	.word	0xa0000104
 800a7b4:	2000b4ac 	.word	0x2000b4ac

0800a7b8 <ImageResize>:
  */
void ImageResize(uint8_t *srcImage, uint32_t srcW, uint32_t srcH,
                 uint32_t pixelSize, uint32_t roiX, uint32_t roiY,
                 uint32_t roiW, uint32_t roiH,  uint8_t *dstImage,
                 uint32_t dstW, uint32_t dstH)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b0a1      	sub	sp, #132	; 0x84
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6178      	str	r0, [r7, #20]
 800a7c0:	6139      	str	r1, [r7, #16]
 800a7c2:	60fa      	str	r2, [r7, #12]
 800a7c4:	60bb      	str	r3, [r7, #8]
  uint8_t *p1, *p2, *p3, *p4;

  int32_t offset1;
  int32_t offset2;

  srcStride = pixelSize * srcW;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	fb02 f303 	mul.w	r3, r2, r3
 800a7ce:	663b      	str	r3, [r7, #96]	; 0x60

  widthRatio = ((roiW ? roiW : srcW) / (float) dstW);
 800a7d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d006      	beq.n	800a7e6 <ImageResize+0x2e>
 800a7d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7dc:	ee07 3a90 	vmov	s15, r3
 800a7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e4:	e004      	b.n	800a7f0 <ImageResize+0x38>
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7f4:	ee07 3a10 	vmov	s14, r3
 800a7f8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a7fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a800:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
  heightRatio = ((roiH ? roiH : srcH) / (float) dstH);
 800a804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d006      	beq.n	800a81a <ImageResize+0x62>
 800a80c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a810:	ee07 3a90 	vmov	s15, r3
 800a814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a818:	e004      	b.n	800a824 <ImageResize+0x6c>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	ee07 3a90 	vmov	s15, r3
 800a820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a828:	ee07 3a10 	vmov	s14, r3
 800a82c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a830:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a834:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58

  /* Get horizontal and vertical limits. */
  maxWidth = (roiW ? roiW : srcW) - 1;
 800a838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <ImageResize+0x90>
 800a840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a844:	3b01      	subs	r3, #1
 800a846:	e001      	b.n	800a84c <ImageResize+0x94>
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	657b      	str	r3, [r7, #84]	; 0x54
  maxHeight = (roiH ? roiH : srcH) - 1;
 800a84e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <ImageResize+0xa6>
 800a856:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a85a:	3b01      	subs	r3, #1
 800a85c:	e001      	b.n	800a862 <ImageResize+0xaa>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3b01      	subs	r3, #1
 800a862:	653b      	str	r3, [r7, #80]	; 0x50

  for (int32_t y = 0; y < dstH; y++)
 800a864:	2300      	movs	r3, #0
 800a866:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a868:	e0fe      	b.n	800aa68 <ImageResize+0x2b0>
  {
    /* Get Y from source. */
    srcY = ((float) y * heightRatio) + roiY;
 800a86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86c:	ee07 3a90 	vmov	s15, r3
 800a870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a874:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a87c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a88c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    srcY1 = (int32_t) srcY;
 800a890:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a898:	ee17 3a90 	vmov	r3, s15
 800a89c:	64bb      	str	r3, [r7, #72]	; 0x48
    srcY2 = (srcY1 == maxHeight) ? srcY1 : srcY1 + 1;
 800a89e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d002      	beq.n	800a8ac <ImageResize+0xf4>
 800a8a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	e000      	b.n	800a8ae <ImageResize+0xf6>
 800a8ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ae:	647b      	str	r3, [r7, #68]	; 0x44
    dY1 = srcY - (float) srcY1;
 800a8b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8ba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a8be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8c2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    dY2 = 1.0f - dY1;
 800a8c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800a8ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8d2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculates the pointers to the two needed lines of the source. */
    tmp1 = srcImage + srcY1 * srcStride;
 800a8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8da:	fb02 f303 	mul.w	r3, r2, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	63bb      	str	r3, [r7, #56]	; 0x38
    tmp2 = srcImage + srcY2 * srcStride;
 800a8e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8ea:	fb02 f303 	mul.w	r3, r2, r3
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	637b      	str	r3, [r7, #52]	; 0x34

    for (int32_t x = 0; x < dstW; x++)
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8fa:	e0ac      	b.n	800aa56 <ImageResize+0x29e>
    {
      /* Get X from source. */
      srcX = x * widthRatio + roiX;
 800a8fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a906:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a90a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a90e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a912:	ee07 3a90 	vmov	s15, r3
 800a916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a91e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      dstX1 = (int32_t) srcX;
 800a922:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a92a:	ee17 3a90 	vmov	r3, s15
 800a92e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dstX2 = (dstX1 == maxWidth) ? dstX1 : dstX1 + 1;
 800a930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a934:	429a      	cmp	r2, r3
 800a936:	d002      	beq.n	800a93e <ImageResize+0x186>
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	3301      	adds	r3, #1
 800a93c:	e000      	b.n	800a940 <ImageResize+0x188>
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	62bb      	str	r3, [r7, #40]	; 0x28
      dX1 = srcX - /*(float32)*/dstX1;
 800a942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a944:	ee07 3a90 	vmov	s15, r3
 800a948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a94c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a950:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a954:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      dX2 = 1.0f - dX1;
 800a958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a95c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a960:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a964:	edc7 7a08 	vstr	s15, [r7, #32]

      /* Calculates the four points (p1,p2, p3, p4) of the source. */
      offset1 = dstX1 * pixelSize;
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	fb02 f303 	mul.w	r3, r2, r3
 800a970:	61fb      	str	r3, [r7, #28]
      offset2 = dstX2 * pixelSize;
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	fb02 f303 	mul.w	r3, r2, r3
 800a97a:	61bb      	str	r3, [r7, #24]
      p1 = tmp1 + offset1;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a980:	4413      	add	r3, r2
 800a982:	67fb      	str	r3, [r7, #124]	; 0x7c
      p2 = tmp1 + offset2;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a988:	4413      	add	r3, r2
 800a98a:	67bb      	str	r3, [r7, #120]	; 0x78
      p3 = tmp2 + offset1;
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a990:	4413      	add	r3, r2
 800a992:	677b      	str	r3, [r7, #116]	; 0x74
      p4 = tmp2 + offset2;
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a998:	4413      	add	r3, r2
 800a99a:	673b      	str	r3, [r7, #112]	; 0x70
      /* For each channel, interpolate the four points. */
      for (int32_t ch = 0; ch < pixelSize; ch++, dstImage++, p1++, p2++, p3++, p4++)
 800a99c:	2300      	movs	r3, #0
 800a99e:	667b      	str	r3, [r7, #100]	; 0x64
 800a9a0:	e052      	b.n	800aa48 <ImageResize+0x290>
      {
        *dstImage = (uint8_t)(dY2 * (dX2 * (*p1) + dX1 * (*p2)) + dY1 * (dX2 * (*p3) + dX1 * (*p4)));
 800a9a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9ae:	edd7 7a08 	vldr	s15, [r7, #32]
 800a9b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	ee07 3a90 	vmov	s15, r3
 800a9be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a9c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a9d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9e2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a9e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a9ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a9f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a9fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a9fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aa02:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800aa06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa12:	edc7 7a01 	vstr	s15, [r7, #4]
 800aa16:	793b      	ldrb	r3, [r7, #4]
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa1e:	701a      	strb	r2, [r3, #0]
      for (int32_t ch = 0; ch < pixelSize; ch++, dstImage++, p1++, p2++, p3++, p4++)
 800aa20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa22:	3301      	adds	r3, #1
 800aa24:	667b      	str	r3, [r7, #100]	; 0x64
 800aa26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa32:	3301      	adds	r3, #1
 800aa34:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa38:	3301      	adds	r3, #1
 800aa3a:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa3e:	3301      	adds	r3, #1
 800aa40:	677b      	str	r3, [r7, #116]	; 0x74
 800aa42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa44:	3301      	adds	r3, #1
 800aa46:	673b      	str	r3, [r7, #112]	; 0x70
 800aa48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d8a8      	bhi.n	800a9a2 <ImageResize+0x1ea>
    for (int32_t x = 0; x < dstW; x++)
 800aa50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa52:	3301      	adds	r3, #1
 800aa54:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa58:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	f63f af4d 	bhi.w	800a8fc <ImageResize+0x144>
  for (int32_t y = 0; y < dstH; y++)
 800aa62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa64:	3301      	adds	r3, #1
 800aa66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa6a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	f63f aefb 	bhi.w	800a86a <ImageResize+0xb2>
      }
    }
  }
}
 800aa74:	bf00      	nop
 800aa76:	3784      	adds	r7, #132	; 0x84
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <convert_8Bit_Grayscale>:
		      }
}

// Convert to 8 bit grayscale
void convert_8Bit_Grayscale(uint16_t* buffer)
{
 800aa80:	b5b0      	push	{r4, r5, r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	for(int16_t i=0; i< 19200; i++)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	81fb      	strh	r3, [r7, #14]
 800aa8c:	e061      	b.n	800ab52 <convert_8Bit_Grayscale+0xd2>
		      {
		   	   uint16_t pixel = *buffer;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	81bb      	strh	r3, [r7, #12]
		   	   uint8_t red = ((pixel & 0xF800)>>11);
 800aa94:	89bb      	ldrh	r3, [r7, #12]
 800aa96:	0adb      	lsrs	r3, r3, #11
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	72fb      	strb	r3, [r7, #11]
		   	   uint8_t green = ((pixel & 0x07E0)>>5);
 800aa9c:	89bb      	ldrh	r3, [r7, #12]
 800aa9e:	115b      	asrs	r3, r3, #5
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaa6:	72bb      	strb	r3, [r7, #10]
		   	   uint8_t blue = (pixel & 0x001F);
 800aaa8:	89bb      	ldrh	r3, [r7, #12]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	f003 031f 	and.w	r3, r3, #31
 800aab0:	727b      	strb	r3, [r7, #9]
		   	   grayscale[i] = (0.2126 * red) + (0.7152 * green / 2.0) + (0.0722 * blue);
 800aab2:	7afb      	ldrb	r3, [r7, #11]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7f9 f9ed 	bl	8003e94 <__aeabi_i2d>
 800aaba:	a32c      	add	r3, pc, #176	; (adr r3, 800ab6c <convert_8Bit_Grayscale+0xec>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f9 fa52 	bl	8003f68 <__aeabi_dmul>
 800aac4:	4603      	mov	r3, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	4625      	mov	r5, r4
 800aaca:	461c      	mov	r4, r3
 800aacc:	7abb      	ldrb	r3, [r7, #10]
 800aace:	4618      	mov	r0, r3
 800aad0:	f7f9 f9e0 	bl	8003e94 <__aeabi_i2d>
 800aad4:	a327      	add	r3, pc, #156	; (adr r3, 800ab74 <convert_8Bit_Grayscale+0xf4>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	f7f9 fa45 	bl	8003f68 <__aeabi_dmul>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4610      	mov	r0, r2
 800aae4:	4619      	mov	r1, r3
 800aae6:	f04f 0200 	mov.w	r2, #0
 800aaea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aaee:	f7f9 fb65 	bl	80041bc <__aeabi_ddiv>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	4629      	mov	r1, r5
 800aafa:	f7f9 f87f 	bl	8003bfc <__adddf3>
 800aafe:	4603      	mov	r3, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	4625      	mov	r5, r4
 800ab04:	461c      	mov	r4, r3
 800ab06:	7a7b      	ldrb	r3, [r7, #9]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7f9 f9c3 	bl	8003e94 <__aeabi_i2d>
 800ab0e:	a31b      	add	r3, pc, #108	; (adr r3, 800ab7c <convert_8Bit_Grayscale+0xfc>)
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f7f9 fa28 	bl	8003f68 <__aeabi_dmul>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	4629      	mov	r1, r5
 800ab20:	f7f9 f86c 	bl	8003bfc <__adddf3>
 800ab24:	4603      	mov	r3, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	461a      	mov	r2, r3
 800ab2a:	4623      	mov	r3, r4
 800ab2c:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800ab30:	4610      	mov	r0, r2
 800ab32:	4619      	mov	r1, r3
 800ab34:	f7f9 fc2a 	bl	800438c <__aeabi_d2uiz>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <convert_8Bit_Grayscale+0xe8>)
 800ab3e:	551a      	strb	r2, [r3, r4]
		   	   buffer++;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3302      	adds	r3, #2
 800ab44:	607b      	str	r3, [r7, #4]
	for(int16_t i=0; i< 19200; i++)
 800ab46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	81fb      	strh	r3, [r7, #14]
 800ab52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ab56:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800ab5a:	db98      	blt.n	800aa8e <convert_8Bit_Grayscale+0xe>
		      }
}
 800ab5c:	bf00      	nop
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bdb0      	pop	{r4, r5, r7, pc}
 800ab64:	f3af 8000 	nop.w
 800ab68:	2000b500 	.word	0x2000b500
 800ab6c:	0f9096bc 	.word	0x0f9096bc
 800ab70:	3fcb367a 	.word	0x3fcb367a
 800ab74:	1c432ca5 	.word	0x1c432ca5
 800ab78:	3fe6e2eb 	.word	0x3fe6e2eb
 800ab7c:	fec56d5d 	.word	0xfec56d5d
 800ab80:	3fb27bb2 	.word	0x3fb27bb2

0800ab84 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* write a character to the uart1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800ab8c:	1d39      	adds	r1, r7, #4
 800ab8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab92:	2201      	movs	r2, #1
 800ab94:	4803      	ldr	r0, [pc, #12]	; (800aba4 <__io_putchar+0x20>)
 800ab96:	f7fd fb06 	bl	80081a6 <HAL_UART_Transmit>

  return ch;
 800ab9a:	687b      	ldr	r3, [r7, #4]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	2000b46c 	.word	0x2000b46c

0800aba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aba8:	b480      	push	{r7}
 800abaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800abac:	bf00      	nop
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
	...

0800abb8 <DCMI_SingleRandomWrite>:
  * @param  Data: data to be written to the specific register 
  * @retval 0x00 if write operation is OK. 
  *         0xFF if timeout condition occured (device not connected or bus error).
  */
uint8_t DCMI_SingleRandomWrite(uint8_t DeviceAddr, uint16_t Reg, uint8_t Data)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af04      	add	r7, sp, #16
 800abbe:	4603      	mov	r3, r0
 800abc0:	71fb      	strb	r3, [r7, #7]
 800abc2:	460b      	mov	r3, r1
 800abc4:	80bb      	strh	r3, [r7, #4]
 800abc6:	4613      	mov	r3, r2
 800abc8:	71bb      	strb	r3, [r7, #6]
  if(HAL_I2C_Mem_Write(&hi2c2, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &Data, 1, 100) != HAL_OK)
 800abca:	79fb      	ldrb	r3, [r7, #7]
 800abcc:	b299      	uxth	r1, r3
 800abce:	88ba      	ldrh	r2, [r7, #4]
 800abd0:	2364      	movs	r3, #100	; 0x64
 800abd2:	9302      	str	r3, [sp, #8]
 800abd4:	2301      	movs	r3, #1
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	1dbb      	adds	r3, r7, #6
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	2301      	movs	r3, #1
 800abde:	4806      	ldr	r0, [pc, #24]	; (800abf8 <DCMI_SingleRandomWrite+0x40>)
 800abe0:	f7fc faac 	bl	800713c <HAL_I2C_Mem_Write>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <DCMI_SingleRandomWrite+0x36>
  {
    return 0xFF;
 800abea:	23ff      	movs	r3, #255	; 0xff
 800abec:	e000      	b.n	800abf0 <DCMI_SingleRandomWrite+0x38>
  }
  return 0;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	2000b328 	.word	0x2000b328

0800abfc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800ac06:	4b16      	ldr	r3, [pc, #88]	; (800ac60 <BSP_LCD_Init+0x64>)
 800ac08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0c:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 800ac0e:	4b14      	ldr	r3, [pc, #80]	; (800ac60 <BSP_LCD_Init+0x64>)
 800ac10:	4a14      	ldr	r2, [pc, #80]	; (800ac64 <BSP_LCD_Init+0x68>)
 800ac12:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800ac14:	4b12      	ldr	r3, [pc, #72]	; (800ac60 <BSP_LCD_Init+0x64>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 800ac1a:	4b13      	ldr	r3, [pc, #76]	; (800ac68 <BSP_LCD_Init+0x6c>)
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	4798      	blx	r3
 800ac20:	4603      	mov	r3, r0
 800ac22:	461a      	mov	r2, r3
 800ac24:	f249 3325 	movw	r3, #37669	; 0x9325
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d008      	beq.n	800ac3e <BSP_LCD_Init+0x42>
 800ac2c:	4b0e      	ldr	r3, [pc, #56]	; (800ac68 <BSP_LCD_Init+0x6c>)
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	4798      	blx	r3
 800ac32:	4603      	mov	r3, r0
 800ac34:	461a      	mov	r2, r3
 800ac36:	f249 3328 	movw	r3, #37672	; 0x9328
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d10b      	bne.n	800ac56 <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 800ac3e:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <BSP_LCD_Init+0x70>)
 800ac40:	4a09      	ldr	r2, [pc, #36]	; (800ac68 <BSP_LCD_Init+0x6c>)
 800ac42:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 800ac44:	4b09      	ldr	r3, [pc, #36]	; (800ac6c <BSP_LCD_Init+0x70>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800ac4c:	4805      	ldr	r0, [pc, #20]	; (800ac64 <BSP_LCD_Init+0x68>)
 800ac4e:	f000 f837 	bl	800acc0 <BSP_LCD_SetFont>

    ret = LCD_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 800ac56:	79fb      	ldrb	r3, [r7, #7]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20010000 	.word	0x20010000
 800ac64:	20000480 	.word	0x20000480
 800ac68:	20000058 	.word	0x20000058
 800ac6c:	20001688 	.word	0x20001688

0800ac70 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 800ac74:	4b03      	ldr	r3, [pc, #12]	; (800ac84 <BSP_LCD_GetXSize+0x14>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7a:	4798      	blx	r3
 800ac7c:	4603      	mov	r3, r0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	20001688 	.word	0x20001688

0800ac88 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800ac8c:	4b03      	ldr	r3, [pc, #12]	; (800ac9c <BSP_LCD_GetYSize+0x14>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac92:	4798      	blx	r3
 800ac94:	4603      	mov	r3, r0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20001688 	.word	0x20001688

0800aca0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	4603      	mov	r3, r0
 800aca8:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800acaa:	88fb      	ldrh	r3, [r7, #6]
 800acac:	4a03      	ldr	r2, [pc, #12]	; (800acbc <BSP_LCD_SetTextColor+0x1c>)
 800acae:	6013      	str	r3, [r2, #0]
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	20010000 	.word	0x20010000

0800acc0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 800acc8:	4a04      	ldr	r2, [pc, #16]	; (800acdc <BSP_LCD_SetFont+0x1c>)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6093      	str	r3, [r2, #8]
}
 800acce:	bf00      	nop
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	20010000 	.word	0x20010000

0800ace0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 800ace0:	b590      	push	{r4, r7, lr}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 800acee:	4b15      	ldr	r3, [pc, #84]	; (800ad44 <BSP_LCD_Clear+0x64>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 800acf4:	88fb      	ldrh	r3, [r7, #6]
 800acf6:	4a13      	ldr	r2, [pc, #76]	; (800ad44 <BSP_LCD_Clear+0x64>)
 800acf8:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	e00d      	b.n	800ad1c <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	b29c      	uxth	r4, r3
 800ad04:	f7ff ffb4 	bl	800ac70 <BSP_LCD_GetXSize>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	4621      	mov	r1, r4
 800ad10:	2000      	movs	r0, #0
 800ad12:	f000 f8cd 	bl	800aeb0 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	f7ff ffb4 	bl	800ac88 <BSP_LCD_GetYSize>
 800ad20:	4602      	mov	r2, r0
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d3eb      	bcc.n	800ad00 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 800ad28:	4a06      	ldr	r2, [pc, #24]	; (800ad44 <BSP_LCD_Clear+0x64>)
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800ad2e:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <BSP_LCD_Clear+0x64>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff ffb3 	bl	800aca0 <BSP_LCD_SetTextColor>
}
 800ad3a:	bf00      	nop
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd90      	pop	{r4, r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20010000 	.word	0x20010000

0800ad48 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	80fb      	strh	r3, [r7, #6]
 800ad52:	460b      	mov	r3, r1
 800ad54:	80bb      	strh	r3, [r7, #4]
 800ad56:	4613      	mov	r3, r2
 800ad58:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800ad5a:	4b0f      	ldr	r3, [pc, #60]	; (800ad98 <BSP_LCD_DisplayChar+0x50>)
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800ad64:	490c      	ldr	r1, [pc, #48]	; (800ad98 <BSP_LCD_DisplayChar+0x50>)
 800ad66:	6889      	ldr	r1, [r1, #8]
 800ad68:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800ad6a:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800ad6e:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <BSP_LCD_DisplayChar+0x50>)
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	889b      	ldrh	r3, [r3, #4]
 800ad74:	3307      	adds	r3, #7
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	da00      	bge.n	800ad7c <BSP_LCD_DisplayChar+0x34>
 800ad7a:	3307      	adds	r3, #7
 800ad7c:	10db      	asrs	r3, r3, #3
 800ad7e:	fb03 f301 	mul.w	r3, r3, r1
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800ad82:	441a      	add	r2, r3
 800ad84:	88b9      	ldrh	r1, [r7, #4]
 800ad86:	88fb      	ldrh	r3, [r7, #6]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f933 	bl	800aff4 <LCD_DrawChar>
}
 800ad8e:	bf00      	nop
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20010000 	.word	0x20010000

0800ad9c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 800ad9c:	b590      	push	{r4, r7, lr}
 800ad9e:	b089      	sub	sp, #36	; 0x24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60ba      	str	r2, [r7, #8]
 800ada4:	461a      	mov	r2, r3
 800ada6:	4603      	mov	r3, r0
 800ada8:	81fb      	strh	r3, [r7, #14]
 800adaa:	460b      	mov	r3, r1
 800adac:	81bb      	strh	r3, [r7, #12]
 800adae:	4613      	mov	r3, r2
 800adb0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 800adb2:	2301      	movs	r3, #1
 800adb4:	83fb      	strh	r3, [r7, #30]
 800adb6:	2300      	movs	r3, #0
 800adb8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800adba:	2300      	movs	r3, #0
 800adbc:	61bb      	str	r3, [r7, #24]
 800adbe:	2300      	movs	r3, #0
 800adc0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800adc6:	e002      	b.n	800adce <BSP_LCD_DisplayStringAt+0x32>
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	3301      	adds	r3, #1
 800adcc:	61bb      	str	r3, [r7, #24]
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	617a      	str	r2, [r7, #20]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1f6      	bne.n	800adc8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800adda:	f7ff ff49 	bl	800ac70 <BSP_LCD_GetXSize>
 800adde:	4602      	mov	r2, r0
 800ade0:	4b32      	ldr	r3, [pc, #200]	; (800aeac <BSP_LCD_DisplayStringAt+0x110>)
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	889b      	ldrh	r3, [r3, #4]
 800ade6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adea:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d014      	beq.n	800ae1c <BSP_LCD_DisplayStringAt+0x80>
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d00f      	beq.n	800ae16 <BSP_LCD_DisplayStringAt+0x7a>
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d11e      	bne.n	800ae38 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	4a2a      	ldr	r2, [pc, #168]	; (800aeac <BSP_LCD_DisplayStringAt+0x110>)
 800ae02:	6892      	ldr	r2, [r2, #8]
 800ae04:	8892      	ldrh	r2, [r2, #4]
 800ae06:	fb02 f303 	mul.w	r3, r2, r3
 800ae0a:	085b      	lsrs	r3, r3, #1
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	89fb      	ldrh	r3, [r7, #14]
 800ae10:	4413      	add	r3, r2
 800ae12:	83fb      	strh	r3, [r7, #30]
      break;
 800ae14:	e013      	b.n	800ae3e <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800ae16:	89fb      	ldrh	r3, [r7, #14]
 800ae18:	83fb      	strh	r3, [r7, #30]
      break;
 800ae1a:	e010      	b.n	800ae3e <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	4b21      	ldr	r3, [pc, #132]	; (800aeac <BSP_LCD_DisplayStringAt+0x110>)
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	889b      	ldrh	r3, [r3, #4]
 800ae2a:	fb12 f303 	smulbb	r3, r2, r3
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	89fb      	ldrh	r3, [r7, #14]
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	83fb      	strh	r3, [r7, #30]
      break;
 800ae36:	e002      	b.n	800ae3e <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 800ae38:	89fb      	ldrh	r3, [r7, #14]
 800ae3a:	83fb      	strh	r3, [r7, #30]
      break;
 800ae3c:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800ae3e:	e012      	b.n	800ae66 <BSP_LCD_DisplayStringAt+0xca>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	781a      	ldrb	r2, [r3, #0]
 800ae44:	89b9      	ldrh	r1, [r7, #12]
 800ae46:	8bfb      	ldrh	r3, [r7, #30]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff ff7d 	bl	800ad48 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800ae4e:	4b17      	ldr	r3, [pc, #92]	; (800aeac <BSP_LCD_DisplayStringAt+0x110>)
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	889a      	ldrh	r2, [r3, #4]
 800ae54:	8bfb      	ldrh	r3, [r7, #30]
 800ae56:	4413      	add	r3, r2
 800ae58:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	60bb      	str	r3, [r7, #8]
    counter++;
 800ae60:	8bbb      	ldrh	r3, [r7, #28]
 800ae62:	3301      	adds	r3, #1
 800ae64:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	bf14      	ite	ne
 800ae6e:	2301      	movne	r3, #1
 800ae70:	2300      	moveq	r3, #0
 800ae72:	b2dc      	uxtb	r4, r3
 800ae74:	f7ff fefc 	bl	800ac70 <BSP_LCD_GetXSize>
 800ae78:	4601      	mov	r1, r0
 800ae7a:	8bbb      	ldrh	r3, [r7, #28]
 800ae7c:	4a0b      	ldr	r2, [pc, #44]	; (800aeac <BSP_LCD_DisplayStringAt+0x110>)
 800ae7e:	6892      	ldr	r2, [r2, #8]
 800ae80:	8892      	ldrh	r2, [r2, #4]
 800ae82:	fb02 f303 	mul.w	r3, r2, r3
 800ae86:	1acb      	subs	r3, r1, r3
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	4a08      	ldr	r2, [pc, #32]	; (800aeac <BSP_LCD_DisplayStringAt+0x110>)
 800ae8c:	6892      	ldr	r2, [r2, #8]
 800ae8e:	8892      	ldrh	r2, [r2, #4]
 800ae90:	4293      	cmp	r3, r2
 800ae92:	bf2c      	ite	cs
 800ae94:	2301      	movcs	r3, #1
 800ae96:	2300      	movcc	r3, #0
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	4023      	ands	r3, r4
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1ce      	bne.n	800ae40 <BSP_LCD_DisplayStringAt+0xa4>
  }
}
 800aea2:	bf00      	nop
 800aea4:	3724      	adds	r7, #36	; 0x24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd90      	pop	{r4, r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20010000 	.word	0x20010000

0800aeb0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800aeb0:	b590      	push	{r4, r7, lr}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	80fb      	strh	r3, [r7, #6]
 800aeba:	460b      	mov	r3, r1
 800aebc:	80bb      	strh	r3, [r7, #4]
 800aebe:	4613      	mov	r3, r2
 800aec0:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800aec6:	4b15      	ldr	r3, [pc, #84]	; (800af1c <BSP_LCD_DrawHLine+0x6c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00a      	beq.n	800aee6 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800aed0:	4b12      	ldr	r3, [pc, #72]	; (800af1c <BSP_LCD_DrawHLine+0x6c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6a1c      	ldr	r4, [r3, #32]
 800aed6:	4b12      	ldr	r3, [pc, #72]	; (800af20 <BSP_LCD_DrawHLine+0x70>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	b298      	uxth	r0, r3
 800aedc:	887b      	ldrh	r3, [r7, #2]
 800aede:	88ba      	ldrh	r2, [r7, #4]
 800aee0:	88f9      	ldrh	r1, [r7, #6]
 800aee2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800aee4:	e015      	b.n	800af12 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800aee6:	2300      	movs	r3, #0
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	e00e      	b.n	800af0a <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	88fb      	ldrh	r3, [r7, #6]
 800aef2:	4413      	add	r3, r2
 800aef4:	b298      	uxth	r0, r3
 800aef6:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <BSP_LCD_DrawHLine+0x70>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	88bb      	ldrh	r3, [r7, #4]
 800aefe:	4619      	mov	r1, r3
 800af00:	f000 f85c 	bl	800afbc <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3301      	adds	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	887b      	ldrh	r3, [r7, #2]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d3ec      	bcc.n	800aeec <BSP_LCD_DrawHLine+0x3c>
}
 800af12:	bf00      	nop
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	bd90      	pop	{r4, r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20001688 	.word	0x20001688
 800af20:	20010000 	.word	0x20010000

0800af24 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800af24:	b590      	push	{r4, r7, lr}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	4603      	mov	r3, r0
 800af2c:	603a      	str	r2, [r7, #0]
 800af2e:	80fb      	strh	r3, [r7, #6]
 800af30:	460b      	mov	r3, r1
 800af32:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800af34:	2300      	movs	r3, #0
 800af36:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	3312      	adds	r3, #18
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	3314      	adds	r3, #20
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	041b      	lsls	r3, r3, #16
 800af4c:	461a      	mov	r2, r3
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	4313      	orrs	r3, r2
 800af52:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	3316      	adds	r3, #22
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	3318      	adds	r3, #24
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	041b      	lsls	r3, r3, #16
 800af64:	461a      	mov	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	b29a      	uxth	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	b29b      	uxth	r3, r3
 800af74:	88b9      	ldrh	r1, [r7, #4]
 800af76:	88f8      	ldrh	r0, [r7, #6]
 800af78:	f000 f92e 	bl	800b1d8 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 800af7c:	4b0e      	ldr	r3, [pc, #56]	; (800afb8 <BSP_LCD_DrawBitmap+0x94>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af82:	2b00      	cmp	r3, #0
 800af84:	d006      	beq.n	800af94 <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 800af86:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <BSP_LCD_DrawBitmap+0x94>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8c:	88b9      	ldrh	r1, [r7, #4]
 800af8e:	88f8      	ldrh	r0, [r7, #6]
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800af94:	f7ff fe6c 	bl	800ac70 <BSP_LCD_GetXSize>
 800af98:	4603      	mov	r3, r0
 800af9a:	b29c      	uxth	r4, r3
 800af9c:	f7ff fe74 	bl	800ac88 <BSP_LCD_GetYSize>
 800afa0:	4603      	mov	r3, r0
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	4622      	mov	r2, r4
 800afa6:	2100      	movs	r1, #0
 800afa8:	2000      	movs	r0, #0
 800afaa:	f000 f915 	bl	800b1d8 <LCD_SetDisplayWindow>
}
 800afae:	bf00      	nop
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd90      	pop	{r4, r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20001688 	.word	0x20001688

0800afbc <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	80fb      	strh	r3, [r7, #6]
 800afc6:	460b      	mov	r3, r1
 800afc8:	80bb      	strh	r3, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800afce:	4b08      	ldr	r3, [pc, #32]	; (800aff0 <LCD_DrawPixel+0x34>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d006      	beq.n	800afe6 <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 800afd8:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <LCD_DrawPixel+0x34>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	887a      	ldrh	r2, [r7, #2]
 800afe0:	88b9      	ldrh	r1, [r7, #4]
 800afe2:	88f8      	ldrh	r0, [r7, #6]
 800afe4:	4798      	blx	r3
  }
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20001688 	.word	0x20001688

0800aff4 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	4603      	mov	r3, r0
 800affc:	603a      	str	r2, [r7, #0]
 800affe:	80fb      	strh	r3, [r7, #6]
 800b000:	460b      	mov	r3, r1
 800b002:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	627b      	str	r3, [r7, #36]	; 0x24
 800b008:	2300      	movs	r3, #0
 800b00a:	623b      	str	r3, [r7, #32]
 800b00c:	2300      	movs	r3, #0
 800b00e:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	82fb      	strh	r3, [r7, #22]
 800b014:	2300      	movs	r3, #0
 800b016:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 800b024:	4b63      	ldr	r3, [pc, #396]	; (800b1b4 <LCD_DrawChar+0x1c0>)
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	88db      	ldrh	r3, [r3, #6]
 800b02a:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 800b02c:	4b61      	ldr	r3, [pc, #388]	; (800b1b4 <LCD_DrawChar+0x1c0>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	889b      	ldrh	r3, [r3, #4]
 800b032:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 800b034:	8afa      	ldrh	r2, [r7, #22]
 800b036:	8abb      	ldrh	r3, [r7, #20]
 800b038:	fb12 f303 	smulbb	r3, r2, r3
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	331b      	adds	r3, #27
 800b040:	b29b      	uxth	r3, r3
 800b042:	4a5d      	ldr	r2, [pc, #372]	; (800b1b8 <LCD_DrawChar+0x1c4>)
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	b29b      	uxth	r3, r3
 800b048:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 800b04a:	8afb      	ldrh	r3, [r7, #22]
 800b04c:	8aba      	ldrh	r2, [r7, #20]
 800b04e:	fb02 f303 	mul.w	r3, r2, r3
 800b052:	331b      	adds	r3, #27
 800b054:	005b      	lsls	r3, r3, #1
 800b056:	141a      	asrs	r2, r3, #16
 800b058:	4b58      	ldr	r3, [pc, #352]	; (800b1bc <LCD_DrawChar+0x1c8>)
 800b05a:	b292      	uxth	r2, r2
 800b05c:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 800b05e:	4b58      	ldr	r3, [pc, #352]	; (800b1c0 <LCD_DrawChar+0x1cc>)
 800b060:	2236      	movs	r2, #54	; 0x36
 800b062:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 800b064:	4a57      	ldr	r2, [pc, #348]	; (800b1c4 <LCD_DrawChar+0x1d0>)
 800b066:	8abb      	ldrh	r3, [r7, #20]
 800b068:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 800b06a:	8abb      	ldrh	r3, [r7, #20]
 800b06c:	141a      	asrs	r2, r3, #16
 800b06e:	4b56      	ldr	r3, [pc, #344]	; (800b1c8 <LCD_DrawChar+0x1d4>)
 800b070:	b292      	uxth	r2, r2
 800b072:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 800b074:	4a55      	ldr	r2, [pc, #340]	; (800b1cc <LCD_DrawChar+0x1d8>)
 800b076:	8afb      	ldrh	r3, [r7, #22]
 800b078:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 800b07a:	8afb      	ldrh	r3, [r7, #22]
 800b07c:	141a      	asrs	r2, r3, #16
 800b07e:	4b54      	ldr	r3, [pc, #336]	; (800b1d0 <LCD_DrawChar+0x1dc>)
 800b080:	b292      	uxth	r2, r2
 800b082:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 800b084:	8abb      	ldrh	r3, [r7, #20]
 800b086:	3307      	adds	r3, #7
 800b088:	2b00      	cmp	r3, #0
 800b08a:	da00      	bge.n	800b08e <LCD_DrawChar+0x9a>
 800b08c:	3307      	adds	r3, #7
 800b08e:	10db      	asrs	r3, r3, #3
 800b090:	b2db      	uxtb	r3, r3
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	b2da      	uxtb	r2, r3
 800b096:	8abb      	ldrh	r3, [r7, #20]
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 800b09e:	2300      	movs	r3, #0
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a2:	e078      	b.n	800b196 <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 800b0a4:	8abb      	ldrh	r3, [r7, #20]
 800b0a6:	3307      	adds	r3, #7
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	da00      	bge.n	800b0ae <LCD_DrawChar+0xba>
 800b0ac:	3307      	adds	r3, #7
 800b0ae:	10db      	asrs	r3, r3, #3
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	fb03 f302 	mul.w	r3, r3, r2
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 800b0be:	8abb      	ldrh	r3, [r7, #20]
 800b0c0:	3b11      	subs	r3, #17
 800b0c2:	2b07      	cmp	r3, #7
 800b0c4:	d80c      	bhi.n	800b0e0 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	041a      	lsls	r2, r3, #16
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	021b      	lsls	r3, r3, #8
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	3202      	adds	r2, #2
 800b0da:	7812      	ldrb	r2, [r2, #0]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 800b0e0:	8abb      	ldrh	r3, [r7, #20]
 800b0e2:	3b09      	subs	r3, #9
 800b0e4:	2b07      	cmp	r3, #7
 800b0e6:	d807      	bhi.n	800b0f8 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	021b      	lsls	r3, r3, #8
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	3201      	adds	r2, #1
 800b0f2:	7812      	ldrb	r2, [r2, #0]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 800b0f8:	8abb      	ldrh	r3, [r7, #20]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	2b07      	cmp	r3, #7
 800b0fe:	d802      	bhi.n	800b106 <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 800b106:	2300      	movs	r3, #0
 800b108:	623b      	str	r3, [r7, #32]
 800b10a:	e03d      	b.n	800b188 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 800b10c:	8afa      	ldrh	r2, [r7, #22]
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	3b01      	subs	r3, #1
 800b114:	8aba      	ldrh	r2, [r7, #20]
 800b116:	fb02 f203 	mul.w	r2, r2, r3
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	4413      	add	r3, r2
 800b11e:	331b      	adds	r3, #27
 800b120:	005b      	lsls	r3, r3, #1
 800b122:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 800b124:	8aba      	ldrh	r2, [r7, #20]
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	1ad2      	subs	r2, r2, r3
 800b12a:	7cfb      	ldrb	r3, [r7, #19]
 800b12c:	4413      	add	r3, r2
 800b12e:	3b01      	subs	r3, #1
 800b130:	2201      	movs	r2, #1
 800b132:	fa02 f303 	lsl.w	r3, r2, r3
 800b136:	461a      	mov	r2, r3
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d010      	beq.n	800b162 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 800b140:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <LCD_DrawChar+0x1c0>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	b2d9      	uxtb	r1, r3
 800b146:	4a23      	ldr	r2, [pc, #140]	; (800b1d4 <LCD_DrawChar+0x1e0>)
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	4413      	add	r3, r2
 800b14c:	460a      	mov	r2, r1
 800b14e:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 800b150:	4b18      	ldr	r3, [pc, #96]	; (800b1b4 <LCD_DrawChar+0x1c0>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	0a1a      	lsrs	r2, r3, #8
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	3301      	adds	r3, #1
 800b15a:	b2d1      	uxtb	r1, r2
 800b15c:	4a1d      	ldr	r2, [pc, #116]	; (800b1d4 <LCD_DrawChar+0x1e0>)
 800b15e:	54d1      	strb	r1, [r2, r3]
 800b160:	e00f      	b.n	800b182 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800b162:	4b14      	ldr	r3, [pc, #80]	; (800b1b4 <LCD_DrawChar+0x1c0>)
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	b2d9      	uxtb	r1, r3
 800b168:	4a1a      	ldr	r2, [pc, #104]	; (800b1d4 <LCD_DrawChar+0x1e0>)
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	4413      	add	r3, r2
 800b16e:	460a      	mov	r2, r1
 800b170:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800b172:	4b10      	ldr	r3, [pc, #64]	; (800b1b4 <LCD_DrawChar+0x1c0>)
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	0a1a      	lsrs	r2, r3, #8
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	3301      	adds	r3, #1
 800b17c:	b2d1      	uxtb	r1, r2
 800b17e:	4a15      	ldr	r2, [pc, #84]	; (800b1d4 <LCD_DrawChar+0x1e0>)
 800b180:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	3301      	adds	r3, #1
 800b186:	623b      	str	r3, [r7, #32]
 800b188:	8abb      	ldrh	r3, [r7, #20]
 800b18a:	6a3a      	ldr	r2, [r7, #32]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d3bd      	bcc.n	800b10c <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	3301      	adds	r3, #1
 800b194:	627b      	str	r3, [r7, #36]	; 0x24
 800b196:	8afb      	ldrh	r3, [r7, #22]
 800b198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d382      	bcc.n	800b0a4 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 800b19e:	88b9      	ldrh	r1, [r7, #4]
 800b1a0:	88fb      	ldrh	r3, [r7, #6]
 800b1a2:	4a0c      	ldr	r2, [pc, #48]	; (800b1d4 <LCD_DrawChar+0x1e0>)
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff febd 	bl	800af24 <BSP_LCD_DrawBitmap>
}
 800b1aa:	bf00      	nop
 800b1ac:	3728      	adds	r7, #40	; 0x28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20010000 	.word	0x20010000
 800b1b8:	2000168e 	.word	0x2000168e
 800b1bc:	20001690 	.word	0x20001690
 800b1c0:	20001696 	.word	0x20001696
 800b1c4:	2000169e 	.word	0x2000169e
 800b1c8:	200016a0 	.word	0x200016a0
 800b1cc:	200016a2 	.word	0x200016a2
 800b1d0:	200016a4 	.word	0x200016a4
 800b1d4:	2000168c 	.word	0x2000168c

0800b1d8 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800b1d8:	b590      	push	{r4, r7, lr}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	4623      	mov	r3, r4
 800b1e8:	80fb      	strh	r3, [r7, #6]
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	80bb      	strh	r3, [r7, #4]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	807b      	strh	r3, [r7, #2]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800b1f6:	4b08      	ldr	r3, [pc, #32]	; (800b218 <LCD_SetDisplayWindow+0x40>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d007      	beq.n	800b210 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800b200:	4b05      	ldr	r3, [pc, #20]	; (800b218 <LCD_SetDisplayWindow+0x40>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	69dc      	ldr	r4, [r3, #28]
 800b206:	883b      	ldrh	r3, [r7, #0]
 800b208:	887a      	ldrh	r2, [r7, #2]
 800b20a:	88b9      	ldrh	r1, [r7, #4]
 800b20c:	88f8      	ldrh	r0, [r7, #6]
 800b20e:	47a0      	blx	r4
  }  
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	bd90      	pop	{r4, r7, pc}
 800b218:	20001688 	.word	0x20001688

0800b21c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b222:	2300      	movs	r3, #0
 800b224:	607b      	str	r3, [r7, #4]
 800b226:	4b10      	ldr	r3, [pc, #64]	; (800b268 <HAL_MspInit+0x4c>)
 800b228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22a:	4a0f      	ldr	r2, [pc, #60]	; (800b268 <HAL_MspInit+0x4c>)
 800b22c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b230:	6453      	str	r3, [r2, #68]	; 0x44
 800b232:	4b0d      	ldr	r3, [pc, #52]	; (800b268 <HAL_MspInit+0x4c>)
 800b234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b23a:	607b      	str	r3, [r7, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b23e:	2300      	movs	r3, #0
 800b240:	603b      	str	r3, [r7, #0]
 800b242:	4b09      	ldr	r3, [pc, #36]	; (800b268 <HAL_MspInit+0x4c>)
 800b244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b246:	4a08      	ldr	r2, [pc, #32]	; (800b268 <HAL_MspInit+0x4c>)
 800b248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b24c:	6413      	str	r3, [r2, #64]	; 0x40
 800b24e:	4b06      	ldr	r3, [pc, #24]	; (800b268 <HAL_MspInit+0x4c>)
 800b250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 800b25a:	bf00      	nop
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	40023800 	.word	0x40023800

0800b26c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a0b      	ldr	r2, [pc, #44]	; (800b2a8 <HAL_CRC_MspInit+0x3c>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d10d      	bne.n	800b29a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b27e:	2300      	movs	r3, #0
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	4b0a      	ldr	r3, [pc, #40]	; (800b2ac <HAL_CRC_MspInit+0x40>)
 800b284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b286:	4a09      	ldr	r2, [pc, #36]	; (800b2ac <HAL_CRC_MspInit+0x40>)
 800b288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b28c:	6313      	str	r3, [r2, #48]	; 0x30
 800b28e:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <HAL_CRC_MspInit+0x40>)
 800b290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b296:	60fb      	str	r3, [r7, #12]
 800b298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800b29a:	bf00      	nop
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	40023000 	.word	0x40023000
 800b2ac:	40023800 	.word	0x40023800

0800b2b0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	  if(hdcmi->Instance==DCMI)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a55      	ldr	r2, [pc, #340]	; (800b414 <HAL_DCMI_MspInit+0x164>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	f040 80a3 	bne.w	800b40a <HAL_DCMI_MspInit+0x15a>
	  {
	  /* USER CODE BEGIN DCMI_MspInit 0 */

	  /* USER CODE END DCMI_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_DCMI_CLK_ENABLE();
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	60bb      	str	r3, [r7, #8]
 800b2c8:	4b53      	ldr	r3, [pc, #332]	; (800b418 <HAL_DCMI_MspInit+0x168>)
 800b2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2cc:	4a52      	ldr	r2, [pc, #328]	; (800b418 <HAL_DCMI_MspInit+0x168>)
 800b2ce:	f043 0301 	orr.w	r3, r3, #1
 800b2d2:	6353      	str	r3, [r2, #52]	; 0x34
 800b2d4:	4b50      	ldr	r3, [pc, #320]	; (800b418 <HAL_DCMI_MspInit+0x168>)
 800b2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	60bb      	str	r3, [r7, #8]
 800b2de:	68bb      	ldr	r3, [r7, #8]
	    PI4     ------> DCMI_D5
	    PI5     ------> DCMI_VSYNC
	    PI6     ------> DCMI_D6
	    PI7     ------> DCMI_D7
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b2f0:	230d      	movs	r3, #13
 800b2f2:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2f4:	f107 030c 	add.w	r3, r7, #12
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	4848      	ldr	r0, [pc, #288]	; (800b41c <HAL_DCMI_MspInit+0x16c>)
 800b2fc:	f7fb fc2a 	bl	8006b54 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b304:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b306:	2302      	movs	r3, #2
 800b308:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b30e:	2300      	movs	r3, #0
 800b310:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b312:	230d      	movs	r3, #13
 800b314:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b316:	f107 030c 	add.w	r3, r7, #12
 800b31a:	4619      	mov	r1, r3
 800b31c:	4840      	ldr	r0, [pc, #256]	; (800b420 <HAL_DCMI_MspInit+0x170>)
 800b31e:	f7fb fc19 	bl	8006b54 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800b322:	f44f 435f 	mov.w	r3, #57088	; 0xdf00
 800b326:	60fb      	str	r3, [r7, #12]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b328:	2302      	movs	r3, #2
 800b32a:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b32c:	2300      	movs	r3, #0
 800b32e:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b330:	2300      	movs	r3, #0
 800b332:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b334:	230d      	movs	r3, #13
 800b336:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b338:	f107 030c 	add.w	r3, r7, #12
 800b33c:	4619      	mov	r1, r3
 800b33e:	4839      	ldr	r0, [pc, #228]	; (800b424 <HAL_DCMI_MspInit+0x174>)
 800b340:	f7fb fc08 	bl	8006b54 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800b344:	23fe      	movs	r3, #254	; 0xfe
 800b346:	60fb      	str	r3, [r7, #12]
	                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b348:	2302      	movs	r3, #2
 800b34a:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b34c:	2300      	movs	r3, #0
 800b34e:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b350:	2300      	movs	r3, #0
 800b352:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b354:	230d      	movs	r3, #13
 800b356:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b358:	f107 030c 	add.w	r3, r7, #12
 800b35c:	4619      	mov	r1, r3
 800b35e:	4832      	ldr	r0, [pc, #200]	; (800b428 <HAL_DCMI_MspInit+0x178>)
 800b360:	f7fb fbf8 	bl	8006b54 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b368:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b36a:	2302      	movs	r3, #2
 800b36c:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b372:	2300      	movs	r3, #0
 800b374:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b376:	230d      	movs	r3, #13
 800b378:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b37a:	f107 030c 	add.w	r3, r7, #12
 800b37e:	4619      	mov	r1, r3
 800b380:	482a      	ldr	r0, [pc, #168]	; (800b42c <HAL_DCMI_MspInit+0x17c>)
 800b382:	f7fb fbe7 	bl	8006b54 <HAL_GPIO_Init>

	    /* DCMI DMA Init */
	    /* DCMI Init */
	    hdma_dcmi.Instance = DMA2_Stream1;
 800b386:	4b2a      	ldr	r3, [pc, #168]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b388:	4a2a      	ldr	r2, [pc, #168]	; (800b434 <HAL_DCMI_MspInit+0x184>)
 800b38a:	601a      	str	r2, [r3, #0]
	    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800b38c:	4b28      	ldr	r3, [pc, #160]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b38e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b392:	605a      	str	r2, [r3, #4]
	    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b394:	4b26      	ldr	r3, [pc, #152]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b396:	2200      	movs	r2, #0
 800b398:	609a      	str	r2, [r3, #8]
	    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800b39a:	4b25      	ldr	r3, [pc, #148]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	60da      	str	r2, [r3, #12]
	    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800b3a0:	4b23      	ldr	r3, [pc, #140]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b3a6:	611a      	str	r2, [r3, #16]
	    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b3a8:	4b21      	ldr	r3, [pc, #132]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b3ae:	615a      	str	r2, [r3, #20]
	    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b3b0:	4b1f      	ldr	r3, [pc, #124]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b3b6:	619a      	str	r2, [r3, #24]
	    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800b3b8:	4b1d      	ldr	r3, [pc, #116]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3be:	61da      	str	r2, [r3, #28]
	    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800b3c0:	4b1b      	ldr	r3, [pc, #108]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	621a      	str	r2, [r3, #32]
	    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b3c6:	4b1a      	ldr	r3, [pc, #104]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3c8:	2204      	movs	r2, #4
 800b3ca:	625a      	str	r2, [r3, #36]	; 0x24
	    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b3cc:	4b18      	ldr	r3, [pc, #96]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3ce:	2203      	movs	r2, #3
 800b3d0:	629a      	str	r2, [r3, #40]	; 0x28
	    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800b3d2:	4b17      	ldr	r3, [pc, #92]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	62da      	str	r2, [r3, #44]	; 0x2c
	    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b3d8:	4b15      	ldr	r3, [pc, #84]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	631a      	str	r2, [r3, #48]	; 0x30
	    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800b3de:	4814      	ldr	r0, [pc, #80]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3e0:	f7f9 fe98 	bl	8005114 <HAL_DMA_Init>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d001      	beq.n	800b3ee <HAL_DCMI_MspInit+0x13e>
	    {
	    	Error_Handler();
 800b3ea:	f7ff fbdd 	bl	800aba8 <Error_Handler>
	    }

	    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a0f      	ldr	r2, [pc, #60]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3f2:	639a      	str	r2, [r3, #56]	; 0x38
 800b3f4:	4a0e      	ldr	r2, [pc, #56]	; (800b430 <HAL_DCMI_MspInit+0x180>)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6393      	str	r3, [r2, #56]	; 0x38

	    /* DCMI interrupt Init */
	    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	204e      	movs	r0, #78	; 0x4e
 800b400:	f7f9 fbbd 	bl	8004b7e <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800b404:	204e      	movs	r0, #78	; 0x4e
 800b406:	f7f9 fbd6 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800b40a:	bf00      	nop
 800b40c:	3720      	adds	r7, #32
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	50050000 	.word	0x50050000
 800b418:	40023800 	.word	0x40023800
 800b41c:	40020000 	.word	0x40020000
 800b420:	40021400 	.word	0x40021400
 800b424:	40021c00 	.word	0x40021c00
 800b428:	40022000 	.word	0x40022000
 800b42c:	40021800 	.word	0x40021800
 800b430:	2000b37c 	.word	0x2000b37c
 800b434:	40026428 	.word	0x40026428

0800b438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	  if(hi2c->Instance==I2C2)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a12      	ldr	r2, [pc, #72]	; (800b490 <HAL_I2C_MspInit+0x58>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d11e      	bne.n	800b488 <HAL_I2C_MspInit+0x50>

	    /**I2C2 GPIO Configuration
	    PB10     ------> I2C2_SCL
	    PB11     ------> I2C2_SDA
	    */
	    GPIO_InitStruct.Pin = I2C_SIOC_Pin|I2C_SIOD_Pin;
 800b44a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b44e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b450:	2312      	movs	r3, #18
 800b452:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b454:	2301      	movs	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b458:	2300      	movs	r3, #0
 800b45a:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b45c:	2304      	movs	r3, #4
 800b45e:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b460:	f107 030c 	add.w	r3, r7, #12
 800b464:	4619      	mov	r1, r3
 800b466:	480b      	ldr	r0, [pc, #44]	; (800b494 <HAL_I2C_MspInit+0x5c>)
 800b468:	f7fb fb74 	bl	8006b54 <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_I2C2_CLK_ENABLE();
 800b46c:	2300      	movs	r3, #0
 800b46e:	60bb      	str	r3, [r7, #8]
 800b470:	4b09      	ldr	r3, [pc, #36]	; (800b498 <HAL_I2C_MspInit+0x60>)
 800b472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b474:	4a08      	ldr	r2, [pc, #32]	; (800b498 <HAL_I2C_MspInit+0x60>)
 800b476:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b47a:	6413      	str	r3, [r2, #64]	; 0x40
 800b47c:	4b06      	ldr	r3, [pc, #24]	; (800b498 <HAL_I2C_MspInit+0x60>)
 800b47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b484:	60bb      	str	r3, [r7, #8]
 800b486:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b488:	bf00      	nop
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	40005800 	.word	0x40005800
 800b494:	40020400 	.word	0x40020400
 800b498:	40023800 	.word	0x40023800

0800b49c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4a4:	f107 0314 	add.w	r3, r7, #20
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	605a      	str	r2, [r3, #4]
 800b4ae:	609a      	str	r2, [r3, #8]
 800b4b0:	60da      	str	r2, [r3, #12]
 800b4b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a19      	ldr	r2, [pc, #100]	; (800b520 <HAL_UART_MspInit+0x84>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d12c      	bne.n	800b518 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b4be:	2300      	movs	r3, #0
 800b4c0:	613b      	str	r3, [r7, #16]
 800b4c2:	4b18      	ldr	r3, [pc, #96]	; (800b524 <HAL_UART_MspInit+0x88>)
 800b4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c6:	4a17      	ldr	r2, [pc, #92]	; (800b524 <HAL_UART_MspInit+0x88>)
 800b4c8:	f043 0310 	orr.w	r3, r3, #16
 800b4cc:	6453      	str	r3, [r2, #68]	; 0x44
 800b4ce:	4b15      	ldr	r3, [pc, #84]	; (800b524 <HAL_UART_MspInit+0x88>)
 800b4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d2:	f003 0310 	and.w	r3, r3, #16
 800b4d6:	613b      	str	r3, [r7, #16]
 800b4d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	4b11      	ldr	r3, [pc, #68]	; (800b524 <HAL_UART_MspInit+0x88>)
 800b4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e2:	4a10      	ldr	r2, [pc, #64]	; (800b524 <HAL_UART_MspInit+0x88>)
 800b4e4:	f043 0301 	orr.w	r3, r3, #1
 800b4e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ea:	4b0e      	ldr	r3, [pc, #56]	; (800b524 <HAL_UART_MspInit+0x88>)
 800b4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b4f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b4fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b500:	2301      	movs	r3, #1
 800b502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b504:	2303      	movs	r3, #3
 800b506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b508:	2307      	movs	r3, #7
 800b50a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b50c:	f107 0314 	add.w	r3, r7, #20
 800b510:	4619      	mov	r1, r3
 800b512:	4805      	ldr	r0, [pc, #20]	; (800b528 <HAL_UART_MspInit+0x8c>)
 800b514:	f7fb fb1e 	bl	8006b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b518:	bf00      	nop
 800b51a:	3728      	adds	r7, #40	; 0x28
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	40011000 	.word	0x40011000
 800b524:	40023800 	.word	0x40023800
 800b528:	40020000 	.word	0x40020000

0800b52c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b532:	1d3b      	adds	r3, r7, #4
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	605a      	str	r2, [r3, #4]
 800b53a:	609a      	str	r2, [r3, #8]
 800b53c:	60da      	str	r2, [r3, #12]
 800b53e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800b540:	4b2c      	ldr	r3, [pc, #176]	; (800b5f4 <HAL_FSMC_MspInit+0xc8>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d151      	bne.n	800b5ec <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800b548:	4b2a      	ldr	r3, [pc, #168]	; (800b5f4 <HAL_FSMC_MspInit+0xc8>)
 800b54a:	2201      	movs	r2, #1
 800b54c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800b54e:	2300      	movs	r3, #0
 800b550:	603b      	str	r3, [r7, #0]
 800b552:	4b29      	ldr	r3, [pc, #164]	; (800b5f8 <HAL_FSMC_MspInit+0xcc>)
 800b554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b556:	4a28      	ldr	r2, [pc, #160]	; (800b5f8 <HAL_FSMC_MspInit+0xcc>)
 800b558:	f043 0301 	orr.w	r3, r3, #1
 800b55c:	6393      	str	r3, [r2, #56]	; 0x38
 800b55e:	4b26      	ldr	r3, [pc, #152]	; (800b5f8 <HAL_FSMC_MspInit+0xcc>)
 800b560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b56a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800b56e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b570:	2302      	movs	r3, #2
 800b572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b574:	2300      	movs	r3, #0
 800b576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b578:	2303      	movs	r3, #3
 800b57a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800b57c:	230c      	movs	r3, #12
 800b57e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b580:	1d3b      	adds	r3, r7, #4
 800b582:	4619      	mov	r1, r3
 800b584:	481d      	ldr	r0, [pc, #116]	; (800b5fc <HAL_FSMC_MspInit+0xd0>)
 800b586:	f7fb fae5 	bl	8006b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b58a:	f240 433f 	movw	r3, #1087	; 0x43f
 800b58e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b590:	2302      	movs	r3, #2
 800b592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b598:	2303      	movs	r3, #3
 800b59a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800b59c:	230c      	movs	r3, #12
 800b59e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b5a0:	1d3b      	adds	r3, r7, #4
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4816      	ldr	r0, [pc, #88]	; (800b600 <HAL_FSMC_MspInit+0xd4>)
 800b5a6:	f7fb fad5 	bl	8006b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800b5aa:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b5ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800b5bc:	230c      	movs	r3, #12
 800b5be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b5c0:	1d3b      	adds	r3, r7, #4
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	480f      	ldr	r0, [pc, #60]	; (800b604 <HAL_FSMC_MspInit+0xd8>)
 800b5c6:	f7fb fac5 	bl	8006b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b5ca:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800b5ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800b5dc:	230c      	movs	r3, #12
 800b5de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b5e0:	1d3b      	adds	r3, r7, #4
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4808      	ldr	r0, [pc, #32]	; (800b608 <HAL_FSMC_MspInit+0xdc>)
 800b5e6:	f7fb fab5 	bl	8006b54 <HAL_GPIO_Init>
 800b5ea:	e000      	b.n	800b5ee <HAL_FSMC_MspInit+0xc2>
    return;
 800b5ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	200019f4 	.word	0x200019f4
 800b5f8:	40023800 	.word	0x40023800
 800b5fc:	40021400 	.word	0x40021400
 800b600:	40021800 	.word	0x40021800
 800b604:	40021000 	.word	0x40021000
 800b608:	40020c00 	.word	0x40020c00

0800b60c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800b614:	f7ff ff8a 	bl	800b52c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b624:	bf00      	nop
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b62e:	b480      	push	{r7}
 800b630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b632:	e7fe      	b.n	800b632 <HardFault_Handler+0x4>

0800b634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b634:	b480      	push	{r7}
 800b636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b638:	e7fe      	b.n	800b638 <MemManage_Handler+0x4>

0800b63a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b63a:	b480      	push	{r7}
 800b63c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b63e:	e7fe      	b.n	800b63e <BusFault_Handler+0x4>

0800b640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b640:	b480      	push	{r7}
 800b642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b644:	e7fe      	b.n	800b644 <UsageFault_Handler+0x4>

0800b646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b646:	b480      	push	{r7}
 800b648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b64a:	bf00      	nop
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b654:	b480      	push	{r7}
 800b656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b658:	bf00      	nop
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b662:	b480      	push	{r7}
 800b664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b666:	bf00      	nop
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b674:	f7f9 f966 	bl	8004944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b678:	bf00      	nop
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800b680:	4802      	ldr	r0, [pc, #8]	; (800b68c <DMA2_Stream1_IRQHandler+0x10>)
 800b682:	f7f9 fe77 	bl	8005374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800b686:	bf00      	nop
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	2000b37c 	.word	0x2000b37c

0800b690 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800b694:	4802      	ldr	r0, [pc, #8]	; (800b6a0 <DCMI_IRQHandler+0x10>)
 800b696:	f7f9 fb85 	bl	8004da4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800b69a:	bf00      	nop
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	2000b42c 	.word	0x2000b42c

0800b6a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	e00a      	b.n	800b6cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b6b6:	f3af 8000 	nop.w
 800b6ba:	4601      	mov	r1, r0
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	60ba      	str	r2, [r7, #8]
 800b6c2:	b2ca      	uxtb	r2, r1
 800b6c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	dbf0      	blt.n	800b6b6 <_read+0x12>
	}

return len;
 800b6d4:	687b      	ldr	r3, [r7, #4]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b086      	sub	sp, #24
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	617b      	str	r3, [r7, #20]
 800b6ee:	e009      	b.n	800b704 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	60ba      	str	r2, [r7, #8]
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff fa43 	bl	800ab84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	3301      	adds	r3, #1
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	429a      	cmp	r2, r3
 800b70a:	dbf1      	blt.n	800b6f0 <_write+0x12>
	}
	return len;
 800b70c:	687b      	ldr	r3, [r7, #4]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <_close>:

int _close(int file)
{
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
	return -1;
 800b71e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b722:	4618      	mov	r0, r3
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b73e:	605a      	str	r2, [r3, #4]
	return 0;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <_isatty>:

int _isatty(int file)
{
 800b74e:	b480      	push	{r7}
 800b750:	b083      	sub	sp, #12
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
	return 1;
 800b756:	2301      	movs	r3, #1
}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
	return 0;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
	...

0800b780 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b788:	4b11      	ldr	r3, [pc, #68]	; (800b7d0 <_sbrk+0x50>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d102      	bne.n	800b796 <_sbrk+0x16>
		heap_end = &end;
 800b790:	4b0f      	ldr	r3, [pc, #60]	; (800b7d0 <_sbrk+0x50>)
 800b792:	4a10      	ldr	r2, [pc, #64]	; (800b7d4 <_sbrk+0x54>)
 800b794:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b796:	4b0e      	ldr	r3, [pc, #56]	; (800b7d0 <_sbrk+0x50>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b79c:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <_sbrk+0x50>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	466a      	mov	r2, sp
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d907      	bls.n	800b7ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b7aa:	f000 f87d 	bl	800b8a8 <__errno>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	230c      	movs	r3, #12
 800b7b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b8:	e006      	b.n	800b7c8 <_sbrk+0x48>
	}

	heap_end += incr;
 800b7ba:	4b05      	ldr	r3, [pc, #20]	; (800b7d0 <_sbrk+0x50>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	4a03      	ldr	r2, [pc, #12]	; (800b7d0 <_sbrk+0x50>)
 800b7c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	200019f8 	.word	0x200019f8
 800b7d4:	20010010 	.word	0x20010010

0800b7d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b7dc:	4b18      	ldr	r3, [pc, #96]	; (800b840 <SystemInit+0x68>)
 800b7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e2:	4a17      	ldr	r2, [pc, #92]	; (800b840 <SystemInit+0x68>)
 800b7e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b7ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b7f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b7f4:	4b13      	ldr	r3, [pc, #76]	; (800b844 <SystemInit+0x6c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a12      	ldr	r2, [pc, #72]	; (800b844 <SystemInit+0x6c>)
 800b7fa:	f043 0301 	orr.w	r3, r3, #1
 800b7fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b800:	4b10      	ldr	r3, [pc, #64]	; (800b844 <SystemInit+0x6c>)
 800b802:	2200      	movs	r2, #0
 800b804:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b806:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <SystemInit+0x6c>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a0e      	ldr	r2, [pc, #56]	; (800b844 <SystemInit+0x6c>)
 800b80c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b814:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b816:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <SystemInit+0x6c>)
 800b818:	4a0b      	ldr	r2, [pc, #44]	; (800b848 <SystemInit+0x70>)
 800b81a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b81c:	4b09      	ldr	r3, [pc, #36]	; (800b844 <SystemInit+0x6c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a08      	ldr	r2, [pc, #32]	; (800b844 <SystemInit+0x6c>)
 800b822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b828:	4b06      	ldr	r3, [pc, #24]	; (800b844 <SystemInit+0x6c>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b82e:	4b04      	ldr	r3, [pc, #16]	; (800b840 <SystemInit+0x68>)
 800b830:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b834:	609a      	str	r2, [r3, #8]
#endif
}
 800b836:	bf00      	nop
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	e000ed00 	.word	0xe000ed00
 800b844:	40023800 	.word	0x40023800
 800b848:	24003010 	.word	0x24003010

0800b84c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b84c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b852:	e003      	b.n	800b85c <LoopCopyDataInit>

0800b854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b854:	4b0c      	ldr	r3, [pc, #48]	; (800b888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b85a:	3104      	adds	r1, #4

0800b85c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b85c:	480b      	ldr	r0, [pc, #44]	; (800b88c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b864:	d3f6      	bcc.n	800b854 <CopyDataInit>
  ldr  r2, =_sbss
 800b866:	4a0b      	ldr	r2, [pc, #44]	; (800b894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b868:	e002      	b.n	800b870 <LoopFillZerobss>

0800b86a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b86a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b86c:	f842 3b04 	str.w	r3, [r2], #4

0800b870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b870:	4b09      	ldr	r3, [pc, #36]	; (800b898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b874:	d3f9      	bcc.n	800b86a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b876:	f7ff ffaf 	bl	800b7d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b87a:	f000 f81b 	bl	800b8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b87e:	f7fe fb87 	bl	8009f90 <main>
  bx  lr    
 800b882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b884:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b888:	08072e5c 	.word	0x08072e5c
  ldr  r0, =_sdata
 800b88c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b890:	200004f4 	.word	0x200004f4
  ldr  r2, =_sbss
 800b894:	200004f4 	.word	0x200004f4
  ldr  r3, = _ebss
 800b898:	20010010 	.word	0x20010010

0800b89c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b89c:	e7fe      	b.n	800b89c <ADC_IRQHandler>

0800b89e <__aeabi_memclr>:
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f7f8 b906 	b.w	8003ab0 <__aeabi_memset>

0800b8a4 <__aeabi_memcpy>:
 800b8a4:	f000 b839 	b.w	800b91a <memcpy>

0800b8a8 <__errno>:
 800b8a8:	4b01      	ldr	r3, [pc, #4]	; (800b8b0 <__errno+0x8>)
 800b8aa:	6818      	ldr	r0, [r3, #0]
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	2000048c 	.word	0x2000048c

0800b8b4 <__libc_init_array>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	4e0d      	ldr	r6, [pc, #52]	; (800b8ec <__libc_init_array+0x38>)
 800b8b8:	4c0d      	ldr	r4, [pc, #52]	; (800b8f0 <__libc_init_array+0x3c>)
 800b8ba:	1ba4      	subs	r4, r4, r6
 800b8bc:	10a4      	asrs	r4, r4, #2
 800b8be:	2500      	movs	r5, #0
 800b8c0:	42a5      	cmp	r5, r4
 800b8c2:	d109      	bne.n	800b8d8 <__libc_init_array+0x24>
 800b8c4:	4e0b      	ldr	r6, [pc, #44]	; (800b8f4 <__libc_init_array+0x40>)
 800b8c6:	4c0c      	ldr	r4, [pc, #48]	; (800b8f8 <__libc_init_array+0x44>)
 800b8c8:	f002 f90c 	bl	800dae4 <_init>
 800b8cc:	1ba4      	subs	r4, r4, r6
 800b8ce:	10a4      	asrs	r4, r4, #2
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	42a5      	cmp	r5, r4
 800b8d4:	d105      	bne.n	800b8e2 <__libc_init_array+0x2e>
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8dc:	4798      	blx	r3
 800b8de:	3501      	adds	r5, #1
 800b8e0:	e7ee      	b.n	800b8c0 <__libc_init_array+0xc>
 800b8e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8e6:	4798      	blx	r3
 800b8e8:	3501      	adds	r5, #1
 800b8ea:	e7f2      	b.n	800b8d2 <__libc_init_array+0x1e>
 800b8ec:	08072e54 	.word	0x08072e54
 800b8f0:	08072e54 	.word	0x08072e54
 800b8f4:	08072e54 	.word	0x08072e54
 800b8f8:	08072e58 	.word	0x08072e58

0800b8fc <memcmp>:
 800b8fc:	b530      	push	{r4, r5, lr}
 800b8fe:	2400      	movs	r4, #0
 800b900:	42a2      	cmp	r2, r4
 800b902:	d101      	bne.n	800b908 <memcmp+0xc>
 800b904:	2000      	movs	r0, #0
 800b906:	e007      	b.n	800b918 <memcmp+0x1c>
 800b908:	5d03      	ldrb	r3, [r0, r4]
 800b90a:	3401      	adds	r4, #1
 800b90c:	190d      	adds	r5, r1, r4
 800b90e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800b912:	42ab      	cmp	r3, r5
 800b914:	d0f4      	beq.n	800b900 <memcmp+0x4>
 800b916:	1b58      	subs	r0, r3, r5
 800b918:	bd30      	pop	{r4, r5, pc}

0800b91a <memcpy>:
 800b91a:	b510      	push	{r4, lr}
 800b91c:	1e43      	subs	r3, r0, #1
 800b91e:	440a      	add	r2, r1
 800b920:	4291      	cmp	r1, r2
 800b922:	d100      	bne.n	800b926 <memcpy+0xc>
 800b924:	bd10      	pop	{r4, pc}
 800b926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b92e:	e7f7      	b.n	800b920 <memcpy+0x6>

0800b930 <memset>:
 800b930:	4402      	add	r2, r0
 800b932:	4603      	mov	r3, r0
 800b934:	4293      	cmp	r3, r2
 800b936:	d100      	bne.n	800b93a <memset+0xa>
 800b938:	4770      	bx	lr
 800b93a:	f803 1b01 	strb.w	r1, [r3], #1
 800b93e:	e7f9      	b.n	800b934 <memset+0x4>

0800b940 <iprintf>:
 800b940:	b40f      	push	{r0, r1, r2, r3}
 800b942:	4b0a      	ldr	r3, [pc, #40]	; (800b96c <iprintf+0x2c>)
 800b944:	b513      	push	{r0, r1, r4, lr}
 800b946:	681c      	ldr	r4, [r3, #0]
 800b948:	b124      	cbz	r4, 800b954 <iprintf+0x14>
 800b94a:	69a3      	ldr	r3, [r4, #24]
 800b94c:	b913      	cbnz	r3, 800b954 <iprintf+0x14>
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 fa36 	bl	800bdc0 <__sinit>
 800b954:	ab05      	add	r3, sp, #20
 800b956:	9a04      	ldr	r2, [sp, #16]
 800b958:	68a1      	ldr	r1, [r4, #8]
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 fbef 	bl	800c140 <_vfiprintf_r>
 800b962:	b002      	add	sp, #8
 800b964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b968:	b004      	add	sp, #16
 800b96a:	4770      	bx	lr
 800b96c:	2000048c 	.word	0x2000048c

0800b970 <putchar>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4b08      	ldr	r3, [pc, #32]	; (800b994 <putchar+0x24>)
 800b974:	681c      	ldr	r4, [r3, #0]
 800b976:	4605      	mov	r5, r0
 800b978:	b124      	cbz	r4, 800b984 <putchar+0x14>
 800b97a:	69a3      	ldr	r3, [r4, #24]
 800b97c:	b913      	cbnz	r3, 800b984 <putchar+0x14>
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 fa1e 	bl	800bdc0 <__sinit>
 800b984:	68a2      	ldr	r2, [r4, #8]
 800b986:	4629      	mov	r1, r5
 800b988:	4620      	mov	r0, r4
 800b98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b98e:	f000 be75 	b.w	800c67c <_putc_r>
 800b992:	bf00      	nop
 800b994:	2000048c 	.word	0x2000048c

0800b998 <_puts_r>:
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	460e      	mov	r6, r1
 800b99c:	4605      	mov	r5, r0
 800b99e:	b118      	cbz	r0, 800b9a8 <_puts_r+0x10>
 800b9a0:	6983      	ldr	r3, [r0, #24]
 800b9a2:	b90b      	cbnz	r3, 800b9a8 <_puts_r+0x10>
 800b9a4:	f000 fa0c 	bl	800bdc0 <__sinit>
 800b9a8:	69ab      	ldr	r3, [r5, #24]
 800b9aa:	68ac      	ldr	r4, [r5, #8]
 800b9ac:	b913      	cbnz	r3, 800b9b4 <_puts_r+0x1c>
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 fa06 	bl	800bdc0 <__sinit>
 800b9b4:	4b23      	ldr	r3, [pc, #140]	; (800ba44 <_puts_r+0xac>)
 800b9b6:	429c      	cmp	r4, r3
 800b9b8:	d117      	bne.n	800b9ea <_puts_r+0x52>
 800b9ba:	686c      	ldr	r4, [r5, #4]
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	071b      	lsls	r3, r3, #28
 800b9c0:	d51d      	bpl.n	800b9fe <_puts_r+0x66>
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	b1db      	cbz	r3, 800b9fe <_puts_r+0x66>
 800b9c6:	3e01      	subs	r6, #1
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	60a3      	str	r3, [r4, #8]
 800b9d2:	b9e9      	cbnz	r1, 800ba10 <_puts_r+0x78>
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	da2e      	bge.n	800ba36 <_puts_r+0x9e>
 800b9d8:	4622      	mov	r2, r4
 800b9da:	210a      	movs	r1, #10
 800b9dc:	4628      	mov	r0, r5
 800b9de:	f000 f83f 	bl	800ba60 <__swbuf_r>
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	d011      	beq.n	800ba0a <_puts_r+0x72>
 800b9e6:	200a      	movs	r0, #10
 800b9e8:	e011      	b.n	800ba0e <_puts_r+0x76>
 800b9ea:	4b17      	ldr	r3, [pc, #92]	; (800ba48 <_puts_r+0xb0>)
 800b9ec:	429c      	cmp	r4, r3
 800b9ee:	d101      	bne.n	800b9f4 <_puts_r+0x5c>
 800b9f0:	68ac      	ldr	r4, [r5, #8]
 800b9f2:	e7e3      	b.n	800b9bc <_puts_r+0x24>
 800b9f4:	4b15      	ldr	r3, [pc, #84]	; (800ba4c <_puts_r+0xb4>)
 800b9f6:	429c      	cmp	r4, r3
 800b9f8:	bf08      	it	eq
 800b9fa:	68ec      	ldreq	r4, [r5, #12]
 800b9fc:	e7de      	b.n	800b9bc <_puts_r+0x24>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	f000 f87f 	bl	800bb04 <__swsetup_r>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d0dd      	beq.n	800b9c6 <_puts_r+0x2e>
 800ba0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	da04      	bge.n	800ba1e <_puts_r+0x86>
 800ba14:	69a2      	ldr	r2, [r4, #24]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	dc06      	bgt.n	800ba28 <_puts_r+0x90>
 800ba1a:	290a      	cmp	r1, #10
 800ba1c:	d004      	beq.n	800ba28 <_puts_r+0x90>
 800ba1e:	6823      	ldr	r3, [r4, #0]
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	6022      	str	r2, [r4, #0]
 800ba24:	7019      	strb	r1, [r3, #0]
 800ba26:	e7cf      	b.n	800b9c8 <_puts_r+0x30>
 800ba28:	4622      	mov	r2, r4
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f000 f818 	bl	800ba60 <__swbuf_r>
 800ba30:	3001      	adds	r0, #1
 800ba32:	d1c9      	bne.n	800b9c8 <_puts_r+0x30>
 800ba34:	e7e9      	b.n	800ba0a <_puts_r+0x72>
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	200a      	movs	r0, #10
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	6022      	str	r2, [r4, #0]
 800ba3e:	7018      	strb	r0, [r3, #0]
 800ba40:	e7e5      	b.n	800ba0e <_puts_r+0x76>
 800ba42:	bf00      	nop
 800ba44:	08072d90 	.word	0x08072d90
 800ba48:	08072db0 	.word	0x08072db0
 800ba4c:	08072d70 	.word	0x08072d70

0800ba50 <puts>:
 800ba50:	4b02      	ldr	r3, [pc, #8]	; (800ba5c <puts+0xc>)
 800ba52:	4601      	mov	r1, r0
 800ba54:	6818      	ldr	r0, [r3, #0]
 800ba56:	f7ff bf9f 	b.w	800b998 <_puts_r>
 800ba5a:	bf00      	nop
 800ba5c:	2000048c 	.word	0x2000048c

0800ba60 <__swbuf_r>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	460e      	mov	r6, r1
 800ba64:	4614      	mov	r4, r2
 800ba66:	4605      	mov	r5, r0
 800ba68:	b118      	cbz	r0, 800ba72 <__swbuf_r+0x12>
 800ba6a:	6983      	ldr	r3, [r0, #24]
 800ba6c:	b90b      	cbnz	r3, 800ba72 <__swbuf_r+0x12>
 800ba6e:	f000 f9a7 	bl	800bdc0 <__sinit>
 800ba72:	4b21      	ldr	r3, [pc, #132]	; (800baf8 <__swbuf_r+0x98>)
 800ba74:	429c      	cmp	r4, r3
 800ba76:	d12a      	bne.n	800bace <__swbuf_r+0x6e>
 800ba78:	686c      	ldr	r4, [r5, #4]
 800ba7a:	69a3      	ldr	r3, [r4, #24]
 800ba7c:	60a3      	str	r3, [r4, #8]
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	071a      	lsls	r2, r3, #28
 800ba82:	d52e      	bpl.n	800bae2 <__swbuf_r+0x82>
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	b363      	cbz	r3, 800bae2 <__swbuf_r+0x82>
 800ba88:	6923      	ldr	r3, [r4, #16]
 800ba8a:	6820      	ldr	r0, [r4, #0]
 800ba8c:	1ac0      	subs	r0, r0, r3
 800ba8e:	6963      	ldr	r3, [r4, #20]
 800ba90:	b2f6      	uxtb	r6, r6
 800ba92:	4283      	cmp	r3, r0
 800ba94:	4637      	mov	r7, r6
 800ba96:	dc04      	bgt.n	800baa2 <__swbuf_r+0x42>
 800ba98:	4621      	mov	r1, r4
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f000 f926 	bl	800bcec <_fflush_r>
 800baa0:	bb28      	cbnz	r0, 800baee <__swbuf_r+0x8e>
 800baa2:	68a3      	ldr	r3, [r4, #8]
 800baa4:	3b01      	subs	r3, #1
 800baa6:	60a3      	str	r3, [r4, #8]
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	1c5a      	adds	r2, r3, #1
 800baac:	6022      	str	r2, [r4, #0]
 800baae:	701e      	strb	r6, [r3, #0]
 800bab0:	6963      	ldr	r3, [r4, #20]
 800bab2:	3001      	adds	r0, #1
 800bab4:	4283      	cmp	r3, r0
 800bab6:	d004      	beq.n	800bac2 <__swbuf_r+0x62>
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	07db      	lsls	r3, r3, #31
 800babc:	d519      	bpl.n	800baf2 <__swbuf_r+0x92>
 800babe:	2e0a      	cmp	r6, #10
 800bac0:	d117      	bne.n	800baf2 <__swbuf_r+0x92>
 800bac2:	4621      	mov	r1, r4
 800bac4:	4628      	mov	r0, r5
 800bac6:	f000 f911 	bl	800bcec <_fflush_r>
 800baca:	b190      	cbz	r0, 800baf2 <__swbuf_r+0x92>
 800bacc:	e00f      	b.n	800baee <__swbuf_r+0x8e>
 800bace:	4b0b      	ldr	r3, [pc, #44]	; (800bafc <__swbuf_r+0x9c>)
 800bad0:	429c      	cmp	r4, r3
 800bad2:	d101      	bne.n	800bad8 <__swbuf_r+0x78>
 800bad4:	68ac      	ldr	r4, [r5, #8]
 800bad6:	e7d0      	b.n	800ba7a <__swbuf_r+0x1a>
 800bad8:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <__swbuf_r+0xa0>)
 800bada:	429c      	cmp	r4, r3
 800badc:	bf08      	it	eq
 800bade:	68ec      	ldreq	r4, [r5, #12]
 800bae0:	e7cb      	b.n	800ba7a <__swbuf_r+0x1a>
 800bae2:	4621      	mov	r1, r4
 800bae4:	4628      	mov	r0, r5
 800bae6:	f000 f80d 	bl	800bb04 <__swsetup_r>
 800baea:	2800      	cmp	r0, #0
 800baec:	d0cc      	beq.n	800ba88 <__swbuf_r+0x28>
 800baee:	f04f 37ff 	mov.w	r7, #4294967295
 800baf2:	4638      	mov	r0, r7
 800baf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baf6:	bf00      	nop
 800baf8:	08072d90 	.word	0x08072d90
 800bafc:	08072db0 	.word	0x08072db0
 800bb00:	08072d70 	.word	0x08072d70

0800bb04 <__swsetup_r>:
 800bb04:	4b32      	ldr	r3, [pc, #200]	; (800bbd0 <__swsetup_r+0xcc>)
 800bb06:	b570      	push	{r4, r5, r6, lr}
 800bb08:	681d      	ldr	r5, [r3, #0]
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	b125      	cbz	r5, 800bb1a <__swsetup_r+0x16>
 800bb10:	69ab      	ldr	r3, [r5, #24]
 800bb12:	b913      	cbnz	r3, 800bb1a <__swsetup_r+0x16>
 800bb14:	4628      	mov	r0, r5
 800bb16:	f000 f953 	bl	800bdc0 <__sinit>
 800bb1a:	4b2e      	ldr	r3, [pc, #184]	; (800bbd4 <__swsetup_r+0xd0>)
 800bb1c:	429c      	cmp	r4, r3
 800bb1e:	d10f      	bne.n	800bb40 <__swsetup_r+0x3c>
 800bb20:	686c      	ldr	r4, [r5, #4]
 800bb22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	0715      	lsls	r5, r2, #28
 800bb2a:	d42c      	bmi.n	800bb86 <__swsetup_r+0x82>
 800bb2c:	06d0      	lsls	r0, r2, #27
 800bb2e:	d411      	bmi.n	800bb54 <__swsetup_r+0x50>
 800bb30:	2209      	movs	r2, #9
 800bb32:	6032      	str	r2, [r6, #0]
 800bb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb38:	81a3      	strh	r3, [r4, #12]
 800bb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3e:	e03e      	b.n	800bbbe <__swsetup_r+0xba>
 800bb40:	4b25      	ldr	r3, [pc, #148]	; (800bbd8 <__swsetup_r+0xd4>)
 800bb42:	429c      	cmp	r4, r3
 800bb44:	d101      	bne.n	800bb4a <__swsetup_r+0x46>
 800bb46:	68ac      	ldr	r4, [r5, #8]
 800bb48:	e7eb      	b.n	800bb22 <__swsetup_r+0x1e>
 800bb4a:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <__swsetup_r+0xd8>)
 800bb4c:	429c      	cmp	r4, r3
 800bb4e:	bf08      	it	eq
 800bb50:	68ec      	ldreq	r4, [r5, #12]
 800bb52:	e7e6      	b.n	800bb22 <__swsetup_r+0x1e>
 800bb54:	0751      	lsls	r1, r2, #29
 800bb56:	d512      	bpl.n	800bb7e <__swsetup_r+0x7a>
 800bb58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb5a:	b141      	cbz	r1, 800bb6e <__swsetup_r+0x6a>
 800bb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb60:	4299      	cmp	r1, r3
 800bb62:	d002      	beq.n	800bb6a <__swsetup_r+0x66>
 800bb64:	4630      	mov	r0, r6
 800bb66:	f000 fa19 	bl	800bf9c <_free_r>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb6e:	89a3      	ldrh	r3, [r4, #12]
 800bb70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb74:	81a3      	strh	r3, [r4, #12]
 800bb76:	2300      	movs	r3, #0
 800bb78:	6063      	str	r3, [r4, #4]
 800bb7a:	6923      	ldr	r3, [r4, #16]
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f043 0308 	orr.w	r3, r3, #8
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	6923      	ldr	r3, [r4, #16]
 800bb88:	b94b      	cbnz	r3, 800bb9e <__swsetup_r+0x9a>
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb94:	d003      	beq.n	800bb9e <__swsetup_r+0x9a>
 800bb96:	4621      	mov	r1, r4
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f000 f9bf 	bl	800bf1c <__smakebuf_r>
 800bb9e:	89a2      	ldrh	r2, [r4, #12]
 800bba0:	f012 0301 	ands.w	r3, r2, #1
 800bba4:	d00c      	beq.n	800bbc0 <__swsetup_r+0xbc>
 800bba6:	2300      	movs	r3, #0
 800bba8:	60a3      	str	r3, [r4, #8]
 800bbaa:	6963      	ldr	r3, [r4, #20]
 800bbac:	425b      	negs	r3, r3
 800bbae:	61a3      	str	r3, [r4, #24]
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	b953      	cbnz	r3, 800bbca <__swsetup_r+0xc6>
 800bbb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bbbc:	d1ba      	bne.n	800bb34 <__swsetup_r+0x30>
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	0792      	lsls	r2, r2, #30
 800bbc2:	bf58      	it	pl
 800bbc4:	6963      	ldrpl	r3, [r4, #20]
 800bbc6:	60a3      	str	r3, [r4, #8]
 800bbc8:	e7f2      	b.n	800bbb0 <__swsetup_r+0xac>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	e7f7      	b.n	800bbbe <__swsetup_r+0xba>
 800bbce:	bf00      	nop
 800bbd0:	2000048c 	.word	0x2000048c
 800bbd4:	08072d90 	.word	0x08072d90
 800bbd8:	08072db0 	.word	0x08072db0
 800bbdc:	08072d70 	.word	0x08072d70

0800bbe0 <__sflush_r>:
 800bbe0:	898a      	ldrh	r2, [r1, #12]
 800bbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	0710      	lsls	r0, r2, #28
 800bbea:	460c      	mov	r4, r1
 800bbec:	d458      	bmi.n	800bca0 <__sflush_r+0xc0>
 800bbee:	684b      	ldr	r3, [r1, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dc05      	bgt.n	800bc00 <__sflush_r+0x20>
 800bbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	dc02      	bgt.n	800bc00 <__sflush_r+0x20>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc02:	2e00      	cmp	r6, #0
 800bc04:	d0f9      	beq.n	800bbfa <__sflush_r+0x1a>
 800bc06:	2300      	movs	r3, #0
 800bc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc0c:	682f      	ldr	r7, [r5, #0]
 800bc0e:	6a21      	ldr	r1, [r4, #32]
 800bc10:	602b      	str	r3, [r5, #0]
 800bc12:	d032      	beq.n	800bc7a <__sflush_r+0x9a>
 800bc14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	075a      	lsls	r2, r3, #29
 800bc1a:	d505      	bpl.n	800bc28 <__sflush_r+0x48>
 800bc1c:	6863      	ldr	r3, [r4, #4]
 800bc1e:	1ac0      	subs	r0, r0, r3
 800bc20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc22:	b10b      	cbz	r3, 800bc28 <__sflush_r+0x48>
 800bc24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc26:	1ac0      	subs	r0, r0, r3
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc2e:	6a21      	ldr	r1, [r4, #32]
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b0      	blx	r6
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	d106      	bne.n	800bc48 <__sflush_r+0x68>
 800bc3a:	6829      	ldr	r1, [r5, #0]
 800bc3c:	291d      	cmp	r1, #29
 800bc3e:	d848      	bhi.n	800bcd2 <__sflush_r+0xf2>
 800bc40:	4a29      	ldr	r2, [pc, #164]	; (800bce8 <__sflush_r+0x108>)
 800bc42:	40ca      	lsrs	r2, r1
 800bc44:	07d6      	lsls	r6, r2, #31
 800bc46:	d544      	bpl.n	800bcd2 <__sflush_r+0xf2>
 800bc48:	2200      	movs	r2, #0
 800bc4a:	6062      	str	r2, [r4, #4]
 800bc4c:	04d9      	lsls	r1, r3, #19
 800bc4e:	6922      	ldr	r2, [r4, #16]
 800bc50:	6022      	str	r2, [r4, #0]
 800bc52:	d504      	bpl.n	800bc5e <__sflush_r+0x7e>
 800bc54:	1c42      	adds	r2, r0, #1
 800bc56:	d101      	bne.n	800bc5c <__sflush_r+0x7c>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b903      	cbnz	r3, 800bc5e <__sflush_r+0x7e>
 800bc5c:	6560      	str	r0, [r4, #84]	; 0x54
 800bc5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc60:	602f      	str	r7, [r5, #0]
 800bc62:	2900      	cmp	r1, #0
 800bc64:	d0c9      	beq.n	800bbfa <__sflush_r+0x1a>
 800bc66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc6a:	4299      	cmp	r1, r3
 800bc6c:	d002      	beq.n	800bc74 <__sflush_r+0x94>
 800bc6e:	4628      	mov	r0, r5
 800bc70:	f000 f994 	bl	800bf9c <_free_r>
 800bc74:	2000      	movs	r0, #0
 800bc76:	6360      	str	r0, [r4, #52]	; 0x34
 800bc78:	e7c0      	b.n	800bbfc <__sflush_r+0x1c>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b0      	blx	r6
 800bc80:	1c41      	adds	r1, r0, #1
 800bc82:	d1c8      	bne.n	800bc16 <__sflush_r+0x36>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0c5      	beq.n	800bc16 <__sflush_r+0x36>
 800bc8a:	2b1d      	cmp	r3, #29
 800bc8c:	d001      	beq.n	800bc92 <__sflush_r+0xb2>
 800bc8e:	2b16      	cmp	r3, #22
 800bc90:	d101      	bne.n	800bc96 <__sflush_r+0xb6>
 800bc92:	602f      	str	r7, [r5, #0]
 800bc94:	e7b1      	b.n	800bbfa <__sflush_r+0x1a>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc9c:	81a3      	strh	r3, [r4, #12]
 800bc9e:	e7ad      	b.n	800bbfc <__sflush_r+0x1c>
 800bca0:	690f      	ldr	r7, [r1, #16]
 800bca2:	2f00      	cmp	r7, #0
 800bca4:	d0a9      	beq.n	800bbfa <__sflush_r+0x1a>
 800bca6:	0793      	lsls	r3, r2, #30
 800bca8:	680e      	ldr	r6, [r1, #0]
 800bcaa:	bf08      	it	eq
 800bcac:	694b      	ldreq	r3, [r1, #20]
 800bcae:	600f      	str	r7, [r1, #0]
 800bcb0:	bf18      	it	ne
 800bcb2:	2300      	movne	r3, #0
 800bcb4:	eba6 0807 	sub.w	r8, r6, r7
 800bcb8:	608b      	str	r3, [r1, #8]
 800bcba:	f1b8 0f00 	cmp.w	r8, #0
 800bcbe:	dd9c      	ble.n	800bbfa <__sflush_r+0x1a>
 800bcc0:	4643      	mov	r3, r8
 800bcc2:	463a      	mov	r2, r7
 800bcc4:	6a21      	ldr	r1, [r4, #32]
 800bcc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcc8:	4628      	mov	r0, r5
 800bcca:	47b0      	blx	r6
 800bccc:	2800      	cmp	r0, #0
 800bcce:	dc06      	bgt.n	800bcde <__sflush_r+0xfe>
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcdc:	e78e      	b.n	800bbfc <__sflush_r+0x1c>
 800bcde:	4407      	add	r7, r0
 800bce0:	eba8 0800 	sub.w	r8, r8, r0
 800bce4:	e7e9      	b.n	800bcba <__sflush_r+0xda>
 800bce6:	bf00      	nop
 800bce8:	20400001 	.word	0x20400001

0800bcec <_fflush_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	690b      	ldr	r3, [r1, #16]
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	b1db      	cbz	r3, 800bd2e <_fflush_r+0x42>
 800bcf6:	b118      	cbz	r0, 800bd00 <_fflush_r+0x14>
 800bcf8:	6983      	ldr	r3, [r0, #24]
 800bcfa:	b90b      	cbnz	r3, 800bd00 <_fflush_r+0x14>
 800bcfc:	f000 f860 	bl	800bdc0 <__sinit>
 800bd00:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <_fflush_r+0x48>)
 800bd02:	429c      	cmp	r4, r3
 800bd04:	d109      	bne.n	800bd1a <_fflush_r+0x2e>
 800bd06:	686c      	ldr	r4, [r5, #4]
 800bd08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd0c:	b17b      	cbz	r3, 800bd2e <_fflush_r+0x42>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4628      	mov	r0, r5
 800bd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd16:	f7ff bf63 	b.w	800bbe0 <__sflush_r>
 800bd1a:	4b07      	ldr	r3, [pc, #28]	; (800bd38 <_fflush_r+0x4c>)
 800bd1c:	429c      	cmp	r4, r3
 800bd1e:	d101      	bne.n	800bd24 <_fflush_r+0x38>
 800bd20:	68ac      	ldr	r4, [r5, #8]
 800bd22:	e7f1      	b.n	800bd08 <_fflush_r+0x1c>
 800bd24:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <_fflush_r+0x50>)
 800bd26:	429c      	cmp	r4, r3
 800bd28:	bf08      	it	eq
 800bd2a:	68ec      	ldreq	r4, [r5, #12]
 800bd2c:	e7ec      	b.n	800bd08 <_fflush_r+0x1c>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	bd38      	pop	{r3, r4, r5, pc}
 800bd32:	bf00      	nop
 800bd34:	08072d90 	.word	0x08072d90
 800bd38:	08072db0 	.word	0x08072db0
 800bd3c:	08072d70 	.word	0x08072d70

0800bd40 <std>:
 800bd40:	2300      	movs	r3, #0
 800bd42:	b510      	push	{r4, lr}
 800bd44:	4604      	mov	r4, r0
 800bd46:	e9c0 3300 	strd	r3, r3, [r0]
 800bd4a:	6083      	str	r3, [r0, #8]
 800bd4c:	8181      	strh	r1, [r0, #12]
 800bd4e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd50:	81c2      	strh	r2, [r0, #14]
 800bd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd56:	6183      	str	r3, [r0, #24]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	2208      	movs	r2, #8
 800bd5c:	305c      	adds	r0, #92	; 0x5c
 800bd5e:	f7ff fde7 	bl	800b930 <memset>
 800bd62:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <std+0x38>)
 800bd64:	6263      	str	r3, [r4, #36]	; 0x24
 800bd66:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <std+0x3c>)
 800bd68:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <std+0x40>)
 800bd6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <std+0x44>)
 800bd70:	6224      	str	r4, [r4, #32]
 800bd72:	6323      	str	r3, [r4, #48]	; 0x30
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	bf00      	nop
 800bd78:	0800c709 	.word	0x0800c709
 800bd7c:	0800c72b 	.word	0x0800c72b
 800bd80:	0800c763 	.word	0x0800c763
 800bd84:	0800c787 	.word	0x0800c787

0800bd88 <_cleanup_r>:
 800bd88:	4901      	ldr	r1, [pc, #4]	; (800bd90 <_cleanup_r+0x8>)
 800bd8a:	f000 b885 	b.w	800be98 <_fwalk_reent>
 800bd8e:	bf00      	nop
 800bd90:	0800bced 	.word	0x0800bced

0800bd94 <__sfmoreglue>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	1e4a      	subs	r2, r1, #1
 800bd98:	2568      	movs	r5, #104	; 0x68
 800bd9a:	4355      	muls	r5, r2
 800bd9c:	460e      	mov	r6, r1
 800bd9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bda2:	f000 f949 	bl	800c038 <_malloc_r>
 800bda6:	4604      	mov	r4, r0
 800bda8:	b140      	cbz	r0, 800bdbc <__sfmoreglue+0x28>
 800bdaa:	2100      	movs	r1, #0
 800bdac:	e9c0 1600 	strd	r1, r6, [r0]
 800bdb0:	300c      	adds	r0, #12
 800bdb2:	60a0      	str	r0, [r4, #8]
 800bdb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdb8:	f7ff fdba 	bl	800b930 <memset>
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}

0800bdc0 <__sinit>:
 800bdc0:	6983      	ldr	r3, [r0, #24]
 800bdc2:	b510      	push	{r4, lr}
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	bb33      	cbnz	r3, 800be16 <__sinit+0x56>
 800bdc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bdcc:	6503      	str	r3, [r0, #80]	; 0x50
 800bdce:	4b12      	ldr	r3, [pc, #72]	; (800be18 <__sinit+0x58>)
 800bdd0:	4a12      	ldr	r2, [pc, #72]	; (800be1c <__sinit+0x5c>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6282      	str	r2, [r0, #40]	; 0x28
 800bdd6:	4298      	cmp	r0, r3
 800bdd8:	bf04      	itt	eq
 800bdda:	2301      	moveq	r3, #1
 800bddc:	6183      	streq	r3, [r0, #24]
 800bdde:	f000 f81f 	bl	800be20 <__sfp>
 800bde2:	6060      	str	r0, [r4, #4]
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 f81b 	bl	800be20 <__sfp>
 800bdea:	60a0      	str	r0, [r4, #8]
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 f817 	bl	800be20 <__sfp>
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	60e0      	str	r0, [r4, #12]
 800bdf6:	2104      	movs	r1, #4
 800bdf8:	6860      	ldr	r0, [r4, #4]
 800bdfa:	f7ff ffa1 	bl	800bd40 <std>
 800bdfe:	2201      	movs	r2, #1
 800be00:	2109      	movs	r1, #9
 800be02:	68a0      	ldr	r0, [r4, #8]
 800be04:	f7ff ff9c 	bl	800bd40 <std>
 800be08:	2202      	movs	r2, #2
 800be0a:	2112      	movs	r1, #18
 800be0c:	68e0      	ldr	r0, [r4, #12]
 800be0e:	f7ff ff97 	bl	800bd40 <std>
 800be12:	2301      	movs	r3, #1
 800be14:	61a3      	str	r3, [r4, #24]
 800be16:	bd10      	pop	{r4, pc}
 800be18:	08072d6c 	.word	0x08072d6c
 800be1c:	0800bd89 	.word	0x0800bd89

0800be20 <__sfp>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	4b1b      	ldr	r3, [pc, #108]	; (800be90 <__sfp+0x70>)
 800be24:	681e      	ldr	r6, [r3, #0]
 800be26:	69b3      	ldr	r3, [r6, #24]
 800be28:	4607      	mov	r7, r0
 800be2a:	b913      	cbnz	r3, 800be32 <__sfp+0x12>
 800be2c:	4630      	mov	r0, r6
 800be2e:	f7ff ffc7 	bl	800bdc0 <__sinit>
 800be32:	3648      	adds	r6, #72	; 0x48
 800be34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be38:	3b01      	subs	r3, #1
 800be3a:	d503      	bpl.n	800be44 <__sfp+0x24>
 800be3c:	6833      	ldr	r3, [r6, #0]
 800be3e:	b133      	cbz	r3, 800be4e <__sfp+0x2e>
 800be40:	6836      	ldr	r6, [r6, #0]
 800be42:	e7f7      	b.n	800be34 <__sfp+0x14>
 800be44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be48:	b16d      	cbz	r5, 800be66 <__sfp+0x46>
 800be4a:	3468      	adds	r4, #104	; 0x68
 800be4c:	e7f4      	b.n	800be38 <__sfp+0x18>
 800be4e:	2104      	movs	r1, #4
 800be50:	4638      	mov	r0, r7
 800be52:	f7ff ff9f 	bl	800bd94 <__sfmoreglue>
 800be56:	6030      	str	r0, [r6, #0]
 800be58:	2800      	cmp	r0, #0
 800be5a:	d1f1      	bne.n	800be40 <__sfp+0x20>
 800be5c:	230c      	movs	r3, #12
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	4604      	mov	r4, r0
 800be62:	4620      	mov	r0, r4
 800be64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be66:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <__sfp+0x74>)
 800be68:	6665      	str	r5, [r4, #100]	; 0x64
 800be6a:	e9c4 5500 	strd	r5, r5, [r4]
 800be6e:	60a5      	str	r5, [r4, #8]
 800be70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800be74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800be78:	2208      	movs	r2, #8
 800be7a:	4629      	mov	r1, r5
 800be7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be80:	f7ff fd56 	bl	800b930 <memset>
 800be84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be8c:	e7e9      	b.n	800be62 <__sfp+0x42>
 800be8e:	bf00      	nop
 800be90:	08072d6c 	.word	0x08072d6c
 800be94:	ffff0001 	.word	0xffff0001

0800be98 <_fwalk_reent>:
 800be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be9c:	4680      	mov	r8, r0
 800be9e:	4689      	mov	r9, r1
 800bea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bea4:	2600      	movs	r6, #0
 800bea6:	b914      	cbnz	r4, 800beae <_fwalk_reent+0x16>
 800bea8:	4630      	mov	r0, r6
 800beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800beb2:	3f01      	subs	r7, #1
 800beb4:	d501      	bpl.n	800beba <_fwalk_reent+0x22>
 800beb6:	6824      	ldr	r4, [r4, #0]
 800beb8:	e7f5      	b.n	800bea6 <_fwalk_reent+0xe>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d907      	bls.n	800bed0 <_fwalk_reent+0x38>
 800bec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bec4:	3301      	adds	r3, #1
 800bec6:	d003      	beq.n	800bed0 <_fwalk_reent+0x38>
 800bec8:	4629      	mov	r1, r5
 800beca:	4640      	mov	r0, r8
 800becc:	47c8      	blx	r9
 800bece:	4306      	orrs	r6, r0
 800bed0:	3568      	adds	r5, #104	; 0x68
 800bed2:	e7ee      	b.n	800beb2 <_fwalk_reent+0x1a>

0800bed4 <__swhatbuf_r>:
 800bed4:	b570      	push	{r4, r5, r6, lr}
 800bed6:	460e      	mov	r6, r1
 800bed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bedc:	2900      	cmp	r1, #0
 800bede:	b096      	sub	sp, #88	; 0x58
 800bee0:	4614      	mov	r4, r2
 800bee2:	461d      	mov	r5, r3
 800bee4:	da07      	bge.n	800bef6 <__swhatbuf_r+0x22>
 800bee6:	2300      	movs	r3, #0
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	89b3      	ldrh	r3, [r6, #12]
 800beec:	061a      	lsls	r2, r3, #24
 800beee:	d410      	bmi.n	800bf12 <__swhatbuf_r+0x3e>
 800bef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bef4:	e00e      	b.n	800bf14 <__swhatbuf_r+0x40>
 800bef6:	466a      	mov	r2, sp
 800bef8:	f000 fc6c 	bl	800c7d4 <_fstat_r>
 800befc:	2800      	cmp	r0, #0
 800befe:	dbf2      	blt.n	800bee6 <__swhatbuf_r+0x12>
 800bf00:	9a01      	ldr	r2, [sp, #4]
 800bf02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf0a:	425a      	negs	r2, r3
 800bf0c:	415a      	adcs	r2, r3
 800bf0e:	602a      	str	r2, [r5, #0]
 800bf10:	e7ee      	b.n	800bef0 <__swhatbuf_r+0x1c>
 800bf12:	2340      	movs	r3, #64	; 0x40
 800bf14:	2000      	movs	r0, #0
 800bf16:	6023      	str	r3, [r4, #0]
 800bf18:	b016      	add	sp, #88	; 0x58
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}

0800bf1c <__smakebuf_r>:
 800bf1c:	898b      	ldrh	r3, [r1, #12]
 800bf1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf20:	079d      	lsls	r5, r3, #30
 800bf22:	4606      	mov	r6, r0
 800bf24:	460c      	mov	r4, r1
 800bf26:	d507      	bpl.n	800bf38 <__smakebuf_r+0x1c>
 800bf28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	6123      	str	r3, [r4, #16]
 800bf30:	2301      	movs	r3, #1
 800bf32:	6163      	str	r3, [r4, #20]
 800bf34:	b002      	add	sp, #8
 800bf36:	bd70      	pop	{r4, r5, r6, pc}
 800bf38:	ab01      	add	r3, sp, #4
 800bf3a:	466a      	mov	r2, sp
 800bf3c:	f7ff ffca 	bl	800bed4 <__swhatbuf_r>
 800bf40:	9900      	ldr	r1, [sp, #0]
 800bf42:	4605      	mov	r5, r0
 800bf44:	4630      	mov	r0, r6
 800bf46:	f000 f877 	bl	800c038 <_malloc_r>
 800bf4a:	b948      	cbnz	r0, 800bf60 <__smakebuf_r+0x44>
 800bf4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf50:	059a      	lsls	r2, r3, #22
 800bf52:	d4ef      	bmi.n	800bf34 <__smakebuf_r+0x18>
 800bf54:	f023 0303 	bic.w	r3, r3, #3
 800bf58:	f043 0302 	orr.w	r3, r3, #2
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	e7e3      	b.n	800bf28 <__smakebuf_r+0xc>
 800bf60:	4b0d      	ldr	r3, [pc, #52]	; (800bf98 <__smakebuf_r+0x7c>)
 800bf62:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	6020      	str	r0, [r4, #0]
 800bf68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf6c:	81a3      	strh	r3, [r4, #12]
 800bf6e:	9b00      	ldr	r3, [sp, #0]
 800bf70:	6163      	str	r3, [r4, #20]
 800bf72:	9b01      	ldr	r3, [sp, #4]
 800bf74:	6120      	str	r0, [r4, #16]
 800bf76:	b15b      	cbz	r3, 800bf90 <__smakebuf_r+0x74>
 800bf78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f000 fc3b 	bl	800c7f8 <_isatty_r>
 800bf82:	b128      	cbz	r0, 800bf90 <__smakebuf_r+0x74>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	f023 0303 	bic.w	r3, r3, #3
 800bf8a:	f043 0301 	orr.w	r3, r3, #1
 800bf8e:	81a3      	strh	r3, [r4, #12]
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	431d      	orrs	r5, r3
 800bf94:	81a5      	strh	r5, [r4, #12]
 800bf96:	e7cd      	b.n	800bf34 <__smakebuf_r+0x18>
 800bf98:	0800bd89 	.word	0x0800bd89

0800bf9c <_free_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	2900      	cmp	r1, #0
 800bfa2:	d045      	beq.n	800c030 <_free_r+0x94>
 800bfa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfa8:	1f0c      	subs	r4, r1, #4
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bfb8      	it	lt
 800bfae:	18e4      	addlt	r4, r4, r3
 800bfb0:	f000 fc44 	bl	800c83c <__malloc_lock>
 800bfb4:	4a1f      	ldr	r2, [pc, #124]	; (800c034 <_free_r+0x98>)
 800bfb6:	6813      	ldr	r3, [r2, #0]
 800bfb8:	4610      	mov	r0, r2
 800bfba:	b933      	cbnz	r3, 800bfca <_free_r+0x2e>
 800bfbc:	6063      	str	r3, [r4, #4]
 800bfbe:	6014      	str	r4, [r2, #0]
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfc6:	f000 bc3a 	b.w	800c83e <__malloc_unlock>
 800bfca:	42a3      	cmp	r3, r4
 800bfcc:	d90c      	bls.n	800bfe8 <_free_r+0x4c>
 800bfce:	6821      	ldr	r1, [r4, #0]
 800bfd0:	1862      	adds	r2, r4, r1
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	bf04      	itt	eq
 800bfd6:	681a      	ldreq	r2, [r3, #0]
 800bfd8:	685b      	ldreq	r3, [r3, #4]
 800bfda:	6063      	str	r3, [r4, #4]
 800bfdc:	bf04      	itt	eq
 800bfde:	1852      	addeq	r2, r2, r1
 800bfe0:	6022      	streq	r2, [r4, #0]
 800bfe2:	6004      	str	r4, [r0, #0]
 800bfe4:	e7ec      	b.n	800bfc0 <_free_r+0x24>
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	685a      	ldr	r2, [r3, #4]
 800bfea:	b10a      	cbz	r2, 800bff0 <_free_r+0x54>
 800bfec:	42a2      	cmp	r2, r4
 800bfee:	d9fa      	bls.n	800bfe6 <_free_r+0x4a>
 800bff0:	6819      	ldr	r1, [r3, #0]
 800bff2:	1858      	adds	r0, r3, r1
 800bff4:	42a0      	cmp	r0, r4
 800bff6:	d10b      	bne.n	800c010 <_free_r+0x74>
 800bff8:	6820      	ldr	r0, [r4, #0]
 800bffa:	4401      	add	r1, r0
 800bffc:	1858      	adds	r0, r3, r1
 800bffe:	4282      	cmp	r2, r0
 800c000:	6019      	str	r1, [r3, #0]
 800c002:	d1dd      	bne.n	800bfc0 <_free_r+0x24>
 800c004:	6810      	ldr	r0, [r2, #0]
 800c006:	6852      	ldr	r2, [r2, #4]
 800c008:	605a      	str	r2, [r3, #4]
 800c00a:	4401      	add	r1, r0
 800c00c:	6019      	str	r1, [r3, #0]
 800c00e:	e7d7      	b.n	800bfc0 <_free_r+0x24>
 800c010:	d902      	bls.n	800c018 <_free_r+0x7c>
 800c012:	230c      	movs	r3, #12
 800c014:	602b      	str	r3, [r5, #0]
 800c016:	e7d3      	b.n	800bfc0 <_free_r+0x24>
 800c018:	6820      	ldr	r0, [r4, #0]
 800c01a:	1821      	adds	r1, r4, r0
 800c01c:	428a      	cmp	r2, r1
 800c01e:	bf04      	itt	eq
 800c020:	6811      	ldreq	r1, [r2, #0]
 800c022:	6852      	ldreq	r2, [r2, #4]
 800c024:	6062      	str	r2, [r4, #4]
 800c026:	bf04      	itt	eq
 800c028:	1809      	addeq	r1, r1, r0
 800c02a:	6021      	streq	r1, [r4, #0]
 800c02c:	605c      	str	r4, [r3, #4]
 800c02e:	e7c7      	b.n	800bfc0 <_free_r+0x24>
 800c030:	bd38      	pop	{r3, r4, r5, pc}
 800c032:	bf00      	nop
 800c034:	200019fc 	.word	0x200019fc

0800c038 <_malloc_r>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	1ccd      	adds	r5, r1, #3
 800c03c:	f025 0503 	bic.w	r5, r5, #3
 800c040:	3508      	adds	r5, #8
 800c042:	2d0c      	cmp	r5, #12
 800c044:	bf38      	it	cc
 800c046:	250c      	movcc	r5, #12
 800c048:	2d00      	cmp	r5, #0
 800c04a:	4606      	mov	r6, r0
 800c04c:	db01      	blt.n	800c052 <_malloc_r+0x1a>
 800c04e:	42a9      	cmp	r1, r5
 800c050:	d903      	bls.n	800c05a <_malloc_r+0x22>
 800c052:	230c      	movs	r3, #12
 800c054:	6033      	str	r3, [r6, #0]
 800c056:	2000      	movs	r0, #0
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	f000 fbef 	bl	800c83c <__malloc_lock>
 800c05e:	4a21      	ldr	r2, [pc, #132]	; (800c0e4 <_malloc_r+0xac>)
 800c060:	6814      	ldr	r4, [r2, #0]
 800c062:	4621      	mov	r1, r4
 800c064:	b991      	cbnz	r1, 800c08c <_malloc_r+0x54>
 800c066:	4c20      	ldr	r4, [pc, #128]	; (800c0e8 <_malloc_r+0xb0>)
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	b91b      	cbnz	r3, 800c074 <_malloc_r+0x3c>
 800c06c:	4630      	mov	r0, r6
 800c06e:	f000 fb3b 	bl	800c6e8 <_sbrk_r>
 800c072:	6020      	str	r0, [r4, #0]
 800c074:	4629      	mov	r1, r5
 800c076:	4630      	mov	r0, r6
 800c078:	f000 fb36 	bl	800c6e8 <_sbrk_r>
 800c07c:	1c43      	adds	r3, r0, #1
 800c07e:	d124      	bne.n	800c0ca <_malloc_r+0x92>
 800c080:	230c      	movs	r3, #12
 800c082:	6033      	str	r3, [r6, #0]
 800c084:	4630      	mov	r0, r6
 800c086:	f000 fbda 	bl	800c83e <__malloc_unlock>
 800c08a:	e7e4      	b.n	800c056 <_malloc_r+0x1e>
 800c08c:	680b      	ldr	r3, [r1, #0]
 800c08e:	1b5b      	subs	r3, r3, r5
 800c090:	d418      	bmi.n	800c0c4 <_malloc_r+0x8c>
 800c092:	2b0b      	cmp	r3, #11
 800c094:	d90f      	bls.n	800c0b6 <_malloc_r+0x7e>
 800c096:	600b      	str	r3, [r1, #0]
 800c098:	50cd      	str	r5, [r1, r3]
 800c09a:	18cc      	adds	r4, r1, r3
 800c09c:	4630      	mov	r0, r6
 800c09e:	f000 fbce 	bl	800c83e <__malloc_unlock>
 800c0a2:	f104 000b 	add.w	r0, r4, #11
 800c0a6:	1d23      	adds	r3, r4, #4
 800c0a8:	f020 0007 	bic.w	r0, r0, #7
 800c0ac:	1ac3      	subs	r3, r0, r3
 800c0ae:	d0d3      	beq.n	800c058 <_malloc_r+0x20>
 800c0b0:	425a      	negs	r2, r3
 800c0b2:	50e2      	str	r2, [r4, r3]
 800c0b4:	e7d0      	b.n	800c058 <_malloc_r+0x20>
 800c0b6:	428c      	cmp	r4, r1
 800c0b8:	684b      	ldr	r3, [r1, #4]
 800c0ba:	bf16      	itet	ne
 800c0bc:	6063      	strne	r3, [r4, #4]
 800c0be:	6013      	streq	r3, [r2, #0]
 800c0c0:	460c      	movne	r4, r1
 800c0c2:	e7eb      	b.n	800c09c <_malloc_r+0x64>
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	6849      	ldr	r1, [r1, #4]
 800c0c8:	e7cc      	b.n	800c064 <_malloc_r+0x2c>
 800c0ca:	1cc4      	adds	r4, r0, #3
 800c0cc:	f024 0403 	bic.w	r4, r4, #3
 800c0d0:	42a0      	cmp	r0, r4
 800c0d2:	d005      	beq.n	800c0e0 <_malloc_r+0xa8>
 800c0d4:	1a21      	subs	r1, r4, r0
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f000 fb06 	bl	800c6e8 <_sbrk_r>
 800c0dc:	3001      	adds	r0, #1
 800c0de:	d0cf      	beq.n	800c080 <_malloc_r+0x48>
 800c0e0:	6025      	str	r5, [r4, #0]
 800c0e2:	e7db      	b.n	800c09c <_malloc_r+0x64>
 800c0e4:	200019fc 	.word	0x200019fc
 800c0e8:	20001a00 	.word	0x20001a00

0800c0ec <__sfputc_r>:
 800c0ec:	6893      	ldr	r3, [r2, #8]
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	b410      	push	{r4}
 800c0f4:	6093      	str	r3, [r2, #8]
 800c0f6:	da08      	bge.n	800c10a <__sfputc_r+0x1e>
 800c0f8:	6994      	ldr	r4, [r2, #24]
 800c0fa:	42a3      	cmp	r3, r4
 800c0fc:	db01      	blt.n	800c102 <__sfputc_r+0x16>
 800c0fe:	290a      	cmp	r1, #10
 800c100:	d103      	bne.n	800c10a <__sfputc_r+0x1e>
 800c102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c106:	f7ff bcab 	b.w	800ba60 <__swbuf_r>
 800c10a:	6813      	ldr	r3, [r2, #0]
 800c10c:	1c58      	adds	r0, r3, #1
 800c10e:	6010      	str	r0, [r2, #0]
 800c110:	7019      	strb	r1, [r3, #0]
 800c112:	4608      	mov	r0, r1
 800c114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <__sfputs_r>:
 800c11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11c:	4606      	mov	r6, r0
 800c11e:	460f      	mov	r7, r1
 800c120:	4614      	mov	r4, r2
 800c122:	18d5      	adds	r5, r2, r3
 800c124:	42ac      	cmp	r4, r5
 800c126:	d101      	bne.n	800c12c <__sfputs_r+0x12>
 800c128:	2000      	movs	r0, #0
 800c12a:	e007      	b.n	800c13c <__sfputs_r+0x22>
 800c12c:	463a      	mov	r2, r7
 800c12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c132:	4630      	mov	r0, r6
 800c134:	f7ff ffda 	bl	800c0ec <__sfputc_r>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d1f3      	bne.n	800c124 <__sfputs_r+0xa>
 800c13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c140 <_vfiprintf_r>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	460c      	mov	r4, r1
 800c146:	b09d      	sub	sp, #116	; 0x74
 800c148:	4617      	mov	r7, r2
 800c14a:	461d      	mov	r5, r3
 800c14c:	4606      	mov	r6, r0
 800c14e:	b118      	cbz	r0, 800c158 <_vfiprintf_r+0x18>
 800c150:	6983      	ldr	r3, [r0, #24]
 800c152:	b90b      	cbnz	r3, 800c158 <_vfiprintf_r+0x18>
 800c154:	f7ff fe34 	bl	800bdc0 <__sinit>
 800c158:	4b7c      	ldr	r3, [pc, #496]	; (800c34c <_vfiprintf_r+0x20c>)
 800c15a:	429c      	cmp	r4, r3
 800c15c:	d158      	bne.n	800c210 <_vfiprintf_r+0xd0>
 800c15e:	6874      	ldr	r4, [r6, #4]
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	0718      	lsls	r0, r3, #28
 800c164:	d55e      	bpl.n	800c224 <_vfiprintf_r+0xe4>
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d05b      	beq.n	800c224 <_vfiprintf_r+0xe4>
 800c16c:	2300      	movs	r3, #0
 800c16e:	9309      	str	r3, [sp, #36]	; 0x24
 800c170:	2320      	movs	r3, #32
 800c172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c176:	2330      	movs	r3, #48	; 0x30
 800c178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c17c:	9503      	str	r5, [sp, #12]
 800c17e:	f04f 0b01 	mov.w	fp, #1
 800c182:	46b8      	mov	r8, r7
 800c184:	4645      	mov	r5, r8
 800c186:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c18a:	b10b      	cbz	r3, 800c190 <_vfiprintf_r+0x50>
 800c18c:	2b25      	cmp	r3, #37	; 0x25
 800c18e:	d154      	bne.n	800c23a <_vfiprintf_r+0xfa>
 800c190:	ebb8 0a07 	subs.w	sl, r8, r7
 800c194:	d00b      	beq.n	800c1ae <_vfiprintf_r+0x6e>
 800c196:	4653      	mov	r3, sl
 800c198:	463a      	mov	r2, r7
 800c19a:	4621      	mov	r1, r4
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff ffbc 	bl	800c11a <__sfputs_r>
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	f000 80c2 	beq.w	800c32c <_vfiprintf_r+0x1ec>
 800c1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1aa:	4453      	add	r3, sl
 800c1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ae:	f898 3000 	ldrb.w	r3, [r8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 80ba 	beq.w	800c32c <_vfiprintf_r+0x1ec>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c1be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	9307      	str	r3, [sp, #28]
 800c1c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c1cc:	46a8      	mov	r8, r5
 800c1ce:	2205      	movs	r2, #5
 800c1d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c1d4:	485e      	ldr	r0, [pc, #376]	; (800c350 <_vfiprintf_r+0x210>)
 800c1d6:	f7f7 fcbb 	bl	8003b50 <memchr>
 800c1da:	9b04      	ldr	r3, [sp, #16]
 800c1dc:	bb78      	cbnz	r0, 800c23e <_vfiprintf_r+0xfe>
 800c1de:	06d9      	lsls	r1, r3, #27
 800c1e0:	bf44      	itt	mi
 800c1e2:	2220      	movmi	r2, #32
 800c1e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1e8:	071a      	lsls	r2, r3, #28
 800c1ea:	bf44      	itt	mi
 800c1ec:	222b      	movmi	r2, #43	; 0x2b
 800c1ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1f2:	782a      	ldrb	r2, [r5, #0]
 800c1f4:	2a2a      	cmp	r2, #42	; 0x2a
 800c1f6:	d02a      	beq.n	800c24e <_vfiprintf_r+0x10e>
 800c1f8:	9a07      	ldr	r2, [sp, #28]
 800c1fa:	46a8      	mov	r8, r5
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	250a      	movs	r5, #10
 800c200:	4641      	mov	r1, r8
 800c202:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c206:	3b30      	subs	r3, #48	; 0x30
 800c208:	2b09      	cmp	r3, #9
 800c20a:	d969      	bls.n	800c2e0 <_vfiprintf_r+0x1a0>
 800c20c:	b360      	cbz	r0, 800c268 <_vfiprintf_r+0x128>
 800c20e:	e024      	b.n	800c25a <_vfiprintf_r+0x11a>
 800c210:	4b50      	ldr	r3, [pc, #320]	; (800c354 <_vfiprintf_r+0x214>)
 800c212:	429c      	cmp	r4, r3
 800c214:	d101      	bne.n	800c21a <_vfiprintf_r+0xda>
 800c216:	68b4      	ldr	r4, [r6, #8]
 800c218:	e7a2      	b.n	800c160 <_vfiprintf_r+0x20>
 800c21a:	4b4f      	ldr	r3, [pc, #316]	; (800c358 <_vfiprintf_r+0x218>)
 800c21c:	429c      	cmp	r4, r3
 800c21e:	bf08      	it	eq
 800c220:	68f4      	ldreq	r4, [r6, #12]
 800c222:	e79d      	b.n	800c160 <_vfiprintf_r+0x20>
 800c224:	4621      	mov	r1, r4
 800c226:	4630      	mov	r0, r6
 800c228:	f7ff fc6c 	bl	800bb04 <__swsetup_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d09d      	beq.n	800c16c <_vfiprintf_r+0x2c>
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	b01d      	add	sp, #116	; 0x74
 800c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23a:	46a8      	mov	r8, r5
 800c23c:	e7a2      	b.n	800c184 <_vfiprintf_r+0x44>
 800c23e:	4a44      	ldr	r2, [pc, #272]	; (800c350 <_vfiprintf_r+0x210>)
 800c240:	1a80      	subs	r0, r0, r2
 800c242:	fa0b f000 	lsl.w	r0, fp, r0
 800c246:	4318      	orrs	r0, r3
 800c248:	9004      	str	r0, [sp, #16]
 800c24a:	4645      	mov	r5, r8
 800c24c:	e7be      	b.n	800c1cc <_vfiprintf_r+0x8c>
 800c24e:	9a03      	ldr	r2, [sp, #12]
 800c250:	1d11      	adds	r1, r2, #4
 800c252:	6812      	ldr	r2, [r2, #0]
 800c254:	9103      	str	r1, [sp, #12]
 800c256:	2a00      	cmp	r2, #0
 800c258:	db01      	blt.n	800c25e <_vfiprintf_r+0x11e>
 800c25a:	9207      	str	r2, [sp, #28]
 800c25c:	e004      	b.n	800c268 <_vfiprintf_r+0x128>
 800c25e:	4252      	negs	r2, r2
 800c260:	f043 0302 	orr.w	r3, r3, #2
 800c264:	9207      	str	r2, [sp, #28]
 800c266:	9304      	str	r3, [sp, #16]
 800c268:	f898 3000 	ldrb.w	r3, [r8]
 800c26c:	2b2e      	cmp	r3, #46	; 0x2e
 800c26e:	d10e      	bne.n	800c28e <_vfiprintf_r+0x14e>
 800c270:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c274:	2b2a      	cmp	r3, #42	; 0x2a
 800c276:	d138      	bne.n	800c2ea <_vfiprintf_r+0x1aa>
 800c278:	9b03      	ldr	r3, [sp, #12]
 800c27a:	1d1a      	adds	r2, r3, #4
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	9203      	str	r2, [sp, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	bfb8      	it	lt
 800c284:	f04f 33ff 	movlt.w	r3, #4294967295
 800c288:	f108 0802 	add.w	r8, r8, #2
 800c28c:	9305      	str	r3, [sp, #20]
 800c28e:	4d33      	ldr	r5, [pc, #204]	; (800c35c <_vfiprintf_r+0x21c>)
 800c290:	f898 1000 	ldrb.w	r1, [r8]
 800c294:	2203      	movs	r2, #3
 800c296:	4628      	mov	r0, r5
 800c298:	f7f7 fc5a 	bl	8003b50 <memchr>
 800c29c:	b140      	cbz	r0, 800c2b0 <_vfiprintf_r+0x170>
 800c29e:	2340      	movs	r3, #64	; 0x40
 800c2a0:	1b40      	subs	r0, r0, r5
 800c2a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	4303      	orrs	r3, r0
 800c2aa:	f108 0801 	add.w	r8, r8, #1
 800c2ae:	9304      	str	r3, [sp, #16]
 800c2b0:	f898 1000 	ldrb.w	r1, [r8]
 800c2b4:	482a      	ldr	r0, [pc, #168]	; (800c360 <_vfiprintf_r+0x220>)
 800c2b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2ba:	2206      	movs	r2, #6
 800c2bc:	f108 0701 	add.w	r7, r8, #1
 800c2c0:	f7f7 fc46 	bl	8003b50 <memchr>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d037      	beq.n	800c338 <_vfiprintf_r+0x1f8>
 800c2c8:	4b26      	ldr	r3, [pc, #152]	; (800c364 <_vfiprintf_r+0x224>)
 800c2ca:	bb1b      	cbnz	r3, 800c314 <_vfiprintf_r+0x1d4>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	3307      	adds	r3, #7
 800c2d0:	f023 0307 	bic.w	r3, r3, #7
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2da:	444b      	add	r3, r9
 800c2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c2de:	e750      	b.n	800c182 <_vfiprintf_r+0x42>
 800c2e0:	fb05 3202 	mla	r2, r5, r2, r3
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	4688      	mov	r8, r1
 800c2e8:	e78a      	b.n	800c200 <_vfiprintf_r+0xc0>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f108 0801 	add.w	r8, r8, #1
 800c2f0:	9305      	str	r3, [sp, #20]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	250a      	movs	r5, #10
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2fc:	3a30      	subs	r2, #48	; 0x30
 800c2fe:	2a09      	cmp	r2, #9
 800c300:	d903      	bls.n	800c30a <_vfiprintf_r+0x1ca>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0c3      	beq.n	800c28e <_vfiprintf_r+0x14e>
 800c306:	9105      	str	r1, [sp, #20]
 800c308:	e7c1      	b.n	800c28e <_vfiprintf_r+0x14e>
 800c30a:	fb05 2101 	mla	r1, r5, r1, r2
 800c30e:	2301      	movs	r3, #1
 800c310:	4680      	mov	r8, r0
 800c312:	e7f0      	b.n	800c2f6 <_vfiprintf_r+0x1b6>
 800c314:	ab03      	add	r3, sp, #12
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	4622      	mov	r2, r4
 800c31a:	4b13      	ldr	r3, [pc, #76]	; (800c368 <_vfiprintf_r+0x228>)
 800c31c:	a904      	add	r1, sp, #16
 800c31e:	4630      	mov	r0, r6
 800c320:	f3af 8000 	nop.w
 800c324:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c328:	4681      	mov	r9, r0
 800c32a:	d1d5      	bne.n	800c2d8 <_vfiprintf_r+0x198>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	065b      	lsls	r3, r3, #25
 800c330:	f53f af7e 	bmi.w	800c230 <_vfiprintf_r+0xf0>
 800c334:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c336:	e77d      	b.n	800c234 <_vfiprintf_r+0xf4>
 800c338:	ab03      	add	r3, sp, #12
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	4622      	mov	r2, r4
 800c33e:	4b0a      	ldr	r3, [pc, #40]	; (800c368 <_vfiprintf_r+0x228>)
 800c340:	a904      	add	r1, sp, #16
 800c342:	4630      	mov	r0, r6
 800c344:	f000 f888 	bl	800c458 <_printf_i>
 800c348:	e7ec      	b.n	800c324 <_vfiprintf_r+0x1e4>
 800c34a:	bf00      	nop
 800c34c:	08072d90 	.word	0x08072d90
 800c350:	08072dd0 	.word	0x08072dd0
 800c354:	08072db0 	.word	0x08072db0
 800c358:	08072d70 	.word	0x08072d70
 800c35c:	08072dd6 	.word	0x08072dd6
 800c360:	08072dda 	.word	0x08072dda
 800c364:	00000000 	.word	0x00000000
 800c368:	0800c11b 	.word	0x0800c11b

0800c36c <_printf_common>:
 800c36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c370:	4691      	mov	r9, r2
 800c372:	461f      	mov	r7, r3
 800c374:	688a      	ldr	r2, [r1, #8]
 800c376:	690b      	ldr	r3, [r1, #16]
 800c378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c37c:	4293      	cmp	r3, r2
 800c37e:	bfb8      	it	lt
 800c380:	4613      	movlt	r3, r2
 800c382:	f8c9 3000 	str.w	r3, [r9]
 800c386:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c38a:	4606      	mov	r6, r0
 800c38c:	460c      	mov	r4, r1
 800c38e:	b112      	cbz	r2, 800c396 <_printf_common+0x2a>
 800c390:	3301      	adds	r3, #1
 800c392:	f8c9 3000 	str.w	r3, [r9]
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	0699      	lsls	r1, r3, #26
 800c39a:	bf42      	ittt	mi
 800c39c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c3a0:	3302      	addmi	r3, #2
 800c3a2:	f8c9 3000 	strmi.w	r3, [r9]
 800c3a6:	6825      	ldr	r5, [r4, #0]
 800c3a8:	f015 0506 	ands.w	r5, r5, #6
 800c3ac:	d107      	bne.n	800c3be <_printf_common+0x52>
 800c3ae:	f104 0a19 	add.w	sl, r4, #25
 800c3b2:	68e3      	ldr	r3, [r4, #12]
 800c3b4:	f8d9 2000 	ldr.w	r2, [r9]
 800c3b8:	1a9b      	subs	r3, r3, r2
 800c3ba:	42ab      	cmp	r3, r5
 800c3bc:	dc28      	bgt.n	800c410 <_printf_common+0xa4>
 800c3be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c3c2:	6822      	ldr	r2, [r4, #0]
 800c3c4:	3300      	adds	r3, #0
 800c3c6:	bf18      	it	ne
 800c3c8:	2301      	movne	r3, #1
 800c3ca:	0692      	lsls	r2, r2, #26
 800c3cc:	d42d      	bmi.n	800c42a <_printf_common+0xbe>
 800c3ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	47c0      	blx	r8
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d020      	beq.n	800c41e <_printf_common+0xb2>
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	68e5      	ldr	r5, [r4, #12]
 800c3e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c3e4:	f003 0306 	and.w	r3, r3, #6
 800c3e8:	2b04      	cmp	r3, #4
 800c3ea:	bf08      	it	eq
 800c3ec:	1aad      	subeq	r5, r5, r2
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	6922      	ldr	r2, [r4, #16]
 800c3f2:	bf0c      	ite	eq
 800c3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3f8:	2500      	movne	r5, #0
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	bfc4      	itt	gt
 800c3fe:	1a9b      	subgt	r3, r3, r2
 800c400:	18ed      	addgt	r5, r5, r3
 800c402:	f04f 0900 	mov.w	r9, #0
 800c406:	341a      	adds	r4, #26
 800c408:	454d      	cmp	r5, r9
 800c40a:	d11a      	bne.n	800c442 <_printf_common+0xd6>
 800c40c:	2000      	movs	r0, #0
 800c40e:	e008      	b.n	800c422 <_printf_common+0xb6>
 800c410:	2301      	movs	r3, #1
 800c412:	4652      	mov	r2, sl
 800c414:	4639      	mov	r1, r7
 800c416:	4630      	mov	r0, r6
 800c418:	47c0      	blx	r8
 800c41a:	3001      	adds	r0, #1
 800c41c:	d103      	bne.n	800c426 <_printf_common+0xba>
 800c41e:	f04f 30ff 	mov.w	r0, #4294967295
 800c422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c426:	3501      	adds	r5, #1
 800c428:	e7c3      	b.n	800c3b2 <_printf_common+0x46>
 800c42a:	18e1      	adds	r1, r4, r3
 800c42c:	1c5a      	adds	r2, r3, #1
 800c42e:	2030      	movs	r0, #48	; 0x30
 800c430:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c434:	4422      	add	r2, r4
 800c436:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c43a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c43e:	3302      	adds	r3, #2
 800c440:	e7c5      	b.n	800c3ce <_printf_common+0x62>
 800c442:	2301      	movs	r3, #1
 800c444:	4622      	mov	r2, r4
 800c446:	4639      	mov	r1, r7
 800c448:	4630      	mov	r0, r6
 800c44a:	47c0      	blx	r8
 800c44c:	3001      	adds	r0, #1
 800c44e:	d0e6      	beq.n	800c41e <_printf_common+0xb2>
 800c450:	f109 0901 	add.w	r9, r9, #1
 800c454:	e7d8      	b.n	800c408 <_printf_common+0x9c>
	...

0800c458 <_printf_i>:
 800c458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c45c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c460:	460c      	mov	r4, r1
 800c462:	7e09      	ldrb	r1, [r1, #24]
 800c464:	b085      	sub	sp, #20
 800c466:	296e      	cmp	r1, #110	; 0x6e
 800c468:	4617      	mov	r7, r2
 800c46a:	4606      	mov	r6, r0
 800c46c:	4698      	mov	r8, r3
 800c46e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c470:	f000 80b3 	beq.w	800c5da <_printf_i+0x182>
 800c474:	d822      	bhi.n	800c4bc <_printf_i+0x64>
 800c476:	2963      	cmp	r1, #99	; 0x63
 800c478:	d036      	beq.n	800c4e8 <_printf_i+0x90>
 800c47a:	d80a      	bhi.n	800c492 <_printf_i+0x3a>
 800c47c:	2900      	cmp	r1, #0
 800c47e:	f000 80b9 	beq.w	800c5f4 <_printf_i+0x19c>
 800c482:	2958      	cmp	r1, #88	; 0x58
 800c484:	f000 8083 	beq.w	800c58e <_printf_i+0x136>
 800c488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c48c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c490:	e032      	b.n	800c4f8 <_printf_i+0xa0>
 800c492:	2964      	cmp	r1, #100	; 0x64
 800c494:	d001      	beq.n	800c49a <_printf_i+0x42>
 800c496:	2969      	cmp	r1, #105	; 0x69
 800c498:	d1f6      	bne.n	800c488 <_printf_i+0x30>
 800c49a:	6820      	ldr	r0, [r4, #0]
 800c49c:	6813      	ldr	r3, [r2, #0]
 800c49e:	0605      	lsls	r5, r0, #24
 800c4a0:	f103 0104 	add.w	r1, r3, #4
 800c4a4:	d52a      	bpl.n	800c4fc <_printf_i+0xa4>
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6011      	str	r1, [r2, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	da03      	bge.n	800c4b6 <_printf_i+0x5e>
 800c4ae:	222d      	movs	r2, #45	; 0x2d
 800c4b0:	425b      	negs	r3, r3
 800c4b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c4b6:	486f      	ldr	r0, [pc, #444]	; (800c674 <_printf_i+0x21c>)
 800c4b8:	220a      	movs	r2, #10
 800c4ba:	e039      	b.n	800c530 <_printf_i+0xd8>
 800c4bc:	2973      	cmp	r1, #115	; 0x73
 800c4be:	f000 809d 	beq.w	800c5fc <_printf_i+0x1a4>
 800c4c2:	d808      	bhi.n	800c4d6 <_printf_i+0x7e>
 800c4c4:	296f      	cmp	r1, #111	; 0x6f
 800c4c6:	d020      	beq.n	800c50a <_printf_i+0xb2>
 800c4c8:	2970      	cmp	r1, #112	; 0x70
 800c4ca:	d1dd      	bne.n	800c488 <_printf_i+0x30>
 800c4cc:	6823      	ldr	r3, [r4, #0]
 800c4ce:	f043 0320 	orr.w	r3, r3, #32
 800c4d2:	6023      	str	r3, [r4, #0]
 800c4d4:	e003      	b.n	800c4de <_printf_i+0x86>
 800c4d6:	2975      	cmp	r1, #117	; 0x75
 800c4d8:	d017      	beq.n	800c50a <_printf_i+0xb2>
 800c4da:	2978      	cmp	r1, #120	; 0x78
 800c4dc:	d1d4      	bne.n	800c488 <_printf_i+0x30>
 800c4de:	2378      	movs	r3, #120	; 0x78
 800c4e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4e4:	4864      	ldr	r0, [pc, #400]	; (800c678 <_printf_i+0x220>)
 800c4e6:	e055      	b.n	800c594 <_printf_i+0x13c>
 800c4e8:	6813      	ldr	r3, [r2, #0]
 800c4ea:	1d19      	adds	r1, r3, #4
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6011      	str	r1, [r2, #0]
 800c4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e08c      	b.n	800c616 <_printf_i+0x1be>
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6011      	str	r1, [r2, #0]
 800c500:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c504:	bf18      	it	ne
 800c506:	b21b      	sxthne	r3, r3
 800c508:	e7cf      	b.n	800c4aa <_printf_i+0x52>
 800c50a:	6813      	ldr	r3, [r2, #0]
 800c50c:	6825      	ldr	r5, [r4, #0]
 800c50e:	1d18      	adds	r0, r3, #4
 800c510:	6010      	str	r0, [r2, #0]
 800c512:	0628      	lsls	r0, r5, #24
 800c514:	d501      	bpl.n	800c51a <_printf_i+0xc2>
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	e002      	b.n	800c520 <_printf_i+0xc8>
 800c51a:	0668      	lsls	r0, r5, #25
 800c51c:	d5fb      	bpl.n	800c516 <_printf_i+0xbe>
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	4854      	ldr	r0, [pc, #336]	; (800c674 <_printf_i+0x21c>)
 800c522:	296f      	cmp	r1, #111	; 0x6f
 800c524:	bf14      	ite	ne
 800c526:	220a      	movne	r2, #10
 800c528:	2208      	moveq	r2, #8
 800c52a:	2100      	movs	r1, #0
 800c52c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c530:	6865      	ldr	r5, [r4, #4]
 800c532:	60a5      	str	r5, [r4, #8]
 800c534:	2d00      	cmp	r5, #0
 800c536:	f2c0 8095 	blt.w	800c664 <_printf_i+0x20c>
 800c53a:	6821      	ldr	r1, [r4, #0]
 800c53c:	f021 0104 	bic.w	r1, r1, #4
 800c540:	6021      	str	r1, [r4, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d13d      	bne.n	800c5c2 <_printf_i+0x16a>
 800c546:	2d00      	cmp	r5, #0
 800c548:	f040 808e 	bne.w	800c668 <_printf_i+0x210>
 800c54c:	4665      	mov	r5, ip
 800c54e:	2a08      	cmp	r2, #8
 800c550:	d10b      	bne.n	800c56a <_printf_i+0x112>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	07db      	lsls	r3, r3, #31
 800c556:	d508      	bpl.n	800c56a <_printf_i+0x112>
 800c558:	6923      	ldr	r3, [r4, #16]
 800c55a:	6862      	ldr	r2, [r4, #4]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	bfde      	ittt	le
 800c560:	2330      	movle	r3, #48	; 0x30
 800c562:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c56a:	ebac 0305 	sub.w	r3, ip, r5
 800c56e:	6123      	str	r3, [r4, #16]
 800c570:	f8cd 8000 	str.w	r8, [sp]
 800c574:	463b      	mov	r3, r7
 800c576:	aa03      	add	r2, sp, #12
 800c578:	4621      	mov	r1, r4
 800c57a:	4630      	mov	r0, r6
 800c57c:	f7ff fef6 	bl	800c36c <_printf_common>
 800c580:	3001      	adds	r0, #1
 800c582:	d14d      	bne.n	800c620 <_printf_i+0x1c8>
 800c584:	f04f 30ff 	mov.w	r0, #4294967295
 800c588:	b005      	add	sp, #20
 800c58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c58e:	4839      	ldr	r0, [pc, #228]	; (800c674 <_printf_i+0x21c>)
 800c590:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c594:	6813      	ldr	r3, [r2, #0]
 800c596:	6821      	ldr	r1, [r4, #0]
 800c598:	1d1d      	adds	r5, r3, #4
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6015      	str	r5, [r2, #0]
 800c59e:	060a      	lsls	r2, r1, #24
 800c5a0:	d50b      	bpl.n	800c5ba <_printf_i+0x162>
 800c5a2:	07ca      	lsls	r2, r1, #31
 800c5a4:	bf44      	itt	mi
 800c5a6:	f041 0120 	orrmi.w	r1, r1, #32
 800c5aa:	6021      	strmi	r1, [r4, #0]
 800c5ac:	b91b      	cbnz	r3, 800c5b6 <_printf_i+0x15e>
 800c5ae:	6822      	ldr	r2, [r4, #0]
 800c5b0:	f022 0220 	bic.w	r2, r2, #32
 800c5b4:	6022      	str	r2, [r4, #0]
 800c5b6:	2210      	movs	r2, #16
 800c5b8:	e7b7      	b.n	800c52a <_printf_i+0xd2>
 800c5ba:	064d      	lsls	r5, r1, #25
 800c5bc:	bf48      	it	mi
 800c5be:	b29b      	uxthmi	r3, r3
 800c5c0:	e7ef      	b.n	800c5a2 <_printf_i+0x14a>
 800c5c2:	4665      	mov	r5, ip
 800c5c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5c8:	fb02 3311 	mls	r3, r2, r1, r3
 800c5cc:	5cc3      	ldrb	r3, [r0, r3]
 800c5ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	d1f5      	bne.n	800c5c4 <_printf_i+0x16c>
 800c5d8:	e7b9      	b.n	800c54e <_printf_i+0xf6>
 800c5da:	6813      	ldr	r3, [r2, #0]
 800c5dc:	6825      	ldr	r5, [r4, #0]
 800c5de:	6961      	ldr	r1, [r4, #20]
 800c5e0:	1d18      	adds	r0, r3, #4
 800c5e2:	6010      	str	r0, [r2, #0]
 800c5e4:	0628      	lsls	r0, r5, #24
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	d501      	bpl.n	800c5ee <_printf_i+0x196>
 800c5ea:	6019      	str	r1, [r3, #0]
 800c5ec:	e002      	b.n	800c5f4 <_printf_i+0x19c>
 800c5ee:	066a      	lsls	r2, r5, #25
 800c5f0:	d5fb      	bpl.n	800c5ea <_printf_i+0x192>
 800c5f2:	8019      	strh	r1, [r3, #0]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	6123      	str	r3, [r4, #16]
 800c5f8:	4665      	mov	r5, ip
 800c5fa:	e7b9      	b.n	800c570 <_printf_i+0x118>
 800c5fc:	6813      	ldr	r3, [r2, #0]
 800c5fe:	1d19      	adds	r1, r3, #4
 800c600:	6011      	str	r1, [r2, #0]
 800c602:	681d      	ldr	r5, [r3, #0]
 800c604:	6862      	ldr	r2, [r4, #4]
 800c606:	2100      	movs	r1, #0
 800c608:	4628      	mov	r0, r5
 800c60a:	f7f7 faa1 	bl	8003b50 <memchr>
 800c60e:	b108      	cbz	r0, 800c614 <_printf_i+0x1bc>
 800c610:	1b40      	subs	r0, r0, r5
 800c612:	6060      	str	r0, [r4, #4]
 800c614:	6863      	ldr	r3, [r4, #4]
 800c616:	6123      	str	r3, [r4, #16]
 800c618:	2300      	movs	r3, #0
 800c61a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c61e:	e7a7      	b.n	800c570 <_printf_i+0x118>
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	462a      	mov	r2, r5
 800c624:	4639      	mov	r1, r7
 800c626:	4630      	mov	r0, r6
 800c628:	47c0      	blx	r8
 800c62a:	3001      	adds	r0, #1
 800c62c:	d0aa      	beq.n	800c584 <_printf_i+0x12c>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	079b      	lsls	r3, r3, #30
 800c632:	d413      	bmi.n	800c65c <_printf_i+0x204>
 800c634:	68e0      	ldr	r0, [r4, #12]
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	4298      	cmp	r0, r3
 800c63a:	bfb8      	it	lt
 800c63c:	4618      	movlt	r0, r3
 800c63e:	e7a3      	b.n	800c588 <_printf_i+0x130>
 800c640:	2301      	movs	r3, #1
 800c642:	464a      	mov	r2, r9
 800c644:	4639      	mov	r1, r7
 800c646:	4630      	mov	r0, r6
 800c648:	47c0      	blx	r8
 800c64a:	3001      	adds	r0, #1
 800c64c:	d09a      	beq.n	800c584 <_printf_i+0x12c>
 800c64e:	3501      	adds	r5, #1
 800c650:	68e3      	ldr	r3, [r4, #12]
 800c652:	9a03      	ldr	r2, [sp, #12]
 800c654:	1a9b      	subs	r3, r3, r2
 800c656:	42ab      	cmp	r3, r5
 800c658:	dcf2      	bgt.n	800c640 <_printf_i+0x1e8>
 800c65a:	e7eb      	b.n	800c634 <_printf_i+0x1dc>
 800c65c:	2500      	movs	r5, #0
 800c65e:	f104 0919 	add.w	r9, r4, #25
 800c662:	e7f5      	b.n	800c650 <_printf_i+0x1f8>
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1ac      	bne.n	800c5c2 <_printf_i+0x16a>
 800c668:	7803      	ldrb	r3, [r0, #0]
 800c66a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c66e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c672:	e76c      	b.n	800c54e <_printf_i+0xf6>
 800c674:	08072de1 	.word	0x08072de1
 800c678:	08072df2 	.word	0x08072df2

0800c67c <_putc_r>:
 800c67c:	b570      	push	{r4, r5, r6, lr}
 800c67e:	460d      	mov	r5, r1
 800c680:	4614      	mov	r4, r2
 800c682:	4606      	mov	r6, r0
 800c684:	b118      	cbz	r0, 800c68e <_putc_r+0x12>
 800c686:	6983      	ldr	r3, [r0, #24]
 800c688:	b90b      	cbnz	r3, 800c68e <_putc_r+0x12>
 800c68a:	f7ff fb99 	bl	800bdc0 <__sinit>
 800c68e:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <_putc_r+0x60>)
 800c690:	429c      	cmp	r4, r3
 800c692:	d112      	bne.n	800c6ba <_putc_r+0x3e>
 800c694:	6874      	ldr	r4, [r6, #4]
 800c696:	68a3      	ldr	r3, [r4, #8]
 800c698:	3b01      	subs	r3, #1
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	60a3      	str	r3, [r4, #8]
 800c69e:	da16      	bge.n	800c6ce <_putc_r+0x52>
 800c6a0:	69a2      	ldr	r2, [r4, #24]
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	db02      	blt.n	800c6ac <_putc_r+0x30>
 800c6a6:	b2eb      	uxtb	r3, r5
 800c6a8:	2b0a      	cmp	r3, #10
 800c6aa:	d110      	bne.n	800c6ce <_putc_r+0x52>
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6b6:	f7ff b9d3 	b.w	800ba60 <__swbuf_r>
 800c6ba:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <_putc_r+0x64>)
 800c6bc:	429c      	cmp	r4, r3
 800c6be:	d101      	bne.n	800c6c4 <_putc_r+0x48>
 800c6c0:	68b4      	ldr	r4, [r6, #8]
 800c6c2:	e7e8      	b.n	800c696 <_putc_r+0x1a>
 800c6c4:	4b07      	ldr	r3, [pc, #28]	; (800c6e4 <_putc_r+0x68>)
 800c6c6:	429c      	cmp	r4, r3
 800c6c8:	bf08      	it	eq
 800c6ca:	68f4      	ldreq	r4, [r6, #12]
 800c6cc:	e7e3      	b.n	800c696 <_putc_r+0x1a>
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	6022      	str	r2, [r4, #0]
 800c6d4:	701d      	strb	r5, [r3, #0]
 800c6d6:	b2e8      	uxtb	r0, r5
 800c6d8:	bd70      	pop	{r4, r5, r6, pc}
 800c6da:	bf00      	nop
 800c6dc:	08072d90 	.word	0x08072d90
 800c6e0:	08072db0 	.word	0x08072db0
 800c6e4:	08072d70 	.word	0x08072d70

0800c6e8 <_sbrk_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	4c06      	ldr	r4, [pc, #24]	; (800c704 <_sbrk_r+0x1c>)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	f7ff f844 	bl	800b780 <_sbrk>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	d102      	bne.n	800c702 <_sbrk_r+0x1a>
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	b103      	cbz	r3, 800c702 <_sbrk_r+0x1a>
 800c700:	602b      	str	r3, [r5, #0]
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	2001000c 	.word	0x2001000c

0800c708 <__sread>:
 800c708:	b510      	push	{r4, lr}
 800c70a:	460c      	mov	r4, r1
 800c70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c710:	f000 f896 	bl	800c840 <_read_r>
 800c714:	2800      	cmp	r0, #0
 800c716:	bfab      	itete	ge
 800c718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c71a:	89a3      	ldrhlt	r3, [r4, #12]
 800c71c:	181b      	addge	r3, r3, r0
 800c71e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c722:	bfac      	ite	ge
 800c724:	6563      	strge	r3, [r4, #84]	; 0x54
 800c726:	81a3      	strhlt	r3, [r4, #12]
 800c728:	bd10      	pop	{r4, pc}

0800c72a <__swrite>:
 800c72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c72e:	461f      	mov	r7, r3
 800c730:	898b      	ldrh	r3, [r1, #12]
 800c732:	05db      	lsls	r3, r3, #23
 800c734:	4605      	mov	r5, r0
 800c736:	460c      	mov	r4, r1
 800c738:	4616      	mov	r6, r2
 800c73a:	d505      	bpl.n	800c748 <__swrite+0x1e>
 800c73c:	2302      	movs	r3, #2
 800c73e:	2200      	movs	r2, #0
 800c740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c744:	f000 f868 	bl	800c818 <_lseek_r>
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c74e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c752:	81a3      	strh	r3, [r4, #12]
 800c754:	4632      	mov	r2, r6
 800c756:	463b      	mov	r3, r7
 800c758:	4628      	mov	r0, r5
 800c75a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c75e:	f000 b817 	b.w	800c790 <_write_r>

0800c762 <__sseek>:
 800c762:	b510      	push	{r4, lr}
 800c764:	460c      	mov	r4, r1
 800c766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c76a:	f000 f855 	bl	800c818 <_lseek_r>
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	bf15      	itete	ne
 800c774:	6560      	strne	r0, [r4, #84]	; 0x54
 800c776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c77a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c77e:	81a3      	strheq	r3, [r4, #12]
 800c780:	bf18      	it	ne
 800c782:	81a3      	strhne	r3, [r4, #12]
 800c784:	bd10      	pop	{r4, pc}

0800c786 <__sclose>:
 800c786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c78a:	f000 b813 	b.w	800c7b4 <_close_r>
	...

0800c790 <_write_r>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	4c07      	ldr	r4, [pc, #28]	; (800c7b0 <_write_r+0x20>)
 800c794:	4605      	mov	r5, r0
 800c796:	4608      	mov	r0, r1
 800c798:	4611      	mov	r1, r2
 800c79a:	2200      	movs	r2, #0
 800c79c:	6022      	str	r2, [r4, #0]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	f7fe ff9d 	bl	800b6de <_write>
 800c7a4:	1c43      	adds	r3, r0, #1
 800c7a6:	d102      	bne.n	800c7ae <_write_r+0x1e>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	b103      	cbz	r3, 800c7ae <_write_r+0x1e>
 800c7ac:	602b      	str	r3, [r5, #0]
 800c7ae:	bd38      	pop	{r3, r4, r5, pc}
 800c7b0:	2001000c 	.word	0x2001000c

0800c7b4 <_close_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4c06      	ldr	r4, [pc, #24]	; (800c7d0 <_close_r+0x1c>)
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	4608      	mov	r0, r1
 800c7be:	6023      	str	r3, [r4, #0]
 800c7c0:	f7fe ffa9 	bl	800b716 <_close>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	d102      	bne.n	800c7ce <_close_r+0x1a>
 800c7c8:	6823      	ldr	r3, [r4, #0]
 800c7ca:	b103      	cbz	r3, 800c7ce <_close_r+0x1a>
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}
 800c7d0:	2001000c 	.word	0x2001000c

0800c7d4 <_fstat_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4c07      	ldr	r4, [pc, #28]	; (800c7f4 <_fstat_r+0x20>)
 800c7d8:	2300      	movs	r3, #0
 800c7da:	4605      	mov	r5, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	4611      	mov	r1, r2
 800c7e0:	6023      	str	r3, [r4, #0]
 800c7e2:	f7fe ffa4 	bl	800b72e <_fstat>
 800c7e6:	1c43      	adds	r3, r0, #1
 800c7e8:	d102      	bne.n	800c7f0 <_fstat_r+0x1c>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	b103      	cbz	r3, 800c7f0 <_fstat_r+0x1c>
 800c7ee:	602b      	str	r3, [r5, #0]
 800c7f0:	bd38      	pop	{r3, r4, r5, pc}
 800c7f2:	bf00      	nop
 800c7f4:	2001000c 	.word	0x2001000c

0800c7f8 <_isatty_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4c06      	ldr	r4, [pc, #24]	; (800c814 <_isatty_r+0x1c>)
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4605      	mov	r5, r0
 800c800:	4608      	mov	r0, r1
 800c802:	6023      	str	r3, [r4, #0]
 800c804:	f7fe ffa3 	bl	800b74e <_isatty>
 800c808:	1c43      	adds	r3, r0, #1
 800c80a:	d102      	bne.n	800c812 <_isatty_r+0x1a>
 800c80c:	6823      	ldr	r3, [r4, #0]
 800c80e:	b103      	cbz	r3, 800c812 <_isatty_r+0x1a>
 800c810:	602b      	str	r3, [r5, #0]
 800c812:	bd38      	pop	{r3, r4, r5, pc}
 800c814:	2001000c 	.word	0x2001000c

0800c818 <_lseek_r>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	4c07      	ldr	r4, [pc, #28]	; (800c838 <_lseek_r+0x20>)
 800c81c:	4605      	mov	r5, r0
 800c81e:	4608      	mov	r0, r1
 800c820:	4611      	mov	r1, r2
 800c822:	2200      	movs	r2, #0
 800c824:	6022      	str	r2, [r4, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	f7fe ff9c 	bl	800b764 <_lseek>
 800c82c:	1c43      	adds	r3, r0, #1
 800c82e:	d102      	bne.n	800c836 <_lseek_r+0x1e>
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	b103      	cbz	r3, 800c836 <_lseek_r+0x1e>
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	2001000c 	.word	0x2001000c

0800c83c <__malloc_lock>:
 800c83c:	4770      	bx	lr

0800c83e <__malloc_unlock>:
 800c83e:	4770      	bx	lr

0800c840 <_read_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4c07      	ldr	r4, [pc, #28]	; (800c860 <_read_r+0x20>)
 800c844:	4605      	mov	r5, r0
 800c846:	4608      	mov	r0, r1
 800c848:	4611      	mov	r1, r2
 800c84a:	2200      	movs	r2, #0
 800c84c:	6022      	str	r2, [r4, #0]
 800c84e:	461a      	mov	r2, r3
 800c850:	f7fe ff28 	bl	800b6a4 <_read>
 800c854:	1c43      	adds	r3, r0, #1
 800c856:	d102      	bne.n	800c85e <_read_r+0x1e>
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	b103      	cbz	r3, 800c85e <_read_r+0x1e>
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	bd38      	pop	{r3, r4, r5, pc}
 800c860:	2001000c 	.word	0x2001000c

0800c864 <tanhf>:
 800c864:	b510      	push	{r4, lr}
 800c866:	ee10 4a10 	vmov	r4, s0
 800c86a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c86e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c872:	ed2d 8b02 	vpush	{d8}
 800c876:	eef0 7a40 	vmov.f32	s15, s0
 800c87a:	db0c      	blt.n	800c896 <tanhf+0x32>
 800c87c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c880:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c884:	2c00      	cmp	r4, #0
 800c886:	bfac      	ite	ge
 800c888:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800c88c:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800c890:	ecbd 8b02 	vpop	{d8}
 800c894:	bd10      	pop	{r4, pc}
 800c896:	4a1b      	ldr	r2, [pc, #108]	; (800c904 <tanhf+0xa0>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	dc30      	bgt.n	800c8fe <tanhf+0x9a>
 800c89c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800c8a0:	da06      	bge.n	800c8b0 <tanhf+0x4c>
 800c8a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c8a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c8aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c8ae:	e7ef      	b.n	800c890 <tanhf+0x2c>
 800c8b0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c8b4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800c8b8:	db12      	blt.n	800c8e0 <tanhf+0x7c>
 800c8ba:	f001 f835 	bl	800d928 <fabsf>
 800c8be:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c8c2:	f000 ff05 	bl	800d6d0 <expm1f>
 800c8c6:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c8ca:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800c8ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c8d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c8d6:	2c00      	cmp	r4, #0
 800c8d8:	bfb8      	it	lt
 800c8da:	eeb1 0a40 	vneglt.f32	s0, s0
 800c8de:	e7d7      	b.n	800c890 <tanhf+0x2c>
 800c8e0:	f001 f822 	bl	800d928 <fabsf>
 800c8e4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800c8e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c8ec:	f000 fef0 	bl	800d6d0 <expm1f>
 800c8f0:	ee70 7a08 	vadd.f32	s15, s0, s16
 800c8f4:	eeb1 7a40 	vneg.f32	s14, s0
 800c8f8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c8fc:	e7eb      	b.n	800c8d6 <tanhf+0x72>
 800c8fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c902:	e7e8      	b.n	800c8d6 <tanhf+0x72>
 800c904:	41afffff 	.word	0x41afffff

0800c908 <expf>:
 800c908:	b530      	push	{r4, r5, lr}
 800c90a:	ed2d 8b02 	vpush	{d8}
 800c90e:	4d35      	ldr	r5, [pc, #212]	; (800c9e4 <expf+0xdc>)
 800c910:	b08b      	sub	sp, #44	; 0x2c
 800c912:	eeb0 8a40 	vmov.f32	s16, s0
 800c916:	f000 fa4b 	bl	800cdb0 <__ieee754_expf>
 800c91a:	f995 3000 	ldrsb.w	r3, [r5]
 800c91e:	3301      	adds	r3, #1
 800c920:	ee10 4a10 	vmov	r4, s0
 800c924:	d030      	beq.n	800c988 <expf+0x80>
 800c926:	eeb0 0a48 	vmov.f32	s0, s16
 800c92a:	f001 f804 	bl	800d936 <finitef>
 800c92e:	b358      	cbz	r0, 800c988 <expf+0x80>
 800c930:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800c9e8 <expf+0xe0>
 800c934:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c93c:	dd35      	ble.n	800c9aa <expf+0xa2>
 800c93e:	2303      	movs	r3, #3
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	4b2a      	ldr	r3, [pc, #168]	; (800c9ec <expf+0xe4>)
 800c944:	9301      	str	r3, [sp, #4]
 800c946:	ee18 0a10 	vmov	r0, s16
 800c94a:	2300      	movs	r3, #0
 800c94c:	9308      	str	r3, [sp, #32]
 800c94e:	f7f7 fab3 	bl	8003eb8 <__aeabi_f2d>
 800c952:	f995 3000 	ldrsb.w	r3, [r5]
 800c956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c95a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c95e:	b9cb      	cbnz	r3, 800c994 <expf+0x8c>
 800c960:	4b23      	ldr	r3, [pc, #140]	; (800c9f0 <expf+0xe8>)
 800c962:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c966:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c96a:	4668      	mov	r0, sp
 800c96c:	f000 fea5 	bl	800d6ba <matherr>
 800c970:	b1b0      	cbz	r0, 800c9a0 <expf+0x98>
 800c972:	9b08      	ldr	r3, [sp, #32]
 800c974:	b11b      	cbz	r3, 800c97e <expf+0x76>
 800c976:	f7fe ff97 	bl	800b8a8 <__errno>
 800c97a:	9b08      	ldr	r3, [sp, #32]
 800c97c:	6003      	str	r3, [r0, #0]
 800c97e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c982:	f7f7 fd23 	bl	80043cc <__aeabi_d2f>
 800c986:	4604      	mov	r4, r0
 800c988:	ee00 4a10 	vmov	s0, r4
 800c98c:	b00b      	add	sp, #44	; 0x2c
 800c98e:	ecbd 8b02 	vpop	{d8}
 800c992:	bd30      	pop	{r4, r5, pc}
 800c994:	4917      	ldr	r1, [pc, #92]	; (800c9f4 <expf+0xec>)
 800c996:	2000      	movs	r0, #0
 800c998:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d1e4      	bne.n	800c96a <expf+0x62>
 800c9a0:	f7fe ff82 	bl	800b8a8 <__errno>
 800c9a4:	2322      	movs	r3, #34	; 0x22
 800c9a6:	6003      	str	r3, [r0, #0]
 800c9a8:	e7e3      	b.n	800c972 <expf+0x6a>
 800c9aa:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c9f8 <expf+0xf0>
 800c9ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b6:	d5e7      	bpl.n	800c988 <expf+0x80>
 800c9b8:	2304      	movs	r3, #4
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <expf+0xe4>)
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	ee18 0a10 	vmov	r0, s16
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	9308      	str	r3, [sp, #32]
 800c9c8:	f7f7 fa76 	bl	8003eb8 <__aeabi_f2d>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c9d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9dc:	f995 3000 	ldrsb.w	r3, [r5]
 800c9e0:	e7dc      	b.n	800c99c <expf+0x94>
 800c9e2:	bf00      	nop
 800c9e4:	200004f0 	.word	0x200004f0
 800c9e8:	42b17180 	.word	0x42b17180
 800c9ec:	08072e03 	.word	0x08072e03
 800c9f0:	47efffff 	.word	0x47efffff
 800c9f4:	7ff00000 	.word	0x7ff00000
 800c9f8:	c2cff1b5 	.word	0xc2cff1b5

0800c9fc <logf>:
 800c9fc:	b510      	push	{r4, lr}
 800c9fe:	ed2d 8b02 	vpush	{d8}
 800ca02:	b08a      	sub	sp, #40	; 0x28
 800ca04:	eeb0 8a40 	vmov.f32	s16, s0
 800ca08:	f000 faa6 	bl	800cf58 <__ieee754_logf>
 800ca0c:	4b31      	ldr	r3, [pc, #196]	; (800cad4 <logf+0xd8>)
 800ca0e:	f993 4000 	ldrsb.w	r4, [r3]
 800ca12:	1c63      	adds	r3, r4, #1
 800ca14:	d059      	beq.n	800caca <logf+0xce>
 800ca16:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1e:	d654      	bvs.n	800caca <logf+0xce>
 800ca20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ca24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca28:	dc4f      	bgt.n	800caca <logf+0xce>
 800ca2a:	4b2b      	ldr	r3, [pc, #172]	; (800cad8 <logf+0xdc>)
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	ee18 0a10 	vmov	r0, s16
 800ca32:	2300      	movs	r3, #0
 800ca34:	9308      	str	r3, [sp, #32]
 800ca36:	f7f7 fa3f 	bl	8003eb8 <__aeabi_f2d>
 800ca3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca42:	b994      	cbnz	r4, 800ca6a <logf+0x6e>
 800ca44:	4b25      	ldr	r3, [pc, #148]	; (800cadc <logf+0xe0>)
 800ca46:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ca4a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ca4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ca56:	d025      	beq.n	800caa4 <logf+0xa8>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	2c02      	cmp	r4, #2
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	d116      	bne.n	800ca8e <logf+0x92>
 800ca60:	f7fe ff22 	bl	800b8a8 <__errno>
 800ca64:	2321      	movs	r3, #33	; 0x21
 800ca66:	6003      	str	r3, [r0, #0]
 800ca68:	e016      	b.n	800ca98 <logf+0x9c>
 800ca6a:	4b1d      	ldr	r3, [pc, #116]	; (800cae0 <logf+0xe4>)
 800ca6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ca70:	2200      	movs	r2, #0
 800ca72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ca7a:	d1ed      	bne.n	800ca58 <logf+0x5c>
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	429c      	cmp	r4, r3
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	d111      	bne.n	800caa8 <logf+0xac>
 800ca84:	f7fe ff10 	bl	800b8a8 <__errno>
 800ca88:	2322      	movs	r3, #34	; 0x22
 800ca8a:	6003      	str	r3, [r0, #0]
 800ca8c:	e011      	b.n	800cab2 <logf+0xb6>
 800ca8e:	4668      	mov	r0, sp
 800ca90:	f000 fe13 	bl	800d6ba <matherr>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d0e3      	beq.n	800ca60 <logf+0x64>
 800ca98:	4812      	ldr	r0, [pc, #72]	; (800cae4 <logf+0xe8>)
 800ca9a:	f000 fe11 	bl	800d6c0 <nan>
 800ca9e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800caa2:	e006      	b.n	800cab2 <logf+0xb6>
 800caa4:	2302      	movs	r3, #2
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	4668      	mov	r0, sp
 800caaa:	f000 fe06 	bl	800d6ba <matherr>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d0e8      	beq.n	800ca84 <logf+0x88>
 800cab2:	9b08      	ldr	r3, [sp, #32]
 800cab4:	b11b      	cbz	r3, 800cabe <logf+0xc2>
 800cab6:	f7fe fef7 	bl	800b8a8 <__errno>
 800caba:	9b08      	ldr	r3, [sp, #32]
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cac2:	f7f7 fc83 	bl	80043cc <__aeabi_d2f>
 800cac6:	ee00 0a10 	vmov	s0, r0
 800caca:	b00a      	add	sp, #40	; 0x28
 800cacc:	ecbd 8b02 	vpop	{d8}
 800cad0:	bd10      	pop	{r4, pc}
 800cad2:	bf00      	nop
 800cad4:	200004f0 	.word	0x200004f0
 800cad8:	08072e08 	.word	0x08072e08
 800cadc:	c7efffff 	.word	0xc7efffff
 800cae0:	fff00000 	.word	0xfff00000
 800cae4:	08072dd5 	.word	0x08072dd5

0800cae8 <powf>:
 800cae8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800caec:	ed2d 8b04 	vpush	{d8-d9}
 800caf0:	4ca7      	ldr	r4, [pc, #668]	; (800cd90 <powf+0x2a8>)
 800caf2:	b08a      	sub	sp, #40	; 0x28
 800caf4:	eef0 8a40 	vmov.f32	s17, s0
 800caf8:	eeb0 8a60 	vmov.f32	s16, s1
 800cafc:	f000 fb1a 	bl	800d134 <__ieee754_powf>
 800cb00:	f994 5000 	ldrsb.w	r5, [r4]
 800cb04:	1c6b      	adds	r3, r5, #1
 800cb06:	eeb0 9a40 	vmov.f32	s18, s0
 800cb0a:	4626      	mov	r6, r4
 800cb0c:	d05f      	beq.n	800cbce <powf+0xe6>
 800cb0e:	eeb4 8a48 	vcmp.f32	s16, s16
 800cb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb16:	d65a      	bvs.n	800cbce <powf+0xe6>
 800cb18:	eef4 8a68 	vcmp.f32	s17, s17
 800cb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb20:	d721      	bvc.n	800cb66 <powf+0x7e>
 800cb22:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb2a:	d150      	bne.n	800cbce <powf+0xe6>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	4b98      	ldr	r3, [pc, #608]	; (800cd94 <powf+0x2ac>)
 800cb32:	9301      	str	r3, [sp, #4]
 800cb34:	ee18 0a90 	vmov	r0, s17
 800cb38:	2300      	movs	r3, #0
 800cb3a:	9308      	str	r3, [sp, #32]
 800cb3c:	f7f7 f9bc 	bl	8003eb8 <__aeabi_f2d>
 800cb40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb44:	ee18 0a10 	vmov	r0, s16
 800cb48:	f7f7 f9b6 	bl	8003eb8 <__aeabi_f2d>
 800cb4c:	4b92      	ldr	r3, [pc, #584]	; (800cd98 <powf+0x2b0>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2d02      	cmp	r5, #2
 800cb52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb5a:	d032      	beq.n	800cbc2 <powf+0xda>
 800cb5c:	4668      	mov	r0, sp
 800cb5e:	f000 fdac 	bl	800d6ba <matherr>
 800cb62:	bb40      	cbnz	r0, 800cbb6 <powf+0xce>
 800cb64:	e065      	b.n	800cc32 <powf+0x14a>
 800cb66:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800cd9c <powf+0x2b4>
 800cb6a:	eef4 8a69 	vcmp.f32	s17, s19
 800cb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb72:	d163      	bne.n	800cc3c <powf+0x154>
 800cb74:	eeb4 8a69 	vcmp.f32	s16, s19
 800cb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb7c:	d12e      	bne.n	800cbdc <powf+0xf4>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	4b84      	ldr	r3, [pc, #528]	; (800cd94 <powf+0x2ac>)
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	ee18 0a90 	vmov	r0, s17
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	9308      	str	r3, [sp, #32]
 800cb8e:	f7f7 f993 	bl	8003eb8 <__aeabi_f2d>
 800cb92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb96:	ee18 0a10 	vmov	r0, s16
 800cb9a:	f7f7 f98d 	bl	8003eb8 <__aeabi_f2d>
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2300      	movs	r3, #0
 800cba2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cba6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cbaa:	2d00      	cmp	r5, #0
 800cbac:	d0d6      	beq.n	800cb5c <powf+0x74>
 800cbae:	4b7a      	ldr	r3, [pc, #488]	; (800cd98 <powf+0x2b0>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cbb6:	9b08      	ldr	r3, [sp, #32]
 800cbb8:	b11b      	cbz	r3, 800cbc2 <powf+0xda>
 800cbba:	f7fe fe75 	bl	800b8a8 <__errno>
 800cbbe:	9b08      	ldr	r3, [sp, #32]
 800cbc0:	6003      	str	r3, [r0, #0]
 800cbc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc6:	f7f7 fc01 	bl	80043cc <__aeabi_d2f>
 800cbca:	ee09 0a10 	vmov	s18, r0
 800cbce:	eeb0 0a49 	vmov.f32	s0, s18
 800cbd2:	b00a      	add	sp, #40	; 0x28
 800cbd4:	ecbd 8b04 	vpop	{d8-d9}
 800cbd8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cbdc:	eeb0 0a48 	vmov.f32	s0, s16
 800cbe0:	f000 fea9 	bl	800d936 <finitef>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d0f2      	beq.n	800cbce <powf+0xe6>
 800cbe8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf0:	d5ed      	bpl.n	800cbce <powf+0xe6>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4b67      	ldr	r3, [pc, #412]	; (800cd94 <powf+0x2ac>)
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	ee18 0a90 	vmov	r0, s17
 800cbfe:	2300      	movs	r3, #0
 800cc00:	9308      	str	r3, [sp, #32]
 800cc02:	f7f7 f959 	bl	8003eb8 <__aeabi_f2d>
 800cc06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc0a:	ee18 0a10 	vmov	r0, s16
 800cc0e:	f7f7 f953 	bl	8003eb8 <__aeabi_f2d>
 800cc12:	f994 3000 	ldrsb.w	r3, [r4]
 800cc16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc1a:	b923      	cbnz	r3, 800cc26 <powf+0x13e>
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc24:	e79a      	b.n	800cb5c <powf+0x74>
 800cc26:	495e      	ldr	r1, [pc, #376]	; (800cda0 <powf+0x2b8>)
 800cc28:	2000      	movs	r0, #0
 800cc2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d194      	bne.n	800cb5c <powf+0x74>
 800cc32:	f7fe fe39 	bl	800b8a8 <__errno>
 800cc36:	2321      	movs	r3, #33	; 0x21
 800cc38:	6003      	str	r3, [r0, #0]
 800cc3a:	e7bc      	b.n	800cbb6 <powf+0xce>
 800cc3c:	f000 fe7b 	bl	800d936 <finitef>
 800cc40:	4605      	mov	r5, r0
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d173      	bne.n	800cd2e <powf+0x246>
 800cc46:	eeb0 0a68 	vmov.f32	s0, s17
 800cc4a:	f000 fe74 	bl	800d936 <finitef>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d06d      	beq.n	800cd2e <powf+0x246>
 800cc52:	eeb0 0a48 	vmov.f32	s0, s16
 800cc56:	f000 fe6e 	bl	800d936 <finitef>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d067      	beq.n	800cd2e <powf+0x246>
 800cc5e:	ee18 0a90 	vmov	r0, s17
 800cc62:	f7f7 f929 	bl	8003eb8 <__aeabi_f2d>
 800cc66:	4680      	mov	r8, r0
 800cc68:	ee18 0a10 	vmov	r0, s16
 800cc6c:	4689      	mov	r9, r1
 800cc6e:	f7f7 f923 	bl	8003eb8 <__aeabi_f2d>
 800cc72:	eeb4 9a49 	vcmp.f32	s18, s18
 800cc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7a:	f994 4000 	ldrsb.w	r4, [r4]
 800cc7e:	4b45      	ldr	r3, [pc, #276]	; (800cd94 <powf+0x2ac>)
 800cc80:	d713      	bvc.n	800ccaa <powf+0x1c2>
 800cc82:	2201      	movs	r2, #1
 800cc84:	e9cd 2300 	strd	r2, r3, [sp]
 800cc88:	9508      	str	r5, [sp, #32]
 800cc8a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cc8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc92:	2c00      	cmp	r4, #0
 800cc94:	d0c2      	beq.n	800cc1c <powf+0x134>
 800cc96:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800cc9a:	ee17 0a90 	vmov	r0, s15
 800cc9e:	f7f7 f90b 	bl	8003eb8 <__aeabi_f2d>
 800cca2:	2c02      	cmp	r4, #2
 800cca4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cca8:	e7c2      	b.n	800cc30 <powf+0x148>
 800ccaa:	2203      	movs	r2, #3
 800ccac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ccb0:	e9cd 2300 	strd	r2, r3, [sp]
 800ccb4:	9508      	str	r5, [sp, #32]
 800ccb6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ccba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccbe:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ccc2:	b9fc      	cbnz	r4, 800cd04 <powf+0x21c>
 800ccc4:	4b37      	ldr	r3, [pc, #220]	; (800cda4 <powf+0x2bc>)
 800ccc6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800ccca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ccce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ccd6:	d553      	bpl.n	800cd80 <powf+0x298>
 800ccd8:	eeb0 0a48 	vmov.f32	s0, s16
 800ccdc:	f000 fe3c 	bl	800d958 <rintf>
 800cce0:	eeb4 0a48 	vcmp.f32	s0, s16
 800cce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce8:	d004      	beq.n	800ccf4 <powf+0x20c>
 800ccea:	4b2f      	ldr	r3, [pc, #188]	; (800cda8 <powf+0x2c0>)
 800ccec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ccf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ccf4:	f996 3000 	ldrsb.w	r3, [r6]
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d141      	bne.n	800cd80 <powf+0x298>
 800ccfc:	f7fe fdd4 	bl	800b8a8 <__errno>
 800cd00:	2322      	movs	r3, #34	; 0x22
 800cd02:	e799      	b.n	800cc38 <powf+0x150>
 800cd04:	4b29      	ldr	r3, [pc, #164]	; (800cdac <powf+0x2c4>)
 800cd06:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cd14:	d5ee      	bpl.n	800ccf4 <powf+0x20c>
 800cd16:	eeb0 0a48 	vmov.f32	s0, s16
 800cd1a:	f000 fe1d 	bl	800d958 <rintf>
 800cd1e:	eeb4 0a48 	vcmp.f32	s0, s16
 800cd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd26:	d0e5      	beq.n	800ccf4 <powf+0x20c>
 800cd28:	2200      	movs	r2, #0
 800cd2a:	4b1d      	ldr	r3, [pc, #116]	; (800cda0 <powf+0x2b8>)
 800cd2c:	e7e0      	b.n	800ccf0 <powf+0x208>
 800cd2e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd36:	f47f af4a 	bne.w	800cbce <powf+0xe6>
 800cd3a:	eeb0 0a68 	vmov.f32	s0, s17
 800cd3e:	f000 fdfa 	bl	800d936 <finitef>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	f43f af43 	beq.w	800cbce <powf+0xe6>
 800cd48:	eeb0 0a48 	vmov.f32	s0, s16
 800cd4c:	f000 fdf3 	bl	800d936 <finitef>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	f43f af3c 	beq.w	800cbce <powf+0xe6>
 800cd56:	2304      	movs	r3, #4
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	4b0e      	ldr	r3, [pc, #56]	; (800cd94 <powf+0x2ac>)
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	ee18 0a90 	vmov	r0, s17
 800cd62:	2300      	movs	r3, #0
 800cd64:	9308      	str	r3, [sp, #32]
 800cd66:	f7f7 f8a7 	bl	8003eb8 <__aeabi_f2d>
 800cd6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd6e:	ee18 0a10 	vmov	r0, s16
 800cd72:	f7f7 f8a1 	bl	8003eb8 <__aeabi_f2d>
 800cd76:	2200      	movs	r2, #0
 800cd78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e7b7      	b.n	800ccf0 <powf+0x208>
 800cd80:	4668      	mov	r0, sp
 800cd82:	f000 fc9a 	bl	800d6ba <matherr>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	f47f af15 	bne.w	800cbb6 <powf+0xce>
 800cd8c:	e7b6      	b.n	800ccfc <powf+0x214>
 800cd8e:	bf00      	nop
 800cd90:	200004f0 	.word	0x200004f0
 800cd94:	08072e0d 	.word	0x08072e0d
 800cd98:	3ff00000 	.word	0x3ff00000
 800cd9c:	00000000 	.word	0x00000000
 800cda0:	fff00000 	.word	0xfff00000
 800cda4:	47efffff 	.word	0x47efffff
 800cda8:	c7efffff 	.word	0xc7efffff
 800cdac:	7ff00000 	.word	0x7ff00000

0800cdb0 <__ieee754_expf>:
 800cdb0:	ee10 2a10 	vmov	r2, s0
 800cdb4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800cdb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cdbc:	d902      	bls.n	800cdc4 <__ieee754_expf+0x14>
 800cdbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cdc2:	4770      	bx	lr
 800cdc4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800cdc8:	d106      	bne.n	800cdd8 <__ieee754_expf+0x28>
 800cdca:	eddf 7a51 	vldr	s15, [pc, #324]	; 800cf10 <__ieee754_expf+0x160>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	bf18      	it	ne
 800cdd2:	eeb0 0a67 	vmovne.f32	s0, s15
 800cdd6:	4770      	bx	lr
 800cdd8:	484e      	ldr	r0, [pc, #312]	; (800cf14 <__ieee754_expf+0x164>)
 800cdda:	4282      	cmp	r2, r0
 800cddc:	dd04      	ble.n	800cde8 <__ieee754_expf+0x38>
 800cdde:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800cf18 <__ieee754_expf+0x168>
 800cde2:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cde6:	4770      	bx	lr
 800cde8:	2a00      	cmp	r2, #0
 800cdea:	da03      	bge.n	800cdf4 <__ieee754_expf+0x44>
 800cdec:	4a4b      	ldr	r2, [pc, #300]	; (800cf1c <__ieee754_expf+0x16c>)
 800cdee:	4291      	cmp	r1, r2
 800cdf0:	f200 808a 	bhi.w	800cf08 <__ieee754_expf+0x158>
 800cdf4:	4a4a      	ldr	r2, [pc, #296]	; (800cf20 <__ieee754_expf+0x170>)
 800cdf6:	4291      	cmp	r1, r2
 800cdf8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cdfc:	d954      	bls.n	800cea8 <__ieee754_expf+0xf8>
 800cdfe:	4a49      	ldr	r2, [pc, #292]	; (800cf24 <__ieee754_expf+0x174>)
 800ce00:	4291      	cmp	r1, r2
 800ce02:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ce06:	d836      	bhi.n	800ce76 <__ieee754_expf+0xc6>
 800ce08:	4947      	ldr	r1, [pc, #284]	; (800cf28 <__ieee754_expf+0x178>)
 800ce0a:	4411      	add	r1, r2
 800ce0c:	ed91 7a00 	vldr	s14, [r1]
 800ce10:	4946      	ldr	r1, [pc, #280]	; (800cf2c <__ieee754_expf+0x17c>)
 800ce12:	440a      	add	r2, r1
 800ce14:	edd2 7a00 	vldr	s15, [r2]
 800ce18:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ce1c:	f1c3 0201 	rsb	r2, r3, #1
 800ce20:	1ad2      	subs	r2, r2, r3
 800ce22:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ce26:	ee60 6a00 	vmul.f32	s13, s0, s0
 800ce2a:	eddf 5a41 	vldr	s11, [pc, #260]	; 800cf30 <__ieee754_expf+0x180>
 800ce2e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800cf34 <__ieee754_expf+0x184>
 800ce32:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800ce36:	eddf 5a40 	vldr	s11, [pc, #256]	; 800cf38 <__ieee754_expf+0x188>
 800ce3a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ce3e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800cf3c <__ieee754_expf+0x18c>
 800ce42:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800ce46:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cf40 <__ieee754_expf+0x190>
 800ce4a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ce4e:	eeb0 5a40 	vmov.f32	s10, s0
 800ce52:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800ce56:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ce5a:	eef0 6a45 	vmov.f32	s13, s10
 800ce5e:	ee20 5a05 	vmul.f32	s10, s0, s10
 800ce62:	bb92      	cbnz	r2, 800ceca <__ieee754_expf+0x11a>
 800ce64:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800ce68:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ce6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ce70:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ce74:	4770      	bx	lr
 800ce76:	4b33      	ldr	r3, [pc, #204]	; (800cf44 <__ieee754_expf+0x194>)
 800ce78:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800cf48 <__ieee754_expf+0x198>
 800ce7c:	4413      	add	r3, r2
 800ce7e:	edd3 7a00 	vldr	s15, [r3]
 800ce82:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ce86:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cf4c <__ieee754_expf+0x19c>
 800ce8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce8e:	ee17 2a90 	vmov	r2, s15
 800ce92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce96:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ce9a:	eeb0 7a40 	vmov.f32	s14, s0
 800ce9e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800cf50 <__ieee754_expf+0x1a0>
 800cea2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cea6:	e7bc      	b.n	800ce22 <__ieee754_expf+0x72>
 800cea8:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800ceac:	d20b      	bcs.n	800cec6 <__ieee754_expf+0x116>
 800ceae:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800cf18 <__ieee754_expf+0x168>
 800ceb2:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ceb6:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ceba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cebe:	dd02      	ble.n	800cec6 <__ieee754_expf+0x116>
 800cec0:	ee30 0a06 	vadd.f32	s0, s0, s12
 800cec4:	4770      	bx	lr
 800cec6:	2200      	movs	r2, #0
 800cec8:	e7ad      	b.n	800ce26 <__ieee754_expf+0x76>
 800ceca:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800cece:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800ced2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800ced6:	bfb8      	it	lt
 800ced8:	3264      	addlt	r2, #100	; 0x64
 800ceda:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cede:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800cee2:	ee76 7a40 	vsub.f32	s15, s12, s0
 800cee6:	ee17 3a90 	vmov	r3, s15
 800ceea:	bfab      	itete	ge
 800ceec:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800cef0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800cef4:	ee00 3a10 	vmovge	s0, r3
 800cef8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800cf54 <__ieee754_expf+0x1a4>
 800cefc:	bfbc      	itt	lt
 800cefe:	ee00 3a10 	vmovlt	s0, r3
 800cf02:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800cf06:	4770      	bx	lr
 800cf08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf10 <__ieee754_expf+0x160>
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	00000000 	.word	0x00000000
 800cf14:	42b17217 	.word	0x42b17217
 800cf18:	7149f2ca 	.word	0x7149f2ca
 800cf1c:	42cff1b5 	.word	0x42cff1b5
 800cf20:	3eb17218 	.word	0x3eb17218
 800cf24:	3f851591 	.word	0x3f851591
 800cf28:	08072e1c 	.word	0x08072e1c
 800cf2c:	08072e24 	.word	0x08072e24
 800cf30:	3331bb4c 	.word	0x3331bb4c
 800cf34:	b5ddea0e 	.word	0xb5ddea0e
 800cf38:	388ab355 	.word	0x388ab355
 800cf3c:	bb360b61 	.word	0xbb360b61
 800cf40:	3e2aaaab 	.word	0x3e2aaaab
 800cf44:	08072e14 	.word	0x08072e14
 800cf48:	3fb8aa3b 	.word	0x3fb8aa3b
 800cf4c:	3f317180 	.word	0x3f317180
 800cf50:	3717f7d1 	.word	0x3717f7d1
 800cf54:	0d800000 	.word	0x0d800000

0800cf58 <__ieee754_logf>:
 800cf58:	ee10 3a10 	vmov	r3, s0
 800cf5c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cf60:	d106      	bne.n	800cf70 <__ieee754_logf+0x18>
 800cf62:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d0f8 <__ieee754_logf+0x1a0>
 800cf66:	eddf 7a65 	vldr	s15, [pc, #404]	; 800d0fc <__ieee754_logf+0x1a4>
 800cf6a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800cf6e:	4770      	bx	lr
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	da02      	bge.n	800cf7a <__ieee754_logf+0x22>
 800cf74:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cf78:	e7f5      	b.n	800cf66 <__ieee754_logf+0xe>
 800cf7a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cf7e:	db02      	blt.n	800cf86 <__ieee754_logf+0x2e>
 800cf80:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf84:	4770      	bx	lr
 800cf86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf8a:	bfbf      	itttt	lt
 800cf8c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800d100 <__ieee754_logf+0x1a8>
 800cf90:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800cf94:	f06f 0118 	mvnlt.w	r1, #24
 800cf98:	ee17 3a90 	vmovlt	r3, s15
 800cf9c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800cfa0:	bfa8      	it	ge
 800cfa2:	2100      	movge	r1, #0
 800cfa4:	3a7f      	subs	r2, #127	; 0x7f
 800cfa6:	440a      	add	r2, r1
 800cfa8:	4956      	ldr	r1, [pc, #344]	; (800d104 <__ieee754_logf+0x1ac>)
 800cfaa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cfae:	4419      	add	r1, r3
 800cfb0:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800cfb4:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800cfb8:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800cfbc:	4319      	orrs	r1, r3
 800cfbe:	ee07 1a90 	vmov	s15, r1
 800cfc2:	f103 010f 	add.w	r1, r3, #15
 800cfc6:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800cfca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cfce:	290f      	cmp	r1, #15
 800cfd0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cfd4:	dc31      	bgt.n	800d03a <__ieee754_logf+0xe2>
 800cfd6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfde:	d10f      	bne.n	800d000 <__ieee754_logf+0xa8>
 800cfe0:	2a00      	cmp	r2, #0
 800cfe2:	f000 8085 	beq.w	800d0f0 <__ieee754_logf+0x198>
 800cfe6:	ee07 2a90 	vmov	s15, r2
 800cfea:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800d108 <__ieee754_logf+0x1b0>
 800cfee:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800d10c <__ieee754_logf+0x1b4>
 800cff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cff6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cffa:	eea7 0a87 	vfma.f32	s0, s15, s14
 800cffe:	4770      	bx	lr
 800d000:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d110 <__ieee754_logf+0x1b8>
 800d004:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d008:	eea0 7a67 	vfms.f32	s14, s0, s15
 800d00c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d010:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d014:	b912      	cbnz	r2, 800d01c <__ieee754_logf+0xc4>
 800d016:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d01a:	4770      	bx	lr
 800d01c:	ee07 2a90 	vmov	s15, r2
 800d020:	eddf 6a39 	vldr	s13, [pc, #228]	; 800d108 <__ieee754_logf+0x1b0>
 800d024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d028:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d02c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d030:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d10c <__ieee754_logf+0x1b4>
 800d034:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800d038:	4770      	bx	lr
 800d03a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d03e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d042:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d114 <__ieee754_logf+0x1bc>
 800d046:	eddf 4a34 	vldr	s9, [pc, #208]	; 800d118 <__ieee754_logf+0x1c0>
 800d04a:	4934      	ldr	r1, [pc, #208]	; (800d11c <__ieee754_logf+0x1c4>)
 800d04c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800d050:	4419      	add	r1, r3
 800d052:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800d056:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d05a:	430b      	orrs	r3, r1
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	ee07 2a90 	vmov	s15, r2
 800d062:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d066:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d06a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800d06e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d120 <__ieee754_logf+0x1c8>
 800d072:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d076:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800d124 <__ieee754_logf+0x1cc>
 800d07a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d07e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d128 <__ieee754_logf+0x1d0>
 800d082:	eee7 7a24 	vfma.f32	s15, s14, s9
 800d086:	eddf 4a29 	vldr	s9, [pc, #164]	; 800d12c <__ieee754_logf+0x1d4>
 800d08a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800d08e:	eddf 7a28 	vldr	s15, [pc, #160]	; 800d130 <__ieee754_logf+0x1d8>
 800d092:	eee4 7a87 	vfma.f32	s15, s9, s14
 800d096:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d09a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d09e:	dd1c      	ble.n	800d0da <__ieee754_logf+0x182>
 800d0a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d0a4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d0a8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800d0ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d0b4:	b922      	cbnz	r2, 800d0c0 <__ieee754_logf+0x168>
 800d0b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d0be:	4770      	bx	lr
 800d0c0:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800d108 <__ieee754_logf+0x1b0>
 800d0c4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d0c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d0d0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d10c <__ieee754_logf+0x1b4>
 800d0d4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800d0d8:	4770      	bx	lr
 800d0da:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d0de:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d0e2:	2a00      	cmp	r2, #0
 800d0e4:	d0e9      	beq.n	800d0ba <__ieee754_logf+0x162>
 800d0e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d108 <__ieee754_logf+0x1b0>
 800d0ea:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d0ee:	e7ed      	b.n	800d0cc <__ieee754_logf+0x174>
 800d0f0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800d0fc <__ieee754_logf+0x1a4>
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	cc000000 	.word	0xcc000000
 800d0fc:	00000000 	.word	0x00000000
 800d100:	4c000000 	.word	0x4c000000
 800d104:	004afb20 	.word	0x004afb20
 800d108:	3717f7d1 	.word	0x3717f7d1
 800d10c:	3f317180 	.word	0x3f317180
 800d110:	3eaaaaab 	.word	0x3eaaaaab
 800d114:	3e1cd04f 	.word	0x3e1cd04f
 800d118:	3e178897 	.word	0x3e178897
 800d11c:	ffcf5c30 	.word	0xffcf5c30
 800d120:	3e638e29 	.word	0x3e638e29
 800d124:	3ecccccd 	.word	0x3ecccccd
 800d128:	3e3a3325 	.word	0x3e3a3325
 800d12c:	3e924925 	.word	0x3e924925
 800d130:	3f2aaaab 	.word	0x3f2aaaab

0800d134 <__ieee754_powf>:
 800d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d138:	ee10 5a90 	vmov	r5, s1
 800d13c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800d140:	ed2d 8b02 	vpush	{d8}
 800d144:	eeb0 8a40 	vmov.f32	s16, s0
 800d148:	eef0 8a60 	vmov.f32	s17, s1
 800d14c:	f000 8293 	beq.w	800d676 <__ieee754_powf+0x542>
 800d150:	ee10 8a10 	vmov	r8, s0
 800d154:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800d158:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d15c:	dc06      	bgt.n	800d16c <__ieee754_powf+0x38>
 800d15e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d162:	dd0a      	ble.n	800d17a <__ieee754_powf+0x46>
 800d164:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d168:	f000 8285 	beq.w	800d676 <__ieee754_powf+0x542>
 800d16c:	ecbd 8b02 	vpop	{d8}
 800d170:	48d9      	ldr	r0, [pc, #868]	; (800d4d8 <__ieee754_powf+0x3a4>)
 800d172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d176:	f000 bbe9 	b.w	800d94c <nanf>
 800d17a:	f1b8 0f00 	cmp.w	r8, #0
 800d17e:	da1d      	bge.n	800d1bc <__ieee754_powf+0x88>
 800d180:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800d184:	da2c      	bge.n	800d1e0 <__ieee754_powf+0xac>
 800d186:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d18a:	db30      	blt.n	800d1ee <__ieee754_powf+0xba>
 800d18c:	15fb      	asrs	r3, r7, #23
 800d18e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d192:	fa47 f603 	asr.w	r6, r7, r3
 800d196:	fa06 f303 	lsl.w	r3, r6, r3
 800d19a:	42bb      	cmp	r3, r7
 800d19c:	d127      	bne.n	800d1ee <__ieee754_powf+0xba>
 800d19e:	f006 0601 	and.w	r6, r6, #1
 800d1a2:	f1c6 0602 	rsb	r6, r6, #2
 800d1a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d1aa:	d122      	bne.n	800d1f2 <__ieee754_powf+0xbe>
 800d1ac:	2d00      	cmp	r5, #0
 800d1ae:	f280 8268 	bge.w	800d682 <__ieee754_powf+0x54e>
 800d1b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d1b6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d1ba:	e00d      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d1bc:	2600      	movs	r6, #0
 800d1be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d1c2:	d1f0      	bne.n	800d1a6 <__ieee754_powf+0x72>
 800d1c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d1c8:	f000 8255 	beq.w	800d676 <__ieee754_powf+0x542>
 800d1cc:	dd0a      	ble.n	800d1e4 <__ieee754_powf+0xb0>
 800d1ce:	2d00      	cmp	r5, #0
 800d1d0:	f280 8254 	bge.w	800d67c <__ieee754_powf+0x548>
 800d1d4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d4dc <__ieee754_powf+0x3a8>
 800d1d8:	ecbd 8b02 	vpop	{d8}
 800d1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e0:	2602      	movs	r6, #2
 800d1e2:	e7ec      	b.n	800d1be <__ieee754_powf+0x8a>
 800d1e4:	2d00      	cmp	r5, #0
 800d1e6:	daf5      	bge.n	800d1d4 <__ieee754_powf+0xa0>
 800d1e8:	eeb1 0a68 	vneg.f32	s0, s17
 800d1ec:	e7f4      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d1ee:	2600      	movs	r6, #0
 800d1f0:	e7d9      	b.n	800d1a6 <__ieee754_powf+0x72>
 800d1f2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800d1f6:	d102      	bne.n	800d1fe <__ieee754_powf+0xca>
 800d1f8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d1fc:	e7ec      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d1fe:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800d202:	eeb0 0a48 	vmov.f32	s0, s16
 800d206:	d108      	bne.n	800d21a <__ieee754_powf+0xe6>
 800d208:	f1b8 0f00 	cmp.w	r8, #0
 800d20c:	db05      	blt.n	800d21a <__ieee754_powf+0xe6>
 800d20e:	ecbd 8b02 	vpop	{d8}
 800d212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d216:	f000 ba4d 	b.w	800d6b4 <__ieee754_sqrtf>
 800d21a:	f000 fb85 	bl	800d928 <fabsf>
 800d21e:	b124      	cbz	r4, 800d22a <__ieee754_powf+0xf6>
 800d220:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800d224:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d228:	d117      	bne.n	800d25a <__ieee754_powf+0x126>
 800d22a:	2d00      	cmp	r5, #0
 800d22c:	bfbc      	itt	lt
 800d22e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d232:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d236:	f1b8 0f00 	cmp.w	r8, #0
 800d23a:	dacd      	bge.n	800d1d8 <__ieee754_powf+0xa4>
 800d23c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800d240:	ea54 0306 	orrs.w	r3, r4, r6
 800d244:	d104      	bne.n	800d250 <__ieee754_powf+0x11c>
 800d246:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d24a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d24e:	e7c3      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d250:	2e01      	cmp	r6, #1
 800d252:	d1c1      	bne.n	800d1d8 <__ieee754_powf+0xa4>
 800d254:	eeb1 0a40 	vneg.f32	s0, s0
 800d258:	e7be      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d25a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800d25e:	3801      	subs	r0, #1
 800d260:	ea56 0300 	orrs.w	r3, r6, r0
 800d264:	d104      	bne.n	800d270 <__ieee754_powf+0x13c>
 800d266:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d26a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d26e:	e7b3      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d270:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800d274:	dd6d      	ble.n	800d352 <__ieee754_powf+0x21e>
 800d276:	4b9a      	ldr	r3, [pc, #616]	; (800d4e0 <__ieee754_powf+0x3ac>)
 800d278:	429c      	cmp	r4, r3
 800d27a:	dc06      	bgt.n	800d28a <__ieee754_powf+0x156>
 800d27c:	2d00      	cmp	r5, #0
 800d27e:	daa9      	bge.n	800d1d4 <__ieee754_powf+0xa0>
 800d280:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800d4e4 <__ieee754_powf+0x3b0>
 800d284:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d288:	e7a6      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d28a:	4b97      	ldr	r3, [pc, #604]	; (800d4e8 <__ieee754_powf+0x3b4>)
 800d28c:	429c      	cmp	r4, r3
 800d28e:	dd02      	ble.n	800d296 <__ieee754_powf+0x162>
 800d290:	2d00      	cmp	r5, #0
 800d292:	dcf5      	bgt.n	800d280 <__ieee754_powf+0x14c>
 800d294:	e79e      	b.n	800d1d4 <__ieee754_powf+0xa0>
 800d296:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d29a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d29e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800d4ec <__ieee754_powf+0x3b8>
 800d2a2:	eef1 6a40 	vneg.f32	s13, s0
 800d2a6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d2aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d2ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d2b2:	eee7 7a40 	vfms.f32	s15, s14, s0
 800d2b6:	ee60 0a00 	vmul.f32	s1, s0, s0
 800d2ba:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800d4f0 <__ieee754_powf+0x3bc>
 800d2be:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800d2c2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800d4f4 <__ieee754_powf+0x3c0>
 800d2c6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800d2ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d2ce:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d4f8 <__ieee754_powf+0x3c4>
 800d2d2:	eeb0 6a67 	vmov.f32	s12, s15
 800d2d6:	eea0 6a07 	vfma.f32	s12, s0, s14
 800d2da:	ee16 3a10 	vmov	r3, s12
 800d2de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d2e2:	f023 030f 	bic.w	r3, r3, #15
 800d2e6:	ee00 3a90 	vmov	s1, r3
 800d2ea:	eee6 0a87 	vfma.f32	s1, s13, s14
 800d2ee:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d2f2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d2f6:	f025 050f 	bic.w	r5, r5, #15
 800d2fa:	ee07 5a10 	vmov	s14, r5
 800d2fe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d302:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d30e:	3e01      	subs	r6, #1
 800d310:	ea56 0200 	orrs.w	r2, r6, r0
 800d314:	ee07 5a10 	vmov	s14, r5
 800d318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d31c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d320:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d324:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d328:	ee17 4a10 	vmov	r4, s14
 800d32c:	bf08      	it	eq
 800d32e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d332:	2c00      	cmp	r4, #0
 800d334:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d338:	f340 8184 	ble.w	800d644 <__ieee754_powf+0x510>
 800d33c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d340:	f340 80fc 	ble.w	800d53c <__ieee754_powf+0x408>
 800d344:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d4e4 <__ieee754_powf+0x3b0>
 800d348:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d34c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d350:	e742      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d352:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800d356:	bfbf      	itttt	lt
 800d358:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800d4fc <__ieee754_powf+0x3c8>
 800d35c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d360:	f06f 0217 	mvnlt.w	r2, #23
 800d364:	ee17 4a90 	vmovlt	r4, s15
 800d368:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d36c:	bfa8      	it	ge
 800d36e:	2200      	movge	r2, #0
 800d370:	3b7f      	subs	r3, #127	; 0x7f
 800d372:	4413      	add	r3, r2
 800d374:	4a62      	ldr	r2, [pc, #392]	; (800d500 <__ieee754_powf+0x3cc>)
 800d376:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d37a:	4294      	cmp	r4, r2
 800d37c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d380:	dd06      	ble.n	800d390 <__ieee754_powf+0x25c>
 800d382:	4a60      	ldr	r2, [pc, #384]	; (800d504 <__ieee754_powf+0x3d0>)
 800d384:	4294      	cmp	r4, r2
 800d386:	f340 80a5 	ble.w	800d4d4 <__ieee754_powf+0x3a0>
 800d38a:	3301      	adds	r3, #1
 800d38c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d390:	2400      	movs	r4, #0
 800d392:	4a5d      	ldr	r2, [pc, #372]	; (800d508 <__ieee754_powf+0x3d4>)
 800d394:	00a7      	lsls	r7, r4, #2
 800d396:	443a      	add	r2, r7
 800d398:	ee07 1a90 	vmov	s15, r1
 800d39c:	ed92 7a00 	vldr	s14, [r2]
 800d3a0:	4a5a      	ldr	r2, [pc, #360]	; (800d50c <__ieee754_powf+0x3d8>)
 800d3a2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d3a6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d3aa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800d3ae:	1049      	asrs	r1, r1, #1
 800d3b0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d3b4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d3b8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d3bc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800d3c0:	ee06 1a10 	vmov	s12, r1
 800d3c4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800d3c8:	ee14 ca90 	vmov	ip, s9
 800d3cc:	ea02 0c0c 	and.w	ip, r2, ip
 800d3d0:	ee05 ca10 	vmov	s10, ip
 800d3d4:	eeb1 4a45 	vneg.f32	s8, s10
 800d3d8:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d3dc:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d3e0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d510 <__ieee754_powf+0x3dc>
 800d3e4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800d3e8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d3ec:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d3f0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800d3f4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800d3f8:	eddf 5a46 	vldr	s11, [pc, #280]	; 800d514 <__ieee754_powf+0x3e0>
 800d3fc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d400:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d518 <__ieee754_powf+0x3e4>
 800d404:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d408:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d4ec <__ieee754_powf+0x3b8>
 800d40c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d410:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d51c <__ieee754_powf+0x3e8>
 800d414:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d418:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d520 <__ieee754_powf+0x3ec>
 800d41c:	ee75 6a24 	vadd.f32	s13, s10, s9
 800d420:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d424:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d428:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800d42c:	eef0 7a65 	vmov.f32	s15, s11
 800d430:	eee3 6a87 	vfma.f32	s13, s7, s14
 800d434:	eee5 7a05 	vfma.f32	s15, s10, s10
 800d438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d43c:	ee17 1a90 	vmov	r1, s15
 800d440:	4011      	ands	r1, r2
 800d442:	ee07 1a90 	vmov	s15, r1
 800d446:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800d44a:	eddf 5a36 	vldr	s11, [pc, #216]	; 800d524 <__ieee754_powf+0x3f0>
 800d44e:	eea4 7a05 	vfma.f32	s14, s8, s10
 800d452:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d456:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d45a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800d45e:	eeb0 6a47 	vmov.f32	s12, s14
 800d462:	eea5 6a27 	vfma.f32	s12, s10, s15
 800d466:	ee16 1a10 	vmov	r1, s12
 800d46a:	4011      	ands	r1, r2
 800d46c:	ee06 1a90 	vmov	s13, r1
 800d470:	eee4 6a27 	vfma.f32	s13, s8, s15
 800d474:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d528 <__ieee754_powf+0x3f4>
 800d478:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d47c:	ee06 1a10 	vmov	s12, r1
 800d480:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d484:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d52c <__ieee754_powf+0x3f8>
 800d488:	4929      	ldr	r1, [pc, #164]	; (800d530 <__ieee754_powf+0x3fc>)
 800d48a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d48e:	4439      	add	r1, r7
 800d490:	edd1 7a00 	vldr	s15, [r1]
 800d494:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d498:	ee07 3a90 	vmov	s15, r3
 800d49c:	eef0 0a47 	vmov.f32	s1, s14
 800d4a0:	4b24      	ldr	r3, [pc, #144]	; (800d534 <__ieee754_powf+0x400>)
 800d4a2:	eee6 0a25 	vfma.f32	s1, s12, s11
 800d4a6:	443b      	add	r3, r7
 800d4a8:	ed93 5a00 	vldr	s10, [r3]
 800d4ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d4b0:	ee70 0a85 	vadd.f32	s1, s1, s10
 800d4b4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800d4b8:	ee17 3a90 	vmov	r3, s15
 800d4bc:	4013      	ands	r3, r2
 800d4be:	ee07 3a90 	vmov	s15, r3
 800d4c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d4c6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d4ca:	eee6 7a65 	vfms.f32	s15, s12, s11
 800d4ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4d2:	e70e      	b.n	800d2f2 <__ieee754_powf+0x1be>
 800d4d4:	2401      	movs	r4, #1
 800d4d6:	e75c      	b.n	800d392 <__ieee754_powf+0x25e>
 800d4d8:	08072dd5 	.word	0x08072dd5
 800d4dc:	00000000 	.word	0x00000000
 800d4e0:	3f7ffff7 	.word	0x3f7ffff7
 800d4e4:	7149f2ca 	.word	0x7149f2ca
 800d4e8:	3f800007 	.word	0x3f800007
 800d4ec:	3eaaaaab 	.word	0x3eaaaaab
 800d4f0:	36eca570 	.word	0x36eca570
 800d4f4:	3fb8aa3b 	.word	0x3fb8aa3b
 800d4f8:	3fb8aa00 	.word	0x3fb8aa00
 800d4fc:	4b800000 	.word	0x4b800000
 800d500:	001cc471 	.word	0x001cc471
 800d504:	005db3d6 	.word	0x005db3d6
 800d508:	08072e2c 	.word	0x08072e2c
 800d50c:	fffff000 	.word	0xfffff000
 800d510:	3e6c3255 	.word	0x3e6c3255
 800d514:	3e53f142 	.word	0x3e53f142
 800d518:	3e8ba305 	.word	0x3e8ba305
 800d51c:	3edb6db7 	.word	0x3edb6db7
 800d520:	3f19999a 	.word	0x3f19999a
 800d524:	3f763800 	.word	0x3f763800
 800d528:	3f76384f 	.word	0x3f76384f
 800d52c:	369dc3a0 	.word	0x369dc3a0
 800d530:	08072e3c 	.word	0x08072e3c
 800d534:	08072e34 	.word	0x08072e34
 800d538:	3338aa3c 	.word	0x3338aa3c
 800d53c:	f040 8092 	bne.w	800d664 <__ieee754_powf+0x530>
 800d540:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d538 <__ieee754_powf+0x404>
 800d544:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d548:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d54c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d554:	f73f aef6 	bgt.w	800d344 <__ieee754_powf+0x210>
 800d558:	15db      	asrs	r3, r3, #23
 800d55a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d55e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d562:	4103      	asrs	r3, r0
 800d564:	4423      	add	r3, r4
 800d566:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d56a:	4947      	ldr	r1, [pc, #284]	; (800d688 <__ieee754_powf+0x554>)
 800d56c:	3a7f      	subs	r2, #127	; 0x7f
 800d56e:	4111      	asrs	r1, r2
 800d570:	ea23 0101 	bic.w	r1, r3, r1
 800d574:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d578:	ee07 1a10 	vmov	s14, r1
 800d57c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d580:	f1c2 0217 	rsb	r2, r2, #23
 800d584:	4110      	asrs	r0, r2
 800d586:	2c00      	cmp	r4, #0
 800d588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d58c:	bfb8      	it	lt
 800d58e:	4240      	neglt	r0, r0
 800d590:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d594:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d68c <__ieee754_powf+0x558>
 800d598:	ee17 3a10 	vmov	r3, s14
 800d59c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d5a0:	f023 030f 	bic.w	r3, r3, #15
 800d5a4:	ee07 3a10 	vmov	s14, r3
 800d5a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d5b0:	eddf 7a37 	vldr	s15, [pc, #220]	; 800d690 <__ieee754_powf+0x55c>
 800d5b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d5bc:	eddf 6a35 	vldr	s13, [pc, #212]	; 800d694 <__ieee754_powf+0x560>
 800d5c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d5c4:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d5c8:	eeb0 6a40 	vmov.f32	s12, s0
 800d5cc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d5d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d5d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d5d8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d698 <__ieee754_powf+0x564>
 800d5dc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d69c <__ieee754_powf+0x568>
 800d5e0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d5e4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800d6a0 <__ieee754_powf+0x56c>
 800d5e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d5ec:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d6a4 <__ieee754_powf+0x570>
 800d5f0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d5f4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800d6a8 <__ieee754_powf+0x574>
 800d5f8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d5fc:	eeb0 6a40 	vmov.f32	s12, s0
 800d600:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d604:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d608:	eeb0 7a46 	vmov.f32	s14, s12
 800d60c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d610:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d614:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d618:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d61c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d620:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d624:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d628:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d62c:	ee10 3a10 	vmov	r3, s0
 800d630:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d638:	da1a      	bge.n	800d670 <__ieee754_powf+0x53c>
 800d63a:	f000 f9e7 	bl	800da0c <scalbnf>
 800d63e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d642:	e5c9      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d644:	4a19      	ldr	r2, [pc, #100]	; (800d6ac <__ieee754_powf+0x578>)
 800d646:	4293      	cmp	r3, r2
 800d648:	dd02      	ble.n	800d650 <__ieee754_powf+0x51c>
 800d64a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d6b0 <__ieee754_powf+0x57c>
 800d64e:	e67b      	b.n	800d348 <__ieee754_powf+0x214>
 800d650:	d108      	bne.n	800d664 <__ieee754_powf+0x530>
 800d652:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d656:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65e:	f6ff af7b 	blt.w	800d558 <__ieee754_powf+0x424>
 800d662:	e7f2      	b.n	800d64a <__ieee754_powf+0x516>
 800d664:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d668:	f73f af76 	bgt.w	800d558 <__ieee754_powf+0x424>
 800d66c:	2000      	movs	r0, #0
 800d66e:	e78f      	b.n	800d590 <__ieee754_powf+0x45c>
 800d670:	ee00 3a10 	vmov	s0, r3
 800d674:	e7e3      	b.n	800d63e <__ieee754_powf+0x50a>
 800d676:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d67a:	e5ad      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d67c:	eeb0 0a68 	vmov.f32	s0, s17
 800d680:	e5aa      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d682:	eeb0 0a48 	vmov.f32	s0, s16
 800d686:	e5a7      	b.n	800d1d8 <__ieee754_powf+0xa4>
 800d688:	007fffff 	.word	0x007fffff
 800d68c:	3f317218 	.word	0x3f317218
 800d690:	35bfbe8c 	.word	0x35bfbe8c
 800d694:	3f317200 	.word	0x3f317200
 800d698:	3331bb4c 	.word	0x3331bb4c
 800d69c:	b5ddea0e 	.word	0xb5ddea0e
 800d6a0:	388ab355 	.word	0x388ab355
 800d6a4:	bb360b61 	.word	0xbb360b61
 800d6a8:	3e2aaaab 	.word	0x3e2aaaab
 800d6ac:	43160000 	.word	0x43160000
 800d6b0:	0da24260 	.word	0x0da24260

0800d6b4 <__ieee754_sqrtf>:
 800d6b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d6b8:	4770      	bx	lr

0800d6ba <matherr>:
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	4770      	bx	lr
	...

0800d6c0 <nan>:
 800d6c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d6c8 <nan+0x8>
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	00000000 	.word	0x00000000
 800d6cc:	7ff80000 	.word	0x7ff80000

0800d6d0 <expm1f>:
 800d6d0:	ee10 2a10 	vmov	r2, s0
 800d6d4:	4985      	ldr	r1, [pc, #532]	; (800d8ec <expm1f+0x21c>)
 800d6d6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d6da:	428b      	cmp	r3, r1
 800d6dc:	d924      	bls.n	800d728 <expm1f+0x58>
 800d6de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d6e2:	d902      	bls.n	800d6ea <expm1f+0x1a>
 800d6e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d6e8:	4770      	bx	lr
 800d6ea:	d106      	bne.n	800d6fa <expm1f+0x2a>
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d6f2:	bfb8      	it	lt
 800d6f4:	eeb0 0a67 	vmovlt.f32	s0, s15
 800d6f8:	4770      	bx	lr
 800d6fa:	2a00      	cmp	r2, #0
 800d6fc:	db08      	blt.n	800d710 <expm1f+0x40>
 800d6fe:	4a7c      	ldr	r2, [pc, #496]	; (800d8f0 <expm1f+0x220>)
 800d700:	4293      	cmp	r3, r2
 800d702:	f240 80eb 	bls.w	800d8dc <expm1f+0x20c>
 800d706:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800d8f4 <expm1f+0x224>
 800d70a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d70e:	4770      	bx	lr
 800d710:	eddf 7a79 	vldr	s15, [pc, #484]	; 800d8f8 <expm1f+0x228>
 800d714:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d720:	d554      	bpl.n	800d7cc <expm1f+0xfc>
 800d722:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d726:	4770      	bx	lr
 800d728:	4974      	ldr	r1, [pc, #464]	; (800d8fc <expm1f+0x22c>)
 800d72a:	428b      	cmp	r3, r1
 800d72c:	d96d      	bls.n	800d80a <expm1f+0x13a>
 800d72e:	4974      	ldr	r1, [pc, #464]	; (800d900 <expm1f+0x230>)
 800d730:	428b      	cmp	r3, r1
 800d732:	d84b      	bhi.n	800d7cc <expm1f+0xfc>
 800d734:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d904 <expm1f+0x234>
 800d738:	2a00      	cmp	r2, #0
 800d73a:	bfa7      	ittee	ge
 800d73c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800d740:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800d908 <expm1f+0x238>
 800d744:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800d90c <expm1f+0x23c>
 800d748:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800d74c:	bfac      	ite	ge
 800d74e:	2301      	movge	r3, #1
 800d750:	f04f 33ff 	movlt.w	r3, #4294967295
 800d754:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d758:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d75c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d760:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d764:	ee20 5a25 	vmul.f32	s10, s0, s11
 800d768:	eddf 6a69 	vldr	s13, [pc, #420]	; 800d910 <expm1f+0x240>
 800d76c:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800d914 <expm1f+0x244>
 800d770:	ee20 7a05 	vmul.f32	s14, s0, s10
 800d774:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d778:	eddf 6a67 	vldr	s13, [pc, #412]	; 800d918 <expm1f+0x248>
 800d77c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d780:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800d91c <expm1f+0x24c>
 800d784:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d788:	eddf 6a65 	vldr	s13, [pc, #404]	; 800d920 <expm1f+0x250>
 800d78c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d790:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d794:	eef0 4a46 	vmov.f32	s9, s12
 800d798:	eee6 4a87 	vfma.f32	s9, s13, s14
 800d79c:	eef0 6a64 	vmov.f32	s13, s9
 800d7a0:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800d7a4:	eee5 4a66 	vfms.f32	s9, s10, s13
 800d7a8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800d7ac:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800d7b0:	eee0 6a64 	vfms.f32	s13, s0, s9
 800d7b4:	eef0 4a66 	vmov.f32	s9, s13
 800d7b8:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800d7bc:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d7c0:	bb8b      	cbnz	r3, 800d826 <expm1f+0x156>
 800d7c2:	eef0 7a47 	vmov.f32	s15, s14
 800d7c6:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800d7ca:	e027      	b.n	800d81c <expm1f+0x14c>
 800d7cc:	eddf 7a55 	vldr	s15, [pc, #340]	; 800d924 <expm1f+0x254>
 800d7d0:	2a00      	cmp	r2, #0
 800d7d2:	ee20 7a27 	vmul.f32	s14, s0, s15
 800d7d6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d7da:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800d7de:	bfa8      	it	ge
 800d7e0:	eef0 7a66 	vmovge.f32	s15, s13
 800d7e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d7e8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d904 <expm1f+0x234>
 800d7ec:	eddf 6a46 	vldr	s13, [pc, #280]	; 800d908 <expm1f+0x238>
 800d7f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7f4:	ee17 3a90 	vmov	r3, s15
 800d7f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d804:	eeb0 7a40 	vmov.f32	s14, s0
 800d808:	e7a4      	b.n	800d754 <expm1f+0x84>
 800d80a:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800d80e:	d208      	bcs.n	800d822 <expm1f+0x152>
 800d810:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d8f4 <expm1f+0x224>
 800d814:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d818:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800d81c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d820:	4770      	bx	lr
 800d822:	2300      	movs	r3, #0
 800d824:	e79c      	b.n	800d760 <expm1f+0x90>
 800d826:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d82a:	1c5a      	adds	r2, r3, #1
 800d82c:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800d830:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d834:	d106      	bne.n	800d844 <expm1f+0x174>
 800d836:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d83a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800d83e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800d842:	4770      	bx	lr
 800d844:	2b01      	cmp	r3, #1
 800d846:	d118      	bne.n	800d87a <expm1f+0x1aa>
 800d848:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800d84c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d854:	bf41      	itttt	mi
 800d856:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800d85a:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800d85e:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800d862:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800d866:	bf5f      	itttt	pl
 800d868:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800d86c:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800d870:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800d874:	eeb0 0a46 	vmovpl.f32	s0, s12
 800d878:	4770      	bx	lr
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	2a39      	cmp	r2, #57	; 0x39
 800d87e:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800d882:	d90b      	bls.n	800d89c <expm1f+0x1cc>
 800d884:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d888:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d88c:	ee10 3a10 	vmov	r3, s0
 800d890:	440b      	add	r3, r1
 800d892:	ee00 3a10 	vmov	s0, r3
 800d896:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d89a:	4770      	bx	lr
 800d89c:	2b16      	cmp	r3, #22
 800d89e:	dc11      	bgt.n	800d8c4 <expm1f+0x1f4>
 800d8a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d8a4:	fa42 f303 	asr.w	r3, r2, r3
 800d8a8:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800d8ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d8b0:	ee07 3a90 	vmov	s15, r3
 800d8b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d8b8:	ee10 3a10 	vmov	r3, s0
 800d8bc:	440b      	add	r3, r1
 800d8be:	ee00 3a10 	vmov	s0, r3
 800d8c2:	4770      	bx	lr
 800d8c4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800d8c8:	05db      	lsls	r3, r3, #23
 800d8ca:	ee07 3a10 	vmov	s14, r3
 800d8ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d8d6:	ee30 0a06 	vadd.f32	s0, s0, s12
 800d8da:	e7ed      	b.n	800d8b8 <expm1f+0x1e8>
 800d8dc:	eddf 7a11 	vldr	s15, [pc, #68]	; 800d924 <expm1f+0x254>
 800d8e0:	ee20 7a27 	vmul.f32	s14, s0, s15
 800d8e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d8e8:	e77c      	b.n	800d7e4 <expm1f+0x114>
 800d8ea:	bf00      	nop
 800d8ec:	4195b843 	.word	0x4195b843
 800d8f0:	42b17217 	.word	0x42b17217
 800d8f4:	7149f2ca 	.word	0x7149f2ca
 800d8f8:	0da24260 	.word	0x0da24260
 800d8fc:	3eb17218 	.word	0x3eb17218
 800d900:	3f851591 	.word	0x3f851591
 800d904:	3f317180 	.word	0x3f317180
 800d908:	3717f7d1 	.word	0x3717f7d1
 800d90c:	b717f7d1 	.word	0xb717f7d1
 800d910:	b457edbb 	.word	0xb457edbb
 800d914:	36867e54 	.word	0x36867e54
 800d918:	b8a670cd 	.word	0xb8a670cd
 800d91c:	3ad00d01 	.word	0x3ad00d01
 800d920:	bd088889 	.word	0xbd088889
 800d924:	3fb8aa3b 	.word	0x3fb8aa3b

0800d928 <fabsf>:
 800d928:	ee10 3a10 	vmov	r3, s0
 800d92c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d930:	ee00 3a10 	vmov	s0, r3
 800d934:	4770      	bx	lr

0800d936 <finitef>:
 800d936:	ee10 3a10 	vmov	r3, s0
 800d93a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800d93e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d942:	bfac      	ite	ge
 800d944:	2000      	movge	r0, #0
 800d946:	2001      	movlt	r0, #1
 800d948:	4770      	bx	lr
	...

0800d94c <nanf>:
 800d94c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d954 <nanf+0x8>
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	7fc00000 	.word	0x7fc00000

0800d958 <rintf>:
 800d958:	b513      	push	{r0, r1, r4, lr}
 800d95a:	ee10 1a10 	vmov	r1, s0
 800d95e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d962:	0ddc      	lsrs	r4, r3, #23
 800d964:	3c7f      	subs	r4, #127	; 0x7f
 800d966:	2c16      	cmp	r4, #22
 800d968:	dc46      	bgt.n	800d9f8 <rintf+0xa0>
 800d96a:	b32b      	cbz	r3, 800d9b8 <rintf+0x60>
 800d96c:	2c00      	cmp	r4, #0
 800d96e:	ee10 2a10 	vmov	r2, s0
 800d972:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800d976:	da21      	bge.n	800d9bc <rintf+0x64>
 800d978:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800d97c:	425b      	negs	r3, r3
 800d97e:	4a21      	ldr	r2, [pc, #132]	; (800da04 <rintf+0xac>)
 800d980:	0a5b      	lsrs	r3, r3, #9
 800d982:	0d09      	lsrs	r1, r1, #20
 800d984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d988:	0509      	lsls	r1, r1, #20
 800d98a:	430b      	orrs	r3, r1
 800d98c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800d990:	ee07 3a90 	vmov	s15, r3
 800d994:	edd2 6a00 	vldr	s13, [r2]
 800d998:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800d99c:	ed8d 7a01 	vstr	s14, [sp, #4]
 800d9a0:	eddd 7a01 	vldr	s15, [sp, #4]
 800d9a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d9a8:	ee17 3a90 	vmov	r3, s15
 800d9ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9b0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800d9b4:	ee00 3a10 	vmov	s0, r3
 800d9b8:	b002      	add	sp, #8
 800d9ba:	bd10      	pop	{r4, pc}
 800d9bc:	4b12      	ldr	r3, [pc, #72]	; (800da08 <rintf+0xb0>)
 800d9be:	4123      	asrs	r3, r4
 800d9c0:	4219      	tst	r1, r3
 800d9c2:	d0f9      	beq.n	800d9b8 <rintf+0x60>
 800d9c4:	085b      	lsrs	r3, r3, #1
 800d9c6:	4219      	tst	r1, r3
 800d9c8:	d006      	beq.n	800d9d8 <rintf+0x80>
 800d9ca:	ea21 0203 	bic.w	r2, r1, r3
 800d9ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d9d2:	fa43 f404 	asr.w	r4, r3, r4
 800d9d6:	4322      	orrs	r2, r4
 800d9d8:	4b0a      	ldr	r3, [pc, #40]	; (800da04 <rintf+0xac>)
 800d9da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d9de:	ed90 7a00 	vldr	s14, [r0]
 800d9e2:	ee07 2a90 	vmov	s15, r2
 800d9e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9ea:	edcd 7a01 	vstr	s15, [sp, #4]
 800d9ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d9f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d9f6:	e7df      	b.n	800d9b8 <rintf+0x60>
 800d9f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d9fc:	d3dc      	bcc.n	800d9b8 <rintf+0x60>
 800d9fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da02:	e7d9      	b.n	800d9b8 <rintf+0x60>
 800da04:	08072e44 	.word	0x08072e44
 800da08:	007fffff 	.word	0x007fffff

0800da0c <scalbnf>:
 800da0c:	b508      	push	{r3, lr}
 800da0e:	ee10 2a10 	vmov	r2, s0
 800da12:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800da16:	ed2d 8b02 	vpush	{d8}
 800da1a:	eef0 0a40 	vmov.f32	s1, s0
 800da1e:	d004      	beq.n	800da2a <scalbnf+0x1e>
 800da20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da24:	d306      	bcc.n	800da34 <scalbnf+0x28>
 800da26:	ee70 0a00 	vadd.f32	s1, s0, s0
 800da2a:	ecbd 8b02 	vpop	{d8}
 800da2e:	eeb0 0a60 	vmov.f32	s0, s1
 800da32:	bd08      	pop	{r3, pc}
 800da34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800da38:	d21c      	bcs.n	800da74 <scalbnf+0x68>
 800da3a:	4b1f      	ldr	r3, [pc, #124]	; (800dab8 <scalbnf+0xac>)
 800da3c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dabc <scalbnf+0xb0>
 800da40:	4298      	cmp	r0, r3
 800da42:	ee60 0a27 	vmul.f32	s1, s0, s15
 800da46:	db10      	blt.n	800da6a <scalbnf+0x5e>
 800da48:	ee10 2a90 	vmov	r2, s1
 800da4c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800da50:	3b19      	subs	r3, #25
 800da52:	4403      	add	r3, r0
 800da54:	2bfe      	cmp	r3, #254	; 0xfe
 800da56:	dd0f      	ble.n	800da78 <scalbnf+0x6c>
 800da58:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800dac0 <scalbnf+0xb4>
 800da5c:	eeb0 0a48 	vmov.f32	s0, s16
 800da60:	f000 f834 	bl	800dacc <copysignf>
 800da64:	ee60 0a08 	vmul.f32	s1, s0, s16
 800da68:	e7df      	b.n	800da2a <scalbnf+0x1e>
 800da6a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800dac4 <scalbnf+0xb8>
 800da6e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800da72:	e7da      	b.n	800da2a <scalbnf+0x1e>
 800da74:	0ddb      	lsrs	r3, r3, #23
 800da76:	e7ec      	b.n	800da52 <scalbnf+0x46>
 800da78:	2b00      	cmp	r3, #0
 800da7a:	dd06      	ble.n	800da8a <scalbnf+0x7e>
 800da7c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800da80:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800da84:	ee00 3a90 	vmov	s1, r3
 800da88:	e7cf      	b.n	800da2a <scalbnf+0x1e>
 800da8a:	f113 0f16 	cmn.w	r3, #22
 800da8e:	da06      	bge.n	800da9e <scalbnf+0x92>
 800da90:	f24c 3350 	movw	r3, #50000	; 0xc350
 800da94:	4298      	cmp	r0, r3
 800da96:	dcdf      	bgt.n	800da58 <scalbnf+0x4c>
 800da98:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800dac4 <scalbnf+0xb8>
 800da9c:	e7de      	b.n	800da5c <scalbnf+0x50>
 800da9e:	3319      	adds	r3, #25
 800daa0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800daa4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800daa8:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dac8 <scalbnf+0xbc>
 800daac:	ee07 3a10 	vmov	s14, r3
 800dab0:	ee67 0a27 	vmul.f32	s1, s14, s15
 800dab4:	e7b9      	b.n	800da2a <scalbnf+0x1e>
 800dab6:	bf00      	nop
 800dab8:	ffff3cb0 	.word	0xffff3cb0
 800dabc:	4c000000 	.word	0x4c000000
 800dac0:	7149f2ca 	.word	0x7149f2ca
 800dac4:	0da24260 	.word	0x0da24260
 800dac8:	33000000 	.word	0x33000000

0800dacc <copysignf>:
 800dacc:	ee10 3a10 	vmov	r3, s0
 800dad0:	ee10 2a90 	vmov	r2, s1
 800dad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dad8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800dadc:	4313      	orrs	r3, r2
 800dade:	ee00 3a10 	vmov	s0, r3
 800dae2:	4770      	bx	lr

0800dae4 <_init>:
 800dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae6:	bf00      	nop
 800dae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daea:	bc08      	pop	{r3}
 800daec:	469e      	mov	lr, r3
 800daee:	4770      	bx	lr

0800daf0 <_fini>:
 800daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf2:	bf00      	nop
 800daf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daf6:	bc08      	pop	{r3}
 800daf8:	469e      	mov	lr, r3
 800dafa:	4770      	bx	lr
