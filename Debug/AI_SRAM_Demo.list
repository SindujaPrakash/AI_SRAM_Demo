
AI_SRAM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011308  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000655e0  08011498  08011498  00021498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08076a78  08076a78  0009064c  2**0
                  CONTENTS
  4 .ARM          00000008  08076a78  08076a78  00086a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08076a80  08076a80  0009064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08076a80  08076a80  00086a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08076a84  08076a84  00086a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000064c  20000000  08076a88  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fda0  2000064c  080770d4  0009064c  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  200103ec  080770d4  000a03ec  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0009064c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015081  00000000  00000000  00090680  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000368a  00000000  00000000  000a5701  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000a8d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000a9e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025634  00000000  00000000  000aad78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011499  00000000  00000000  000d03ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d519a  00000000  00000000  000e1845  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00001b20  00000000  00000000  001b69df  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000017e  00000000  00000000  001b84ff  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 0000001c  00000000  00000000  001b8680  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00008a00  00000000  00000000  001b869c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000064c 	.word	0x2000064c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011480 	.word	0x08011480

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000650 	.word	0x20000650
 80001cc:	08011480 	.word	0x08011480

080001d0 <_ai_platform_get_io_buffers>:
 80001d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d4:	b081      	sub	sp, #4
 80001d6:	468b      	mov	fp, r1
 80001d8:	6801      	ldr	r1, [r0, #0]
 80001da:	680f      	ldr	r7, [r1, #0]
 80001dc:	8901      	ldrh	r1, [r0, #8]
 80001de:	2600      	movs	r6, #0
 80001e0:	46b0      	mov	r8, r6
 80001e2:	f04f 0904 	mov.w	r9, #4
 80001e6:	46b2      	mov	sl, r6
 80001e8:	b339      	cbz	r1, 800023a <_ai_platform_get_io_buffers+0x6a>
 80001ea:	4604      	mov	r4, r0
 80001ec:	6860      	ldr	r0, [r4, #4]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	6841      	ldr	r1, [r0, #4]
 80001f2:	6810      	ldr	r0, [r2, #0]
 80001f4:	eb01 050a 	add.w	r5, r1, sl
 80001f8:	f003 f9ae 	bl	8003558 <ai_array_to_buffer_fmt>
 80001fc:	6028      	str	r0, [r5, #0]
 80001fe:	2101      	movs	r1, #1
 8000200:	80a9      	strh	r1, [r5, #4]
 8000202:	1c76      	adds	r6, r6, #1
 8000204:	6938      	ldr	r0, [r7, #16]
 8000206:	80e8      	strh	r0, [r5, #6]
 8000208:	f108 0801 	add.w	r8, r8, #1
 800020c:	68f9      	ldr	r1, [r7, #12]
 800020e:	8129      	strh	r1, [r5, #8]
 8000210:	f10a 0a14 	add.w	sl, sl, #20
 8000214:	68b8      	ldr	r0, [r7, #8]
 8000216:	60e8      	str	r0, [r5, #12]
 8000218:	6839      	ldr	r1, [r7, #0]
 800021a:	6888      	ldr	r0, [r1, #8]
 800021c:	6128      	str	r0, [r5, #16]
 800021e:	6820      	ldr	r0, [r4, #0]
 8000220:	f850 7009 	ldr.w	r7, [r0, r9]
 8000224:	8920      	ldrh	r0, [r4, #8]
 8000226:	4580      	cmp	r8, r0
 8000228:	f109 0904 	add.w	r9, r9, #4
 800022c:	d3de      	bcc.n	80001ec <_ai_platform_get_io_buffers+0x1c>
 800022e:	b2b0      	uxth	r0, r6
 8000230:	b118      	cbz	r0, 800023a <_ai_platform_get_io_buffers+0x6a>
 8000232:	6860      	ldr	r0, [r4, #4]
 8000234:	6841      	ldr	r1, [r0, #4]
 8000236:	f8cb 1000 	str.w	r1, [fp]
 800023a:	b2b0      	uxth	r0, r6
 800023c:	b001      	add	sp, #4
 800023e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000242 <_platform_network_state_setup>:
 8000242:	b430      	push	{r4, r5}
 8000244:	6914      	ldr	r4, [r2, #16]
 8000246:	6a13      	ldr	r3, [r2, #32]
 8000248:	435c      	muls	r4, r3
 800024a:	6084      	str	r4, [r0, #8]
 800024c:	888d      	ldrh	r5, [r1, #4]
 800024e:	436c      	muls	r4, r5
 8000250:	60c4      	str	r4, [r0, #12]
 8000252:	6909      	ldr	r1, [r1, #16]
 8000254:	68c3      	ldr	r3, [r0, #12]
 8000256:	6041      	str	r1, [r0, #4]
 8000258:	4419      	add	r1, r3
 800025a:	6001      	str	r1, [r0, #0]
 800025c:	6812      	ldr	r2, [r2, #0]
 800025e:	6814      	ldr	r4, [r2, #0]
 8000260:	00a1      	lsls	r1, r4, #2
 8000262:	d407      	bmi.n	8000274 <_platform_network_state_setup+0x32>
 8000264:	6894      	ldr	r4, [r2, #8]
 8000266:	68d1      	ldr	r1, [r2, #12]
 8000268:	6843      	ldr	r3, [r0, #4]
 800026a:	1a64      	subs	r4, r4, r1
 800026c:	1919      	adds	r1, r3, r4
 800026e:	6091      	str	r1, [r2, #8]
 8000270:	6840      	ldr	r0, [r0, #4]
 8000272:	60d0      	str	r0, [r2, #12]
 8000274:	bc30      	pop	{r4, r5}
 8000276:	4770      	bx	lr

08000278 <_platform_network_state_update_input>:
 8000278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800027c:	4605      	mov	r5, r0
 800027e:	2600      	movs	r6, #0
 8000280:	6828      	ldr	r0, [r5, #0]
 8000282:	6801      	ldr	r1, [r0, #0]
 8000284:	8928      	ldrh	r0, [r5, #8]
 8000286:	2704      	movs	r7, #4
 8000288:	46b0      	mov	r8, r6
 800028a:	b338      	cbz	r0, 80002dc <_platform_network_state_update_input+0x64>
 800028c:	6868      	ldr	r0, [r5, #4]
 800028e:	6802      	ldr	r2, [r0, #0]
 8000290:	eb02 0408 	add.w	r4, r2, r8
 8000294:	680a      	ldr	r2, [r1, #0]
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	6890      	ldr	r0, [r2, #8]
 800029a:	6861      	ldr	r1, [r4, #4]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	d503      	bpl.n	80002a8 <_platform_network_state_update_input+0x30>
 80002a0:	68a2      	ldr	r2, [r4, #8]
 80002a2:	f00b fce7 	bl	800bc74 <__aeabi_memcpy>
 80002a6:	e005      	b.n	80002b4 <_platform_network_state_update_input+0x3c>
 80002a8:	68d3      	ldr	r3, [r2, #12]
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	180b      	adds	r3, r1, r0
 80002ae:	6093      	str	r3, [r2, #8]
 80002b0:	6860      	ldr	r0, [r4, #4]
 80002b2:	60d0      	str	r0, [r2, #12]
 80002b4:	6860      	ldr	r0, [r4, #4]
 80002b6:	68a1      	ldr	r1, [r4, #8]
 80002b8:	4408      	add	r0, r1
 80002ba:	6821      	ldr	r1, [r4, #0]
 80002bc:	6060      	str	r0, [r4, #4]
 80002be:	4288      	cmp	r0, r1
 80002c0:	d302      	bcc.n	80002c8 <_platform_network_state_update_input+0x50>
 80002c2:	68e0      	ldr	r0, [r4, #12]
 80002c4:	4240      	negs	r0, r0
 80002c6:	4408      	add	r0, r1
 80002c8:	6060      	str	r0, [r4, #4]
 80002ca:	1c76      	adds	r6, r6, #1
 80002cc:	6828      	ldr	r0, [r5, #0]
 80002ce:	59c1      	ldr	r1, [r0, r7]
 80002d0:	8928      	ldrh	r0, [r5, #8]
 80002d2:	1d3f      	adds	r7, r7, #4
 80002d4:	4286      	cmp	r6, r0
 80002d6:	f108 0810 	add.w	r8, r8, #16
 80002da:	d3d7      	bcc.n	800028c <_platform_network_state_update_input+0x14>
 80002dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080002e0 <_platform_network_state_update_output>:
 80002e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002e4:	4605      	mov	r5, r0
 80002e6:	2600      	movs	r6, #0
 80002e8:	6828      	ldr	r0, [r5, #0]
 80002ea:	6801      	ldr	r1, [r0, #0]
 80002ec:	8928      	ldrh	r0, [r5, #8]
 80002ee:	2704      	movs	r7, #4
 80002f0:	46b0      	mov	r8, r6
 80002f2:	b388      	cbz	r0, 8000358 <_platform_network_state_update_output+0x78>
 80002f4:	6868      	ldr	r0, [r5, #4]
 80002f6:	6809      	ldr	r1, [r1, #0]
 80002f8:	6802      	ldr	r2, [r0, #0]
 80002fa:	680b      	ldr	r3, [r1, #0]
 80002fc:	eb02 0408 	add.w	r4, r2, r8
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	6860      	ldr	r0, [r4, #4]
 8000304:	68a2      	ldr	r2, [r4, #8]
 8000306:	d50e      	bpl.n	8000326 <_platform_network_state_update_output+0x46>
 8000308:	6889      	ldr	r1, [r1, #8]
 800030a:	f00b fcb3 	bl	800bc74 <__aeabi_memcpy>
 800030e:	6862      	ldr	r2, [r4, #4]
 8000310:	68a0      	ldr	r0, [r4, #8]
 8000312:	6821      	ldr	r1, [r4, #0]
 8000314:	4410      	add	r0, r2
 8000316:	4288      	cmp	r0, r1
 8000318:	6060      	str	r0, [r4, #4]
 800031a:	d302      	bcc.n	8000322 <_platform_network_state_update_output+0x42>
 800031c:	68e0      	ldr	r0, [r4, #12]
 800031e:	4240      	negs	r0, r0
 8000320:	4408      	add	r0, r1
 8000322:	6060      	str	r0, [r4, #4]
 8000324:	e00f      	b.n	8000346 <_platform_network_state_update_output+0x66>
 8000326:	4410      	add	r0, r2
 8000328:	6822      	ldr	r2, [r4, #0]
 800032a:	6060      	str	r0, [r4, #4]
 800032c:	4290      	cmp	r0, r2
 800032e:	d302      	bcc.n	8000336 <_platform_network_state_update_output+0x56>
 8000330:	68e0      	ldr	r0, [r4, #12]
 8000332:	4240      	negs	r0, r0
 8000334:	4410      	add	r0, r2
 8000336:	6060      	str	r0, [r4, #4]
 8000338:	688a      	ldr	r2, [r1, #8]
 800033a:	68cb      	ldr	r3, [r1, #12]
 800033c:	1ad2      	subs	r2, r2, r3
 800033e:	4410      	add	r0, r2
 8000340:	6088      	str	r0, [r1, #8]
 8000342:	6862      	ldr	r2, [r4, #4]
 8000344:	60ca      	str	r2, [r1, #12]
 8000346:	1c76      	adds	r6, r6, #1
 8000348:	6828      	ldr	r0, [r5, #0]
 800034a:	59c1      	ldr	r1, [r0, r7]
 800034c:	8928      	ldrh	r0, [r5, #8]
 800034e:	1d3f      	adds	r7, r7, #4
 8000350:	4286      	cmp	r6, r0
 8000352:	f108 0810 	add.w	r8, r8, #16
 8000356:	d3cd      	bcc.n	80002f4 <_platform_network_state_update_output+0x14>
 8000358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800035c <_platform_network_io_bind>:
 800035c:	2800      	cmp	r0, #0
 800035e:	d100      	bne.n	8000362 <_platform_network_io_bind+0x6>
 8000360:	4770      	bx	lr
 8000362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000366:	b081      	sub	sp, #4
 8000368:	2300      	movs	r3, #0
 800036a:	b405      	push	{r0, r2}
 800036c:	b081      	sub	sp, #4
 800036e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000370:	8243      	strh	r3, [r0, #18]
 8000372:	9801      	ldr	r0, [sp, #4]
 8000374:	8203      	strh	r3, [r0, #16]
 8000376:	9b01      	ldr	r3, [sp, #4]
 8000378:	7a18      	ldrb	r0, [r3, #8]
 800037a:	f000 0003 	and.w	r0, r0, #3
 800037e:	2803      	cmp	r0, #3
 8000380:	d004      	beq.n	800038c <_platform_network_io_bind+0x30>
 8000382:	2230      	movs	r2, #48	; 0x30
 8000384:	2111      	movs	r1, #17
 8000386:	f103 000c 	add.w	r0, r3, #12
 800038a:	e0ce      	b.n	800052a <_platform_network_io_bind+0x1ce>
 800038c:	2900      	cmp	r1, #0
 800038e:	bf1c      	itt	ne
 8000390:	8910      	ldrhne	r0, [r2, #8]
 8000392:	2800      	cmpne	r0, #0
 8000394:	f000 80c3 	beq.w	800051e <_platform_network_io_bind+0x1c2>
 8000398:	6810      	ldr	r0, [r2, #0]
 800039a:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 800039e:	6804      	ldr	r4, [r0, #0]
 80003a0:	9200      	str	r2, [sp, #0]
 80003a2:	2700      	movs	r7, #0
 80003a4:	2504      	movs	r5, #4
 80003a6:	46b9      	mov	r9, r7
 80003a8:	1d0e      	adds	r6, r1, #4
 80003aa:	9800      	ldr	r0, [sp, #0]
 80003ac:	8901      	ldrh	r1, [r0, #8]
 80003ae:	428f      	cmp	r7, r1
 80003b0:	f080 80b1 	bcs.w	8000516 <_platform_network_io_bind+0x1ba>
 80003b4:	6841      	ldr	r1, [r0, #4]
 80003b6:	680a      	ldr	r2, [r1, #0]
 80003b8:	eb02 0809 	add.w	r8, r2, r9
 80003bc:	2c00      	cmp	r4, #0
 80003be:	bf18      	it	ne
 80003c0:	f1b8 0f00 	cmpne.w	r8, #0
 80003c4:	f000 80ab 	beq.w	800051e <_platform_network_io_bind+0x1c2>
 80003c8:	6820      	ldr	r0, [r4, #0]
 80003ca:	8873      	ldrh	r3, [r6, #2]
 80003cc:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80003d0:	68b2      	ldr	r2, [r6, #8]
 80003d2:	6841      	ldr	r1, [r0, #4]
 80003d4:	fb03 fe0c 	mul.w	lr, r3, ip
 80003d8:	fb02 fe0e 	mul.w	lr, r2, lr
 80003dc:	4571      	cmp	r1, lr
 80003de:	f0c0 80a0 	bcc.w	8000522 <_platform_network_io_bind+0x1c6>
 80003e2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80003e6:	459e      	cmp	lr, r3
 80003e8:	bf04      	itt	eq
 80003ea:	68e3      	ldreq	r3, [r4, #12]
 80003ec:	4563      	cmpeq	r3, ip
 80003ee:	bf04      	itt	eq
 80003f0:	68a3      	ldreq	r3, [r4, #8]
 80003f2:	4293      	cmpeq	r3, r2
 80003f4:	f040 8095 	bne.w	8000522 <_platform_network_io_bind+0x1c6>
 80003f8:	6800      	ldr	r0, [r0, #0]
 80003fa:	f003 f985 	bl	8003708 <ai_array_get_byte_size>
 80003fe:	6921      	ldr	r1, [r4, #16]
 8000400:	6a22      	ldr	r2, [r4, #32]
 8000402:	4351      	muls	r1, r2
 8000404:	4288      	cmp	r0, r1
 8000406:	f0c0 808c 	bcc.w	8000522 <_platform_network_io_bind+0x1c6>
 800040a:	6820      	ldr	r0, [r4, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f003 f8a3 	bl	8003558 <ai_array_to_buffer_fmt>
 8000412:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8000416:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800041a:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 800041e:	4288      	cmp	r0, r1
 8000420:	d115      	bne.n	800044e <_platform_network_io_bind+0xf2>
 8000422:	68f0      	ldr	r0, [r6, #12]
 8000424:	2800      	cmp	r0, #0
 8000426:	d07a      	beq.n	800051e <_platform_network_io_bind+0x1c2>
 8000428:	8830      	ldrh	r0, [r6, #0]
 800042a:	b190      	cbz	r0, 8000452 <_platform_network_io_bind+0xf6>
 800042c:	4550      	cmp	r0, sl
 800042e:	bf28      	it	cs
 8000430:	4682      	movcs	sl, r0
 8000432:	4622      	mov	r2, r4
 8000434:	1f31      	subs	r1, r6, #4
 8000436:	4640      	mov	r0, r8
 8000438:	f7ff ff03 	bl	8000242 <_platform_network_state_setup>
 800043c:	9800      	ldr	r0, [sp, #0]
 800043e:	6801      	ldr	r1, [r0, #0]
 8000440:	594c      	ldr	r4, [r1, r5]
 8000442:	1c7f      	adds	r7, r7, #1
 8000444:	3614      	adds	r6, #20
 8000446:	f109 0910 	add.w	r9, r9, #16
 800044a:	1d2d      	adds	r5, r5, #4
 800044c:	e7ad      	b.n	80003aa <_platform_network_io_bind+0x4e>
 800044e:	2219      	movs	r2, #25
 8000450:	e068      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000452:	2221      	movs	r2, #33	; 0x21
 8000454:	e066      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000456:	9901      	ldr	r1, [sp, #4]
 8000458:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800045a:	320c      	adds	r2, #12
 800045c:	8911      	ldrh	r1, [r2, #8]
 800045e:	2900      	cmp	r1, #0
 8000460:	d073      	beq.n	800054a <_platform_network_io_bind+0x1ee>
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	681c      	ldr	r4, [r3, #0]
 8000466:	9200      	str	r2, [sp, #0]
 8000468:	2700      	movs	r7, #0
 800046a:	2504      	movs	r5, #4
 800046c:	46b9      	mov	r9, r7
 800046e:	1d06      	adds	r6, r0, #4
 8000470:	9800      	ldr	r0, [sp, #0]
 8000472:	8901      	ldrh	r1, [r0, #8]
 8000474:	428f      	cmp	r7, r1
 8000476:	d25e      	bcs.n	8000536 <_platform_network_io_bind+0x1da>
 8000478:	6841      	ldr	r1, [r0, #4]
 800047a:	680a      	ldr	r2, [r1, #0]
 800047c:	eb02 0809 	add.w	r8, r2, r9
 8000480:	2c00      	cmp	r4, #0
 8000482:	bf18      	it	ne
 8000484:	f1b8 0f00 	cmpne.w	r8, #0
 8000488:	d05c      	beq.n	8000544 <_platform_network_io_bind+0x1e8>
 800048a:	6820      	ldr	r0, [r4, #0]
 800048c:	8873      	ldrh	r3, [r6, #2]
 800048e:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8000492:	68b2      	ldr	r2, [r6, #8]
 8000494:	6841      	ldr	r1, [r0, #4]
 8000496:	fb03 fe0c 	mul.w	lr, r3, ip
 800049a:	fb02 fe0e 	mul.w	lr, r2, lr
 800049e:	4571      	cmp	r1, lr
 80004a0:	d353      	bcc.n	800054a <_platform_network_io_bind+0x1ee>
 80004a2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80004a6:	459e      	cmp	lr, r3
 80004a8:	bf04      	itt	eq
 80004aa:	68e3      	ldreq	r3, [r4, #12]
 80004ac:	4563      	cmpeq	r3, ip
 80004ae:	bf04      	itt	eq
 80004b0:	68a3      	ldreq	r3, [r4, #8]
 80004b2:	4293      	cmpeq	r3, r2
 80004b4:	d149      	bne.n	800054a <_platform_network_io_bind+0x1ee>
 80004b6:	6800      	ldr	r0, [r0, #0]
 80004b8:	f003 f926 	bl	8003708 <ai_array_get_byte_size>
 80004bc:	6921      	ldr	r1, [r4, #16]
 80004be:	6a22      	ldr	r2, [r4, #32]
 80004c0:	4351      	muls	r1, r2
 80004c2:	4288      	cmp	r0, r1
 80004c4:	d341      	bcc.n	800054a <_platform_network_io_bind+0x1ee>
 80004c6:	6820      	ldr	r0, [r4, #0]
 80004c8:	6800      	ldr	r0, [r0, #0]
 80004ca:	f003 f845 	bl	8003558 <ai_array_to_buffer_fmt>
 80004ce:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80004d2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80004d6:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80004da:	4288      	cmp	r0, r1
 80004dc:	d115      	bne.n	800050a <_platform_network_io_bind+0x1ae>
 80004de:	68f0      	ldr	r0, [r6, #12]
 80004e0:	2800      	cmp	r0, #0
 80004e2:	d02f      	beq.n	8000544 <_platform_network_io_bind+0x1e8>
 80004e4:	8830      	ldrh	r0, [r6, #0]
 80004e6:	b198      	cbz	r0, 8000510 <_platform_network_io_bind+0x1b4>
 80004e8:	4550      	cmp	r0, sl
 80004ea:	bf28      	it	cs
 80004ec:	4682      	movcs	sl, r0
 80004ee:	4622      	mov	r2, r4
 80004f0:	1f31      	subs	r1, r6, #4
 80004f2:	4640      	mov	r0, r8
 80004f4:	f7ff fea5 	bl	8000242 <_platform_network_state_setup>
 80004f8:	9800      	ldr	r0, [sp, #0]
 80004fa:	6801      	ldr	r1, [r0, #0]
 80004fc:	594c      	ldr	r4, [r1, r5]
 80004fe:	1c7f      	adds	r7, r7, #1
 8000500:	3614      	adds	r6, #20
 8000502:	f109 0910 	add.w	r9, r9, #16
 8000506:	1d2d      	adds	r5, r5, #4
 8000508:	e7b2      	b.n	8000470 <_platform_network_io_bind+0x114>
 800050a:	2219      	movs	r2, #25
 800050c:	2113      	movs	r1, #19
 800050e:	e00a      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 8000510:	2221      	movs	r2, #33	; 0x21
 8000512:	2113      	movs	r1, #19
 8000514:	e007      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 8000516:	9802      	ldr	r0, [sp, #8]
 8000518:	2800      	cmp	r0, #0
 800051a:	d19c      	bne.n	8000456 <_platform_network_io_bind+0xfa>
 800051c:	e00e      	b.n	800053c <_platform_network_io_bind+0x1e0>
 800051e:	2217      	movs	r2, #23
 8000520:	e000      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000522:	2218      	movs	r2, #24
 8000524:	2112      	movs	r1, #18
 8000526:	9801      	ldr	r0, [sp, #4]
 8000528:	300c      	adds	r0, #12
 800052a:	f000 fa8e 	bl	8000a4a <core_set_error>
 800052e:	2000      	movs	r0, #0
 8000530:	b004      	add	sp, #16
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	9801      	ldr	r0, [sp, #4]
 8000538:	f8a0 a010 	strh.w	sl, [r0, #16]
 800053c:	2001      	movs	r0, #1
 800053e:	b004      	add	sp, #16
 8000540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000544:	2217      	movs	r2, #23
 8000546:	2113      	movs	r1, #19
 8000548:	e7ed      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 800054a:	2218      	movs	r2, #24
 800054c:	2113      	movs	r1, #19
 800054e:	e7ea      	b.n	8000526 <_platform_network_io_bind+0x1ca>

08000550 <ai_platform_runtime_get_revision>:
 8000550:	f8df 04a8 	ldr.w	r0, [pc, #1192]	; 80009fc <.text_21>
 8000554:	6801      	ldr	r1, [r0, #0]
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	0049      	lsls	r1, r1, #1
 800055a:	6001      	str	r1, [r0, #0]
 800055c:	2001      	movs	r0, #1
 800055e:	f8df 14a0 	ldr.w	r1, [pc, #1184]	; 8000a00 <.text_22>
 8000562:	6088      	str	r0, [r1, #8]
 8000564:	6888      	ldr	r0, [r1, #8]
 8000566:	2800      	cmp	r0, #0
 8000568:	d1fc      	bne.n	8000564 <ai_platform_runtime_get_revision+0x14>
 800056a:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 8000a04 <.text_23>
 800056e:	600a      	str	r2, [r1, #0]
 8000570:	6808      	ldr	r0, [r1, #0]
 8000572:	f8df 1494 	ldr.w	r1, [pc, #1172]	; 8000a08 <.text_24>
 8000576:	4288      	cmp	r0, r1
 8000578:	d000      	beq.n	800057c <ai_platform_runtime_get_revision+0x2c>
 800057a:	e7fe      	b.n	800057a <ai_platform_runtime_get_revision+0x2a>
 800057c:	a0aa      	add	r0, pc, #680	; (adr r0, 8000828 <.text_16>)
 800057e:	4770      	bx	lr

08000580 <ai_platform_runtime_get_version>:
 8000580:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 80009fc <.text_21>
 8000584:	6801      	ldr	r1, [r0, #0]
 8000586:	0849      	lsrs	r1, r1, #1
 8000588:	0049      	lsls	r1, r1, #1
 800058a:	6001      	str	r1, [r0, #0]
 800058c:	2001      	movs	r0, #1
 800058e:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 8000a00 <.text_22>
 8000592:	6088      	str	r0, [r1, #8]
 8000594:	6888      	ldr	r0, [r1, #8]
 8000596:	2800      	cmp	r0, #0
 8000598:	d1fc      	bne.n	8000594 <ai_platform_runtime_get_version+0x14>
 800059a:	f8df 2468 	ldr.w	r2, [pc, #1128]	; 8000a04 <.text_23>
 800059e:	600a      	str	r2, [r1, #0]
 80005a0:	6808      	ldr	r0, [r1, #0]
 80005a2:	f8df 1464 	ldr.w	r1, [pc, #1124]	; 8000a08 <.text_24>
 80005a6:	4288      	cmp	r0, r1
 80005a8:	d000      	beq.n	80005ac <ai_platform_runtime_get_version+0x2c>
 80005aa:	e7fe      	b.n	80005aa <ai_platform_runtime_get_version+0x2a>
 80005ac:	f20f 4264 	addw	r2, pc, #1124	; 0x464
 80005b0:	6810      	ldr	r0, [r2, #0]
 80005b2:	4770      	bx	lr

080005b4 <ai_platform_api_get_version>:
 80005b4:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 80009fc <.text_21>
 80005b8:	6801      	ldr	r1, [r0, #0]
 80005ba:	0849      	lsrs	r1, r1, #1
 80005bc:	0049      	lsls	r1, r1, #1
 80005be:	6001      	str	r1, [r0, #0]
 80005c0:	2001      	movs	r0, #1
 80005c2:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 8000a00 <.text_22>
 80005c6:	6088      	str	r0, [r1, #8]
 80005c8:	6888      	ldr	r0, [r1, #8]
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d1fc      	bne.n	80005c8 <ai_platform_api_get_version+0x14>
 80005ce:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 8000a04 <.text_23>
 80005d2:	600a      	str	r2, [r1, #0]
 80005d4:	6808      	ldr	r0, [r1, #0]
 80005d6:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000a08 <.text_24>
 80005da:	4288      	cmp	r0, r1
 80005dc:	d000      	beq.n	80005e0 <ai_platform_api_get_version+0x2c>
 80005de:	e7fe      	b.n	80005de <ai_platform_api_get_version+0x2a>
 80005e0:	f20f 4234 	addw	r2, pc, #1076	; 0x434
 80005e4:	6810      	ldr	r0, [r2, #0]
 80005e6:	4770      	bx	lr

080005e8 <ai_platform_interface_api_get_version>:
 80005e8:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 80009fc <.text_21>
 80005ec:	6801      	ldr	r1, [r0, #0]
 80005ee:	0849      	lsrs	r1, r1, #1
 80005f0:	0049      	lsls	r1, r1, #1
 80005f2:	6001      	str	r1, [r0, #0]
 80005f4:	2001      	movs	r0, #1
 80005f6:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000a00 <.text_22>
 80005fa:	6088      	str	r0, [r1, #8]
 80005fc:	6888      	ldr	r0, [r1, #8]
 80005fe:	2800      	cmp	r0, #0
 8000600:	d1fc      	bne.n	80005fc <ai_platform_interface_api_get_version+0x14>
 8000602:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000a04 <.text_23>
 8000606:	600a      	str	r2, [r1, #0]
 8000608:	6808      	ldr	r0, [r1, #0]
 800060a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000a08 <.text_24>
 800060e:	4288      	cmp	r0, r1
 8000610:	d000      	beq.n	8000614 <ai_platform_interface_api_get_version+0x2c>
 8000612:	e7fe      	b.n	8000612 <ai_platform_interface_api_get_version+0x2a>
 8000614:	f20f 4204 	addw	r2, pc, #1028	; 0x404
 8000618:	6810      	ldr	r0, [r2, #0]
 800061a:	4770      	bx	lr

0800061c <ai_platform_context_acquire>:
 800061c:	b120      	cbz	r0, 8000628 <ai_platform_context_acquire+0xc>
 800061e:	6801      	ldr	r1, [r0, #0]
 8000620:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8000a0c <.text_25>
 8000624:	4291      	cmp	r1, r2
 8000626:	d000      	beq.n	800062a <ai_platform_context_acquire+0xe>
 8000628:	2000      	movs	r0, #0
 800062a:	f8df 13d0 	ldr.w	r1, [pc, #976]	; 80009fc <.text_21>
 800062e:	680a      	ldr	r2, [r1, #0]
 8000630:	0852      	lsrs	r2, r2, #1
 8000632:	0052      	lsls	r2, r2, #1
 8000634:	600a      	str	r2, [r1, #0]
 8000636:	2101      	movs	r1, #1
 8000638:	f8df 23c4 	ldr.w	r2, [pc, #964]	; 8000a00 <.text_22>
 800063c:	6091      	str	r1, [r2, #8]
 800063e:	6891      	ldr	r1, [r2, #8]
 8000640:	2900      	cmp	r1, #0
 8000642:	d1fc      	bne.n	800063e <ai_platform_context_acquire+0x22>
 8000644:	f8df 33bc 	ldr.w	r3, [pc, #956]	; 8000a04 <.text_23>
 8000648:	6013      	str	r3, [r2, #0]
 800064a:	6811      	ldr	r1, [r2, #0]
 800064c:	f8df 23b8 	ldr.w	r2, [pc, #952]	; 8000a08 <.text_24>
 8000650:	4291      	cmp	r1, r2
 8000652:	d000      	beq.n	8000656 <ai_platform_context_acquire+0x3a>
 8000654:	e7fe      	b.n	8000654 <ai_platform_context_acquire+0x38>
 8000656:	4770      	bx	lr

08000658 <ai_platform_context_release>:
 8000658:	f8df 13b0 	ldr.w	r1, [pc, #944]	; 8000a0c <.text_25>
 800065c:	6001      	str	r1, [r0, #0]
 800065e:	4770      	bx	lr

08000660 <ai_platform_network_get_error>:
 8000660:	b120      	cbz	r0, 800066c <ai_platform_network_get_error+0xc>
 8000662:	6801      	ldr	r1, [r0, #0]
 8000664:	f8df 23a4 	ldr.w	r2, [pc, #932]	; 8000a0c <.text_25>
 8000668:	4291      	cmp	r1, r2
 800066a:	d000      	beq.n	800066e <ai_platform_network_get_error+0xe>
 800066c:	2000      	movs	r0, #0
 800066e:	f8df 138c 	ldr.w	r1, [pc, #908]	; 80009fc <.text_21>
 8000672:	680a      	ldr	r2, [r1, #0]
 8000674:	0852      	lsrs	r2, r2, #1
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	600a      	str	r2, [r1, #0]
 800067a:	2101      	movs	r1, #1
 800067c:	f8df 2380 	ldr.w	r2, [pc, #896]	; 8000a00 <.text_22>
 8000680:	6091      	str	r1, [r2, #8]
 8000682:	6891      	ldr	r1, [r2, #8]
 8000684:	2900      	cmp	r1, #0
 8000686:	d1fc      	bne.n	8000682 <ai_platform_network_get_error+0x22>
 8000688:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000a04 <.text_23>
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	6811      	ldr	r1, [r2, #0]
 8000690:	f8df 2374 	ldr.w	r2, [pc, #884]	; 8000a08 <.text_24>
 8000694:	4291      	cmp	r1, r2
 8000696:	d000      	beq.n	800069a <ai_platform_network_get_error+0x3a>
 8000698:	e7fe      	b.n	8000698 <ai_platform_network_get_error+0x38>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	300c      	addne	r0, #12
 80006a0:	f000 b9ce 	bne.w	8000a40 <core_get_error>
 80006a4:	f20f 3088 	addw	r0, pc, #904	; 0x388
 80006a8:	6800      	ldr	r0, [r0, #0]
 80006aa:	4770      	bx	lr

080006ac <ai_platform_network_set_error>:
 80006ac:	2800      	cmp	r0, #0
 80006ae:	bf1c      	itt	ne
 80006b0:	300c      	addne	r0, #12
 80006b2:	f000 b9ca 	bne.w	8000a4a <core_set_error>
 80006b6:	4770      	bx	lr

080006b8 <ai_platform_api_get_network_report>:
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006bc:	ea5f 0900 	movs.w	r9, r0
 80006c0:	b081      	sub	sp, #4
 80006c2:	460c      	mov	r4, r1
 80006c4:	d005      	beq.n	80006d2 <ai_platform_api_get_network_report+0x1a>
 80006c6:	f8d9 0000 	ldr.w	r0, [r9]
 80006ca:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000a0c <.text_25>
 80006ce:	4288      	cmp	r0, r1
 80006d0:	d001      	beq.n	80006d6 <ai_platform_api_get_network_report+0x1e>
 80006d2:	f04f 0900 	mov.w	r9, #0
 80006d6:	f8df 5324 	ldr.w	r5, [pc, #804]	; 80009fc <.text_21>
 80006da:	f8df 6324 	ldr.w	r6, [pc, #804]	; 8000a00 <.text_22>
 80006de:	6828      	ldr	r0, [r5, #0]
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	0040      	lsls	r0, r0, #1
 80006e4:	6028      	str	r0, [r5, #0]
 80006e6:	2101      	movs	r1, #1
 80006e8:	60b1      	str	r1, [r6, #8]
 80006ea:	68b0      	ldr	r0, [r6, #8]
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d1fc      	bne.n	80006ea <ai_platform_api_get_network_report+0x32>
 80006f0:	f8df 7310 	ldr.w	r7, [pc, #784]	; 8000a04 <.text_23>
 80006f4:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000a08 <.text_24>
 80006f8:	6037      	str	r7, [r6, #0]
 80006fa:	6830      	ldr	r0, [r6, #0]
 80006fc:	4540      	cmp	r0, r8
 80006fe:	d000      	beq.n	8000702 <ai_platform_api_get_network_report+0x4a>
 8000700:	e7fe      	b.n	8000700 <ai_platform_api_get_network_report+0x48>
 8000702:	f1b9 0f00 	cmp.w	r9, #0
 8000706:	bf18      	it	ne
 8000708:	2c00      	cmpne	r4, #0
 800070a:	f000 8088 	beq.w	800081e <ai_platform_api_get_network_report+0x166>
 800070e:	2000      	movs	r0, #0
 8000710:	6660      	str	r0, [r4, #100]	; 0x64
 8000712:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8000716:	2a00      	cmp	r2, #0
 8000718:	f000 807b 	beq.w	8000812 <ai_platform_api_get_network_report+0x15a>
 800071c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800071e:	1c49      	adds	r1, r1, #1
 8000720:	6661      	str	r1, [r4, #100]	; 0x64
 8000722:	6890      	ldr	r0, [r2, #8]
 8000724:	4282      	cmp	r2, r0
 8000726:	bf1c      	itt	ne
 8000728:	2800      	cmpne	r0, #0
 800072a:	4602      	movne	r2, r0
 800072c:	d1f6      	bne.n	800071c <ai_platform_api_get_network_report+0x64>
 800072e:	e06e      	b.n	800080e <ai_platform_api_get_network_report+0x156>
 8000730:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8000734:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8000738:	f7ff fd4a 	bl	80001d0 <_ai_platform_get_io_buffers>
 800073c:	8620      	strh	r0, [r4, #48]	; 0x30
 800073e:	b910      	cbnz	r0, 8000746 <ai_platform_api_get_network_report+0x8e>
 8000740:	2218      	movs	r2, #24
 8000742:	2112      	movs	r1, #18
 8000744:	e067      	b.n	8000816 <ai_platform_api_get_network_report+0x15e>
 8000746:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800074a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800074e:	300c      	adds	r0, #12
 8000750:	f7ff fd3e 	bl	80001d0 <_ai_platform_get_io_buffers>
 8000754:	8660      	strh	r0, [r4, #50]	; 0x32
 8000756:	b910      	cbnz	r0, 800075e <ai_platform_api_get_network_report+0xa6>
 8000758:	2218      	movs	r2, #24
 800075a:	2113      	movs	r1, #19
 800075c:	e05b      	b.n	8000816 <ai_platform_api_get_network_report+0x15e>
 800075e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000762:	66a0      	str	r0, [r4, #104]	; 0x68
 8000764:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000768:	e892 5c08 	ldmia.w	r2, {r3, sl, fp, ip, lr}
 800076c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000770:	f109 0914 	add.w	r9, r9, #20
 8000774:	e881 5c08 	stmia.w	r1, {r3, sl, fp, ip, lr}
 8000778:	e899 500e 	ldmia.w	r9, {r1, r2, r3, ip, lr}
 800077c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000780:	e880 500e 	stmia.w	r0, {r1, r2, r3, ip, lr}
 8000784:	6828      	ldr	r0, [r5, #0]
 8000786:	0840      	lsrs	r0, r0, #1
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	6028      	str	r0, [r5, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	60b3      	str	r3, [r6, #8]
 8000790:	68b0      	ldr	r0, [r6, #8]
 8000792:	2800      	cmp	r0, #0
 8000794:	d1fc      	bne.n	8000790 <ai_platform_api_get_network_report+0xd8>
 8000796:	6037      	str	r7, [r6, #0]
 8000798:	6831      	ldr	r1, [r6, #0]
 800079a:	4541      	cmp	r1, r8
 800079c:	d000      	beq.n	80007a0 <ai_platform_api_get_network_report+0xe8>
 800079e:	e7fe      	b.n	800079e <ai_platform_api_get_network_report+0xe6>
 80007a0:	a021      	add	r0, pc, #132	; (adr r0, 8000828 <.text_16>)
 80007a2:	6120      	str	r0, [r4, #16]
 80007a4:	6829      	ldr	r1, [r5, #0]
 80007a6:	0849      	lsrs	r1, r1, #1
 80007a8:	0049      	lsls	r1, r1, #1
 80007aa:	6029      	str	r1, [r5, #0]
 80007ac:	60b3      	str	r3, [r6, #8]
 80007ae:	68b0      	ldr	r0, [r6, #8]
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d1fc      	bne.n	80007ae <ai_platform_api_get_network_report+0xf6>
 80007b4:	6037      	str	r7, [r6, #0]
 80007b6:	6831      	ldr	r1, [r6, #0]
 80007b8:	4541      	cmp	r1, r8
 80007ba:	d000      	beq.n	80007be <ai_platform_api_get_network_report+0x106>
 80007bc:	e7fe      	b.n	80007bc <ai_platform_api_get_network_report+0x104>
 80007be:	f20f 2054 	addw	r0, pc, #596	; 0x254
 80007c2:	6802      	ldr	r2, [r0, #0]
 80007c4:	6162      	str	r2, [r4, #20]
 80007c6:	6829      	ldr	r1, [r5, #0]
 80007c8:	0849      	lsrs	r1, r1, #1
 80007ca:	0049      	lsls	r1, r1, #1
 80007cc:	6029      	str	r1, [r5, #0]
 80007ce:	60b3      	str	r3, [r6, #8]
 80007d0:	68b0      	ldr	r0, [r6, #8]
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d1fc      	bne.n	80007d0 <ai_platform_api_get_network_report+0x118>
 80007d6:	6037      	str	r7, [r6, #0]
 80007d8:	6831      	ldr	r1, [r6, #0]
 80007da:	4541      	cmp	r1, r8
 80007dc:	d000      	beq.n	80007e0 <ai_platform_api_get_network_report+0x128>
 80007de:	e7fe      	b.n	80007de <ai_platform_api_get_network_report+0x126>
 80007e0:	a08d      	add	r0, pc, #564	; (adr r0, 8000a18 <.text_28>)
 80007e2:	6802      	ldr	r2, [r0, #0]
 80007e4:	6262      	str	r2, [r4, #36]	; 0x24
 80007e6:	6829      	ldr	r1, [r5, #0]
 80007e8:	0849      	lsrs	r1, r1, #1
 80007ea:	0049      	lsls	r1, r1, #1
 80007ec:	6029      	str	r1, [r5, #0]
 80007ee:	60b3      	str	r3, [r6, #8]
 80007f0:	68b0      	ldr	r0, [r6, #8]
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d1fc      	bne.n	80007f0 <ai_platform_api_get_network_report+0x138>
 80007f6:	6037      	str	r7, [r6, #0]
 80007f8:	6831      	ldr	r1, [r6, #0]
 80007fa:	4541      	cmp	r1, r8
 80007fc:	d000      	beq.n	8000800 <ai_platform_api_get_network_report+0x148>
 80007fe:	e7fe      	b.n	80007fe <ai_platform_api_get_network_report+0x146>
 8000800:	a086      	add	r0, pc, #536	; (adr r0, 8000a1c <.text_29>)
 8000802:	6802      	ldr	r2, [r0, #0]
 8000804:	62a2      	str	r2, [r4, #40]	; 0x28
 8000806:	2001      	movs	r0, #1
 8000808:	b001      	add	sp, #4
 800080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800080e:	2900      	cmp	r1, #0
 8000810:	d18e      	bne.n	8000730 <ai_platform_api_get_network_report+0x78>
 8000812:	2218      	movs	r2, #24
 8000814:	2111      	movs	r1, #17
 8000816:	f109 000c 	add.w	r0, r9, #12
 800081a:	f000 f916 	bl	8000a4a <core_set_error>
 800081e:	2000      	movs	r0, #0
 8000820:	b001      	add	sp, #4
 8000822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000828 <.text_16>:
 8000828:	00000000 	.word	0x00000000

0800082c <ai_platform_network_create>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	9d04      	ldr	r5, [sp, #16]
 8000830:	4604      	mov	r4, r0
 8000832:	9805      	ldr	r0, [sp, #20]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	042d      	lsls	r5, r5, #16
 8000838:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800083c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000840:	a07c      	add	r0, pc, #496	; (adr r0, 8000a34 <.text_35>)
 8000842:	6806      	ldr	r6, [r0, #0]
 8000844:	486d      	ldr	r0, [pc, #436]	; (80009fc <.text_21>)
 8000846:	6801      	ldr	r1, [r0, #0]
 8000848:	0849      	lsrs	r1, r1, #1
 800084a:	0049      	lsls	r1, r1, #1
 800084c:	6001      	str	r1, [r0, #0]
 800084e:	2001      	movs	r0, #1
 8000850:	496b      	ldr	r1, [pc, #428]	; (8000a00 <.text_22>)
 8000852:	6088      	str	r0, [r1, #8]
 8000854:	6888      	ldr	r0, [r1, #8]
 8000856:	2800      	cmp	r0, #0
 8000858:	d1fc      	bne.n	8000854 <ai_platform_network_create+0x28>
 800085a:	4b6a      	ldr	r3, [pc, #424]	; (8000a04 <.text_23>)
 800085c:	600b      	str	r3, [r1, #0]
 800085e:	6808      	ldr	r0, [r1, #0]
 8000860:	4969      	ldr	r1, [pc, #420]	; (8000a08 <.text_24>)
 8000862:	4288      	cmp	r0, r1
 8000864:	d000      	beq.n	8000868 <ai_platform_network_create+0x3c>
 8000866:	e7fe      	b.n	8000866 <ai_platform_network_create+0x3a>
 8000868:	b91c      	cbnz	r4, 8000872 <ai_platform_network_create+0x46>
 800086a:	bf00      	nop
 800086c:	a072      	add	r0, pc, #456	; (adr r0, 8000a38 <.text_36>)
 800086e:	6800      	ldr	r0, [r0, #0]
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	4966      	ldr	r1, [pc, #408]	; (8000a0c <.text_25>)
 8000874:	6011      	str	r1, [r2, #0]
 8000876:	f8c4 2000 	str.w	r2, [r4]
 800087a:	f000 f8df 	bl	8000a3c <core_init>
 800087e:	b908      	cbnz	r0, 8000884 <ai_platform_network_create+0x58>
 8000880:	a067      	add	r0, pc, #412	; (adr r0, 8000a20 <.text_30>)
 8000882:	e00a      	b.n	800089a <ai_platform_network_create+0x6e>
 8000884:	4962      	ldr	r1, [pc, #392]	; (8000a10 <.text_26>)
 8000886:	428d      	cmp	r5, r1
 8000888:	bf28      	it	cs
 800088a:	f20f 1098 	addwcs	r0, pc, #408	; 0x198
 800088e:	d204      	bcs.n	800089a <ai_platform_network_create+0x6e>
 8000890:	a065      	add	r0, pc, #404	; (adr r0, 8000a28 <_platform_network_sanity_check{5}::signatures>)
 8000892:	f000 f8ef 	bl	8000a74 <ai_check_custom_types>
 8000896:	b918      	cbnz	r0, 80008a0 <ai_platform_network_create+0x74>
 8000898:	a064      	add	r0, pc, #400	; (adr r0, 8000a2c <.text_33>)
 800089a:	6806      	ldr	r6, [r0, #0]
 800089c:	2100      	movs	r1, #0
 800089e:	6021      	str	r1, [r4, #0]
 80008a0:	4630      	mov	r0, r6
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <ai_platform_network_destroy>:
 80008a4:	b128      	cbz	r0, 80008b2 <ai_platform_network_destroy+0xe>
 80008a6:	6801      	ldr	r1, [r0, #0]
 80008a8:	4a58      	ldr	r2, [pc, #352]	; (8000a0c <.text_25>)
 80008aa:	4291      	cmp	r1, r2
 80008ac:	bf08      	it	eq
 80008ae:	4602      	moveq	r2, r0
 80008b0:	d000      	beq.n	80008b4 <ai_platform_network_destroy+0x10>
 80008b2:	2200      	movs	r2, #0
 80008b4:	4951      	ldr	r1, [pc, #324]	; (80009fc <.text_21>)
 80008b6:	680b      	ldr	r3, [r1, #0]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	600b      	str	r3, [r1, #0]
 80008be:	2101      	movs	r1, #1
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <.text_22>)
 80008c2:	6099      	str	r1, [r3, #8]
 80008c4:	6899      	ldr	r1, [r3, #8]
 80008c6:	2900      	cmp	r1, #0
 80008c8:	d1fc      	bne.n	80008c4 <ai_platform_network_destroy+0x20>
 80008ca:	f8df c138 	ldr.w	ip, [pc, #312]	; 8000a04 <.text_23>
 80008ce:	f8c3 c000 	str.w	ip, [r3]
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <.text_24>)
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d000      	beq.n	80008dc <ai_platform_network_destroy+0x38>
 80008da:	e7fe      	b.n	80008da <ai_platform_network_destroy+0x36>
 80008dc:	b102      	cbz	r2, 80008e0 <ai_platform_network_destroy+0x3c>
 80008de:	2000      	movs	r0, #0
 80008e0:	4770      	bx	lr

080008e2 <ai_platform_network_init>:
 80008e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e6:	b081      	sub	sp, #4
 80008e8:	460a      	mov	r2, r1
 80008ea:	b118      	cbz	r0, 80008f4 <ai_platform_network_init+0x12>
 80008ec:	6801      	ldr	r1, [r0, #0]
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <.text_25>)
 80008f0:	4299      	cmp	r1, r3
 80008f2:	d000      	beq.n	80008f6 <ai_platform_network_init+0x14>
 80008f4:	2000      	movs	r0, #0
 80008f6:	4941      	ldr	r1, [pc, #260]	; (80009fc <.text_21>)
 80008f8:	680b      	ldr	r3, [r1, #0]
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	600b      	str	r3, [r1, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <.text_22>)
 8000904:	6099      	str	r1, [r3, #8]
 8000906:	6899      	ldr	r1, [r3, #8]
 8000908:	2900      	cmp	r1, #0
 800090a:	d1fc      	bne.n	8000906 <ai_platform_network_init+0x24>
 800090c:	4c3d      	ldr	r4, [pc, #244]	; (8000a04 <.text_23>)
 800090e:	601c      	str	r4, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <.text_24>)
 8000914:	4299      	cmp	r1, r3
 8000916:	d000      	beq.n	800091a <ai_platform_network_init+0x38>
 8000918:	e7fe      	b.n	8000918 <ai_platform_network_init+0x36>
 800091a:	2800      	cmp	r0, #0
 800091c:	d034      	beq.n	8000988 <ai_platform_network_init+0xa6>
 800091e:	b90a      	cbnz	r2, 8000924 <ai_platform_network_init+0x42>
 8000920:	2211      	movs	r2, #17
 8000922:	e012      	b.n	800094a <ai_platform_network_init+0x68>
 8000924:	6913      	ldr	r3, [r2, #16]
 8000926:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000928:	b939      	cbnz	r1, 800093a <ai_platform_network_init+0x58>
 800092a:	8b91      	ldrh	r1, [r2, #28]
 800092c:	8b55      	ldrh	r5, [r2, #26]
 800092e:	6a14      	ldr	r4, [r2, #32]
 8000930:	4369      	muls	r1, r5
 8000932:	4361      	muls	r1, r4
 8000934:	bf18      	it	ne
 8000936:	2213      	movne	r2, #19
 8000938:	d107      	bne.n	800094a <ai_platform_network_init+0x68>
 800093a:	b973      	cbnz	r3, 800095a <ai_platform_network_init+0x78>
 800093c:	8911      	ldrh	r1, [r2, #8]
 800093e:	88d4      	ldrh	r4, [r2, #6]
 8000940:	68d3      	ldr	r3, [r2, #12]
 8000942:	4361      	muls	r1, r4
 8000944:	4359      	muls	r1, r3
 8000946:	d008      	beq.n	800095a <ai_platform_network_init+0x78>
 8000948:	2212      	movs	r2, #18
 800094a:	2110      	movs	r1, #16
 800094c:	300c      	adds	r0, #12
 800094e:	f000 f87c 	bl	8000a4a <core_set_error>
 8000952:	2000      	movs	r0, #0
 8000954:	b001      	add	sp, #4
 8000956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800095a:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 800095c:	f100 0114 	add.w	r1, r0, #20
 8000960:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8000964:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 8000968:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 800096c:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 8000970:	2103      	movs	r1, #3
 8000972:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000974:	6081      	str	r1, [r0, #8]
 8000976:	b13a      	cbz	r2, 8000988 <ai_platform_network_init+0xa6>
 8000978:	6891      	ldr	r1, [r2, #8]
 800097a:	6050      	str	r0, [r2, #4]
 800097c:	428a      	cmp	r2, r1
 800097e:	bf18      	it	ne
 8000980:	2900      	cmpne	r1, #0
 8000982:	bf18      	it	ne
 8000984:	460a      	movne	r2, r1
 8000986:	d1f7      	bne.n	8000978 <ai_platform_network_init+0x96>
 8000988:	b001      	add	sp, #4
 800098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800098e <ai_platform_network_process>:
 800098e:	b570      	push	{r4, r5, r6, lr}
 8000990:	0004      	movs	r4, r0
 8000992:	d003      	beq.n	800099c <ai_platform_network_process+0xe>
 8000994:	6820      	ldr	r0, [r4, #0]
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <.text_25>)
 8000998:	4298      	cmp	r0, r3
 800099a:	d000      	beq.n	800099e <ai_platform_network_process+0x10>
 800099c:	2400      	movs	r4, #0
 800099e:	4817      	ldr	r0, [pc, #92]	; (80009fc <.text_21>)
 80009a0:	6803      	ldr	r3, [r0, #0]
 80009a2:	085b      	lsrs	r3, r3, #1
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	6003      	str	r3, [r0, #0]
 80009a8:	2001      	movs	r0, #1
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <.text_22>)
 80009ac:	6098      	str	r0, [r3, #8]
 80009ae:	6898      	ldr	r0, [r3, #8]
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1fc      	bne.n	80009ae <ai_platform_network_process+0x20>
 80009b4:	4d13      	ldr	r5, [pc, #76]	; (8000a04 <.text_23>)
 80009b6:	601d      	str	r5, [r3, #0]
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <.text_24>)
 80009bc:	4298      	cmp	r0, r3
 80009be:	d000      	beq.n	80009c2 <ai_platform_network_process+0x34>
 80009c0:	e7fe      	b.n	80009c0 <ai_platform_network_process+0x32>
 80009c2:	4620      	mov	r0, r4
 80009c4:	f7ff fcca 	bl	800035c <_platform_network_io_bind>
 80009c8:	b1b8      	cbz	r0, 80009fa <ai_platform_network_process+0x6c>
 80009ca:	8a60      	ldrh	r0, [r4, #18]
 80009cc:	8a21      	ldrh	r1, [r4, #16]
 80009ce:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f105 060c 	add.w	r6, r5, #12
 80009d6:	d20f      	bcs.n	80009f8 <ai_platform_network_process+0x6a>
 80009d8:	4628      	mov	r0, r5
 80009da:	f7ff fc4d 	bl	8000278 <_platform_network_state_update_input>
 80009de:	4620      	mov	r0, r4
 80009e0:	f000 f8f2 	bl	8000bc8 <ai_layers_forward_all>
 80009e4:	4630      	mov	r0, r6
 80009e6:	f7ff fc7b 	bl	80002e0 <_platform_network_state_update_output>
 80009ea:	8a60      	ldrh	r0, [r4, #18]
 80009ec:	8a21      	ldrh	r1, [r4, #16]
 80009ee:	1c40      	adds	r0, r0, #1
 80009f0:	8260      	strh	r0, [r4, #18]
 80009f2:	b280      	uxth	r0, r0
 80009f4:	4288      	cmp	r0, r1
 80009f6:	d3ef      	bcc.n	80009d8 <ai_platform_network_process+0x4a>
 80009f8:	8a60      	ldrh	r0, [r4, #18]
 80009fa:	bd70      	pop	{r4, r5, r6, pc}

080009fc <.text_21>:
 80009fc:	e0002000 	.word	0xe0002000

08000a00 <.text_22>:
 8000a00:	40023000 	.word	0x40023000

08000a04 <.text_23>:
 8000a04:	f407a5c2 	.word	0xf407a5c2

08000a08 <.text_24>:
 8000a08:	b5e8b5cd 	.word	0xb5e8b5cd

08000a0c <.text_25>:
 8000a0c:	a1c00100 	.word	0xa1c00100

08000a10 <.text_26>:
 8000a10:	01030001 	.word	0x01030001

08000a14 <.text_27>:
 8000a14:	00000004 	.word	0x00000004

08000a18 <.text_28>:
 8000a18:	00000101 	.word	0x00000101

08000a1c <.text_29>:
 8000a1c:	00000301 	.word	0x00000301

08000a20 <.text_30>:
 8000a20:	00001030 	.word	0x00001030

08000a24 <.text_31>:
 8000a24:	00001001 	.word	0x00001001

08000a28 <_platform_network_sanity_check{5}::signatures>:
 8000a28:	84048403                                ....

08000a2c <.text_33>:
 8000a2c:	00001002 	.word	0x00001002

08000a30 <.text_34>:
 8000a30:	00001010 	.word	0x00001010

08000a34 <.text_35>:
 8000a34:	00000000 	.word	0x00000000

08000a38 <.text_36>:
 8000a38:	00001010 	.word	0x00001010

08000a3c <core_init>:
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	4770      	bx	lr

08000a40 <core_get_error>:
 8000a40:	4601      	mov	r1, r0
 8000a42:	2200      	movs	r2, #0
 8000a44:	6808      	ldr	r0, [r1, #0]
 8000a46:	600a      	str	r2, [r1, #0]
 8000a48:	4770      	bx	lr

08000a4a <core_set_error>:
 8000a4a:	7803      	ldrb	r3, [r0, #0]
 8000a4c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000a50:	d104      	bne.n	8000a5c <core_set_error+0x12>
 8000a52:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000a56:	6001      	str	r1, [r0, #0]
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <ai_layers_forward_layer>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4604      	mov	r4, r0
 8000a64:	68e1      	ldr	r1, [r4, #12]
 8000a66:	4788      	blx	r1
 8000a68:	68a0      	ldr	r0, [r4, #8]
 8000a6a:	42a0      	cmp	r0, r4
 8000a6c:	bf08      	it	eq
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	bd10      	pop	{r4, pc}
	...

08000a74 <ai_check_custom_types>:
 8000a74:	b500      	push	{lr}
 8000a76:	b081      	sub	sp, #4
 8000a78:	b160      	cbz	r0, 8000a94 <ai_check_custom_types+0x20>
 8000a7a:	7801      	ldrb	r1, [r0, #0]
 8000a7c:	2903      	cmp	r1, #3
 8000a7e:	d109      	bne.n	8000a94 <ai_check_custom_types+0x20>
 8000a80:	f05f 0204 	movs.w	r2, #4
 8000a84:	a18c      	add	r1, pc, #560	; (adr r1, 8000cb8 <ai_check_custom_types::ref_signatures>)
 8000a86:	f00b f921 	bl	800bccc <memcmp>
 8000a8a:	1e40      	subs	r0, r0, #1
 8000a8c:	4180      	sbcs	r0, r0
 8000a8e:	0fc0      	lsrs	r0, r0, #31
 8000a90:	b001      	add	sp, #4
 8000a92:	bd00      	pop	{pc}
 8000a94:	2000      	movs	r0, #0
 8000a96:	b001      	add	sp, #4
 8000a98:	bd00      	pop	{pc}
	...

08000a9c <ai_layer_type_name>:
 8000a9c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000aa0:	1a81      	subs	r1, r0, r2
 8000aa2:	2901      	cmp	r1, #1
 8000aa4:	bf81      	itttt	hi
 8000aa6:	1ec9      	subhi	r1, r1, #3
 8000aa8:	290d      	cmphi	r1, #13
 8000aaa:	390f      	subhi	r1, #15
 8000aac:	2909      	cmphi	r1, #9
 8000aae:	f200 806b 	bhi.w	8000b88 <ai_layer_type_name+0xec>
 8000ab2:	1a80      	subs	r0, r0, r2
 8000ab4:	d033      	beq.n	8000b1e <ai_layer_type_name+0x82>
 8000ab6:	1e40      	subs	r0, r0, #1
 8000ab8:	d033      	beq.n	8000b22 <ai_layer_type_name+0x86>
 8000aba:	1e80      	subs	r0, r0, #2
 8000abc:	d033      	beq.n	8000b26 <ai_layer_type_name+0x8a>
 8000abe:	1e40      	subs	r0, r0, #1
 8000ac0:	d034      	beq.n	8000b2c <ai_layer_type_name+0x90>
 8000ac2:	1e40      	subs	r0, r0, #1
 8000ac4:	d034      	beq.n	8000b30 <ai_layer_type_name+0x94>
 8000ac6:	1e40      	subs	r0, r0, #1
 8000ac8:	d034      	beq.n	8000b34 <ai_layer_type_name+0x98>
 8000aca:	1e40      	subs	r0, r0, #1
 8000acc:	d034      	beq.n	8000b38 <ai_layer_type_name+0x9c>
 8000ace:	1e40      	subs	r0, r0, #1
 8000ad0:	d034      	beq.n	8000b3c <ai_layer_type_name+0xa0>
 8000ad2:	1e40      	subs	r0, r0, #1
 8000ad4:	d034      	beq.n	8000b40 <ai_layer_type_name+0xa4>
 8000ad6:	1e40      	subs	r0, r0, #1
 8000ad8:	d034      	beq.n	8000b44 <ai_layer_type_name+0xa8>
 8000ada:	1e40      	subs	r0, r0, #1
 8000adc:	d034      	beq.n	8000b48 <ai_layer_type_name+0xac>
 8000ade:	1e40      	subs	r0, r0, #1
 8000ae0:	d034      	beq.n	8000b4c <ai_layer_type_name+0xb0>
 8000ae2:	1e40      	subs	r0, r0, #1
 8000ae4:	d034      	beq.n	8000b50 <ai_layer_type_name+0xb4>
 8000ae6:	1e40      	subs	r0, r0, #1
 8000ae8:	d034      	beq.n	8000b54 <ai_layer_type_name+0xb8>
 8000aea:	1e40      	subs	r0, r0, #1
 8000aec:	d034      	beq.n	8000b58 <ai_layer_type_name+0xbc>
 8000aee:	1e40      	subs	r0, r0, #1
 8000af0:	d034      	beq.n	8000b5c <ai_layer_type_name+0xc0>
 8000af2:	1e80      	subs	r0, r0, #2
 8000af4:	d034      	beq.n	8000b60 <ai_layer_type_name+0xc4>
 8000af6:	1e40      	subs	r0, r0, #1
 8000af8:	d034      	beq.n	8000b64 <ai_layer_type_name+0xc8>
 8000afa:	1e40      	subs	r0, r0, #1
 8000afc:	d034      	beq.n	8000b68 <ai_layer_type_name+0xcc>
 8000afe:	1e40      	subs	r0, r0, #1
 8000b00:	d034      	beq.n	8000b6c <ai_layer_type_name+0xd0>
 8000b02:	1e40      	subs	r0, r0, #1
 8000b04:	d034      	beq.n	8000b70 <ai_layer_type_name+0xd4>
 8000b06:	1e40      	subs	r0, r0, #1
 8000b08:	d034      	beq.n	8000b74 <ai_layer_type_name+0xd8>
 8000b0a:	1e40      	subs	r0, r0, #1
 8000b0c:	d034      	beq.n	8000b78 <ai_layer_type_name+0xdc>
 8000b0e:	1e40      	subs	r0, r0, #1
 8000b10:	d034      	beq.n	8000b7c <ai_layer_type_name+0xe0>
 8000b12:	1e40      	subs	r0, r0, #1
 8000b14:	d034      	beq.n	8000b80 <ai_layer_type_name+0xe4>
 8000b16:	1e40      	subs	r0, r0, #1
 8000b18:	d034      	beq.n	8000b84 <ai_layer_type_name+0xe8>
 8000b1a:	a01c      	add	r0, pc, #112	; (adr r0, 8000b8c <.text_5>)
 8000b1c:	4770      	bx	lr
 8000b1e:	a01c      	add	r0, pc, #112	; (adr r0, 8000b90 <.text_6>)
 8000b20:	4770      	bx	lr
 8000b22:	a01c      	add	r0, pc, #112	; (adr r0, 8000b94 <.text_7>)
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	a031      	add	r0, pc, #196	; (adr r0, 8000bf0 <.text_15>)
 8000b2a:	4770      	bx	lr
 8000b2c:	a032      	add	r0, pc, #200	; (adr r0, 8000bf8 <.text_16>)
 8000b2e:	4770      	bx	lr
 8000b30:	a019      	add	r0, pc, #100	; (adr r0, 8000b98 <.text_8>)
 8000b32:	4770      	bx	lr
 8000b34:	a019      	add	r0, pc, #100	; (adr r0, 8000b9c <.text_9>)
 8000b36:	4770      	bx	lr
 8000b38:	a031      	add	r0, pc, #196	; (adr r0, 8000c00 <.text_17>)
 8000b3a:	4770      	bx	lr
 8000b3c:	a018      	add	r0, pc, #96	; (adr r0, 8000ba0 <.text_10>)
 8000b3e:	4770      	bx	lr
 8000b40:	a031      	add	r0, pc, #196	; (adr r0, 8000c08 <.text_18>)
 8000b42:	4770      	bx	lr
 8000b44:	a032      	add	r0, pc, #200	; (adr r0, 8000c10 <.text_19>)
 8000b46:	4770      	bx	lr
 8000b48:	a036      	add	r0, pc, #216	; (adr r0, 8000c24 <.text_20>)
 8000b4a:	4770      	bx	lr
 8000b4c:	a037      	add	r0, pc, #220	; (adr r0, 8000c2c <.text_21>)
 8000b4e:	4770      	bx	lr
 8000b50:	a014      	add	r0, pc, #80	; (adr r0, 8000ba4 <.text_11>)
 8000b52:	4770      	bx	lr
 8000b54:	a037      	add	r0, pc, #220	; (adr r0, 8000c34 <.text_22>)
 8000b56:	4770      	bx	lr
 8000b58:	a038      	add	r0, pc, #224	; (adr r0, 8000c3c <.text_23>)
 8000b5a:	4770      	bx	lr
 8000b5c:	a03a      	add	r0, pc, #232	; (adr r0, 8000c48 <.text_24>)
 8000b5e:	4770      	bx	lr
 8000b60:	a03e      	add	r0, pc, #248	; (adr r0, 8000c5c <.text_25>)
 8000b62:	4770      	bx	lr
 8000b64:	a03f      	add	r0, pc, #252	; (adr r0, 8000c64 <.text_26>)
 8000b66:	4770      	bx	lr
 8000b68:	a040      	add	r0, pc, #256	; (adr r0, 8000c6c <.text_27>)
 8000b6a:	4770      	bx	lr
 8000b6c:	a042      	add	r0, pc, #264	; (adr r0, 8000c78 <.text_28>)
 8000b6e:	4770      	bx	lr
 8000b70:	a043      	add	r0, pc, #268	; (adr r0, 8000c80 <.text_29>)
 8000b72:	4770      	bx	lr
 8000b74:	a044      	add	r0, pc, #272	; (adr r0, 8000c88 <.text_30>)
 8000b76:	4770      	bx	lr
 8000b78:	a00b      	add	r0, pc, #44	; (adr r0, 8000ba8 <.text_12>)
 8000b7a:	4770      	bx	lr
 8000b7c:	a048      	add	r0, pc, #288	; (adr r0, 8000ca0 <.text_31>)
 8000b7e:	4770      	bx	lr
 8000b80:	a049      	add	r0, pc, #292	; (adr r0, 8000ca8 <.text_32>)
 8000b82:	4770      	bx	lr
 8000b84:	a04a      	add	r0, pc, #296	; (adr r0, 8000cb0 <.text_33>)
 8000b86:	4770      	bx	lr
 8000b88:	a000      	add	r0, pc, #0	; (adr r0, 8000b8c <.text_5>)
 8000b8a:	4770      	bx	lr

08000b8c <.text_5>:
 8000b8c:	00000000 	.word	0x00000000

08000b90 <.text_6>:
 8000b90:	00444441 	.word	0x00444441

08000b94 <.text_7>:
 8000b94:	00004e42 	.word	0x00004e42

08000b98 <.text_8>:
 8000b98:	00555247 	.word	0x00555247

08000b9c <.text_9>:
 8000b9c:	004e524c 	.word	0x004e524c

08000ba0 <.text_10>:
 8000ba0:	00004c4e 	.word	0x00004c4e

08000ba4 <.text_11>:
 8000ba4:	00004d53 	.word	0x00004d53

08000ba8 <.text_12>:
 8000ba8:	00444150 	.word	0x00444150

08000bac <ai_layer_type_is_valid>:
 8000bac:	f242 7111 	movw	r1, #10001	; 0x2711
 8000bb0:	1a40      	subs	r0, r0, r1
 8000bb2:	2801      	cmp	r0, #1
 8000bb4:	bf81      	itttt	hi
 8000bb6:	1ec0      	subhi	r0, r0, #3
 8000bb8:	280d      	cmphi	r0, #13
 8000bba:	380f      	subhi	r0, #15
 8000bbc:	2809      	cmphi	r0, #9
 8000bbe:	d801      	bhi.n	8000bc4 <ai_layer_type_is_valid+0x18>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4770      	bx	lr
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <ai_layers_forward_all>:
 8000bc8:	b530      	push	{r4, r5, lr}
 8000bca:	4604      	mov	r4, r0
 8000bcc:	b081      	sub	sp, #4
 8000bce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000bd0:	b158      	cbz	r0, 8000bea <ai_layers_forward_all+0x22>
 8000bd2:	64a0      	str	r0, [r4, #72]	; 0x48
 8000bd4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000bd6:	68e9      	ldr	r1, [r5, #12]
 8000bd8:	4628      	mov	r0, r5
 8000bda:	4788      	blx	r1
 8000bdc:	68a8      	ldr	r0, [r5, #8]
 8000bde:	42a8      	cmp	r0, r5
 8000be0:	bf08      	it	eq
 8000be2:	2000      	moveq	r0, #0
 8000be4:	2800      	cmp	r0, #0
 8000be6:	64a0      	str	r0, [r4, #72]	; 0x48
 8000be8:	d1f4      	bne.n	8000bd4 <ai_layers_forward_all+0xc>
 8000bea:	b001      	add	sp, #4
 8000bec:	bd30      	pop	{r4, r5, pc}
	...

08000bf0 <.text_15>:
 8000bf0:	564e4f43 	.word	0x564e4f43
 8000bf4:	4432      	.short	0x4432
	...

08000bf8 <.text_16>:
 8000bf8:	534e4544 	.word	0x534e4544
 8000bfc:	0045      	.short	0x0045
	...

08000c00 <.text_17>:
 8000c00:	4d54534c 	.word	0x4d54534c
 8000c04:	00000000 	.word	0x00000000

08000c08 <.text_18>:
 8000c08:	4d524f4e 	.word	0x4d524f4e
 8000c0c:	00000000 	.word	0x00000000

08000c10 <.text_19>:
 8000c10:	4954504f 	.word	0x4954504f
 8000c14:	455a494d 	.word	0x455a494d
 8000c18:	4f435f44 	.word	0x4f435f44
 8000c1c:	4432564e 	.word	0x4432564e
 8000c20:	00000000 	.word	0x00000000

08000c24 <.text_20>:
 8000c24:	4d524550 	.word	0x4d524550
 8000c28:	00455455 	.word	0x00455455

08000c2c <.text_21>:
 8000c2c:	4c4f4f50 	.word	0x4c4f4f50
 8000c30:	00000000 	.word	0x00000000

08000c34 <.text_22>:
 8000c34:	494c5053 	.word	0x494c5053
 8000c38:	0054      	.short	0x0054
	...

08000c3c <.text_23>:
 8000c3c:	454d4954 	.word	0x454d4954
 8000c40:	4c45445f 	.word	0x4c45445f
 8000c44:	5941      	.short	0x5941
	...

08000c48 <.text_24>:
 8000c48:	454d4954 	.word	0x454d4954
 8000c4c:	5349445f 	.word	0x5349445f
 8000c50:	42495254 	.word	0x42495254
 8000c54:	44455455 	.word	0x44455455
 8000c58:	00000000 	.word	0x00000000

08000c5c <.text_25>:
 8000c5c:	434e4f43 	.word	0x434e4f43
 8000c60:	5441      	.short	0x5441
	...

08000c64 <.text_26>:
 8000c64:	4d4d4547 	.word	0x4d4d4547
 8000c68:	00000000 	.word	0x00000000

08000c6c <.text_27>:
 8000c6c:	41535055 	.word	0x41535055
 8000c70:	454c504d 	.word	0x454c504d
 8000c74:	00000000 	.word	0x00000000

08000c78 <.text_28>:
 8000c78:	57544c45 	.word	0x57544c45
 8000c7c:	00455349 	.word	0x00455349

08000c80 <.text_29>:
 8000c80:	454e4547 	.word	0x454e4547
 8000c84:	00434952 	.word	0x00434952

08000c88 <.text_30>:
 8000c88:	54534e49 	.word	0x54534e49
 8000c8c:	45434e41 	.word	0x45434e41
 8000c90:	4d524f4e 	.word	0x4d524f4e
 8000c94:	5a494c41 	.word	0x5a494c41
 8000c98:	4f495441 	.word	0x4f495441
 8000c9c:	004e      	.short	0x004e
	...

08000ca0 <.text_31>:
 8000ca0:	43494c53 	.word	0x43494c53
 8000ca4:	0045      	.short	0x0045
	...

08000ca8 <.text_32>:
 8000ca8:	454c4954 	.word	0x454c4954
 8000cac:	00000000 	.word	0x00000000

08000cb0 <.text_33>:
 8000cb0:	55444552 	.word	0x55444552
 8000cb4:	4543      	.short	0x4543
	...

08000cb8 <ai_check_custom_types::ref_signatures>:
 8000cb8:	8403 8404                                   ....

08000cbc <ai_conv2d_kernel_simple_f32>:
 8000cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc0:	b081      	sub	sp, #4
 8000cc2:	468b      	mov	fp, r1
 8000cc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000cc6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000cca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8000ccc:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cd0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8000cd2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8000cd6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8000cda:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ce2:	eba5 0709 	sub.w	r7, r5, r9
 8000ce6:	fb07 f708 	mul.w	r7, r7, r8
 8000cea:	9700      	str	r7, [sp, #0]
 8000cec:	1ae4      	subs	r4, r4, r3
 8000cee:	fb05 f708 	mul.w	r7, r5, r8
 8000cf2:	fb05 650e 	mla	r5, r5, lr, r6
 8000cf6:	fb08 f505 	mul.w	r5, r8, r5
 8000cfa:	437c      	muls	r4, r7
 8000cfc:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8000d00:	45da      	cmp	sl, fp
 8000d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d04:	ebac 0009 	sub.w	r0, ip, r9
 8000d08:	bf0c      	ite	eq
 8000d0a:	ed9f 0aab 	vldreq	s0, [pc, #684]	; 8000fb8 <.text_4>
 8000d0e:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000d12:	fb0c f50e 	mul.w	r5, ip, lr
 8000d16:	fb00 f008 	mul.w	r0, r0, r8
 8000d1a:	fb09 f908 	mul.w	r9, r9, r8
 8000d1e:	fb08 f505 	mul.w	r5, r8, r5
 8000d22:	2900      	cmp	r1, #0
 8000d24:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 8000d28:	f000 8070 	beq.w	8000e0c <ai_conv2d_kernel_simple_f32+0x150>
 8000d2c:	f029 0203 	bic.w	r2, r9, #3
 8000d30:	edda 0a00 	vldr	s1, [sl]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000d3a:	46c4      	mov	ip, r8
 8000d3c:	dd5c      	ble.n	8000df8 <ai_conv2d_kernel_simple_f32+0x13c>
 8000d3e:	9d00      	ldr	r5, [sp, #0]
 8000d40:	469e      	mov	lr, r3
 8000d42:	2700      	movs	r7, #0
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	dd1d      	ble.n	8000d84 <ai_conv2d_kernel_simple_f32+0xc8>
 8000d48:	ed96 4a00 	vldr	s8, [r6]
 8000d4c:	eddc 4a00 	vldr	s9, [ip]
 8000d50:	ed96 3a01 	vldr	s6, [r6, #4]
 8000d54:	eddc 3a01 	vldr	s7, [ip, #4]
 8000d58:	ed96 2a02 	vldr	s4, [r6, #8]
 8000d5c:	eddc 2a02 	vldr	s5, [ip, #8]
 8000d60:	ed96 1a03 	vldr	s2, [r6, #12]
 8000d64:	eddc 1a03 	vldr	s3, [ip, #12]
 8000d68:	ee44 0a24 	vmla.f32	s1, s8, s9
 8000d6c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8000d70:	3610      	adds	r6, #16
 8000d72:	1d3f      	adds	r7, r7, #4
 8000d74:	ee42 0a22 	vmla.f32	s1, s4, s5
 8000d78:	4297      	cmp	r7, r2
 8000d7a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d7e:	f10c 0c10 	add.w	ip, ip, #16
 8000d82:	dbe1      	blt.n	8000d48 <ai_conv2d_kernel_simple_f32+0x8c>
 8000d84:	454f      	cmp	r7, r9
 8000d86:	da2f      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000d88:	1c7f      	adds	r7, r7, #1
 8000d8a:	ed96 1a00 	vldr	s2, [r6]
 8000d8e:	eddc 1a00 	vldr	s3, [ip]
 8000d92:	1d36      	adds	r6, r6, #4
 8000d94:	454f      	cmp	r7, r9
 8000d96:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d9a:	f10c 0c04 	add.w	ip, ip, #4
 8000d9e:	da23      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000da0:	1c7f      	adds	r7, r7, #1
 8000da2:	ed96 1a00 	vldr	s2, [r6]
 8000da6:	eddc 1a00 	vldr	s3, [ip]
 8000daa:	1d36      	adds	r6, r6, #4
 8000dac:	454f      	cmp	r7, r9
 8000dae:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000db2:	f10c 0c04 	add.w	ip, ip, #4
 8000db6:	da17      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000db8:	1c7f      	adds	r7, r7, #1
 8000dba:	ed96 1a00 	vldr	s2, [r6]
 8000dbe:	eddc 1a00 	vldr	s3, [ip]
 8000dc2:	1d36      	adds	r6, r6, #4
 8000dc4:	454f      	cmp	r7, r9
 8000dc6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dca:	f10c 0c04 	add.w	ip, ip, #4
 8000dce:	da0b      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000dd0:	1c7f      	adds	r7, r7, #1
 8000dd2:	ed96 1a00 	vldr	s2, [r6]
 8000dd6:	eddc 1a00 	vldr	s3, [ip]
 8000dda:	1d36      	adds	r6, r6, #4
 8000ddc:	454f      	cmp	r7, r9
 8000dde:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000de2:	f10c 0c04 	add.w	ip, ip, #4
 8000de6:	dbcf      	blt.n	8000d88 <ai_conv2d_kernel_simple_f32+0xcc>
 8000de8:	f1be 0e01 	subs.w	lr, lr, #1
 8000dec:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 8000df0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8000df4:	d1a5      	bne.n	8000d42 <ai_conv2d_kernel_simple_f32+0x86>
 8000df6:	9500      	str	r5, [sp, #0]
 8000df8:	edcb 0a00 	vstr	s1, [fp]
 8000dfc:	1e49      	subs	r1, r1, #1
 8000dfe:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000e02:	f10b 0b04 	add.w	fp, fp, #4
 8000e06:	f10a 0a04 	add.w	sl, sl, #4
 8000e0a:	d191      	bne.n	8000d30 <ai_conv2d_kernel_simple_f32+0x74>
 8000e0c:	b001      	add	sp, #4
 8000e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000e14 <ai_conv2d_kernel_depthwise_f32>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	b081      	sub	sp, #4
 8000e1a:	b402      	push	{r1}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000e20:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000e24:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8000e28:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000e2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000e2e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8000e32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000e34:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8000e38:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8000e3a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8000e3e:	fbb6 f6fa 	udiv	r6, r6, sl
 8000e42:	eba8 0a00 	sub.w	sl, r8, r0
 8000e46:	fb0c fa0a 	mul.w	sl, ip, sl
 8000e4a:	1b09      	subs	r1, r1, r4
 8000e4c:	eba5 0c00 	sub.w	ip, r5, r0
 8000e50:	4369      	muls	r1, r5
 8000e52:	fb05 750e 	mla	r5, r5, lr, r7
 8000e56:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000e5a:	9b04      	ldr	r3, [sp, #16]
 8000e5c:	4599      	cmp	r9, r3
 8000e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000e60:	bf0c      	ite	eq
 8000e62:	ed9f 0a55 	vldreq	s0, [pc, #340]	; 8000fb8 <.text_4>
 8000e66:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000e6a:	fb08 f50e 	mul.w	r5, r8, lr
 8000e6e:	435d      	muls	r5, r3
 8000e70:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
 8000e74:	eb0e 0583 	add.w	r5, lr, r3, lsl #2
 8000e78:	45ae      	cmp	lr, r5
 8000e7a:	f04f 0800 	mov.w	r8, #0
 8000e7e:	9500      	str	r5, [sp, #0]
 8000e80:	f080 8097 	bcs.w	8000fb2 <ai_conv2d_kernel_depthwise_f32+0x19e>
 8000e84:	f020 0303 	bic.w	r3, r0, #3
 8000e88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8000e8c:	9603      	str	r6, [sp, #12]
 8000e8e:	9a03      	ldr	r2, [sp, #12]
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	f000 8088 	beq.w	8000fa6 <ai_conv2d_kernel_depthwise_f32+0x192>
 8000e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e98:	9e04      	ldr	r6, [sp, #16]
 8000e9a:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8000e9e:	9a03      	ldr	r2, [sp, #12]
 8000ea0:	9415      	str	r4, [sp, #84]	; 0x54
 8000ea2:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8000ea6:	9102      	str	r1, [sp, #8]
 8000ea8:	f8cd e004 	str.w	lr, [sp, #4]
 8000eac:	9915      	ldr	r1, [sp, #84]	; 0x54
 8000eae:	edd9 0a00 	vldr	s1, [r9]
 8000eb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb6:	2900      	cmp	r1, #0
 8000eb8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000ebc:	dd63      	ble.n	8000f86 <ai_conv2d_kernel_depthwise_f32+0x172>
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd26      	ble.n	8000f12 <ai_conv2d_kernel_depthwise_f32+0xfe>
 8000ec4:	f8dd 503c 	ldr.w	r5, [sp, #60]	; 0x3c
 8000ec8:	ed97 1a00 	vldr	s2, [r7]
 8000ecc:	edde 1a00 	vldr	s3, [lr]
 8000ed0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ed4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ed8:	ed97 1a01 	vldr	s2, [r7, #4]
 8000edc:	edde 1a00 	vldr	s3, [lr]
 8000ee0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ee4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ee8:	ed97 1a02 	vldr	s2, [r7, #8]
 8000eec:	edde 1a00 	vldr	s3, [lr]
 8000ef0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ef4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ef8:	1d24      	adds	r4, r4, #4
 8000efa:	ed97 1a03 	vldr	s2, [r7, #12]
 8000efe:	edde 1a00 	vldr	s3, [lr]
 8000f02:	3710      	adds	r7, #16
 8000f04:	429c      	cmp	r4, r3
 8000f06:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f0a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f0e:	dbdb      	blt.n	8000ec8 <ai_conv2d_kernel_depthwise_f32+0xb4>
 8000f10:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f12:	4284      	cmp	r4, r0
 8000f14:	da31      	bge.n	8000f7a <ai_conv2d_kernel_depthwise_f32+0x166>
 8000f16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8000f18:	1c64      	adds	r4, r4, #1
 8000f1a:	ed97 1a00 	vldr	s2, [r7]
 8000f1e:	edde 1a00 	vldr	s3, [lr]
 8000f22:	1d3f      	adds	r7, r7, #4
 8000f24:	4284      	cmp	r4, r0
 8000f26:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f2a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f2e:	da23      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f30:	1c64      	adds	r4, r4, #1
 8000f32:	ed97 1a00 	vldr	s2, [r7]
 8000f36:	edde 1a00 	vldr	s3, [lr]
 8000f3a:	1d3f      	adds	r7, r7, #4
 8000f3c:	4284      	cmp	r4, r0
 8000f3e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f42:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f46:	da17      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f48:	1c64      	adds	r4, r4, #1
 8000f4a:	ed97 1a00 	vldr	s2, [r7]
 8000f4e:	edde 1a00 	vldr	s3, [lr]
 8000f52:	1d3f      	adds	r7, r7, #4
 8000f54:	4284      	cmp	r4, r0
 8000f56:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f5a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f5e:	da0b      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f60:	1c64      	adds	r4, r4, #1
 8000f62:	ed97 1a00 	vldr	s2, [r7]
 8000f66:	edde 1a00 	vldr	s3, [lr]
 8000f6a:	1d3f      	adds	r7, r7, #4
 8000f6c:	4284      	cmp	r4, r0
 8000f6e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f72:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f76:	dbcf      	blt.n	8000f18 <ai_conv2d_kernel_depthwise_f32+0x104>
 8000f78:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f7a:	1e49      	subs	r1, r1, #1
 8000f7c:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8000f80:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8000f84:	d19b      	bne.n	8000ebe <ai_conv2d_kernel_depthwise_f32+0xaa>
 8000f86:	9902      	ldr	r1, [sp, #8]
 8000f88:	edc6 0a00 	vstr	s1, [r6]
 8000f8c:	1d36      	adds	r6, r6, #4
 8000f8e:	1e52      	subs	r2, r2, #1
 8000f90:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8000f94:	f108 0801 	add.w	r8, r8, #1
 8000f98:	f109 0904 	add.w	r9, r9, #4
 8000f9c:	d186      	bne.n	8000eac <ai_conv2d_kernel_depthwise_f32+0x98>
 8000f9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000fa0:	9902      	ldr	r1, [sp, #8]
 8000fa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa6:	9a00      	ldr	r2, [sp, #0]
 8000fa8:	f10e 0e04 	add.w	lr, lr, #4
 8000fac:	4596      	cmp	lr, r2
 8000fae:	f4ff af6e 	bcc.w	8000e8e <ai_conv2d_kernel_depthwise_f32+0x7a>
 8000fb2:	b006      	add	sp, #24
 8000fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000fb8 <.text_4>:
 8000fb8:	00000000 	.word	0x00000000

08000fbc <ai_conv2d_kernel_group_f32>:
 8000fbc:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	4693      	mov	fp, r2
 8000fc4:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8000fc8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000fca:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000fcc:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8000fd0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8000fd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8000fd6:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8000fd8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000fda:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000fdc:	46ca      	mov	sl, r9
 8000fde:	4655      	mov	r5, sl
 8000fe0:	ebaa 0c04 	sub.w	ip, sl, r4
 8000fe4:	fb94 f6f5 	sdiv	r6, r4, r5
 8000fe8:	fb05 c506 	mla	r5, r5, r6, ip
 8000fec:	fb95 fcfa 	sdiv	ip, r5, sl
 8000ff0:	fb0a 551c 	mls	r5, sl, ip, r5
 8000ff4:	9501      	str	r5, [sp, #4]
 8000ff6:	4454      	add	r4, sl
 8000ff8:	4645      	mov	r5, r8
 8000ffa:	1bee      	subs	r6, r5, r7
 8000ffc:	fb97 fcf5 	sdiv	ip, r7, r5
 8001000:	fb05 6c0c 	mla	ip, r5, ip, r6
 8001004:	fb9c f6f5 	sdiv	r6, ip, r5
 8001008:	fb05 cc16 	mls	ip, r5, r6, ip
 800100c:	f8cd c000 	str.w	ip, [sp]
 8001010:	1e64      	subs	r4, r4, #1
 8001012:	9e01      	ldr	r6, [sp, #4]
 8001014:	1b80      	subs	r0, r0, r6
 8001016:	4450      	add	r0, sl
 8001018:	1e40      	subs	r0, r0, #1
 800101a:	fb90 f0fa 	sdiv	r0, r0, sl
 800101e:	9e00      	ldr	r6, [sp, #0]
 8001020:	1b9b      	subs	r3, r3, r6
 8001022:	fbb1 f6f2 	udiv	r6, r1, r2
 8001026:	18eb      	adds	r3, r5, r3
 8001028:	1e5b      	subs	r3, r3, #1
 800102a:	fb93 fcf5 	sdiv	ip, r3, r5
 800102e:	ebae 0e0c 	sub.w	lr, lr, ip
 8001032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001034:	9604      	str	r6, [sp, #16]
 8001036:	fbb3 f3f2 	udiv	r3, r3, r2
 800103a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800103c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800103e:	fb01 f808 	mul.w	r8, r1, r8
 8001042:	fb00 881a 	mls	r8, r0, sl, r8
 8001046:	fb06 f808 	mul.w	r8, r6, r8
 800104a:	fb06 f109 	mul.w	r1, r6, r9
 800104e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001050:	435e      	muls	r6, r3
 8001052:	fb0e fe06 	mul.w	lr, lr, r6
 8001056:	19ee      	adds	r6, r5, r7
 8001058:	1e76      	subs	r6, r6, #1
 800105a:	fb96 f5f5 	sdiv	r5, r6, r5
 800105e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001060:	fb94 f4fa 	sdiv	r4, r4, sl
 8001064:	eba1 0903 	sub.w	r9, r1, r3
 8001068:	fb06 4405 	mla	r4, r6, r5, r4
 800106c:	9e06      	ldr	r6, [sp, #24]
 800106e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001070:	9d05      	ldr	r5, [sp, #20]
 8001072:	435c      	muls	r4, r3
 8001074:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8001078:	1a09      	subs	r1, r1, r0
 800107a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800107c:	4359      	muls	r1, r3
 800107e:	42ae      	cmp	r6, r5
 8001080:	9d00      	ldr	r5, [sp, #0]
 8001082:	9e01      	ldr	r6, [sp, #4]
 8001084:	442f      	add	r7, r5
 8001086:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001088:	fb05 6507 	mla	r5, r5, r7, r6
 800108c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800108e:	bf0c      	ite	eq
 8001090:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 8001188 <.text_6>
 8001094:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001098:	437d      	muls	r5, r7
 800109a:	2a00      	cmp	r2, #0
 800109c:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80010a0:	f04f 0a00 	mov.w	sl, #0
 80010a4:	d06d      	beq.n	8001182 <ai_conv2d_kernel_group_f32+0x1c6>
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	9a04      	ldr	r2, [sp, #16]
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d063      	beq.n	8001176 <ai_conv2d_kernel_group_f32+0x1ba>
 80010ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80010b0:	9f05      	ldr	r7, [sp, #20]
 80010b2:	f8cd c004 	str.w	ip, [sp, #4]
 80010b6:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 80010ba:	9a04      	ldr	r2, [sp, #16]
 80010bc:	f8cd e00c 	str.w	lr, [sp, #12]
 80010c0:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 80010c4:	f8cd 5008 	str.w	r5, [sp, #8]
 80010c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010cc:	eddb 0a00 	vldr	s1, [fp]
 80010d0:	9d02      	ldr	r5, [sp, #8]
 80010d2:	f1be 0f01 	cmp.w	lr, #1
 80010d6:	ee60 0a80 	vmul.f32	s1, s1, s0
 80010da:	db3b      	blt.n	8001154 <ai_conv2d_kernel_group_f32+0x198>
 80010dc:	2801      	cmp	r0, #1
 80010de:	db32      	blt.n	8001146 <ai_conv2d_kernel_group_f32+0x18a>
 80010e0:	ea4f 0c00 	mov.w	ip, r0
 80010e4:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 80010e8:	42b5      	cmp	r5, r6
 80010ea:	d227      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 80010ec:	ed94 1a00 	vldr	s2, [r4]
 80010f0:	edd5 1a00 	vldr	s3, [r5]
 80010f4:	1d24      	adds	r4, r4, #4
 80010f6:	1d2d      	adds	r5, r5, #4
 80010f8:	42b5      	cmp	r5, r6
 80010fa:	ee41 0a21 	vmla.f32	s1, s2, s3
 80010fe:	d21d      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001100:	ed94 1a00 	vldr	s2, [r4]
 8001104:	edd5 1a00 	vldr	s3, [r5]
 8001108:	1d24      	adds	r4, r4, #4
 800110a:	1d2d      	adds	r5, r5, #4
 800110c:	42b5      	cmp	r5, r6
 800110e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001112:	d213      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001114:	ed94 1a00 	vldr	s2, [r4]
 8001118:	edd5 1a00 	vldr	s3, [r5]
 800111c:	1d24      	adds	r4, r4, #4
 800111e:	1d2d      	adds	r5, r5, #4
 8001120:	42b5      	cmp	r5, r6
 8001122:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001126:	d209      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001128:	ed94 1a00 	vldr	s2, [r4]
 800112c:	edd5 1a00 	vldr	s3, [r5]
 8001130:	1d24      	adds	r4, r4, #4
 8001132:	1d2d      	adds	r5, r5, #4
 8001134:	42b5      	cmp	r5, r6
 8001136:	ee41 0a21 	vmla.f32	s1, s2, s3
 800113a:	d3d7      	bcc.n	80010ec <ai_conv2d_kernel_group_f32+0x130>
 800113c:	f1bc 0c01 	subs.w	ip, ip, #1
 8001140:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001144:	d1ce      	bne.n	80010e4 <ai_conv2d_kernel_group_f32+0x128>
 8001146:	f1be 0e01 	subs.w	lr, lr, #1
 800114a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800114e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001152:	d1c3      	bne.n	80010dc <ai_conv2d_kernel_group_f32+0x120>
 8001154:	9d03      	ldr	r5, [sp, #12]
 8001156:	edc7 0a00 	vstr	s1, [r7]
 800115a:	1d3f      	adds	r7, r7, #4
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8001162:	f10a 0a01 	add.w	sl, sl, #1
 8001166:	f10b 0b04 	add.w	fp, fp, #4
 800116a:	d1ad      	bne.n	80010c8 <ai_conv2d_kernel_group_f32+0x10c>
 800116c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001170:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001174:	9d02      	ldr	r5, [sp, #8]
 8001176:	9a00      	ldr	r2, [sp, #0]
 8001178:	1e52      	subs	r2, r2, #1
 800117a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	d192      	bne.n	80010a8 <ai_conv2d_kernel_group_f32+0xec>
 8001182:	b007      	add	sp, #28
 8001184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001188 <.text_6>:
 8001188:	00000000 	.word	0x00000000

0800118c <ai_conv2d_kernel_f32>:
 800118c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001190:	b090      	sub	sp, #64	; 0x40
 8001192:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001194:	b901      	cbnz	r1, 8001198 <ai_conv2d_kernel_f32+0xc>
 8001196:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001198:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800119a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800119c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800119e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80011a0:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80011a4:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 80011a8:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 80011ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80011ae:	1bed      	subs	r5, r5, r7
 80011b0:	1ba4      	subs	r4, r4, r6
 80011b2:	920e      	str	r2, [sp, #56]	; 0x38
 80011b4:	930d      	str	r3, [sp, #52]	; 0x34
 80011b6:	f1be 0f01 	cmp.w	lr, #1
 80011ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80011bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80011be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80011c0:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80011c4:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80011c8:	bf04      	itt	eq
 80011ca:	fb1c fb08 	smulbbeq	fp, ip, r8
 80011ce:	f1bb 0f01 	cmpeq.w	fp, #1
 80011d2:	d114      	bne.n	80011fe <ai_conv2d_kernel_f32+0x72>
 80011d4:	9303      	str	r3, [sp, #12]
 80011d6:	9202      	str	r2, [sp, #8]
 80011d8:	9001      	str	r0, [sp, #4]
 80011da:	9100      	str	r1, [sp, #0]
 80011dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80011de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80011e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80011e4:	9409      	str	r4, [sp, #36]	; 0x24
 80011e6:	9608      	str	r6, [sp, #32]
 80011e8:	9507      	str	r5, [sp, #28]
 80011ea:	9706      	str	r7, [sp, #24]
 80011ec:	f8cd a014 	str.w	sl, [sp, #20]
 80011f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80011f4:	f7ff fd62 	bl	8000cbc <ai_conv2d_kernel_simple_f32>
 80011f8:	b011      	add	sp, #68	; 0x44
 80011fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011fe:	4586      	cmp	lr, r0
 8001200:	bf04      	itt	eq
 8001202:	fb1c fb08 	smulbbeq	fp, ip, r8
 8001206:	f1bb 0f01 	cmpeq.w	fp, #1
 800120a:	d114      	bne.n	8001236 <ai_conv2d_kernel_f32+0xaa>
 800120c:	9303      	str	r3, [sp, #12]
 800120e:	9202      	str	r2, [sp, #8]
 8001210:	9001      	str	r0, [sp, #4]
 8001212:	9100      	str	r1, [sp, #0]
 8001214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001218:	9910      	ldr	r1, [sp, #64]	; 0x40
 800121a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800121c:	9409      	str	r4, [sp, #36]	; 0x24
 800121e:	9608      	str	r6, [sp, #32]
 8001220:	9507      	str	r5, [sp, #28]
 8001222:	9706      	str	r7, [sp, #24]
 8001224:	f8cd a014 	str.w	sl, [sp, #20]
 8001228:	f8cd 9010 	str.w	r9, [sp, #16]
 800122c:	f7ff fdf2 	bl	8000e14 <ai_conv2d_kernel_depthwise_f32>
 8001230:	b011      	add	sp, #68	; 0x44
 8001232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001236:	9303      	str	r3, [sp, #12]
 8001238:	9202      	str	r2, [sp, #8]
 800123a:	9001      	str	r0, [sp, #4]
 800123c:	9100      	str	r1, [sp, #0]
 800123e:	f8cd e020 	str.w	lr, [sp, #32]
 8001242:	f8cd c010 	str.w	ip, [sp, #16]
 8001246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800124a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800124c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800124e:	940c      	str	r4, [sp, #48]	; 0x30
 8001250:	960b      	str	r6, [sp, #44]	; 0x2c
 8001252:	950a      	str	r5, [sp, #40]	; 0x28
 8001254:	9709      	str	r7, [sp, #36]	; 0x24
 8001256:	f8cd a01c 	str.w	sl, [sp, #28]
 800125a:	f8cd 9018 	str.w	r9, [sp, #24]
 800125e:	f8cd 8014 	str.w	r8, [sp, #20]
 8001262:	f7ff feab 	bl	8000fbc <ai_conv2d_kernel_group_f32>
 8001266:	b011      	add	sp, #68	; 0x44
 8001268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800126c <ai_conv2d_stripe_f32>:
 800126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001270:	b091      	sub	sp, #68	; 0x44
 8001272:	4604      	mov	r4, r0
 8001274:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8001278:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800127a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 800127e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001280:	fb08 b000 	mla	r0, r8, r0, fp
 8001284:	2d00      	cmp	r5, #0
 8001286:	9001      	str	r0, [sp, #4]
 8001288:	d05d      	beq.n	8001346 <ai_conv2d_stripe_f32+0xda>
 800128a:	9102      	str	r1, [sp, #8]
 800128c:	920e      	str	r2, [sp, #56]	; 0x38
 800128e:	9500      	str	r5, [sp, #0]
 8001290:	930d      	str	r3, [sp, #52]	; 0x34
 8001292:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001294:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001296:	971a      	str	r7, [sp, #104]	; 0x68
 8001298:	4625      	mov	r5, r4
 800129a:	950f      	str	r5, [sp, #60]	; 0x3c
 800129c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800129e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80012a0:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 80012a4:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 80012a8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80012aa:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80012ae:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80012b2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80012b6:	9d02      	ldr	r5, [sp, #8]
 80012b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80012ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80012bc:	9420      	str	r4, [sp, #128]	; 0x80
 80012be:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80012c2:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 80012c6:	9624      	str	r6, [sp, #144]	; 0x90
 80012c8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80012ca:	f8dd a004 	ldr.w	sl, [sp, #4]
 80012ce:	9c00      	ldr	r4, [sp, #0]
 80012d0:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 80012d4:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 80012d8:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 80012dc:	f1db 0000 	rsbs	r0, fp, #0
 80012e0:	bfd8      	it	le
 80012e2:	2000      	movle	r0, #0
 80012e4:	eba8 010b 	sub.w	r1, r8, fp
 80012e8:	42b1      	cmp	r1, r6
 80012ea:	bf28      	it	cs
 80012ec:	4631      	movcs	r1, r6
 80012ee:	910c      	str	r1, [sp, #48]	; 0x30
 80012f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80012f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80012f6:	9702      	str	r7, [sp, #8]
 80012f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80012fc:	4450      	add	r0, sl
 80012fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001300:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001304:	910a      	str	r1, [sp, #40]	; 0x28
 8001306:	9209      	str	r2, [sp, #36]	; 0x24
 8001308:	fb00 f009 	mul.w	r0, r0, r9
 800130c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800130e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001310:	9108      	str	r1, [sp, #32]
 8001312:	9207      	str	r2, [sp, #28]
 8001314:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001316:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 800131a:	9106      	str	r1, [sp, #24]
 800131c:	9205      	str	r2, [sp, #20]
 800131e:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8001322:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001324:	9104      	str	r1, [sp, #16]
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	990e      	ldr	r1, [sp, #56]	; 0x38
 800132a:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800132e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff ff2b 	bl	800118c <ai_conv2d_kernel_f32>
 8001336:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 800133a:	1e64      	subs	r4, r4, #1
 800133c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001340:	4483      	add	fp, r0
 8001342:	4482      	add	sl, r0
 8001344:	d1ca      	bne.n	80012dc <ai_conv2d_stripe_f32+0x70>
 8001346:	b011      	add	sp, #68	; 0x44
 8001348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800134c <func_dummy>:
 800134c:	4770      	bx	lr
	...

08001350 <ai_dict8_dot_array_f32>:
 8001350:	b4f0      	push	{r4, r5, r6, r7}
 8001352:	4604      	mov	r4, r0
 8001354:	9804      	ldr	r0, [sp, #16]
 8001356:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800135a:	3d20      	subs	r5, #32
 800135c:	2808      	cmp	r0, #8
 800135e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80016c4 <.text_12>
 8001362:	d22f      	bcs.n	80013c4 <ai_dict8_dot_array_f32+0x74>
 8001364:	3520      	adds	r5, #32
 8001366:	42ab      	cmp	r3, r5
 8001368:	d224      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 800136a:	7808      	ldrb	r0, [r1, #0]
 800136c:	ed93 1a00 	vldr	s2, [r3]
 8001370:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001374:	1d18      	adds	r0, r3, #4
 8001376:	edd6 0a00 	vldr	s1, [r6]
 800137a:	42a8      	cmp	r0, r5
 800137c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001380:	d218      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001382:	784b      	ldrb	r3, [r1, #1]
 8001384:	ed90 1a00 	vldr	s2, [r0]
 8001388:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800138c:	1d00      	adds	r0, r0, #4
 800138e:	edd6 0a00 	vldr	s1, [r6]
 8001392:	42a8      	cmp	r0, r5
 8001394:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001398:	d20c      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 800139a:	788b      	ldrb	r3, [r1, #2]
 800139c:	ed90 1a00 	vldr	s2, [r0]
 80013a0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80013a4:	1d03      	adds	r3, r0, #4
 80013a6:	1cc9      	adds	r1, r1, #3
 80013a8:	edd6 0a00 	vldr	s1, [r6]
 80013ac:	42ab      	cmp	r3, r5
 80013ae:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013b2:	d3da      	bcc.n	800136a <ai_dict8_dot_array_f32+0x1a>
 80013b4:	edd4 0a00 	vldr	s1, [r4]
 80013b8:	ee30 0a80 	vadd.f32	s0, s1, s0
 80013bc:	ed84 0a00 	vstr	s0, [r4]
 80013c0:	bcf0      	pop	{r4, r5, r6, r7}
 80013c2:	4770      	bx	lr
 80013c4:	f001 0003 	and.w	r0, r1, #3
 80013c8:	2803      	cmp	r0, #3
 80013ca:	d8f3      	bhi.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013cc:	e8df f000 	tbb	[pc, r0]
 80013d0:	4c413603 	.word	0x4c413603
 80013d4:	e7ee      	b.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013d6:	429d      	cmp	r5, r3
 80013d8:	f080 80d5 	bcs.w	8001586 <ai_dict8_dot_array_f32+0x236>
 80013dc:	3520      	adds	r5, #32
 80013de:	42ab      	cmp	r3, r5
 80013e0:	d2e8      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013e2:	7808      	ldrb	r0, [r1, #0]
 80013e4:	ed93 1a00 	vldr	s2, [r3]
 80013e8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80013ec:	1d18      	adds	r0, r3, #4
 80013ee:	edd6 0a00 	vldr	s1, [r6]
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013f8:	d2dc      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013fa:	784b      	ldrb	r3, [r1, #1]
 80013fc:	ed90 1a00 	vldr	s2, [r0]
 8001400:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001404:	1d00      	adds	r0, r0, #4
 8001406:	edd6 0a00 	vldr	s1, [r6]
 800140a:	42a8      	cmp	r0, r5
 800140c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001410:	d2d0      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001412:	788b      	ldrb	r3, [r1, #2]
 8001414:	ed90 1a00 	vldr	s2, [r0]
 8001418:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800141c:	1d03      	adds	r3, r0, #4
 800141e:	1cc9      	adds	r1, r1, #3
 8001420:	edd6 0a00 	vldr	s1, [r6]
 8001424:	42ab      	cmp	r3, r5
 8001426:	ee00 0a81 	vmla.f32	s0, s1, s2
 800142a:	d3da      	bcc.n	80013e2 <ai_dict8_dot_array_f32+0x92>
 800142c:	edd4 0a00 	vldr	s1, [r4]
 8001430:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001434:	ed84 0a00 	vstr	s0, [r4]
 8001438:	bcf0      	pop	{r4, r5, r6, r7}
 800143a:	4770      	bx	lr
 800143c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001440:	ed93 1a00 	vldr	s2, [r3]
 8001444:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001448:	1d1b      	adds	r3, r3, #4
 800144a:	edd6 0a00 	vldr	s1, [r6]
 800144e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001452:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001456:	ed93 1a00 	vldr	s2, [r3]
 800145a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800145e:	1d1b      	adds	r3, r3, #4
 8001460:	edd6 0a00 	vldr	s1, [r6]
 8001464:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001468:	f811 0b01 	ldrb.w	r0, [r1], #1
 800146c:	ed93 1a00 	vldr	s2, [r3]
 8001470:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001474:	1d1b      	adds	r3, r3, #4
 8001476:	edd6 0a00 	vldr	s1, [r6]
 800147a:	429d      	cmp	r5, r3
 800147c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001480:	d34e      	bcc.n	8001520 <ai_dict8_dot_array_f32+0x1d0>
 8001482:	78cf      	ldrb	r7, [r1, #3]
 8001484:	ed93 4a00 	vldr	s8, [r3]
 8001488:	ed93 3a01 	vldr	s6, [r3, #4]
 800148c:	ed93 2a02 	vldr	s4, [r3, #8]
 8001490:	ed93 1a03 	vldr	s2, [r3, #12]
 8001494:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001498:	788f      	ldrb	r7, [r1, #2]
 800149a:	edd6 0a00 	vldr	s1, [r6]
 800149e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014a2:	784f      	ldrb	r7, [r1, #1]
 80014a4:	edd6 1a00 	vldr	s3, [r6]
 80014a8:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014ac:	780f      	ldrb	r7, [r1, #0]
 80014ae:	edd6 2a00 	vldr	s5, [r6]
 80014b2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014b6:	f103 0010 	add.w	r0, r3, #16
 80014ba:	edd6 3a00 	vldr	s7, [r6]
 80014be:	790b      	ldrb	r3, [r1, #4]
 80014c0:	ee03 0a84 	vmla.f32	s0, s7, s8
 80014c4:	ee02 0a83 	vmla.f32	s0, s5, s6
 80014c8:	ee01 0a82 	vmla.f32	s0, s3, s4
 80014cc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014d0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014d4:	794b      	ldrb	r3, [r1, #5]
 80014d6:	edd7 0a00 	vldr	s1, [r7]
 80014da:	ed90 4a00 	vldr	s8, [r0]
 80014de:	edd0 3a01 	vldr	s7, [r0, #4]
 80014e2:	ed90 3a02 	vldr	s6, [r0, #8]
 80014e6:	edd0 2a03 	vldr	s5, [r0, #12]
 80014ea:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014ee:	798b      	ldrb	r3, [r1, #6]
 80014f0:	ed97 1a00 	vldr	s2, [r7]
 80014f4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014f8:	79cb      	ldrb	r3, [r1, #7]
 80014fa:	edd7 1a00 	vldr	s3, [r7]
 80014fe:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001502:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001506:	3108      	adds	r1, #8
 8001508:	f100 0310 	add.w	r3, r0, #16
 800150c:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001510:	ed97 2a00 	vldr	s4, [r7]
 8001514:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001518:	429d      	cmp	r5, r3
 800151a:	ee02 0a22 	vmla.f32	s0, s4, s5
 800151e:	d2b0      	bcs.n	8001482 <ai_dict8_dot_array_f32+0x132>
 8001520:	3520      	adds	r5, #32
 8001522:	42ab      	cmp	r3, r5
 8001524:	f4bf af46 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001528:	7808      	ldrb	r0, [r1, #0]
 800152a:	ed93 1a00 	vldr	s2, [r3]
 800152e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001532:	1d18      	adds	r0, r3, #4
 8001534:	edd6 0a00 	vldr	s1, [r6]
 8001538:	42a8      	cmp	r0, r5
 800153a:	ee00 0a81 	vmla.f32	s0, s1, s2
 800153e:	f4bf af39 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001542:	784b      	ldrb	r3, [r1, #1]
 8001544:	ed90 1a00 	vldr	s2, [r0]
 8001548:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800154c:	1d00      	adds	r0, r0, #4
 800154e:	edd6 0a00 	vldr	s1, [r6]
 8001552:	42a8      	cmp	r0, r5
 8001554:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001558:	f4bf af2c 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 800155c:	788b      	ldrb	r3, [r1, #2]
 800155e:	ed90 1a00 	vldr	s2, [r0]
 8001562:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001566:	1d03      	adds	r3, r0, #4
 8001568:	1cc9      	adds	r1, r1, #3
 800156a:	edd6 0a00 	vldr	s1, [r6]
 800156e:	42ab      	cmp	r3, r5
 8001570:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001574:	d3d8      	bcc.n	8001528 <ai_dict8_dot_array_f32+0x1d8>
 8001576:	edd4 0a00 	vldr	s1, [r4]
 800157a:	ee30 0a80 	vadd.f32	s0, s1, s0
 800157e:	ed84 0a00 	vstr	s0, [r4]
 8001582:	bcf0      	pop	{r4, r5, r6, r7}
 8001584:	4770      	bx	lr
 8001586:	78cf      	ldrb	r7, [r1, #3]
 8001588:	ed93 4a00 	vldr	s8, [r3]
 800158c:	ed93 3a01 	vldr	s6, [r3, #4]
 8001590:	ed93 2a02 	vldr	s4, [r3, #8]
 8001594:	ed93 1a03 	vldr	s2, [r3, #12]
 8001598:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800159c:	788f      	ldrb	r7, [r1, #2]
 800159e:	edd6 0a00 	vldr	s1, [r6]
 80015a2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015a6:	784f      	ldrb	r7, [r1, #1]
 80015a8:	edd6 1a00 	vldr	s3, [r6]
 80015ac:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015b0:	780f      	ldrb	r7, [r1, #0]
 80015b2:	edd6 2a00 	vldr	s5, [r6]
 80015b6:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015ba:	f103 0010 	add.w	r0, r3, #16
 80015be:	edd6 3a00 	vldr	s7, [r6]
 80015c2:	790b      	ldrb	r3, [r1, #4]
 80015c4:	ee03 0a84 	vmla.f32	s0, s7, s8
 80015c8:	ee02 0a83 	vmla.f32	s0, s5, s6
 80015cc:	ee01 0a82 	vmla.f32	s0, s3, s4
 80015d0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80015d8:	794b      	ldrb	r3, [r1, #5]
 80015da:	edd7 0a00 	vldr	s1, [r7]
 80015de:	ed90 4a00 	vldr	s8, [r0]
 80015e2:	edd0 3a01 	vldr	s7, [r0, #4]
 80015e6:	ed90 3a02 	vldr	s6, [r0, #8]
 80015ea:	edd0 2a03 	vldr	s5, [r0, #12]
 80015ee:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015f2:	798b      	ldrb	r3, [r1, #6]
 80015f4:	ed97 1a00 	vldr	s2, [r7]
 80015f8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015fc:	79cb      	ldrb	r3, [r1, #7]
 80015fe:	edd7 1a00 	vldr	s3, [r7]
 8001602:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001606:	ee00 0a84 	vmla.f32	s0, s1, s8
 800160a:	3108      	adds	r1, #8
 800160c:	f100 0310 	add.w	r3, r0, #16
 8001610:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001614:	ed97 2a00 	vldr	s4, [r7]
 8001618:	ee01 0a83 	vmla.f32	s0, s3, s6
 800161c:	429d      	cmp	r5, r3
 800161e:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001622:	d2b0      	bcs.n	8001586 <ai_dict8_dot_array_f32+0x236>
 8001624:	e6da      	b.n	80013dc <ai_dict8_dot_array_f32+0x8c>
	...

08001628 <ai_dict4_dot_array_f32>:
 8001628:	b4f0      	push	{r4, r5, r6, r7}
 800162a:	9c04      	ldr	r4, [sp, #16]
 800162c:	0865      	lsrs	r5, r4, #1
 800162e:	006d      	lsls	r5, r5, #1
 8001630:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001634:	42ab      	cmp	r3, r5
 8001636:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80016c4 <.text_12>
 800163a:	d22f      	bcs.n	800169c <ai_dict4_dot_array_f32+0x74>
 800163c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001640:	ed93 2a00 	vldr	s4, [r3]
 8001644:	ed93 1a01 	vldr	s2, [r3, #4]
 8001648:	f006 070f 	and.w	r7, r6, #15
 800164c:	0936      	lsrs	r6, r6, #4
 800164e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001652:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001656:	edd6 1a00 	vldr	s3, [r6]
 800165a:	edd7 0a00 	vldr	s1, [r7]
 800165e:	3308      	adds	r3, #8
 8001660:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001664:	42ab      	cmp	r3, r5
 8001666:	ee00 0a81 	vmla.f32	s0, s1, s2
 800166a:	d217      	bcs.n	800169c <ai_dict4_dot_array_f32+0x74>
 800166c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001670:	ed93 2a00 	vldr	s4, [r3]
 8001674:	ed93 1a01 	vldr	s2, [r3, #4]
 8001678:	f006 070f 	and.w	r7, r6, #15
 800167c:	0936      	lsrs	r6, r6, #4
 800167e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001682:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001686:	edd6 1a00 	vldr	s3, [r6]
 800168a:	edd7 0a00 	vldr	s1, [r7]
 800168e:	3308      	adds	r3, #8
 8001690:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001694:	42ab      	cmp	r3, r5
 8001696:	ee00 0a81 	vmla.f32	s0, s1, s2
 800169a:	d3cf      	bcc.n	800163c <ai_dict4_dot_array_f32+0x14>
 800169c:	07e4      	lsls	r4, r4, #31
 800169e:	d509      	bpl.n	80016b4 <ai_dict4_dot_array_f32+0x8c>
 80016a0:	7809      	ldrb	r1, [r1, #0]
 80016a2:	ed93 1a00 	vldr	s2, [r3]
 80016a6:	0909      	lsrs	r1, r1, #4
 80016a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016ac:	edd2 0a00 	vldr	s1, [r2]
 80016b0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016b4:	edd0 1a00 	vldr	s3, [r0]
 80016b8:	ee31 0a80 	vadd.f32	s0, s3, s0
 80016bc:	ed80 0a00 	vstr	s0, [r0]
 80016c0:	bcf0      	pop	{r4, r5, r6, r7}
 80016c2:	4770      	bx	lr

080016c4 <.text_12>:
 80016c4:	00000000 	.word	0x00000000

080016c8 <ai_dict_decompress_f32>:
 80016c8:	b4f0      	push	{r4, r5, r6, r7}
 80016ca:	4604      	mov	r4, r0
 80016cc:	9805      	ldr	r0, [sp, #20]
 80016ce:	9e04      	ldr	r6, [sp, #16]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80016d6:	d003      	beq.n	80016e0 <ai_dict_decompress_f32+0x18>
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d03e      	beq.n	800175a <ai_dict_decompress_f32+0x92>
 80016dc:	bcf0      	pop	{r4, r5, r6, r7}
 80016de:	4770      	bx	lr
 80016e0:	42ac      	cmp	r4, r5
 80016e2:	d259      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 80016e4:	0870      	lsrs	r0, r6, #1
 80016e6:	d02e      	beq.n	8001746 <ai_dict_decompress_f32+0x7e>
 80016e8:	07c3      	lsls	r3, r0, #31
 80016ea:	d50c      	bpl.n	8001706 <ai_dict_decompress_f32+0x3e>
 80016ec:	780f      	ldrb	r7, [r1, #0]
 80016ee:	093f      	lsrs	r7, r7, #4
 80016f0:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016f4:	6023      	str	r3, [r4, #0]
 80016f6:	f811 7b01 	ldrb.w	r7, [r1], #1
 80016fa:	f007 070f 	and.w	r7, r7, #15
 80016fe:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001702:	6063      	str	r3, [r4, #4]
 8001704:	3408      	adds	r4, #8
 8001706:	0840      	lsrs	r0, r0, #1
 8001708:	d01d      	beq.n	8001746 <ai_dict_decompress_f32+0x7e>
 800170a:	780b      	ldrb	r3, [r1, #0]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001712:	6027      	str	r7, [r4, #0]
 8001714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001720:	6067      	str	r7, [r4, #4]
 8001722:	f104 0308 	add.w	r3, r4, #8
 8001726:	780c      	ldrb	r4, [r1, #0]
 8001728:	0924      	lsrs	r4, r4, #4
 800172a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800172e:	601f      	str	r7, [r3, #0]
 8001730:	1e40      	subs	r0, r0, #1
 8001732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001736:	f004 040f 	and.w	r4, r4, #15
 800173a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800173e:	605f      	str	r7, [r3, #4]
 8001740:	f103 0408 	add.w	r4, r3, #8
 8001744:	d1e1      	bne.n	800170a <ai_dict_decompress_f32+0x42>
 8001746:	07f0      	lsls	r0, r6, #31
 8001748:	d5ca      	bpl.n	80016e0 <ai_dict_decompress_f32+0x18>
 800174a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001754:	f844 0b04 	str.w	r0, [r4], #4
 8001758:	e7c2      	b.n	80016e0 <ai_dict_decompress_f32+0x18>
 800175a:	42ac      	cmp	r4, r5
 800175c:	d21c      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 800175e:	780b      	ldrb	r3, [r1, #0]
 8001760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001764:	6020      	str	r0, [r4, #0]
 8001766:	1d20      	adds	r0, r4, #4
 8001768:	42a8      	cmp	r0, r5
 800176a:	bf3f      	itttt	cc
 800176c:	784b      	ldrbcc	r3, [r1, #1]
 800176e:	f852 4023 	ldrcc.w	r4, [r2, r3, lsl #2]
 8001772:	f840 4b04 	strcc.w	r4, [r0], #4
 8001776:	42a8      	cmpcc	r0, r5
 8001778:	d20e      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 800177a:	788b      	ldrb	r3, [r1, #2]
 800177c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001780:	f840 4b04 	str.w	r4, [r0], #4
 8001784:	42a8      	cmp	r0, r5
 8001786:	d207      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 8001788:	78cb      	ldrb	r3, [r1, #3]
 800178a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800178e:	6004      	str	r4, [r0, #0]
 8001790:	1d09      	adds	r1, r1, #4
 8001792:	1d04      	adds	r4, r0, #4
 8001794:	42ac      	cmp	r4, r5
 8001796:	d3e2      	bcc.n	800175e <ai_dict_decompress_f32+0x96>
 8001798:	bcf0      	pop	{r4, r5, r6, r7}
 800179a:	4770      	bx	lr

0800179c <forward_conv2d>:
 800179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a0:	4605      	mov	r5, r0
 80017a2:	b0a7      	sub	sp, #156	; 0x9c
 80017a4:	6968      	ldr	r0, [r5, #20]
 80017a6:	6800      	ldr	r0, [r0, #0]
 80017a8:	68c2      	ldr	r2, [r0, #12]
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	6801      	ldr	r1, [r0, #0]
 80017ae:	6982      	ldr	r2, [r0, #24]
 80017b0:	8c00      	ldrh	r0, [r0, #32]
 80017b2:	680c      	ldr	r4, [r1, #0]
 80017b4:	f8d2 b000 	ldr.w	fp, [r2]
 80017b8:	2801      	cmp	r0, #1
 80017ba:	6890      	ldr	r0, [r2, #8]
 80017bc:	bfcc      	ite	gt
 80017be:	6851      	ldrgt	r1, [r2, #4]
 80017c0:	2100      	movle	r1, #0
 80017c2:	68a2      	ldr	r2, [r4, #8]
 80017c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80017c6:	689e      	ldr	r6, [r3, #8]
 80017c8:	9603      	str	r6, [sp, #12]
 80017ca:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	9215      	str	r2, [sp, #84]	; 0x54
 80017d2:	6926      	ldr	r6, [r4, #16]
 80017d4:	961a      	str	r6, [sp, #104]	; 0x68
 80017d6:	68e7      	ldr	r7, [r4, #12]
 80017d8:	9721      	str	r7, [sp, #132]	; 0x84
 80017da:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80017dc:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 80017e0:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 80017e2:	9720      	str	r7, [sp, #128]	; 0x80
 80017e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80017e6:	6817      	ldr	r7, [r2, #0]
 80017e8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80017ec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80017ee:	9219      	str	r2, [sp, #100]	; 0x64
 80017f0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80017f2:	9618      	str	r6, [sp, #96]	; 0x60
 80017f4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80017f8:	9214      	str	r2, [sp, #80]	; 0x50
 80017fa:	f8db 6008 	ldr.w	r6, [fp, #8]
 80017fe:	9613      	str	r6, [sp, #76]	; 0x4c
 8001800:	69aa      	ldr	r2, [r5, #24]
 8001802:	921f      	str	r2, [sp, #124]	; 0x7c
 8001804:	6822      	ldr	r2, [r4, #0]
 8001806:	6894      	ldr	r4, [r2, #8]
 8001808:	941e      	str	r4, [sp, #120]	; 0x78
 800180a:	f8db 2000 	ldr.w	r2, [fp]
 800180e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001812:	b119      	cbz	r1, 800181c <forward_conv2d+0x80>
 8001814:	680a      	ldr	r2, [r1, #0]
 8001816:	6894      	ldr	r4, [r2, #8]
 8001818:	9417      	str	r4, [sp, #92]	; 0x5c
 800181a:	e001      	b.n	8001820 <forward_conv2d+0x84>
 800181c:	2200      	movs	r2, #0
 800181e:	9217      	str	r2, [sp, #92]	; 0x5c
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	688a      	ldr	r2, [r1, #8]
 8001824:	9202      	str	r2, [sp, #8]
 8001826:	69e9      	ldr	r1, [r5, #28]
 8001828:	b158      	cbz	r0, 8001842 <forward_conv2d+0xa6>
 800182a:	6803      	ldr	r3, [r0, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	9212      	str	r2, [sp, #72]	; 0x48
 8001830:	921c      	str	r2, [sp, #112]	; 0x70
 8001832:	69c0      	ldr	r0, [r0, #28]
 8001834:	9024      	str	r0, [sp, #144]	; 0x90
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f001 ff65 	bl	8003708 <ai_array_get_byte_size>
 800183e:	4604      	mov	r4, r0
 8001840:	e00a      	b.n	8001858 <forward_conv2d+0xbc>
 8001842:	b119      	cbz	r1, 800184c <forward_conv2d+0xb0>
 8001844:	6888      	ldr	r0, [r1, #8]
 8001846:	9012      	str	r0, [sp, #72]	; 0x48
 8001848:	901c      	str	r0, [sp, #112]	; 0x70
 800184a:	e002      	b.n	8001852 <forward_conv2d+0xb6>
 800184c:	2200      	movs	r2, #0
 800184e:	9212      	str	r2, [sp, #72]	; 0x48
 8001850:	911c      	str	r1, [sp, #112]	; 0x70
 8001852:	2200      	movs	r2, #0
 8001854:	9224      	str	r2, [sp, #144]	; 0x90
 8001856:	2401      	movs	r4, #1
 8001858:	6a28      	ldr	r0, [r5, #32]
 800185a:	2800      	cmp	r0, #0
 800185c:	aa18      	add	r2, sp, #96	; 0x60
 800185e:	bf12      	itee	ne
 8001860:	9023      	strne	r0, [sp, #140]	; 0x8c
 8001862:	f8df 1b88 	ldreq.w	r1, [pc, #2952]	; 80023ec <.text_22>
 8001866:	9123      	streq	r1, [sp, #140]	; 0x8c
 8001868:	9914      	ldr	r1, [sp, #80]	; 0x50
 800186a:	8813      	ldrh	r3, [r2, #0]
 800186c:	1e48      	subs	r0, r1, #1
 800186e:	1e5b      	subs	r3, r3, #1
 8001870:	aa19      	add	r2, sp, #100	; 0x64
 8001872:	fb03 1100 	mla	r1, r3, r0, r1
 8001876:	9116      	str	r1, [sp, #88]	; 0x58
 8001878:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800187a:	8813      	ldrh	r3, [r2, #0]
 800187c:	1e41      	subs	r1, r0, #1
 800187e:	1e5b      	subs	r3, r3, #1
 8001880:	fb03 0001 	mla	r0, r3, r1, r0
 8001884:	901d      	str	r0, [sp, #116]	; 0x74
 8001886:	2600      	movs	r6, #0
 8001888:	f8db 1000 	ldr.w	r1, [fp]
 800188c:	6808      	ldr	r0, [r1, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	11c3      	asrs	r3, r0, #7
 8001892:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001896:	1440      	asrs	r0, r0, #17
 8001898:	f000 000f 	and.w	r0, r0, #15
 800189c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a0:	f00c 0c03 	and.w	ip, ip, #3
 80018a4:	2804      	cmp	r0, #4
 80018a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80018aa:	bf14      	ite	ne
 80018ac:	2808      	cmpne	r0, #8
 80018ae:	68ca      	ldreq	r2, [r1, #12]
 80018b0:	b182      	cbz	r2, 80018d4 <forward_conv2d+0x138>
 80018b2:	6968      	ldr	r0, [r5, #20]
 80018b4:	6800      	ldr	r0, [r0, #0]
 80018b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80018b8:	6828      	ldr	r0, [r5, #0]
 80018ba:	b108      	cbz	r0, 80018c0 <forward_conv2d+0x124>
 80018bc:	6806      	ldr	r6, [r0, #0]
 80018be:	68b6      	ldr	r6, [r6, #8]
 80018c0:	6800      	ldr	r0, [r0, #0]
 80018c2:	6840      	ldr	r0, [r0, #4]
 80018c4:	9001      	str	r0, [sp, #4]
 80018c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80018c8:	9000      	str	r0, [sp, #0]
 80018ca:	4630      	mov	r0, r6
 80018cc:	6889      	ldr	r1, [r1, #8]
 80018ce:	f7ff fefb 	bl	80016c8 <ai_dict_decompress_f32>
 80018d2:	b906      	cbnz	r6, 80018d6 <forward_conv2d+0x13a>
 80018d4:	464e      	mov	r6, r9
 80018d6:	b2bf      	uxth	r7, r7
 80018d8:	427f      	negs	r7, r7
 80018da:	f1ba 0f00 	cmp.w	sl, #0
 80018de:	d065      	beq.n	80019ac <forward_conv2d+0x210>
 80018e0:	f1c8 0800 	rsb	r8, r8, #0
 80018e4:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 80018e8:	4652      	mov	r2, sl
 80018ea:	9d02      	ldr	r5, [sp, #8]
 80018ec:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80018f0:	9626      	str	r6, [sp, #152]	; 0x98
 80018f2:	9711      	str	r7, [sp, #68]	; 0x44
 80018f4:	9222      	str	r2, [sp, #136]	; 0x88
 80018f6:	9825      	ldr	r0, [sp, #148]	; 0x94
 80018f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80018fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80018fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018fe:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001900:	4249      	negs	r1, r1
 8001902:	bfd8      	it	le
 8001904:	2100      	movle	r1, #0
 8001906:	1ad2      	subs	r2, r2, r3
 8001908:	42b2      	cmp	r2, r6
 800190a:	bf3d      	ittte	cc
 800190c:	9b1a      	ldrcc	r3, [sp, #104]	; 0x68
 800190e:	9a11      	ldrcc	r2, [sp, #68]	; 0x44
 8001910:	1a9a      	subcc	r2, r3, r2
 8001912:	4632      	movcs	r2, r6
 8001914:	900b      	str	r0, [sp, #44]	; 0x2c
 8001916:	9109      	str	r1, [sp, #36]	; 0x24
 8001918:	920a      	str	r2, [sp, #40]	; 0x28
 800191a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800191c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001920:	9008      	str	r0, [sp, #32]
 8001922:	9107      	str	r1, [sp, #28]
 8001924:	f8cd a008 	str.w	sl, [sp, #8]
 8001928:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800192c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800192e:	9006      	str	r0, [sp, #24]
 8001930:	9105      	str	r1, [sp, #20]
 8001932:	b21b      	sxth	r3, r3
 8001934:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001936:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001938:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800193a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800193c:	930f      	str	r3, [sp, #60]	; 0x3c
 800193e:	9004      	str	r0, [sp, #16]
 8001940:	9103      	str	r1, [sp, #12]
 8001942:	b236      	sxth	r6, r6
 8001944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001946:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001948:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800194a:	960e      	str	r6, [sp, #56]	; 0x38
 800194c:	930d      	str	r3, [sp, #52]	; 0x34
 800194e:	9001      	str	r0, [sp, #4]
 8001950:	9100      	str	r1, [sp, #0]
 8001952:	4629      	mov	r1, r5
 8001954:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001956:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001958:	960c      	str	r6, [sp, #48]	; 0x30
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fc86 	bl	800126c <ai_conv2d_stripe_f32>
 8001960:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001962:	b1d8      	cbz	r0, 800199c <forward_conv2d+0x200>
 8001964:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8001966:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001968:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800196c:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001970:	4683      	mov	fp, r0
 8001972:	4633      	mov	r3, r6
 8001974:	4652      	mov	r2, sl
 8001976:	4629      	mov	r1, r5
 8001978:	4628      	mov	r0, r5
 800197a:	47c8      	blx	r9
 800197c:	4446      	add	r6, r8
 800197e:	1bf0      	subs	r0, r6, r7
 8001980:	42a0      	cmp	r0, r4
 8001982:	bfa8      	it	ge
 8001984:	463e      	movge	r6, r7
 8001986:	f1bb 0b01 	subs.w	fp, fp, #1
 800198a:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 800198e:	d1f0      	bne.n	8001972 <forward_conv2d+0x1d6>
 8001990:	9612      	str	r6, [sp, #72]	; 0x48
 8001992:	971c      	str	r7, [sp, #112]	; 0x70
 8001994:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 8001998:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800199c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800199e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80019a0:	1808      	adds	r0, r1, r0
 80019a2:	9011      	str	r0, [sp, #68]	; 0x44
 80019a4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80019a6:	1e40      	subs	r0, r0, #1
 80019a8:	9022      	str	r0, [sp, #136]	; 0x88
 80019aa:	d1a4      	bne.n	80018f6 <forward_conv2d+0x15a>
 80019ac:	b027      	add	sp, #156	; 0x9c
 80019ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019b4 <forward_conv2d_nl_pool>:
 80019b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b8:	4607      	mov	r7, r0
 80019ba:	b0b9      	sub	sp, #228	; 0xe4
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	68c2      	ldr	r2, [r0, #12]
 80019c2:	6816      	ldr	r6, [r2, #0]
 80019c4:	6801      	ldr	r1, [r0, #0]
 80019c6:	6982      	ldr	r2, [r0, #24]
 80019c8:	8c00      	ldrh	r0, [r0, #32]
 80019ca:	680b      	ldr	r3, [r1, #0]
 80019cc:	f8d2 b000 	ldr.w	fp, [r2]
 80019d0:	689c      	ldr	r4, [r3, #8]
 80019d2:	2801      	cmp	r0, #1
 80019d4:	6890      	ldr	r0, [r2, #8]
 80019d6:	bfcc      	ite	gt
 80019d8:	6851      	ldrgt	r1, [r2, #4]
 80019da:	2100      	movle	r1, #0
 80019dc:	9424      	str	r4, [sp, #144]	; 0x90
 80019de:	68b5      	ldr	r5, [r6, #8]
 80019e0:	9502      	str	r5, [sp, #8]
 80019e2:	6934      	ldr	r4, [r6, #16]
 80019e4:	9423      	str	r4, [sp, #140]	; 0x8c
 80019e6:	68f5      	ldr	r5, [r6, #12]
 80019e8:	9522      	str	r5, [sp, #136]	; 0x88
 80019ea:	691c      	ldr	r4, [r3, #16]
 80019ec:	941c      	str	r4, [sp, #112]	; 0x70
 80019ee:	68dd      	ldr	r5, [r3, #12]
 80019f0:	952e      	str	r5, [sp, #184]	; 0xb8
 80019f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80019f4:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 80019f8:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 80019fa:	9521      	str	r5, [sp, #132]	; 0x84
 80019fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019fe:	69bd      	ldr	r5, [r7, #24]
 8001a00:	f8b2 8000 	ldrh.w	r8, [r2]
 8001a04:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8001a08:	6894      	ldr	r4, [r2, #8]
 8001a0a:	952d      	str	r5, [sp, #180]	; 0xb4
 8001a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a0e:	9220      	str	r2, [sp, #128]	; 0x80
 8001a10:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8001a12:	951f      	str	r5, [sp, #124]	; 0x7c
 8001a14:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001a18:	921b      	str	r2, [sp, #108]	; 0x6c
 8001a1a:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001a1e:	951a      	str	r5, [sp, #104]	; 0x68
 8001a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a22:	922c      	str	r2, [sp, #176]	; 0xb0
 8001a24:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001a26:	952b      	str	r5, [sp, #172]	; 0xac
 8001a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a2a:	9216      	str	r2, [sp, #88]	; 0x58
 8001a2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a2e:	6815      	ldr	r5, [r2, #0]
 8001a30:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8001a34:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8001a38:	6892      	ldr	r2, [r2, #8]
 8001a3a:	921e      	str	r2, [sp, #120]	; 0x78
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a42:	f8db 2000 	ldr.w	r2, [fp]
 8001a46:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001a4a:	b119      	cbz	r1, 8001a54 <forward_conv2d_nl_pool+0xa0>
 8001a4c:	680a      	ldr	r2, [r1, #0]
 8001a4e:	6893      	ldr	r3, [r2, #8]
 8001a50:	931d      	str	r3, [sp, #116]	; 0x74
 8001a52:	e001      	b.n	8001a58 <forward_conv2d_nl_pool+0xa4>
 8001a54:	2200      	movs	r2, #0
 8001a56:	921d      	str	r2, [sp, #116]	; 0x74
 8001a58:	69f9      	ldr	r1, [r7, #28]
 8001a5a:	b158      	cbz	r0, 8001a74 <forward_conv2d_nl_pool+0xc0>
 8001a5c:	6803      	ldr	r3, [r0, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	9218      	str	r2, [sp, #96]	; 0x60
 8001a62:	9210      	str	r2, [sp, #64]	; 0x40
 8001a64:	69c0      	ldr	r0, [r0, #28]
 8001a66:	9015      	str	r0, [sp, #84]	; 0x54
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f001 fe4c 	bl	8003708 <ai_array_get_byte_size>
 8001a70:	9014      	str	r0, [sp, #80]	; 0x50
 8001a72:	e00b      	b.n	8001a8c <forward_conv2d_nl_pool+0xd8>
 8001a74:	b119      	cbz	r1, 8001a7e <forward_conv2d_nl_pool+0xca>
 8001a76:	6889      	ldr	r1, [r1, #8]
 8001a78:	9118      	str	r1, [sp, #96]	; 0x60
 8001a7a:	9110      	str	r1, [sp, #64]	; 0x40
 8001a7c:	e002      	b.n	8001a84 <forward_conv2d_nl_pool+0xd0>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	9118      	str	r1, [sp, #96]	; 0x60
 8001a82:	9210      	str	r2, [sp, #64]	; 0x40
 8001a84:	2100      	movs	r1, #0
 8001a86:	2201      	movs	r2, #1
 8001a88:	9115      	str	r1, [sp, #84]	; 0x54
 8001a8a:	9214      	str	r2, [sp, #80]	; 0x50
 8001a8c:	aa1f      	add	r2, sp, #124	; 0x7c
 8001a8e:	6a38      	ldr	r0, [r7, #32]
 8001a90:	2800      	cmp	r0, #0
 8001a92:	bf12      	itee	ne
 8001a94:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001a96:	f8df 1954 	ldreq.w	r1, [pc, #2388]	; 80023ec <.text_22>
 8001a9a:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001a9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001aa0:	8813      	ldrh	r3, [r2, #0]
 8001aa2:	9128      	str	r1, [sp, #160]	; 0xa0
 8001aa4:	1e5b      	subs	r3, r3, #1
 8001aa6:	1e41      	subs	r1, r0, #1
 8001aa8:	aa20      	add	r2, sp, #128	; 0x80
 8001aaa:	fb03 0001 	mla	r0, r3, r1, r0
 8001aae:	9019      	str	r0, [sp, #100]	; 0x64
 8001ab0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001ab2:	8813      	ldrh	r3, [r2, #0]
 8001ab4:	1e48      	subs	r0, r1, #1
 8001ab6:	1e5b      	subs	r3, r3, #1
 8001ab8:	fb03 1100 	mla	r1, r3, r0, r1
 8001abc:	9127      	str	r1, [sp, #156]	; 0x9c
 8001abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ac0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001ac2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001ac4:	9112      	str	r1, [sp, #72]	; 0x48
 8001ac6:	1a12      	subs	r2, r2, r0
 8001ac8:	4442      	add	r2, r8
 8001aca:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001acc:	fa12 f084 	uxtah	r0, r2, r4
 8001ad0:	fbb0 f1f1 	udiv	r1, r0, r1
 8001ad4:	1c49      	adds	r1, r1, #1
 8001ad6:	9111      	str	r1, [sp, #68]	; 0x44
 8001ad8:	2400      	movs	r4, #0
 8001ada:	f8db 1000 	ldr.w	r1, [fp]
 8001ade:	6808      	ldr	r0, [r1, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	11c3      	asrs	r3, r0, #7
 8001ae4:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001ae8:	1440      	asrs	r0, r0, #17
 8001aea:	f000 000f 	and.w	r0, r0, #15
 8001aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af2:	f00c 0c03 	and.w	ip, ip, #3
 8001af6:	2804      	cmp	r0, #4
 8001af8:	fa23 f30c 	lsr.w	r3, r3, ip
 8001afc:	bf14      	ite	ne
 8001afe:	2808      	cmpne	r0, #8
 8001b00:	68ca      	ldreq	r2, [r1, #12]
 8001b02:	b1a2      	cbz	r2, 8001b2e <forward_conv2d_nl_pool+0x17a>
 8001b04:	6978      	ldr	r0, [r7, #20]
 8001b06:	6800      	ldr	r0, [r0, #0]
 8001b08:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8001b0c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8001b10:	b108      	cbz	r0, 8001b16 <forward_conv2d_nl_pool+0x162>
 8001b12:	6804      	ldr	r4, [r0, #0]
 8001b14:	68a4      	ldr	r4, [r4, #8]
 8001b16:	6800      	ldr	r0, [r0, #0]
 8001b18:	6840      	ldr	r0, [r0, #4]
 8001b1a:	9001      	str	r0, [sp, #4]
 8001b1c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001b1e:	9000      	str	r0, [sp, #0]
 8001b20:	4620      	mov	r0, r4
 8001b22:	6889      	ldr	r1, [r1, #8]
 8001b24:	f7ff fdd0 	bl	80016c8 <ai_dict_decompress_f32>
 8001b28:	b10c      	cbz	r4, 8001b2e <forward_conv2d_nl_pool+0x17a>
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	e000      	b.n	8001b30 <forward_conv2d_nl_pool+0x17c>
 8001b2e:	4653      	mov	r3, sl
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	6814      	ldr	r4, [r2, #0]
 8001b34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b36:	6814      	ldr	r4, [r2, #0]
 8001b38:	6827      	ldr	r7, [r4, #0]
 8001b3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8001b3e:	68e2      	ldr	r2, [r4, #12]
 8001b40:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8001b42:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001b46:	6830      	ldr	r0, [r6, #0]
 8001b48:	4357      	muls	r7, r2
 8001b4a:	fb0c f707 	mul.w	r7, ip, r7
 8001b4e:	00bf      	lsls	r7, r7, #2
 8001b50:	9736      	str	r7, [sp, #216]	; 0xd8
 8001b52:	2100      	movs	r1, #0
 8001b54:	af16      	add	r7, sp, #88	; 0x58
 8001b56:	f1c9 0900 	rsb	r9, r9, #0
 8001b5a:	5e7f      	ldrsh	r7, [r7, r1]
 8001b5c:	9735      	str	r7, [sp, #212]	; 0xd4
 8001b5e:	b22d      	sxth	r5, r5
 8001b60:	9f02      	ldr	r7, [sp, #8]
 8001b62:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001b66:	fb0e f707 	mul.w	r7, lr, r7
 8001b6a:	9734      	str	r7, [sp, #208]	; 0xd0
 8001b6c:	462e      	mov	r6, r5
 8001b6e:	9f02      	ldr	r7, [sp, #8]
 8001b70:	4357      	muls	r7, r2
 8001b72:	9733      	str	r7, [sp, #204]	; 0xcc
 8001b74:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8001b78:	f1c8 0800 	rsb	r8, r8, #0
 8001b7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001b7e:	9731      	str	r7, [sp, #196]	; 0xc4
 8001b80:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8001b82:	2f00      	cmp	r7, #0
 8001b84:	f000 8100 	beq.w	8001d88 <forward_conv2d_nl_pool+0x3d4>
 8001b88:	46e1      	mov	r9, ip
 8001b8a:	9337      	str	r3, [sp, #220]	; 0xdc
 8001b8c:	9026      	str	r0, [sp, #152]	; 0x98
 8001b8e:	912f      	str	r1, [sp, #188]	; 0xbc
 8001b90:	9225      	str	r2, [sp, #148]	; 0x94
 8001b92:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8001b96:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	dd5d      	ble.n	8001c58 <forward_conv2d_nl_pool+0x2a4>
 8001b9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001b9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001ba2:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001ba4:	4249      	negs	r1, r1
 8001ba6:	bfd8      	it	le
 8001ba8:	2100      	movle	r1, #0
 8001baa:	1ad2      	subs	r2, r2, r3
 8001bac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	bf3d      	ittte	cc
 8001bb2:	9b1c      	ldrcc	r3, [sp, #112]	; 0x70
 8001bb4:	9a17      	ldrcc	r2, [sp, #92]	; 0x5c
 8001bb6:	1a9a      	subcc	r2, r3, r2
 8001bb8:	461a      	movcs	r2, r3
 8001bba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8001bc6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8001bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8001bce:	900b      	str	r0, [sp, #44]	; 0x2c
 8001bd0:	9109      	str	r1, [sp, #36]	; 0x24
 8001bd2:	920a      	str	r2, [sp, #40]	; 0x28
 8001bd4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001bd6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001bda:	9008      	str	r0, [sp, #32]
 8001bdc:	9107      	str	r1, [sp, #28]
 8001bde:	f8cd 9008 	str.w	r9, [sp, #8]
 8001be2:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001be4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001be6:	9006      	str	r0, [sp, #24]
 8001be8:	9105      	str	r1, [sp, #20]
 8001bea:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001bec:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8001bee:	9004      	str	r0, [sp, #16]
 8001bf0:	9103      	str	r1, [sp, #12]
 8001bf2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001bf4:	991d      	ldr	r1, [sp, #116]	; 0x74
 8001bf6:	9001      	str	r0, [sp, #4]
 8001bf8:	9100      	str	r1, [sp, #0]
 8001bfa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001bfc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001bfe:	4651      	mov	r1, sl
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fb33 	bl	800126c <ai_conv2d_stripe_f32>
 8001c06:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001c08:	b320      	cbz	r0, 8001c54 <forward_conv2d_nl_pool+0x2a0>
 8001c0a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001c0e:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8001c10:	4683      	mov	fp, r0
 8001c12:	4643      	mov	r3, r8
 8001c14:	464a      	mov	r2, r9
 8001c16:	4651      	mov	r1, sl
 8001c18:	4650      	mov	r0, sl
 8001c1a:	47b8      	blx	r7
 8001c1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c1e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8001c20:	4480      	add	r8, r0
 8001c22:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001c24:	eba8 0101 	sub.w	r1, r8, r1
 8001c28:	4281      	cmp	r1, r0
 8001c2a:	6820      	ldr	r0, [r4, #0]
 8001c2c:	6841      	ldr	r1, [r0, #4]
 8001c2e:	68c0      	ldr	r0, [r0, #12]
 8001c30:	bfa8      	it	ge
 8001c32:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8001c36:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 8001c3a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001c3e:	4592      	cmp	sl, r2
 8001c40:	d302      	bcc.n	8001c48 <forward_conv2d_nl_pool+0x294>
 8001c42:	0089      	lsls	r1, r1, #2
 8001c44:	4249      	negs	r1, r1
 8001c46:	448a      	add	sl, r1
 8001c48:	f1bb 0b01 	subs.w	fp, fp, #1
 8001c4c:	d1e1      	bne.n	8001c12 <forward_conv2d_nl_pool+0x25e>
 8001c4e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8001c52:	9730      	str	r7, [sp, #192]	; 0xc0
 8001c54:	1c76      	adds	r6, r6, #1
 8001c56:	b236      	sxth	r6, r6
 8001c58:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001c5a:	1e40      	subs	r0, r0, #1
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	9011      	str	r0, [sp, #68]	; 0x44
 8001c60:	dc4e      	bgt.n	8001d00 <forward_conv2d_nl_pool+0x34c>
 8001c62:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001c64:	4370      	muls	r0, r6
 8001c66:	0080      	lsls	r0, r0, #2
 8001c68:	4240      	negs	r0, r0
 8001c6a:	eb0a 0100 	add.w	r1, sl, r0
 8001c6e:	6820      	ldr	r0, [r4, #0]
 8001c70:	68c2      	ldr	r2, [r0, #12]
 8001c72:	4291      	cmp	r1, r2
 8001c74:	bf3c      	itt	cc
 8001c76:	6843      	ldrcc	r3, [r0, #4]
 8001c78:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	4657      	mov	r7, sl
 8001c80:	d232      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c82:	ab12      	add	r3, sp, #72	; 0x48
 8001c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c88:	429e      	cmp	r6, r3
 8001c8a:	d02d      	beq.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c8c:	6843      	ldr	r3, [r0, #4]
 8001c8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001c92:	4291      	cmp	r1, r2
 8001c94:	f080 8028 	bcs.w	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c98:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c9c:	f84a 3b04 	str.w	r3, [sl], #4
 8001ca0:	68c2      	ldr	r2, [r0, #12]
 8001ca2:	6843      	ldr	r3, [r0, #4]
 8001ca4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ca8:	4291      	cmp	r1, r2
 8001caa:	d21d      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cac:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cb0:	f84a 2b04 	str.w	r2, [sl], #4
 8001cb4:	6843      	ldr	r3, [r0, #4]
 8001cb6:	68c2      	ldr	r2, [r0, #12]
 8001cb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cbc:	4291      	cmp	r1, r2
 8001cbe:	d213      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cc0:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cc4:	f84a 2b04 	str.w	r2, [sl], #4
 8001cc8:	6843      	ldr	r3, [r0, #4]
 8001cca:	68c2      	ldr	r2, [r0, #12]
 8001ccc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cd0:	4291      	cmp	r1, r2
 8001cd2:	d209      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cd4:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cd8:	f84a 2b04 	str.w	r2, [sl], #4
 8001cdc:	6843      	ldr	r3, [r0, #4]
 8001cde:	68c2      	ldr	r2, [r0, #12]
 8001ce0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ce4:	4291      	cmp	r1, r2
 8001ce6:	d3d7      	bcc.n	8001c98 <forward_conv2d_nl_pool+0x2e4>
 8001ce8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d506      	bpl.n	8001cfc <forward_conv2d_nl_pool+0x348>
 8001cee:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8001cf0:	4650      	mov	r0, sl
 8001cf2:	f009 ffbc 	bl	800bc6e <__aeabi_memclr>
 8001cf6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001cf8:	1986      	adds	r6, r0, r6
 8001cfa:	b236      	sxth	r6, r6
 8001cfc:	9612      	str	r6, [sp, #72]	; 0x48
 8001cfe:	46ba      	mov	sl, r7
 8001d00:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001d02:	4286      	cmp	r6, r0
 8001d04:	d136      	bne.n	8001d74 <forward_conv2d_nl_pool+0x3c0>
 8001d06:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001d0a:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8001d0e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001d10:	1c40      	adds	r0, r0, #1
 8001d12:	902f      	str	r0, [sp, #188]	; 0xbc
 8001d14:	b292      	uxth	r2, r2
 8001d16:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d18:	9008      	str	r0, [sp, #32]
 8001d1a:	9206      	str	r2, [sp, #24]
 8001d1c:	fa1f f389 	uxth.w	r3, r9
 8001d20:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001d24:	b280      	uxth	r0, r0
 8001d26:	9005      	str	r0, [sp, #20]
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001d2c:	b280      	uxth	r0, r0
 8001d2e:	9002      	str	r0, [sp, #8]
 8001d30:	1a76      	subs	r6, r6, r1
 8001d32:	2101      	movs	r1, #1
 8001d34:	9107      	str	r1, [sp, #28]
 8001d36:	b236      	sxth	r6, r6
 8001d38:	992b      	ldr	r1, [sp, #172]	; 0xac
 8001d3a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001d3c:	b289      	uxth	r1, r1
 8001d3e:	9104      	str	r1, [sp, #16]
 8001d40:	b280      	uxth	r0, r0
 8001d42:	b2a9      	uxth	r1, r5
 8001d44:	9103      	str	r1, [sp, #12]
 8001d46:	9000      	str	r0, [sp, #0]
 8001d48:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001d4a:	b289      	uxth	r1, r1
 8001d4c:	9101      	str	r1, [sp, #4]
 8001d4e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001d50:	6820      	ldr	r0, [r4, #0]
 8001d52:	b289      	uxth	r1, r1
 8001d54:	47e0      	blx	ip
 8001d56:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d58:	6881      	ldr	r1, [r0, #8]
 8001d5a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8001d5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001d60:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001d62:	608a      	str	r2, [r1, #8]
 8001d64:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001d66:	1a28      	subs	r0, r5, r0
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	bfc3      	ittte	gt
 8001d6c:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8001d6e:	1a2d      	subgt	r5, r5, r0
 8001d70:	b22d      	sxthgt	r5, r5
 8001d72:	2500      	movle	r5, #0
 8001d74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001d76:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001d78:	1808      	adds	r0, r1, r0
 8001d7a:	9017      	str	r0, [sp, #92]	; 0x5c
 8001d7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001d7e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d80:	4288      	cmp	r0, r1
 8001d82:	f4ff af08 	bcc.w	8001b96 <forward_conv2d_nl_pool+0x1e2>
 8001d86:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d88:	6821      	ldr	r1, [r4, #0]
 8001d8a:	68ca      	ldr	r2, [r1, #12]
 8001d8c:	608a      	str	r2, [r1, #8]
 8001d8e:	68c1      	ldr	r1, [r0, #12]
 8001d90:	6081      	str	r1, [r0, #8]
 8001d92:	b039      	add	sp, #228	; 0xe4
 8001d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d98 <forward_dense>:
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	b081      	sub	sp, #4
 8001d9e:	ed2d 8b02 	vpush	{d8}
 8001da2:	b088      	sub	sp, #32
 8001da4:	6940      	ldr	r0, [r0, #20]
 8001da6:	6800      	ldr	r0, [r0, #0]
 8001da8:	6801      	ldr	r1, [r0, #0]
 8001daa:	680a      	ldr	r2, [r1, #0]
 8001dac:	68c3      	ldr	r3, [r0, #12]
 8001dae:	6981      	ldr	r1, [r0, #24]
 8001db0:	8c00      	ldrh	r0, [r0, #32]
 8001db2:	681f      	ldr	r7, [r3, #0]
 8001db4:	f8d1 e000 	ldr.w	lr, [r1]
 8001db8:	6894      	ldr	r4, [r2, #8]
 8001dba:	f8de 9000 	ldr.w	r9, [lr]
 8001dbe:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001dc2:	f8d9 5000 	ldr.w	r5, [r9]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	bfac      	ite	ge
 8001dcc:	684b      	ldrge	r3, [r1, #4]
 8001dce:	2300      	movlt	r3, #0
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	6938      	ldr	r0, [r7, #16]
 8001dd4:	683f      	ldr	r7, [r7, #0]
 8001dd6:	68bf      	ldr	r7, [r7, #8]
 8001dd8:	4341      	muls	r1, r0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	11ee      	asrs	r6, r5, #7
 8001dde:	f006 087f 	and.w	r8, r6, #127	; 0x7f
 8001de2:	156e      	asrs	r6, r5, #21
 8001de4:	146d      	asrs	r5, r5, #17
 8001de6:	f005 050f 	and.w	r5, r5, #15
 8001dea:	2d04      	cmp	r5, #4
 8001dec:	bf14      	ite	ne
 8001dee:	2d08      	cmpne	r5, #8
 8001df0:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 8001df4:	6895      	ldr	r5, [r2, #8]
 8001df6:	f8de 9018 	ldr.w	r9, [lr, #24]
 8001dfa:	f006 0603 	and.w	r6, r6, #3
 8001dfe:	2900      	cmp	r1, #0
 8001e00:	fa28 f806 	lsr.w	r8, r8, r6
 8001e04:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8001e08:	f000 80eb 	beq.w	8001fe2 <forward_dense+0x24a>
 8001e0c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001e10:	9305      	str	r3, [sp, #20]
 8001e12:	f8cd c018 	str.w	ip, [sp, #24]
 8001e16:	9201      	str	r2, [sp, #4]
 8001e18:	9104      	str	r1, [sp, #16]
 8001e1a:	9907      	ldr	r1, [sp, #28]
 8001e1c:	680a      	ldr	r2, [r1, #0]
 8001e1e:	9905      	ldr	r1, [sp, #20]
 8001e20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001e24:	9b01      	ldr	r3, [sp, #4]
 8001e26:	2900      	cmp	r1, #0
 8001e28:	bf1a      	itte	ne
 8001e2a:	680a      	ldrne	r2, [r1, #0]
 8001e2c:	6892      	ldrne	r2, [r2, #8]
 8001e2e:	2200      	moveq	r2, #0
 8001e30:	2800      	cmp	r0, #0
 8001e32:	f040 80ab 	bne.w	8001f8c <forward_dense+0x1f4>
 8001e36:	429f      	cmp	r7, r3
 8001e38:	f080 80c7 	bcs.w	8001fca <forward_dense+0x232>
 8001e3c:	9003      	str	r0, [sp, #12]
 8001e3e:	2a00      	cmp	r2, #0
 8001e40:	bf0e      	itee	eq
 8001e42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8001ff0 <.text_17>
 8001e46:	ed92 0a00 	vldrne	s0, [r2]
 8001e4a:	1d12      	addne	r2, r2, #4
 8001e4c:	2c04      	cmp	r4, #4
 8001e4e:	4620      	mov	r0, r4
 8001e50:	46ae      	mov	lr, r5
 8001e52:	46dc      	mov	ip, fp
 8001e54:	eddf 0a66 	vldr	s1, [pc, #408]	; 8001ff0 <.text_17>
 8001e58:	d35d      	bcc.n	8001f16 <forward_dense+0x17e>
 8001e5a:	08a1      	lsrs	r1, r4, #2
 8001e5c:	07ce      	lsls	r6, r1, #31
 8001e5e:	d51c      	bpl.n	8001e9a <forward_dense+0x102>
 8001e60:	ed9c 4a00 	vldr	s8, [ip]
 8001e64:	edde 4a00 	vldr	s9, [lr]
 8001e68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001e6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001e70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001e74:	edde 2a02 	vldr	s5, [lr, #8]
 8001e78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001e7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001e80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001e84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001e88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001e8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e90:	f10e 0e10 	add.w	lr, lr, #16
 8001e94:	f10c 0c10 	add.w	ip, ip, #16
 8001e98:	1f00      	subs	r0, r0, #4
 8001e9a:	0849      	lsrs	r1, r1, #1
 8001e9c:	f000 803b 	beq.w	8001f16 <forward_dense+0x17e>
 8001ea0:	edde 4a00 	vldr	s9, [lr]
 8001ea4:	edde 3a01 	vldr	s7, [lr, #4]
 8001ea8:	edde 2a02 	vldr	s5, [lr, #8]
 8001eac:	edde 1a03 	vldr	s3, [lr, #12]
 8001eb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001eb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001eb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001ebc:	ed9c 4a00 	vldr	s8, [ip]
 8001ec0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001ec4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001ec8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001ecc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ed0:	f10e 0610 	add.w	r6, lr, #16
 8001ed4:	f10c 0c10 	add.w	ip, ip, #16
 8001ed8:	edd6 8a00 	vldr	s17, [r6]
 8001edc:	ed9c 8a00 	vldr	s16, [ip]
 8001ee0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001ee4:	edd6 7a01 	vldr	s15, [r6, #4]
 8001ee8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001eec:	edd6 6a02 	vldr	s13, [r6, #8]
 8001ef0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ef4:	edd6 5a03 	vldr	s11, [r6, #12]
 8001ef8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001efc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8001f00:	3808      	subs	r0, #8
 8001f02:	ee46 0a26 	vmla.f32	s1, s12, s13
 8001f06:	1e49      	subs	r1, r1, #1
 8001f08:	ee45 0a25 	vmla.f32	s1, s10, s11
 8001f0c:	f106 0e10 	add.w	lr, r6, #16
 8001f10:	f10c 0c10 	add.w	ip, ip, #16
 8001f14:	d1c4      	bne.n	8001ea0 <forward_dense+0x108>
 8001f16:	b378      	cbz	r0, 8001f78 <forward_dense+0x1e0>
 8001f18:	f010 0103 	ands.w	r1, r0, #3
 8001f1c:	f000 800c 	beq.w	8001f38 <forward_dense+0x1a0>
 8001f20:	ed9c 1a00 	vldr	s2, [ip]
 8001f24:	edde 1a00 	vldr	s3, [lr]
 8001f28:	1e49      	subs	r1, r1, #1
 8001f2a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f2e:	f10e 0e04 	add.w	lr, lr, #4
 8001f32:	f10c 0c04 	add.w	ip, ip, #4
 8001f36:	d1f3      	bne.n	8001f20 <forward_dense+0x188>
 8001f38:	0880      	lsrs	r0, r0, #2
 8001f3a:	d01d      	beq.n	8001f78 <forward_dense+0x1e0>
 8001f3c:	ed9c 2a00 	vldr	s4, [ip]
 8001f40:	ed9e 1a00 	vldr	s2, [lr]
 8001f44:	eddc 1a01 	vldr	s3, [ip, #4]
 8001f48:	edde 2a01 	vldr	s5, [lr, #4]
 8001f4c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f50:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f54:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f58:	ed9e 1a02 	vldr	s2, [lr, #8]
 8001f5c:	eddc 1a03 	vldr	s3, [ip, #12]
 8001f60:	edde 2a03 	vldr	s5, [lr, #12]
 8001f64:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f68:	1e40      	subs	r0, r0, #1
 8001f6a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f6e:	f10e 0e10 	add.w	lr, lr, #16
 8001f72:	f10c 0c10 	add.w	ip, ip, #16
 8001f76:	d1e1      	bne.n	8001f3c <forward_dense+0x1a4>
 8001f78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001f7c:	ed87 0a00 	vstr	s0, [r7]
 8001f80:	1d3f      	adds	r7, r7, #4
 8001f82:	429f      	cmp	r7, r3
 8001f84:	44cb      	add	fp, r9
 8001f86:	f4ff af5a 	bcc.w	8001e3e <forward_dense+0xa6>
 8001f8a:	e01d      	b.n	8001fc8 <forward_dense+0x230>
 8001f8c:	429f      	cmp	r7, r3
 8001f8e:	d21c      	bcs.n	8001fca <forward_dense+0x232>
 8001f90:	469a      	mov	sl, r3
 8001f92:	9003      	str	r0, [sp, #12]
 8001f94:	4616      	mov	r6, r2
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	f856 0b04 	ldrne.w	r0, [r6], #4
 8001f9e:	2000      	moveq	r0, #0
 8001fa0:	9002      	str	r0, [sp, #8]
 8001fa2:	f1b8 0f04 	cmp.w	r8, #4
 8001fa6:	9a03      	ldr	r2, [sp, #12]
 8001fa8:	9400      	str	r4, [sp, #0]
 8001faa:	462b      	mov	r3, r5
 8001fac:	4659      	mov	r1, fp
 8001fae:	a802      	add	r0, sp, #8
 8001fb0:	d102      	bne.n	8001fb8 <forward_dense+0x220>
 8001fb2:	f7ff fb39 	bl	8001628 <ai_dict4_dot_array_f32>
 8001fb6:	e001      	b.n	8001fbc <forward_dense+0x224>
 8001fb8:	f7ff f9ca 	bl	8001350 <ai_dict8_dot_array_f32>
 8001fbc:	9802      	ldr	r0, [sp, #8]
 8001fbe:	f847 0b04 	str.w	r0, [r7], #4
 8001fc2:	4557      	cmp	r7, sl
 8001fc4:	44cb      	add	fp, r9
 8001fc6:	d3e6      	bcc.n	8001f96 <forward_dense+0x1fe>
 8001fc8:	9803      	ldr	r0, [sp, #12]
 8001fca:	9901      	ldr	r1, [sp, #4]
 8001fcc:	9a06      	ldr	r2, [sp, #24]
 8001fce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001fd2:	9904      	ldr	r1, [sp, #16]
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	1e49      	subs	r1, r1, #1
 8001fd8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001fdc:	9104      	str	r1, [sp, #16]
 8001fde:	f47f af1c 	bne.w	8001e1a <forward_dense+0x82>
 8001fe2:	b008      	add	sp, #32
 8001fe4:	ecbd 8b02 	vpop	{d8}
 8001fe8:	b001      	add	sp, #4
 8001fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001ff0 <.text_17>:
 8001ff0:	00000000 	.word	0x00000000

08001ff4 <arm_mat_gemm_f32>:
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff8:	4615      	mov	r5, r2
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	6842      	ldr	r2, [r0, #4]
 8001ffe:	9203      	str	r2, [sp, #12]
 8002000:	4699      	mov	r9, r3
 8002002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002004:	686c      	ldr	r4, [r5, #4]
 8002006:	9400      	str	r4, [sp, #0]
 8002008:	468b      	mov	fp, r1
 800200a:	685e      	ldr	r6, [r3, #4]
 800200c:	8804      	ldrh	r4, [r0, #0]
 800200e:	f8b3 c000 	ldrh.w	ip, [r3]
 8002012:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8002016:	8840      	ldrh	r0, [r0, #2]
 8002018:	f8bb 1000 	ldrh.w	r1, [fp]
 800201c:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8002020:	f8b5 e000 	ldrh.w	lr, [r5]
 8002024:	886f      	ldrh	r7, [r5, #2]
 8002026:	f8db 3004 	ldr.w	r3, [fp, #4]
 800202a:	9306      	str	r3, [sp, #24]
 800202c:	9305      	str	r3, [sp, #20]
 800202e:	2500      	movs	r5, #0
 8002030:	fa4f f389 	sxtb.w	r3, r9
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	46a0      	moveq	r8, r4
 800203a:	4680      	movne	r8, r0
 800203c:	2f01      	cmp	r7, #1
 800203e:	bf0c      	ite	eq
 8002040:	2300      	moveq	r3, #0
 8002042:	2304      	movne	r3, #4
 8002044:	f1be 0f01 	cmp.w	lr, #1
 8002048:	d104      	bne.n	8002054 <arm_mat_gemm_f32+0x60>
 800204a:	2f01      	cmp	r7, #1
 800204c:	d007      	beq.n	800205e <arm_mat_gemm_f32+0x6a>
 800204e:	f1ca 0e00 	rsb	lr, sl, #0
 8002052:	e005      	b.n	8002060 <arm_mat_gemm_f32+0x6c>
 8002054:	2f01      	cmp	r7, #1
 8002056:	bf08      	it	eq
 8002058:	f04f 0e01 	moveq.w	lr, #1
 800205c:	d000      	beq.n	8002060 <arm_mat_gemm_f32+0x6c>
 800205e:	46ae      	mov	lr, r5
 8002060:	fa0f f78e 	sxth.w	r7, lr
 8002064:	9704      	str	r7, [sp, #16]
 8002066:	fa4f f789 	sxtb.w	r7, r9
 800206a:	2f00      	cmp	r7, #0
 800206c:	bf0c      	ite	eq
 800206e:	46a3      	moveq	fp, r4
 8002070:	4683      	movne	fp, r0
 8002072:	45e3      	cmp	fp, ip
 8002074:	d117      	bne.n	80020a6 <arm_mat_gemm_f32+0xb2>
 8002076:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 800207a:	f1be 0f00 	cmp.w	lr, #0
 800207e:	bf0c      	ite	eq
 8002080:	9201      	streq	r2, [sp, #4]
 8002082:	9101      	strne	r1, [sp, #4]
 8002084:	9f01      	ldr	r7, [sp, #4]
 8002086:	4557      	cmp	r7, sl
 8002088:	d10d      	bne.n	80020a6 <arm_mat_gemm_f32+0xb2>
 800208a:	fa4f f789 	sxtb.w	r7, r9
 800208e:	2f00      	cmp	r7, #0
 8002090:	bf0c      	ite	eq
 8002092:	4683      	moveq	fp, r0
 8002094:	46a3      	movne	fp, r4
 8002096:	f1be 0f00 	cmp.w	lr, #0
 800209a:	bf0c      	ite	eq
 800209c:	460f      	moveq	r7, r1
 800209e:	4617      	movne	r7, r2
 80020a0:	45bb      	cmp	fp, r7
 80020a2:	f000 808d 	beq.w	80021c0 <arm_mat_gemm_f32+0x1cc>
 80020a6:	fb0a f30c 	mul.w	r3, sl, ip
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f06f 0002 	mvn.w	r0, #2
 80020b0:	f340 8083 	ble.w	80021ba <arm_mat_gemm_f32+0x1c6>
 80020b4:	1c6d      	adds	r5, r5, #1
 80020b6:	2100      	movs	r1, #0
 80020b8:	b2aa      	uxth	r2, r5
 80020ba:	6031      	str	r1, [r6, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	bfbf      	itttt	lt
 80020c0:	6071      	strlt	r1, [r6, #4]
 80020c2:	1c6d      	addlt	r5, r5, #1
 80020c4:	b2aa      	uxthlt	r2, r5
 80020c6:	429a      	cmplt	r2, r3
 80020c8:	da77      	bge.n	80021ba <arm_mat_gemm_f32+0x1c6>
 80020ca:	1c6d      	adds	r5, r5, #1
 80020cc:	b2aa      	uxth	r2, r5
 80020ce:	429a      	cmp	r2, r3
 80020d0:	60b1      	str	r1, [r6, #8]
 80020d2:	da72      	bge.n	80021ba <arm_mat_gemm_f32+0x1c6>
 80020d4:	60f1      	str	r1, [r6, #12]
 80020d6:	1c6d      	adds	r5, r5, #1
 80020d8:	3610      	adds	r6, #16
 80020da:	b2aa      	uxth	r2, r5
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbe9      	blt.n	80020b4 <arm_mat_gemm_f32+0xc0>
 80020e0:	b00a      	add	sp, #40	; 0x28
 80020e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e6:	9d06      	ldr	r5, [sp, #24]
 80020e8:	0097      	lsls	r7, r2, #2
 80020ea:	9708      	str	r7, [sp, #32]
 80020ec:	0087      	lsls	r7, r0, #2
 80020ee:	9707      	str	r7, [sp, #28]
 80020f0:	f8cd c00c 	str.w	ip, [sp, #12]
 80020f4:	f8ad 4008 	strh.w	r4, [sp, #8]
 80020f8:	ea4f 0408 	mov.w	r4, r8
 80020fc:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002100:	fa4f f789 	sxtb.w	r7, r9
 8002104:	2f00      	cmp	r7, #0
 8002106:	bf0c      	ite	eq
 8002108:	4682      	moveq	sl, r0
 800210a:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 800210e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002112:	f1ba 0f00 	cmp.w	sl, #0
 8002116:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80023e8 <.text_21>
 800211a:	d018      	beq.n	800214e <arm_mat_gemm_f32+0x15a>
 800211c:	fa4f f789 	sxtb.w	r7, r9
 8002120:	2f00      	cmp	r7, #0
 8002122:	bf0c      	ite	eq
 8002124:	2704      	moveq	r7, #4
 8002126:	9f07      	ldrne	r7, [sp, #28]
 8002128:	f1be 0f00 	cmp.w	lr, #0
 800212c:	f1aa 0a01 	sub.w	sl, sl, #1
 8002130:	edd8 1a00 	vldr	s3, [r8]
 8002134:	ed95 2a00 	vldr	s4, [r5]
 8002138:	44b8      	add	r8, r7
 800213a:	bf0c      	ite	eq
 800213c:	9f08      	ldreq	r7, [sp, #32]
 800213e:	2704      	movne	r7, #4
 8002140:	19ed      	adds	r5, r5, r7
 8002142:	fa1f f78a 	uxth.w	r7, sl
 8002146:	2f00      	cmp	r7, #0
 8002148:	ee01 1a82 	vmla.f32	s2, s3, s4
 800214c:	d1e6      	bne.n	800211c <arm_mat_gemm_f32+0x128>
 800214e:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002152:	eddb 1a00 	vldr	s3, [fp]
 8002156:	ee00 1aa1 	vmla.f32	s2, s1, s3
 800215a:	ed86 1a00 	vstr	s2, [r6]
 800215e:	1d36      	adds	r6, r6, #4
 8002160:	1e64      	subs	r4, r4, #1
 8002162:	b2a4      	uxth	r4, r4
 8002164:	f1be 0f00 	cmp.w	lr, #0
 8002168:	bf0e      	itee	eq
 800216a:	1b15      	subeq	r5, r2, r4
 800216c:	1b0d      	subne	r5, r1, r4
 800216e:	4355      	mulne	r5, r2
 8002170:	2c00      	cmp	r4, #0
 8002172:	449b      	add	fp, r3
 8002174:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8002178:	d1c2      	bne.n	8002100 <arm_mat_gemm_f32+0x10c>
 800217a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800217e:	9d03      	ldr	r5, [sp, #12]
 8002180:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8002184:	f8cd c014 	str.w	ip, [sp, #20]
 8002188:	9f01      	ldr	r7, [sp, #4]
 800218a:	443e      	add	r6, r7
 800218c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8002190:	fa4f f689 	sxtb.w	r6, r9
 8002194:	2e00      	cmp	r6, #0
 8002196:	bf0c      	ite	eq
 8002198:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 800219c:	f04f 0c04 	movne.w	ip, #4
 80021a0:	44ac      	add	ip, r5
 80021a2:	9d04      	ldr	r5, [sp, #16]
 80021a4:	f8bd 6000 	ldrh.w	r6, [sp]
 80021a8:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80021ac:	1e75      	subs	r5, r6, #1
 80021ae:	f8ad 5000 	strh.w	r5, [sp]
 80021b2:	f8bd 5000 	ldrh.w	r5, [sp]
 80021b6:	b965      	cbnz	r5, 80021d2 <arm_mat_gemm_f32+0x1de>
 80021b8:	2000      	movs	r0, #0
 80021ba:	b00a      	add	sp, #40	; 0x28
 80021bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80021c4:	f8dd b000 	ldr.w	fp, [sp]
 80021c8:	9609      	str	r6, [sp, #36]	; 0x24
 80021ca:	f8ad 5002 	strh.w	r5, [sp, #2]
 80021ce:	f8ad 8000 	strh.w	r8, [sp]
 80021d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80021d4:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 80021d8:	f1be 0f00 	cmp.w	lr, #0
 80021dc:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 80021e0:	bf0c      	ite	eq
 80021e2:	4690      	moveq	r8, r2
 80021e4:	4688      	movne	r8, r1
 80021e6:	e77e      	b.n	80020e6 <arm_mat_gemm_f32+0xf2>

080021e8 <forward_gemm>:
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	4604      	mov	r4, r0
 80021ec:	b08b      	sub	sp, #44	; 0x2c
 80021ee:	6960      	ldr	r0, [r4, #20]
 80021f0:	6800      	ldr	r0, [r0, #0]
 80021f2:	6801      	ldr	r1, [r0, #0]
 80021f4:	68c3      	ldr	r3, [r0, #12]
 80021f6:	8902      	ldrh	r2, [r0, #8]
 80021f8:	2600      	movs	r6, #0
 80021fa:	2700      	movs	r7, #0
 80021fc:	680d      	ldr	r5, [r1, #0]
 80021fe:	f8d3 c000 	ldr.w	ip, [r3]
 8002202:	2a03      	cmp	r2, #3
 8002204:	d102      	bne.n	800220c <forward_gemm+0x24>
 8002206:	684e      	ldr	r6, [r1, #4]
 8002208:	688f      	ldr	r7, [r1, #8]
 800220a:	e00a      	b.n	8002222 <forward_gemm+0x3a>
 800220c:	2a02      	cmp	r2, #2
 800220e:	d103      	bne.n	8002218 <forward_gemm+0x30>
 8002210:	6980      	ldr	r0, [r0, #24]
 8002212:	684e      	ldr	r6, [r1, #4]
 8002214:	6807      	ldr	r7, [r0, #0]
 8002216:	e004      	b.n	8002222 <forward_gemm+0x3a>
 8002218:	2a01      	cmp	r2, #1
 800221a:	d102      	bne.n	8002222 <forward_gemm+0x3a>
 800221c:	6980      	ldr	r0, [r0, #24]
 800221e:	6806      	ldr	r6, [r0, #0]
 8002220:	6847      	ldr	r7, [r0, #4]
 8002222:	f8dc 0000 	ldr.w	r0, [ip]
 8002226:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800222a:	6883      	ldr	r3, [r0, #8]
 800222c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8002230:	b292      	uxth	r2, r2
 8002232:	b289      	uxth	r1, r1
 8002234:	a808      	add	r0, sp, #32
 8002236:	f002 fbe9 	bl	8004a0c <arm_mat_init_f32>
 800223a:	6829      	ldr	r1, [r5, #0]
 800223c:	688b      	ldr	r3, [r1, #8]
 800223e:	68aa      	ldr	r2, [r5, #8]
 8002240:	6929      	ldr	r1, [r5, #16]
 8002242:	b292      	uxth	r2, r2
 8002244:	b289      	uxth	r1, r1
 8002246:	a806      	add	r0, sp, #24
 8002248:	f002 fbe0 	bl	8004a0c <arm_mat_init_f32>
 800224c:	6830      	ldr	r0, [r6, #0]
 800224e:	68b2      	ldr	r2, [r6, #8]
 8002250:	6883      	ldr	r3, [r0, #8]
 8002252:	6931      	ldr	r1, [r6, #16]
 8002254:	b292      	uxth	r2, r2
 8002256:	b289      	uxth	r1, r1
 8002258:	a804      	add	r0, sp, #16
 800225a:	f002 fbd7 	bl	8004a0c <arm_mat_init_f32>
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	6883      	ldr	r3, [r0, #8]
 8002264:	6939      	ldr	r1, [r7, #16]
 8002266:	b292      	uxth	r2, r2
 8002268:	b289      	uxth	r1, r1
 800226a:	a802      	add	r0, sp, #8
 800226c:	f002 fbce 	bl	8004a0c <arm_mat_init_f32>
 8002270:	a808      	add	r0, sp, #32
 8002272:	9001      	str	r0, [sp, #4]
 8002274:	aa02      	add	r2, sp, #8
 8002276:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 800227a:	9100      	str	r1, [sp, #0]
 800227c:	a904      	add	r1, sp, #16
 800227e:	f994 3020 	ldrsb.w	r3, [r4, #32]
 8002282:	edd4 0a07 	vldr	s1, [r4, #28]
 8002286:	ed94 0a06 	vldr	s0, [r4, #24]
 800228a:	a806      	add	r0, sp, #24
 800228c:	f7ff feb2 	bl	8001ff4 <arm_mat_gemm_f32>
 8002290:	b00b      	add	sp, #44	; 0x2c
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002294 <forward_matmul>:
 8002294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002298:	b08b      	sub	sp, #44	; 0x2c
 800229a:	6940      	ldr	r0, [r0, #20]
 800229c:	6801      	ldr	r1, [r0, #0]
 800229e:	680a      	ldr	r2, [r1, #0]
 80022a0:	6810      	ldr	r0, [r2, #0]
 80022a2:	6857      	ldr	r7, [r2, #4]
 80022a4:	68ca      	ldr	r2, [r1, #12]
 80022a6:	6814      	ldr	r4, [r2, #0]
 80022a8:	b90f      	cbnz	r7, 80022ae <forward_matmul+0x1a>
 80022aa:	6989      	ldr	r1, [r1, #24]
 80022ac:	680f      	ldr	r7, [r1, #0]
 80022ae:	68a2      	ldr	r2, [r4, #8]
 80022b0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80022b4:	687d      	ldr	r5, [r7, #4]
 80022b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80022ba:	68c1      	ldr	r1, [r0, #12]
 80022bc:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80022c0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80022c4:	6923      	ldr	r3, [r4, #16]
 80022c6:	9306      	str	r3, [sp, #24]
 80022c8:	fb01 fa0e 	mul.w	sl, r1, lr
 80022cc:	6824      	ldr	r4, [r4, #0]
 80022ce:	68a3      	ldr	r3, [r4, #8]
 80022d0:	6904      	ldr	r4, [r0, #16]
 80022d2:	434c      	muls	r4, r1
 80022d4:	fb0e f404 	mul.w	r4, lr, r4
 80022d8:	940a      	str	r4, [sp, #40]	; 0x28
 80022da:	693e      	ldr	r6, [r7, #16]
 80022dc:	fb08 f606 	mul.w	r6, r8, r6
 80022e0:	436e      	muls	r6, r5
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	9609      	str	r6, [sp, #36]	; 0x24
 80022e6:	fb08 f805 	mul.w	r8, r8, r5
 80022ea:	d079      	beq.n	80023e0 <forward_matmul+0x14c>
 80022ec:	2400      	movs	r4, #0
 80022ee:	46a1      	mov	r9, r4
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	9a06      	ldr	r2, [sp, #24]
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d069      	beq.n	80023cc <forward_matmul+0x138>
 80022f8:	2600      	movs	r6, #0
 80022fa:	9600      	str	r6, [sp, #0]
 80022fc:	f8cd a014 	str.w	sl, [sp, #20]
 8002300:	f8cd b00c 	str.w	fp, [sp, #12]
 8002304:	9a06      	ldr	r2, [sp, #24]
 8002306:	f8dd a000 	ldr.w	sl, [sp]
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	9a03      	ldr	r2, [sp, #12]
 800230e:	2a00      	cmp	r2, #0
 8002310:	d052      	beq.n	80023b8 <forward_matmul+0x124>
 8002312:	9507      	str	r5, [sp, #28]
 8002314:	f04f 0b00 	mov.w	fp, #0
 8002318:	f8cd c010 	str.w	ip, [sp, #16]
 800231c:	9200      	str	r2, [sp, #0]
 800231e:	9a04      	ldr	r2, [sp, #16]
 8002320:	2a00      	cmp	r2, #0
 8002322:	d03f      	beq.n	80023a4 <forward_matmul+0x110>
 8002324:	f04f 0c00 	mov.w	ip, #0
 8002328:	9008      	str	r0, [sp, #32]
 800232a:	9808      	ldr	r0, [sp, #32]
 800232c:	6805      	ldr	r5, [r0, #0]
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	68ae      	ldr	r6, [r5, #8]
 8002332:	6880      	ldr	r0, [r0, #8]
 8002334:	1936      	adds	r6, r6, r4
 8002336:	4456      	add	r6, sl
 8002338:	4448      	add	r0, r9
 800233a:	eb06 050c 	add.w	r5, r6, ip
 800233e:	4458      	add	r0, fp
 8002340:	eb00 060c 	add.w	r6, r0, ip
 8002344:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80023e8 <.text_21>
 8002348:	b321      	cbz	r1, 8002394 <forward_matmul+0x100>
 800234a:	07c8      	lsls	r0, r1, #31
 800234c:	d509      	bpl.n	8002362 <forward_matmul+0xce>
 800234e:	edd5 0a00 	vldr	s1, [r5]
 8002352:	ed96 1a00 	vldr	s2, [r6]
 8002356:	ee00 0a81 	vmla.f32	s0, s1, s2
 800235a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800235e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002362:	0848      	lsrs	r0, r1, #1
 8002364:	f000 8016 	beq.w	8002394 <forward_matmul+0x100>
 8002368:	edd5 0a00 	vldr	s1, [r5]
 800236c:	ed96 1a00 	vldr	s2, [r6]
 8002370:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002374:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002378:	ee00 0a81 	vmla.f32	s0, s1, s2
 800237c:	edd5 0a00 	vldr	s1, [r5]
 8002380:	ed96 1a00 	vldr	s2, [r6]
 8002384:	1e40      	subs	r0, r0, #1
 8002386:	ee00 0a81 	vmla.f32	s0, s1, s2
 800238a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800238e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002392:	d1e9      	bne.n	8002368 <forward_matmul+0xd4>
 8002394:	ed83 0a00 	vstr	s0, [r3]
 8002398:	1d1b      	adds	r3, r3, #4
 800239a:	1e52      	subs	r2, r2, #1
 800239c:	f10c 0c04 	add.w	ip, ip, #4
 80023a0:	d1c3      	bne.n	800232a <forward_matmul+0x96>
 80023a2:	9808      	ldr	r0, [sp, #32]
 80023a4:	9d00      	ldr	r5, [sp, #0]
 80023a6:	9a07      	ldr	r2, [sp, #28]
 80023a8:	1e6d      	subs	r5, r5, #1
 80023aa:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80023ae:	9500      	str	r5, [sp, #0]
 80023b0:	d1b5      	bne.n	800231e <forward_matmul+0x8a>
 80023b2:	4615      	mov	r5, r2
 80023b4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023b8:	9e01      	ldr	r6, [sp, #4]
 80023ba:	9a05      	ldr	r2, [sp, #20]
 80023bc:	1e76      	subs	r6, r6, #1
 80023be:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80023c2:	9601      	str	r6, [sp, #4]
 80023c4:	d1a2      	bne.n	800230c <forward_matmul+0x78>
 80023c6:	4692      	mov	sl, r2
 80023c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80023cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80023d0:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80023d4:	9a02      	ldr	r2, [sp, #8]
 80023d6:	1e52      	subs	r2, r2, #1
 80023d8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80023dc:	9202      	str	r2, [sp, #8]
 80023de:	d188      	bne.n	80022f2 <forward_matmul+0x5e>
 80023e0:	b00b      	add	sp, #44	; 0x2c
 80023e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023e8 <.text_21>:
 80023e8:	00000000 	.word	0x00000000

080023ec <.text_22>:
 80023ec:	0800134d 	.word	0x0800134d

080023f0 <nl_func_sm_channel_f32>:
 80023f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f4:	460f      	mov	r7, r1
 80023f6:	4614      	mov	r4, r2
 80023f8:	ed2d 8b02 	vpush	{d8}
 80023fc:	2c02      	cmp	r4, #2
 80023fe:	4606      	mov	r6, r0
 8002400:	ed97 8a00 	vldr	s16, [r7]
 8002404:	eddf 8ac5 	vldr	s17, [pc, #788]	; 800271c <.text_12>
 8002408:	d33d      	bcc.n	8002486 <nl_func_sm_channel_f32+0x96>
 800240a:	1e61      	subs	r1, r4, #1
 800240c:	1d3a      	adds	r2, r7, #4
 800240e:	f011 0003 	ands.w	r0, r1, #3
 8002412:	d00c      	beq.n	800242e <nl_func_sm_channel_f32+0x3e>
 8002414:	ed92 0a00 	vldr	s0, [r2]
 8002418:	eeb4 0a48 	vcmp.f32	s0, s16
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	bf58      	it	pl
 8002422:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002426:	1e40      	subs	r0, r0, #1
 8002428:	f102 0204 	add.w	r2, r2, #4
 800242c:	d1f2      	bne.n	8002414 <nl_func_sm_channel_f32+0x24>
 800242e:	0889      	lsrs	r1, r1, #2
 8002430:	f000 802b 	beq.w	800248a <nl_func_sm_channel_f32+0x9a>
 8002434:	ed92 0a00 	vldr	s0, [r2]
 8002438:	eeb4 0a48 	vcmp.f32	s0, s16
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	bf58      	it	pl
 8002442:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002446:	ed92 0a01 	vldr	s0, [r2, #4]
 800244a:	eeb4 0a48 	vcmp.f32	s0, s16
 800244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002452:	bf58      	it	pl
 8002454:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002458:	ed92 0a02 	vldr	s0, [r2, #8]
 800245c:	eeb4 0a48 	vcmp.f32	s0, s16
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	bf58      	it	pl
 8002466:	eeb0 8a40 	vmovpl.f32	s16, s0
 800246a:	ed92 0a03 	vldr	s0, [r2, #12]
 800246e:	eeb4 0a48 	vcmp.f32	s0, s16
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	bf58      	it	pl
 8002478:	eeb0 8a40 	vmovpl.f32	s16, s0
 800247c:	1e49      	subs	r1, r1, #1
 800247e:	f102 0210 	add.w	r2, r2, #16
 8002482:	d1d7      	bne.n	8002434 <nl_func_sm_channel_f32+0x44>
 8002484:	e001      	b.n	800248a <nl_func_sm_channel_f32+0x9a>
 8002486:	2c00      	cmp	r4, #0
 8002488:	d040      	beq.n	800250c <nl_func_sm_channel_f32+0x11c>
 800248a:	46b0      	mov	r8, r6
 800248c:	ea4f 0504 	mov.w	r5, r4
 8002490:	ed97 0a00 	vldr	s0, [r7]
 8002494:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002498:	f00d ff08 	bl	80102ac <expf>
 800249c:	1d3f      	adds	r7, r7, #4
 800249e:	ed88 0a00 	vstr	s0, [r8]
 80024a2:	1e6d      	subs	r5, r5, #1
 80024a4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80024a8:	f108 0804 	add.w	r8, r8, #4
 80024ac:	d1f0      	bne.n	8002490 <nl_func_sm_channel_f32+0xa0>
 80024ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024b2:	f014 0003 	ands.w	r0, r4, #3
 80024b6:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80024ba:	d009      	beq.n	80024d0 <nl_func_sm_channel_f32+0xe0>
 80024bc:	edd6 0a00 	vldr	s1, [r6]
 80024c0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024c4:	edc6 0a00 	vstr	s1, [r6]
 80024c8:	1e40      	subs	r0, r0, #1
 80024ca:	f106 0604 	add.w	r6, r6, #4
 80024ce:	d1f5      	bne.n	80024bc <nl_func_sm_channel_f32+0xcc>
 80024d0:	08a4      	lsrs	r4, r4, #2
 80024d2:	d01b      	beq.n	800250c <nl_func_sm_channel_f32+0x11c>
 80024d4:	edd6 0a00 	vldr	s1, [r6]
 80024d8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024dc:	edc6 0a00 	vstr	s1, [r6]
 80024e0:	1e64      	subs	r4, r4, #1
 80024e2:	ed96 1a01 	vldr	s2, [r6, #4]
 80024e6:	edd6 0a02 	vldr	s1, [r6, #8]
 80024ea:	ee21 1a00 	vmul.f32	s2, s2, s0
 80024ee:	ed86 1a01 	vstr	s2, [r6, #4]
 80024f2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024f6:	ed96 1a03 	vldr	s2, [r6, #12]
 80024fa:	edc6 0a02 	vstr	s1, [r6, #8]
 80024fe:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002502:	ed86 1a03 	vstr	s2, [r6, #12]
 8002506:	f106 0610 	add.w	r6, r6, #16
 800250a:	d1e3      	bne.n	80024d4 <nl_func_sm_channel_f32+0xe4>
 800250c:	ecbd 8b02 	vpop	{d8}
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002514 <nl_func_sm_array_f32>:
 8002514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002518:	b081      	sub	sp, #4
 800251a:	460c      	mov	r4, r1
 800251c:	9f08      	ldr	r7, [sp, #32]
 800251e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002520:	00bf      	lsls	r7, r7, #2
 8002522:	427f      	negs	r7, r7
 8002524:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002528:	19cd      	adds	r5, r1, r7
 800252a:	00b6      	lsls	r6, r6, #2
 800252c:	4276      	negs	r6, r6
 800252e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002532:	42a5      	cmp	r5, r4
 8002534:	4698      	mov	r8, r3
 8002536:	eb00 0906 	add.w	r9, r0, r6
 800253a:	d309      	bcc.n	8002550 <nl_func_sm_array_f32+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	4642      	mov	r2, r8
 8002540:	4629      	mov	r1, r5
 8002542:	4648      	mov	r0, r9
 8002544:	f7ff ff54 	bl	80023f0 <nl_func_sm_channel_f32>
 8002548:	19ed      	adds	r5, r5, r7
 800254a:	42a5      	cmp	r5, r4
 800254c:	44b1      	add	r9, r6
 800254e:	d2f5      	bcs.n	800253c <nl_func_sm_array_f32+0x28>
 8002550:	b001      	add	sp, #4
 8002552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002558 <nl_func_tanh_array_f32>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	460c      	mov	r4, r1
 800255c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002560:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002564:	1f0d      	subs	r5, r1, #4
 8002566:	1f06      	subs	r6, r0, #4
 8002568:	42a5      	cmp	r5, r4
 800256a:	d309      	bcc.n	8002580 <nl_func_tanh_array_f32+0x28>
 800256c:	ed95 0a00 	vldr	s0, [r5]
 8002570:	f00d fe4a 	bl	8010208 <tanhf>
 8002574:	ed86 0a00 	vstr	s0, [r6]
 8002578:	1f2d      	subs	r5, r5, #4
 800257a:	1f36      	subs	r6, r6, #4
 800257c:	42a5      	cmp	r5, r4
 800257e:	d2f5      	bcs.n	800256c <nl_func_tanh_array_f32+0x14>
 8002580:	bd70      	pop	{r4, r5, r6, pc}
	...

08002584 <nl_func_sigmoid_array_f32>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	460c      	mov	r4, r1
 8002588:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800258c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002590:	1f0d      	subs	r5, r1, #4
 8002592:	1f06      	subs	r6, r0, #4
 8002594:	42a5      	cmp	r5, r4
 8002596:	d313      	bcc.n	80025c0 <nl_func_sigmoid_array_f32+0x3c>
 8002598:	ed95 0a00 	vldr	s0, [r5]
 800259c:	eeb1 0a40 	vneg.f32	s0, s0
 80025a0:	f00d fe84 	bl	80102ac <expf>
 80025a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80025a8:	ee70 0a20 	vadd.f32	s1, s0, s1
 80025ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025b0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80025b4:	ed86 0a00 	vstr	s0, [r6]
 80025b8:	1f2d      	subs	r5, r5, #4
 80025ba:	1f36      	subs	r6, r6, #4
 80025bc:	42a5      	cmp	r5, r4
 80025be:	d2eb      	bcs.n	8002598 <nl_func_sigmoid_array_f32+0x14>
 80025c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080025c4 <nl_func_hard_sigmoid_array_f32>:
 80025c4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80025c8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80025cc:	1f1b      	subs	r3, r3, #4
 80025ce:	1f00      	subs	r0, r0, #4
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d321      	bcc.n	8002618 <nl_func_hard_sigmoid_array_f32+0x54>
 80025d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025d8:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8002874 <.text_16>
 80025dc:	edd3 1a00 	vldr	s3, [r3]
 80025e0:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 8002878 <.text_17>
 80025e4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80025e8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80025ec:	eeb4 1a60 	vcmp.f32	s2, s1
 80025f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f4:	da08      	bge.n	8002608 <nl_func_hard_sigmoid_array_f32+0x44>
 80025f6:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	d505      	bpl.n	800260c <nl_func_hard_sigmoid_array_f32+0x48>
 8002600:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800271c <.text_12>
 8002604:	e002      	b.n	800260c <nl_func_hard_sigmoid_array_f32+0x48>
 8002606:	bf00      	nop
 8002608:	eeb0 1a40 	vmov.f32	s2, s0
 800260c:	ed80 1a00 	vstr	s2, [r0]
 8002610:	1f1b      	subs	r3, r3, #4
 8002612:	1f00      	subs	r0, r0, #4
 8002614:	428b      	cmp	r3, r1
 8002616:	d2e1      	bcs.n	80025dc <nl_func_hard_sigmoid_array_f32+0x18>
 8002618:	4770      	bx	lr
	...

0800261c <nl_func_exp_array_f32>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	460c      	mov	r4, r1
 8002620:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002624:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002628:	1f0d      	subs	r5, r1, #4
 800262a:	1f06      	subs	r6, r0, #4
 800262c:	42a5      	cmp	r5, r4
 800262e:	d309      	bcc.n	8002644 <nl_func_exp_array_f32+0x28>
 8002630:	ed95 0a00 	vldr	s0, [r5]
 8002634:	f00d fe3a 	bl	80102ac <expf>
 8002638:	ed86 0a00 	vstr	s0, [r6]
 800263c:	1f2d      	subs	r5, r5, #4
 800263e:	1f36      	subs	r6, r6, #4
 8002640:	42a5      	cmp	r5, r4
 8002642:	d2f5      	bcs.n	8002630 <nl_func_exp_array_f32+0x14>
 8002644:	bd70      	pop	{r4, r5, r6, pc}
	...

08002648 <nl_func_sqrt_array_f32>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	460c      	mov	r4, r1
 800264c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002650:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002654:	1f0d      	subs	r5, r1, #4
 8002656:	1f06      	subs	r6, r0, #4
 8002658:	42a5      	cmp	r5, r4
 800265a:	d309      	bcc.n	8002670 <nl_func_sqrt_array_f32+0x28>
 800265c:	ed95 0a00 	vldr	s0, [r5]
 8002660:	f001 f9a8 	bl	80039b4 <ai_math_sqrt>
 8002664:	ed86 0a00 	vstr	s0, [r6]
 8002668:	1f2d      	subs	r5, r5, #4
 800266a:	1f36      	subs	r6, r6, #4
 800266c:	42a5      	cmp	r5, r4
 800266e:	d2f5      	bcs.n	800265c <nl_func_sqrt_array_f32+0x14>
 8002670:	bd70      	pop	{r4, r5, r6, pc}
	...

08002674 <nl_func_soft_plus_array_f32>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	460c      	mov	r4, r1
 8002678:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800267c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002680:	1f0d      	subs	r5, r1, #4
 8002682:	1f06      	subs	r6, r0, #4
 8002684:	42a5      	cmp	r5, r4
 8002686:	d30f      	bcc.n	80026a8 <nl_func_soft_plus_array_f32+0x34>
 8002688:	ed95 0a00 	vldr	s0, [r5]
 800268c:	f00d fe0e 	bl	80102ac <expf>
 8002690:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002694:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002698:	f00d fe82 	bl	80103a0 <logf>
 800269c:	ed86 0a00 	vstr	s0, [r6]
 80026a0:	1f2d      	subs	r5, r5, #4
 80026a2:	1f36      	subs	r6, r6, #4
 80026a4:	42a5      	cmp	r5, r4
 80026a6:	d2ef      	bcs.n	8002688 <nl_func_soft_plus_array_f32+0x14>
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026ac <nl_func_soft_sign_array_f32>:
 80026ac:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026b4:	1f1b      	subs	r3, r3, #4
 80026b6:	1f00      	subs	r0, r0, #4
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d30f      	bcc.n	80026dc <nl_func_soft_sign_array_f32+0x30>
 80026bc:	ed93 0a00 	vldr	s0, [r3]
 80026c0:	eef0 0ac0 	vabs.f32	s1, s0
 80026c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80026c8:	ee70 0a81 	vadd.f32	s1, s1, s2
 80026cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80026d0:	ed80 0a00 	vstr	s0, [r0]
 80026d4:	1f1b      	subs	r3, r3, #4
 80026d6:	1f00      	subs	r0, r0, #4
 80026d8:	428b      	cmp	r3, r1
 80026da:	d2ef      	bcs.n	80026bc <nl_func_soft_sign_array_f32+0x10>
 80026dc:	4770      	bx	lr
	...

080026e0 <nl_func_sign_array_f32>:
 80026e0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026e8:	1f1b      	subs	r3, r3, #4
 80026ea:	1f00      	subs	r0, r0, #4
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d314      	bcc.n	800271a <nl_func_sign_array_f32+0x3a>
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	ed93 0a00 	vldr	s0, [r3]
 80026f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002700:	bfcc      	ite	gt
 8002702:	ed9f 0ab9 	vldrgt	s0, [pc, #740]	; 80029e8 <.text_21>
 8002706:	ee00 2a10 	vmovle	s0, r2
 800270a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800270e:	ed80 0a00 	vstr	s0, [r0]
 8002712:	1f1b      	subs	r3, r3, #4
 8002714:	1f00      	subs	r0, r0, #4
 8002716:	428b      	cmp	r3, r1
 8002718:	d2ec      	bcs.n	80026f4 <nl_func_sign_array_f32+0x14>
 800271a:	4770      	bx	lr

0800271c <.text_12>:
 800271c:	00000000 	.word	0x00000000

08002720 <nl_func_clip_array_f32>:
 8002720:	ed93 0a00 	vldr	s0, [r3]
 8002724:	edd3 0a01 	vldr	s1, [r3, #4]
 8002728:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800272c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002730:	1f1b      	subs	r3, r3, #4
 8002732:	1f00      	subs	r0, r0, #4
 8002734:	428b      	cmp	r3, r1
 8002736:	d315      	bcc.n	8002764 <nl_func_clip_array_f32+0x44>
 8002738:	ed93 1a00 	vldr	s2, [r3]
 800273c:	eeb4 0a41 	vcmp.f32	s0, s2
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	bf58      	it	pl
 8002746:	eeb0 1a40 	vmovpl.f32	s2, s0
 800274a:	eeb4 1a60 	vcmp.f32	s2, s1
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	bf58      	it	pl
 8002754:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002758:	ed80 1a00 	vstr	s2, [r0]
 800275c:	1f1b      	subs	r3, r3, #4
 800275e:	1f00      	subs	r0, r0, #4
 8002760:	428b      	cmp	r3, r1
 8002762:	d2e9      	bcs.n	8002738 <nl_func_clip_array_f32+0x18>
 8002764:	4770      	bx	lr
	...

08002768 <nl_func_hardmax_array_f32>:
 8002768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800276c:	6856      	ldr	r6, [r2, #4]
 800276e:	68d4      	ldr	r4, [r2, #12]
 8002770:	4688      	mov	r8, r1
 8002772:	4374      	muls	r4, r6
 8002774:	4605      	mov	r5, r0
 8002776:	00a1      	lsls	r1, r4, #2
 8002778:	f009 fa79 	bl	800bc6e <__aeabi_memclr>
 800277c:	2200      	movs	r2, #0
 800277e:	2c00      	cmp	r4, #0
 8002780:	4643      	mov	r3, r8
 8002782:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002786:	d05a      	beq.n	800283e <nl_func_hardmax_array_f32+0xd6>
 8002788:	f102 0c01 	add.w	ip, r2, #1
 800278c:	eb06 0e02 	add.w	lr, r6, r2
 8002790:	45f4      	cmp	ip, lr
 8002792:	edd3 0a00 	vldr	s1, [r3]
 8002796:	d249      	bcs.n	800282c <nl_func_hardmax_array_f32+0xc4>
 8002798:	1e71      	subs	r1, r6, #1
 800279a:	f011 0003 	ands.w	r0, r1, #3
 800279e:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 80027a2:	d00f      	beq.n	80027c4 <nl_func_hardmax_array_f32+0x5c>
 80027a4:	ed97 1a00 	vldr	s2, [r7]
 80027a8:	eef4 0a41 	vcmp.f32	s1, s2
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	bf44      	itt	mi
 80027b2:	eef0 0a41 	vmovmi.f32	s1, s2
 80027b6:	4662      	movmi	r2, ip
 80027b8:	1e40      	subs	r0, r0, #1
 80027ba:	f10c 0c01 	add.w	ip, ip, #1
 80027be:	f107 0704 	add.w	r7, r7, #4
 80027c2:	d1ef      	bne.n	80027a4 <nl_func_hardmax_array_f32+0x3c>
 80027c4:	0889      	lsrs	r1, r1, #2
 80027c6:	d031      	beq.n	800282c <nl_func_hardmax_array_f32+0xc4>
 80027c8:	ed97 1a00 	vldr	s2, [r7]
 80027cc:	eef4 0a41 	vcmp.f32	s1, s2
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	bf44      	itt	mi
 80027d6:	eef0 0a41 	vmovmi.f32	s1, s2
 80027da:	4662      	movmi	r2, ip
 80027dc:	ed97 1a01 	vldr	s2, [r7, #4]
 80027e0:	eef4 0a41 	vcmp.f32	s1, s2
 80027e4:	f10c 0001 	add.w	r0, ip, #1
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	bf44      	itt	mi
 80027ee:	eef0 0a41 	vmovmi.f32	s1, s2
 80027f2:	4602      	movmi	r2, r0
 80027f4:	ed97 1a02 	vldr	s2, [r7, #8]
 80027f8:	1c40      	adds	r0, r0, #1
 80027fa:	eef4 0a41 	vcmp.f32	s1, s2
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	bf44      	itt	mi
 8002804:	eef0 0a41 	vmovmi.f32	s1, s2
 8002808:	4602      	movmi	r2, r0
 800280a:	ed97 1a03 	vldr	s2, [r7, #12]
 800280e:	1c40      	adds	r0, r0, #1
 8002810:	eef4 0a41 	vcmp.f32	s1, s2
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	bf44      	itt	mi
 800281a:	eef0 0a41 	vmovmi.f32	s1, s2
 800281e:	4602      	movmi	r2, r0
 8002820:	1e49      	subs	r1, r1, #1
 8002822:	f100 0c01 	add.w	ip, r0, #1
 8002826:	f107 0710 	add.w	r7, r7, #16
 800282a:	d1cd      	bne.n	80027c8 <nl_func_hardmax_array_f32+0x60>
 800282c:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8002830:	4672      	mov	r2, lr
 8002832:	42a2      	cmp	r2, r4
 8002834:	ed80 0a00 	vstr	s0, [r0]
 8002838:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800283c:	d3a4      	bcc.n	8002788 <nl_func_hardmax_array_f32+0x20>
 800283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002844 <nl_func_relu_array_f32>:
 8002844:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002848:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800284c:	1f1b      	subs	r3, r3, #4
 800284e:	1f00      	subs	r0, r0, #4
 8002850:	428b      	cmp	r3, r1
 8002852:	d30e      	bcc.n	8002872 <nl_func_relu_array_f32+0x2e>
 8002854:	ed93 0a00 	vldr	s0, [r3]
 8002858:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	bf48      	it	mi
 8002862:	ed9f 0ab9 	vldrmi	s0, [pc, #740]	; 8002b48 <.text_25>
 8002866:	ed80 0a00 	vstr	s0, [r0]
 800286a:	1f1b      	subs	r3, r3, #4
 800286c:	1f00      	subs	r0, r0, #4
 800286e:	428b      	cmp	r3, r1
 8002870:	d2f0      	bcs.n	8002854 <nl_func_relu_array_f32+0x10>
 8002872:	4770      	bx	lr

08002874 <.text_16>:
 8002874:	3f800001 	.word	0x3f800001

08002878 <.text_17>:
 8002878:	3e4ccccd 	.word	0x3e4ccccd

0800287c <nl_func_relu_generic_array_f32>:
 800287c:	ed93 0a00 	vldr	s0, [r3]
 8002880:	edd3 0a01 	vldr	s1, [r3, #4]
 8002884:	ed93 1a02 	vldr	s2, [r3, #8]
 8002888:	1f00      	subs	r0, r0, #4
 800288a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800288e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002892:	1f0b      	subs	r3, r1, #4
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800289c:	d52a      	bpl.n	80028f4 <nl_func_relu_generic_array_f32+0x78>
 800289e:	eef5 0a40 	vcmp.f32	s1, #0.0
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	d013      	beq.n	80028d0 <nl_func_relu_generic_array_f32+0x54>
 80028a8:	428a      	cmp	r2, r1
 80028aa:	d310      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028ac:	ed92 1a00 	vldr	s2, [r2]
 80028b0:	eeb4 1a40 	vcmp.f32	s2, s0
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	bf44      	itt	mi
 80028ba:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80028be:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80028c2:	ed80 1a00 	vstr	s2, [r0]
 80028c6:	1f12      	subs	r2, r2, #4
 80028c8:	1f00      	subs	r0, r0, #4
 80028ca:	428a      	cmp	r2, r1
 80028cc:	d2ee      	bcs.n	80028ac <nl_func_relu_generic_array_f32+0x30>
 80028ce:	4770      	bx	lr
 80028d0:	428a      	cmp	r2, r1
 80028d2:	d3fc      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028d4:	edd2 0a00 	vldr	s1, [r2]
 80028d8:	eef4 0a40 	vcmp.f32	s1, s0
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	bf48      	it	mi
 80028e2:	eddf 0a99 	vldrmi	s1, [pc, #612]	; 8002b48 <.text_25>
 80028e6:	edc0 0a00 	vstr	s1, [r0]
 80028ea:	1f12      	subs	r2, r2, #4
 80028ec:	1f00      	subs	r0, r0, #4
 80028ee:	428a      	cmp	r2, r1
 80028f0:	d2f0      	bcs.n	80028d4 <nl_func_relu_generic_array_f32+0x58>
 80028f2:	4770      	bx	lr
 80028f4:	428a      	cmp	r2, r1
 80028f6:	d3ea      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028f8:	edd2 1a00 	vldr	s3, [r2]
 80028fc:	eef4 1a41 	vcmp.f32	s3, s2
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d50a      	bpl.n	800291c <nl_func_relu_generic_array_f32+0xa0>
 8002906:	eef4 1a40 	vcmp.f32	s3, s0
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	d507      	bpl.n	8002920 <nl_func_relu_generic_array_f32+0xa4>
 8002910:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8002914:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8002918:	e002      	b.n	8002920 <nl_func_relu_generic_array_f32+0xa4>
 800291a:	bf00      	nop
 800291c:	eef0 1a41 	vmov.f32	s3, s2
 8002920:	edc0 1a00 	vstr	s3, [r0]
 8002924:	1f12      	subs	r2, r2, #4
 8002926:	1f00      	subs	r0, r0, #4
 8002928:	428a      	cmp	r2, r1
 800292a:	d2e5      	bcs.n	80028f8 <nl_func_relu_generic_array_f32+0x7c>
 800292c:	4770      	bx	lr
	...

08002930 <nl_func_relu_thresholded_array_f32>:
 8002930:	ed93 0a00 	vldr	s0, [r3]
 8002934:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002938:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800293c:	1f1b      	subs	r3, r3, #4
 800293e:	1f00      	subs	r0, r0, #4
 8002940:	428b      	cmp	r3, r1
 8002942:	d30e      	bcc.n	8002962 <nl_func_relu_thresholded_array_f32+0x32>
 8002944:	edd3 0a00 	vldr	s1, [r3]
 8002948:	eef4 0a40 	vcmp.f32	s1, s0
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	bf48      	it	mi
 8002952:	eddf 0a7d 	vldrmi	s1, [pc, #500]	; 8002b48 <.text_25>
 8002956:	edc0 0a00 	vstr	s1, [r0]
 800295a:	1f1b      	subs	r3, r3, #4
 800295c:	1f00      	subs	r0, r0, #4
 800295e:	428b      	cmp	r3, r1
 8002960:	d2f0      	bcs.n	8002944 <nl_func_relu_thresholded_array_f32+0x14>
 8002962:	4770      	bx	lr

08002964 <nl_func_elu_array_f32>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	460c      	mov	r4, r1
 8002968:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800296c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002970:	1f0d      	subs	r5, r1, #4
 8002972:	1f06      	subs	r6, r0, #4
 8002974:	ed2d 8b04 	vpush	{d8-d9}
 8002978:	42a5      	cmp	r5, r4
 800297a:	ed93 8a00 	vldr	s16, [r3]
 800297e:	d32f      	bcc.n	80029e0 <nl_func_elu_array_f32+0x7c>
 8002980:	edd5 8a00 	vldr	s17, [r5]
 8002984:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	bf4c      	ite	mi
 800298e:	ed9f 9a6e 	vldrmi	s18, [pc, #440]	; 8002b48 <.text_25>
 8002992:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002996:	eeb0 0a68 	vmov.f32	s0, s17
 800299a:	f00d fc87 	bl	80102ac <expf>
 800299e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029a2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80029aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	dd05      	ble.n	80029c0 <nl_func_elu_array_f32+0x5c>
 80029b4:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002b48 <.text_25>
 80029b8:	ee39 9a01 	vadd.f32	s18, s18, s2
 80029bc:	e00a      	b.n	80029d4 <nl_func_elu_array_f32+0x70>
 80029be:	bf00      	nop
 80029c0:	eeb0 0a68 	vmov.f32	s0, s17
 80029c4:	f00d fc72 	bl	80102ac <expf>
 80029c8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029cc:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029d0:	ee00 9a08 	vmla.f32	s18, s0, s16
 80029d4:	ed86 9a00 	vstr	s18, [r6]
 80029d8:	1f2d      	subs	r5, r5, #4
 80029da:	1f36      	subs	r6, r6, #4
 80029dc:	42a5      	cmp	r5, r4
 80029de:	d2cf      	bcs.n	8002980 <nl_func_elu_array_f32+0x1c>
 80029e0:	ecbd 8b04 	vpop	{d8-d9}
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029e8 <.text_21>:
 80029e8:	00000001 	.word	0x00000001

080029ec <nl_func_selu_array_f32>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	460c      	mov	r4, r1
 80029f0:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80029f8:	1f0d      	subs	r5, r1, #4
 80029fa:	1f06      	subs	r6, r0, #4
 80029fc:	ed2d 8b04 	vpush	{d8-d9}
 8002a00:	42a5      	cmp	r5, r4
 8002a02:	ed93 8a00 	vldr	s16, [r3]
 8002a06:	edd3 8a01 	vldr	s17, [r3, #4]
 8002a0a:	d331      	bcc.n	8002a70 <nl_func_selu_array_f32+0x84>
 8002a0c:	ed95 9a00 	vldr	s18, [r5]
 8002a10:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	bf4c      	ite	mi
 8002a1a:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8002b48 <.text_25>
 8002a1e:	eef0 9a49 	vmovpl.f32	s19, s18
 8002a22:	eeb0 0a49 	vmov.f32	s0, s18
 8002a26:	f00d fc41 	bl	80102ac <expf>
 8002a2a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a2e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a32:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002a36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	dd05      	ble.n	8002a4c <nl_func_selu_array_f32+0x60>
 8002a40:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002b48 <.text_25>
 8002a44:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002a48:	e00a      	b.n	8002a60 <nl_func_selu_array_f32+0x74>
 8002a4a:	bf00      	nop
 8002a4c:	eeb0 0a49 	vmov.f32	s0, s18
 8002a50:	f00d fc2c 	bl	80102ac <expf>
 8002a54:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a58:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a5c:	ee40 9a08 	vmla.f32	s19, s0, s16
 8002a60:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8002a64:	ed86 0a00 	vstr	s0, [r6]
 8002a68:	1f2d      	subs	r5, r5, #4
 8002a6a:	1f36      	subs	r6, r6, #4
 8002a6c:	42a5      	cmp	r5, r4
 8002a6e:	d2cd      	bcs.n	8002a0c <nl_func_selu_array_f32+0x20>
 8002a70:	ecbd 8b04 	vpop	{d8-d9}
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a78 <nl_func_prelu_array_f32>:
 8002a78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002a7c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8002a80:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002a84:	1f1b      	subs	r3, r3, #4
 8002a86:	f1ac 0c04 	sub.w	ip, ip, #4
 8002a8a:	1f00      	subs	r0, r0, #4
 8002a8c:	458c      	cmp	ip, r1
 8002a8e:	d320      	bcc.n	8002ad2 <nl_func_prelu_array_f32+0x5a>
 8002a90:	ed9c 0a00 	vldr	s0, [ip]
 8002a94:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	bf4c      	ite	mi
 8002a9e:	eddf 0a2a 	vldrmi	s1, [pc, #168]	; 8002b48 <.text_25>
 8002aa2:	eef0 0a40 	vmovpl.f32	s1, s0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	eeb1 0a40 	vneg.f32	s0, s0
 8002aac:	1f13      	subs	r3, r2, #4
 8002aae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	bf48      	it	mi
 8002ab8:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8002b48 <.text_25>
 8002abc:	ed92 1a00 	vldr	s2, [r2]
 8002ac0:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002ac4:	edc0 0a00 	vstr	s1, [r0]
 8002ac8:	f1ac 0c04 	sub.w	ip, ip, #4
 8002acc:	1f00      	subs	r0, r0, #4
 8002ace:	458c      	cmp	ip, r1
 8002ad0:	d2de      	bcs.n	8002a90 <nl_func_prelu_array_f32+0x18>
 8002ad2:	4770      	bx	lr

08002ad4 <forward_relu>:
 8002ad4:	b430      	push	{r4, r5}
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6950      	ldr	r0, [r2, #20]
 8002ada:	6800      	ldr	r0, [r0, #0]
 8002adc:	6801      	ldr	r1, [r0, #0]
 8002ade:	68c0      	ldr	r0, [r0, #12]
 8002ae0:	680b      	ldr	r3, [r1, #0]
 8002ae2:	6805      	ldr	r5, [r0, #0]
 8002ae4:	685c      	ldr	r4, [r3, #4]
 8002ae6:	6898      	ldr	r0, [r3, #8]
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	682d      	ldr	r5, [r5, #0]
 8002aec:	6992      	ldr	r2, [r2, #24]
 8002aee:	4344      	muls	r4, r0
 8002af0:	6918      	ldr	r0, [r3, #16]
 8002af2:	434c      	muls	r4, r1
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	6889      	ldr	r1, [r1, #8]
 8002af8:	4344      	muls	r4, r0
 8002afa:	68a8      	ldr	r0, [r5, #8]
 8002afc:	b9ca      	cbnz	r2, 8002b32 <forward_relu+0x5e>
 8002afe:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8002b02:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002b06:	1f12      	subs	r2, r2, #4
 8002b08:	1f00      	subs	r0, r0, #4
 8002b0a:	428a      	cmp	r2, r1
 8002b0c:	f0c0 801a 	bcc.w	8002b44 <forward_relu+0x70>
 8002b10:	ed92 0a00 	vldr	s0, [r2]
 8002b14:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	bf48      	it	mi
 8002b1e:	ed9f 0a0a 	vldrmi	s0, [pc, #40]	; 8002b48 <.text_25>
 8002b22:	ed80 0a00 	vstr	s0, [r0]
 8002b26:	1f12      	subs	r2, r2, #4
 8002b28:	1f00      	subs	r0, r0, #4
 8002b2a:	428a      	cmp	r2, r1
 8002b2c:	d2f0      	bcs.n	8002b10 <forward_relu+0x3c>
 8002b2e:	bc30      	pop	{r4, r5}
 8002b30:	4770      	bx	lr
 8002b32:	6893      	ldr	r3, [r2, #8]
 8002b34:	6852      	ldr	r2, [r2, #4]
 8002b36:	2a01      	cmp	r2, #1
 8002b38:	4622      	mov	r2, r4
 8002b3a:	d101      	bne.n	8002b40 <forward_relu+0x6c>
 8002b3c:	bc30      	pop	{r4, r5}
 8002b3e:	e6f7      	b.n	8002930 <nl_func_relu_thresholded_array_f32>
 8002b40:	bc30      	pop	{r4, r5}
 8002b42:	e69b      	b.n	800287c <nl_func_relu_generic_array_f32>
 8002b44:	bc30      	pop	{r4, r5}
 8002b46:	4770      	bx	lr

08002b48 <.text_25>:
 8002b48:	00000000 	.word	0x00000000

08002b4c <forward_relu_thresholded>:
 8002b4c:	b430      	push	{r4, r5}
 8002b4e:	6941      	ldr	r1, [r0, #20]
 8002b50:	6980      	ldr	r0, [r0, #24]
 8002b52:	680c      	ldr	r4, [r1, #0]
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	6815      	ldr	r5, [r2, #0]
 8002b58:	686b      	ldr	r3, [r5, #4]
 8002b5a:	68a9      	ldr	r1, [r5, #8]
 8002b5c:	68ea      	ldr	r2, [r5, #12]
 8002b5e:	434b      	muls	r3, r1
 8002b60:	6929      	ldr	r1, [r5, #16]
 8002b62:	682d      	ldr	r5, [r5, #0]
 8002b64:	4353      	muls	r3, r2
 8002b66:	6882      	ldr	r2, [r0, #8]
 8002b68:	ed92 0a00 	vldr	s0, [r2]
 8002b6c:	68e2      	ldr	r2, [r4, #12]
 8002b6e:	6814      	ldr	r4, [r2, #0]
 8002b70:	434b      	muls	r3, r1
 8002b72:	68a9      	ldr	r1, [r5, #8]
 8002b74:	6825      	ldr	r5, [r4, #0]
 8002b76:	68aa      	ldr	r2, [r5, #8]
 8002b78:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b80:	1f00      	subs	r0, r0, #4
 8002b82:	1f1a      	subs	r2, r3, #4
 8002b84:	4288      	cmp	r0, r1
 8002b86:	d30e      	bcc.n	8002ba6 <forward_relu_thresholded+0x5a>
 8002b88:	edd0 0a00 	vldr	s1, [r0]
 8002b8c:	eef4 0a40 	vcmp.f32	s1, s0
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	bf48      	it	mi
 8002b96:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8002e9c <.text_34>
 8002b9a:	edc2 0a00 	vstr	s1, [r2]
 8002b9e:	1f00      	subs	r0, r0, #4
 8002ba0:	1f12      	subs	r2, r2, #4
 8002ba2:	4288      	cmp	r0, r1
 8002ba4:	d2f0      	bcs.n	8002b88 <forward_relu_thresholded+0x3c>
 8002ba6:	bc30      	pop	{r4, r5}
 8002ba8:	4770      	bx	lr
	...

08002bac <forward_elu>:
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	ed2d 8b04 	vpush	{d8-d9}
 8002bb2:	6941      	ldr	r1, [r0, #20]
 8002bb4:	680e      	ldr	r6, [r1, #0]
 8002bb6:	6832      	ldr	r2, [r6, #0]
 8002bb8:	6814      	ldr	r4, [r2, #0]
 8002bba:	6863      	ldr	r3, [r4, #4]
 8002bbc:	68a1      	ldr	r1, [r4, #8]
 8002bbe:	68e2      	ldr	r2, [r4, #12]
 8002bc0:	6980      	ldr	r0, [r0, #24]
 8002bc2:	434b      	muls	r3, r1
 8002bc4:	6921      	ldr	r1, [r4, #16]
 8002bc6:	6824      	ldr	r4, [r4, #0]
 8002bc8:	68a4      	ldr	r4, [r4, #8]
 8002bca:	4353      	muls	r3, r2
 8002bcc:	434b      	muls	r3, r1
 8002bce:	6881      	ldr	r1, [r0, #8]
 8002bd0:	ed91 8a00 	vldr	s16, [r1]
 8002bd4:	68f1      	ldr	r1, [r6, #12]
 8002bd6:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8002bda:	1f05      	subs	r5, r0, #4
 8002bdc:	6808      	ldr	r0, [r1, #0]
 8002bde:	6802      	ldr	r2, [r0, #0]
 8002be0:	6891      	ldr	r1, [r2, #8]
 8002be2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002be6:	1f06      	subs	r6, r0, #4
 8002be8:	42a5      	cmp	r5, r4
 8002bea:	d32f      	bcc.n	8002c4c <forward_elu+0xa0>
 8002bec:	edd5 8a00 	vldr	s17, [r5]
 8002bf0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	bf4c      	ite	mi
 8002bfa:	ed9f 9aa8 	vldrmi	s18, [pc, #672]	; 8002e9c <.text_34>
 8002bfe:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002c02:	eeb0 0a68 	vmov.f32	s0, s17
 8002c06:	f00d fb51 	bl	80102ac <expf>
 8002c0a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c0e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c12:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002c16:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	dd05      	ble.n	8002c2c <forward_elu+0x80>
 8002c20:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8002e9c <.text_34>
 8002c24:	ee39 9a01 	vadd.f32	s18, s18, s2
 8002c28:	e00a      	b.n	8002c40 <forward_elu+0x94>
 8002c2a:	bf00      	nop
 8002c2c:	eeb0 0a68 	vmov.f32	s0, s17
 8002c30:	f00d fb3c 	bl	80102ac <expf>
 8002c34:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c38:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c3c:	ee00 9a08 	vmla.f32	s18, s0, s16
 8002c40:	ed86 9a00 	vstr	s18, [r6]
 8002c44:	1f2d      	subs	r5, r5, #4
 8002c46:	1f36      	subs	r6, r6, #4
 8002c48:	42a5      	cmp	r5, r4
 8002c4a:	d2cf      	bcs.n	8002bec <forward_elu+0x40>
 8002c4c:	ecbd 8b04 	vpop	{d8-d9}
 8002c50:	bd70      	pop	{r4, r5, r6, pc}

08002c52 <forward_selu>:
 8002c52:	b430      	push	{r4, r5}
 8002c54:	6941      	ldr	r1, [r0, #20]
 8002c56:	680c      	ldr	r4, [r1, #0]
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	6980      	ldr	r0, [r0, #24]
 8002c5c:	6815      	ldr	r5, [r2, #0]
 8002c5e:	6883      	ldr	r3, [r0, #8]
 8002c60:	686a      	ldr	r2, [r5, #4]
 8002c62:	68a8      	ldr	r0, [r5, #8]
 8002c64:	68e9      	ldr	r1, [r5, #12]
 8002c66:	4342      	muls	r2, r0
 8002c68:	6928      	ldr	r0, [r5, #16]
 8002c6a:	682d      	ldr	r5, [r5, #0]
 8002c6c:	434a      	muls	r2, r1
 8002c6e:	4342      	muls	r2, r0
 8002c70:	68e0      	ldr	r0, [r4, #12]
 8002c72:	6804      	ldr	r4, [r0, #0]
 8002c74:	68a9      	ldr	r1, [r5, #8]
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	68a8      	ldr	r0, [r5, #8]
 8002c7a:	bc30      	pop	{r4, r5}
 8002c7c:	e6b6      	b.n	80029ec <nl_func_selu_array_f32>

08002c7e <forward_prelu>:
 8002c7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c82:	b081      	sub	sp, #4
 8002c84:	6940      	ldr	r0, [r0, #20]
 8002c86:	6800      	ldr	r0, [r0, #0]
 8002c88:	6801      	ldr	r1, [r0, #0]
 8002c8a:	68c2      	ldr	r2, [r0, #12]
 8002c8c:	6980      	ldr	r0, [r0, #24]
 8002c8e:	6804      	ldr	r4, [r0, #0]
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	680d      	ldr	r5, [r1, #0]
 8002c94:	6817      	ldr	r7, [r2, #0]
 8002c96:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8002c9a:	b12c      	cbz	r4, 8002ca8 <forward_prelu+0x2a>
 8002c9c:	6841      	ldr	r1, [r0, #4]
 8002c9e:	6800      	ldr	r0, [r0, #0]
 8002ca0:	f000 fd32 	bl	8003708 <ai_array_get_byte_size>
 8002ca4:	4681      	mov	r9, r0
 8002ca6:	e001      	b.n	8002cac <forward_prelu+0x2e>
 8002ca8:	f04f 0901 	mov.w	r9, #1
 8002cac:	6828      	ldr	r0, [r5, #0]
 8002cae:	6841      	ldr	r1, [r0, #4]
 8002cb0:	6800      	ldr	r0, [r0, #0]
 8002cb2:	f000 fd29 	bl	8003708 <ai_array_get_byte_size>
 8002cb6:	6829      	ldr	r1, [r5, #0]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	688e      	ldr	r6, [r1, #8]
 8002cbc:	6895      	ldr	r5, [r2, #8]
 8002cbe:	1837      	adds	r7, r6, r0
 8002cc0:	42be      	cmp	r6, r7
 8002cc2:	d20f      	bcs.n	8002ce4 <forward_prelu+0x66>
 8002cc4:	6862      	ldr	r2, [r4, #4]
 8002cc6:	68a0      	ldr	r0, [r4, #8]
 8002cc8:	68e1      	ldr	r1, [r4, #12]
 8002cca:	4342      	muls	r2, r0
 8002ccc:	6920      	ldr	r0, [r4, #16]
 8002cce:	434a      	muls	r2, r1
 8002cd0:	4342      	muls	r2, r0
 8002cd2:	4643      	mov	r3, r8
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f7ff fece 	bl	8002a78 <nl_func_prelu_array_f32>
 8002cdc:	444e      	add	r6, r9
 8002cde:	42be      	cmp	r6, r7
 8002ce0:	444d      	add	r5, r9
 8002ce2:	d3ef      	bcc.n	8002cc4 <forward_prelu+0x46>
 8002ce4:	b001      	add	sp, #4
 8002ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002cec <forward_sign>:
 8002cec:	b430      	push	{r4, r5}
 8002cee:	6940      	ldr	r0, [r0, #20]
 8002cf0:	6802      	ldr	r2, [r0, #0]
 8002cf2:	6811      	ldr	r1, [r2, #0]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	680b      	ldr	r3, [r1, #0]
 8002cf8:	685c      	ldr	r4, [r3, #4]
 8002cfa:	6898      	ldr	r0, [r3, #8]
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	4344      	muls	r4, r0
 8002d00:	6918      	ldr	r0, [r3, #16]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	434c      	muls	r4, r1
 8002d06:	4344      	muls	r4, r0
 8002d08:	6898      	ldr	r0, [r3, #8]
 8002d0a:	6813      	ldr	r3, [r2, #0]
 8002d0c:	681d      	ldr	r5, [r3, #0]
 8002d0e:	68aa      	ldr	r2, [r5, #8]
 8002d10:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002d14:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002d18:	1f09      	subs	r1, r1, #4
 8002d1a:	1f1a      	subs	r2, r3, #4
 8002d1c:	4281      	cmp	r1, r0
 8002d1e:	d314      	bcc.n	8002d4a <forward_sign+0x5e>
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	ed91 0a00 	vldr	s0, [r1]
 8002d28:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	bfcc      	ite	gt
 8002d32:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 8002ea0 <.text_35>
 8002d36:	ee00 3a10 	vmovle	s0, r3
 8002d3a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d3e:	ed82 0a00 	vstr	s0, [r2]
 8002d42:	1f09      	subs	r1, r1, #4
 8002d44:	1f12      	subs	r2, r2, #4
 8002d46:	4281      	cmp	r1, r0
 8002d48:	d2ec      	bcs.n	8002d24 <forward_sign+0x38>
 8002d4a:	bc30      	pop	{r4, r5}
 8002d4c:	4770      	bx	lr
	...

08002d50 <forward_clip>:
 8002d50:	b430      	push	{r4, r5}
 8002d52:	6941      	ldr	r1, [r0, #20]
 8002d54:	680c      	ldr	r4, [r1, #0]
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	6815      	ldr	r5, [r2, #0]
 8002d5a:	686b      	ldr	r3, [r5, #4]
 8002d5c:	68a9      	ldr	r1, [r5, #8]
 8002d5e:	68ea      	ldr	r2, [r5, #12]
 8002d60:	6980      	ldr	r0, [r0, #24]
 8002d62:	434b      	muls	r3, r1
 8002d64:	6929      	ldr	r1, [r5, #16]
 8002d66:	4353      	muls	r3, r2
 8002d68:	434b      	muls	r3, r1
 8002d6a:	682a      	ldr	r2, [r5, #0]
 8002d6c:	6881      	ldr	r1, [r0, #8]
 8002d6e:	6890      	ldr	r0, [r2, #8]
 8002d70:	68e2      	ldr	r2, [r4, #12]
 8002d72:	ed91 0a00 	vldr	s0, [r1]
 8002d76:	6814      	ldr	r4, [r2, #0]
 8002d78:	edd1 0a01 	vldr	s1, [r1, #4]
 8002d7c:	6825      	ldr	r5, [r4, #0]
 8002d7e:	68aa      	ldr	r2, [r5, #8]
 8002d80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8002d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d88:	1f09      	subs	r1, r1, #4
 8002d8a:	1f1a      	subs	r2, r3, #4
 8002d8c:	4281      	cmp	r1, r0
 8002d8e:	d315      	bcc.n	8002dbc <forward_clip+0x6c>
 8002d90:	ed91 1a00 	vldr	s2, [r1]
 8002d94:	eeb4 0a41 	vcmp.f32	s0, s2
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	bf58      	it	pl
 8002d9e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002da2:	eeb4 1a60 	vcmp.f32	s2, s1
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	bf58      	it	pl
 8002dac:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002db0:	ed82 1a00 	vstr	s2, [r2]
 8002db4:	1f09      	subs	r1, r1, #4
 8002db6:	1f12      	subs	r2, r2, #4
 8002db8:	4281      	cmp	r1, r0
 8002dba:	d2e9      	bcs.n	8002d90 <forward_clip+0x40>
 8002dbc:	bc30      	pop	{r4, r5}
 8002dbe:	4770      	bx	lr

08002dc0 <forward_sigmoid>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	6940      	ldr	r0, [r0, #20]
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	6811      	ldr	r1, [r2, #0]
 8002dc8:	680b      	ldr	r3, [r1, #0]
 8002dca:	685e      	ldr	r6, [r3, #4]
 8002dcc:	6898      	ldr	r0, [r3, #8]
 8002dce:	68d9      	ldr	r1, [r3, #12]
 8002dd0:	4346      	muls	r6, r0
 8002dd2:	6918      	ldr	r0, [r3, #16]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689c      	ldr	r4, [r3, #8]
 8002dd8:	434e      	muls	r6, r1
 8002dda:	4346      	muls	r6, r0
 8002ddc:	68d1      	ldr	r1, [r2, #12]
 8002dde:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002de2:	1f05      	subs	r5, r0, #4
 8002de4:	6808      	ldr	r0, [r1, #0]
 8002de6:	6802      	ldr	r2, [r0, #0]
 8002de8:	6891      	ldr	r1, [r2, #8]
 8002dea:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002dee:	1f06      	subs	r6, r0, #4
 8002df0:	42a5      	cmp	r5, r4
 8002df2:	d313      	bcc.n	8002e1c <forward_sigmoid+0x5c>
 8002df4:	ed95 0a00 	vldr	s0, [r5]
 8002df8:	eeb1 0a40 	vneg.f32	s0, s0
 8002dfc:	f00d fa56 	bl	80102ac <expf>
 8002e00:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002e04:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002e08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e0c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002e10:	ed86 0a00 	vstr	s0, [r6]
 8002e14:	1f2d      	subs	r5, r5, #4
 8002e16:	1f36      	subs	r6, r6, #4
 8002e18:	42a5      	cmp	r5, r4
 8002e1a:	d2eb      	bcs.n	8002df4 <forward_sigmoid+0x34>
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e20 <forward_hard_sigmoid>:
 8002e20:	b430      	push	{r4, r5}
 8002e22:	6940      	ldr	r0, [r0, #20]
 8002e24:	6802      	ldr	r2, [r0, #0]
 8002e26:	6811      	ldr	r1, [r2, #0]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	680b      	ldr	r3, [r1, #0]
 8002e2c:	685c      	ldr	r4, [r3, #4]
 8002e2e:	6898      	ldr	r0, [r3, #8]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	4344      	muls	r4, r0
 8002e34:	6918      	ldr	r0, [r3, #16]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	434c      	muls	r4, r1
 8002e3a:	4344      	muls	r4, r0
 8002e3c:	6898      	ldr	r0, [r3, #8]
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	681d      	ldr	r5, [r3, #0]
 8002e42:	68aa      	ldr	r2, [r5, #8]
 8002e44:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002e48:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002e4c:	1f09      	subs	r1, r1, #4
 8002e4e:	1f1a      	subs	r2, r3, #4
 8002e50:	4281      	cmp	r1, r0
 8002e52:	d321      	bcc.n	8002e98 <forward_hard_sigmoid+0x78>
 8002e54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e58:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002ea4 <.text_36>
 8002e5c:	edd1 1a00 	vldr	s3, [r1]
 8002e60:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8002ea8 <.text_37>
 8002e64:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002e68:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002e6c:	eeb4 1a60 	vcmp.f32	s2, s1
 8002e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e74:	da08      	bge.n	8002e88 <forward_hard_sigmoid+0x68>
 8002e76:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	d505      	bpl.n	8002e8c <forward_hard_sigmoid+0x6c>
 8002e80:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8002e9c <.text_34>
 8002e84:	e002      	b.n	8002e8c <forward_hard_sigmoid+0x6c>
 8002e86:	bf00      	nop
 8002e88:	eeb0 1a40 	vmov.f32	s2, s0
 8002e8c:	ed82 1a00 	vstr	s2, [r2]
 8002e90:	1f09      	subs	r1, r1, #4
 8002e92:	1f12      	subs	r2, r2, #4
 8002e94:	4281      	cmp	r1, r0
 8002e96:	d2e1      	bcs.n	8002e5c <forward_hard_sigmoid+0x3c>
 8002e98:	bc30      	pop	{r4, r5}
 8002e9a:	4770      	bx	lr

08002e9c <.text_34>:
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <.text_35>:
 8002ea0:	00000001 	.word	0x00000001

08002ea4 <.text_36>:
 8002ea4:	3f800001 	.word	0x3f800001

08002ea8 <.text_37>:
 8002ea8:	3e4ccccd 	.word	0x3e4ccccd

08002eac <forward_exp>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	6940      	ldr	r0, [r0, #20]
 8002eb0:	6802      	ldr	r2, [r0, #0]
 8002eb2:	6811      	ldr	r1, [r2, #0]
 8002eb4:	680b      	ldr	r3, [r1, #0]
 8002eb6:	685e      	ldr	r6, [r3, #4]
 8002eb8:	6898      	ldr	r0, [r3, #8]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	4346      	muls	r6, r0
 8002ebe:	6918      	ldr	r0, [r3, #16]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689c      	ldr	r4, [r3, #8]
 8002ec4:	434e      	muls	r6, r1
 8002ec6:	4346      	muls	r6, r0
 8002ec8:	68d1      	ldr	r1, [r2, #12]
 8002eca:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002ece:	1f05      	subs	r5, r0, #4
 8002ed0:	6808      	ldr	r0, [r1, #0]
 8002ed2:	6802      	ldr	r2, [r0, #0]
 8002ed4:	6891      	ldr	r1, [r2, #8]
 8002ed6:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002eda:	1f06      	subs	r6, r0, #4
 8002edc:	42a5      	cmp	r5, r4
 8002ede:	d309      	bcc.n	8002ef4 <forward_exp+0x48>
 8002ee0:	ed95 0a00 	vldr	s0, [r5]
 8002ee4:	f00d f9e2 	bl	80102ac <expf>
 8002ee8:	ed86 0a00 	vstr	s0, [r6]
 8002eec:	1f2d      	subs	r5, r5, #4
 8002eee:	1f36      	subs	r6, r6, #4
 8002ef0:	42a5      	cmp	r5, r4
 8002ef2:	d2f5      	bcs.n	8002ee0 <forward_exp+0x34>
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ef8 <forward_sqrt>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	6940      	ldr	r0, [r0, #20]
 8002efc:	6802      	ldr	r2, [r0, #0]
 8002efe:	6811      	ldr	r1, [r2, #0]
 8002f00:	680b      	ldr	r3, [r1, #0]
 8002f02:	685e      	ldr	r6, [r3, #4]
 8002f04:	6898      	ldr	r0, [r3, #8]
 8002f06:	68d9      	ldr	r1, [r3, #12]
 8002f08:	4346      	muls	r6, r0
 8002f0a:	6918      	ldr	r0, [r3, #16]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689c      	ldr	r4, [r3, #8]
 8002f10:	434e      	muls	r6, r1
 8002f12:	4346      	muls	r6, r0
 8002f14:	68d1      	ldr	r1, [r2, #12]
 8002f16:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f1a:	1f05      	subs	r5, r0, #4
 8002f1c:	6808      	ldr	r0, [r1, #0]
 8002f1e:	6802      	ldr	r2, [r0, #0]
 8002f20:	6891      	ldr	r1, [r2, #8]
 8002f22:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f26:	1f06      	subs	r6, r0, #4
 8002f28:	42a5      	cmp	r5, r4
 8002f2a:	d309      	bcc.n	8002f40 <forward_sqrt+0x48>
 8002f2c:	ed95 0a00 	vldr	s0, [r5]
 8002f30:	f000 fd40 	bl	80039b4 <ai_math_sqrt>
 8002f34:	ed86 0a00 	vstr	s0, [r6]
 8002f38:	1f2d      	subs	r5, r5, #4
 8002f3a:	1f36      	subs	r6, r6, #4
 8002f3c:	42a5      	cmp	r5, r4
 8002f3e:	d2f5      	bcs.n	8002f2c <forward_sqrt+0x34>
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f44 <forward_soft_plus>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	6940      	ldr	r0, [r0, #20]
 8002f48:	6802      	ldr	r2, [r0, #0]
 8002f4a:	6811      	ldr	r1, [r2, #0]
 8002f4c:	680b      	ldr	r3, [r1, #0]
 8002f4e:	685e      	ldr	r6, [r3, #4]
 8002f50:	6898      	ldr	r0, [r3, #8]
 8002f52:	68d9      	ldr	r1, [r3, #12]
 8002f54:	4346      	muls	r6, r0
 8002f56:	6918      	ldr	r0, [r3, #16]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689c      	ldr	r4, [r3, #8]
 8002f5c:	434e      	muls	r6, r1
 8002f5e:	4346      	muls	r6, r0
 8002f60:	68d1      	ldr	r1, [r2, #12]
 8002f62:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f66:	1f05      	subs	r5, r0, #4
 8002f68:	6808      	ldr	r0, [r1, #0]
 8002f6a:	6802      	ldr	r2, [r0, #0]
 8002f6c:	6891      	ldr	r1, [r2, #8]
 8002f6e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f72:	1f06      	subs	r6, r0, #4
 8002f74:	42a5      	cmp	r5, r4
 8002f76:	d30f      	bcc.n	8002f98 <forward_soft_plus+0x54>
 8002f78:	ed95 0a00 	vldr	s0, [r5]
 8002f7c:	f00d f996 	bl	80102ac <expf>
 8002f80:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f84:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002f88:	f00d fa0a 	bl	80103a0 <logf>
 8002f8c:	ed86 0a00 	vstr	s0, [r6]
 8002f90:	1f2d      	subs	r5, r5, #4
 8002f92:	1f36      	subs	r6, r6, #4
 8002f94:	42a5      	cmp	r5, r4
 8002f96:	d2ef      	bcs.n	8002f78 <forward_soft_plus+0x34>
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f9c <forward_soft_sign>:
 8002f9c:	b430      	push	{r4, r5}
 8002f9e:	6940      	ldr	r0, [r0, #20]
 8002fa0:	6802      	ldr	r2, [r0, #0]
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	680b      	ldr	r3, [r1, #0]
 8002fa8:	685c      	ldr	r4, [r3, #4]
 8002faa:	6898      	ldr	r0, [r3, #8]
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	4344      	muls	r4, r0
 8002fb0:	6918      	ldr	r0, [r3, #16]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	434c      	muls	r4, r1
 8002fb6:	4344      	muls	r4, r0
 8002fb8:	6898      	ldr	r0, [r3, #8]
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	681d      	ldr	r5, [r3, #0]
 8002fbe:	68aa      	ldr	r2, [r5, #8]
 8002fc0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002fc4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002fc8:	1f09      	subs	r1, r1, #4
 8002fca:	1f1a      	subs	r2, r3, #4
 8002fcc:	4281      	cmp	r1, r0
 8002fce:	d30f      	bcc.n	8002ff0 <forward_soft_sign+0x54>
 8002fd0:	ed91 0a00 	vldr	s0, [r1]
 8002fd4:	eef0 0ac0 	vabs.f32	s1, s0
 8002fd8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fdc:	ee70 0a81 	vadd.f32	s1, s1, s2
 8002fe0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002fe4:	ed82 0a00 	vstr	s0, [r2]
 8002fe8:	1f09      	subs	r1, r1, #4
 8002fea:	1f12      	subs	r2, r2, #4
 8002fec:	4281      	cmp	r1, r0
 8002fee:	d2ef      	bcs.n	8002fd0 <forward_soft_sign+0x34>
 8002ff0:	bc30      	pop	{r4, r5}
 8002ff2:	4770      	bx	lr

08002ff4 <forward_tanh>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	6940      	ldr	r0, [r0, #20]
 8002ff8:	6802      	ldr	r2, [r0, #0]
 8002ffa:	6811      	ldr	r1, [r2, #0]
 8002ffc:	680b      	ldr	r3, [r1, #0]
 8002ffe:	685e      	ldr	r6, [r3, #4]
 8003000:	6898      	ldr	r0, [r3, #8]
 8003002:	68d9      	ldr	r1, [r3, #12]
 8003004:	4346      	muls	r6, r0
 8003006:	6918      	ldr	r0, [r3, #16]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689c      	ldr	r4, [r3, #8]
 800300c:	434e      	muls	r6, r1
 800300e:	4346      	muls	r6, r0
 8003010:	68d1      	ldr	r1, [r2, #12]
 8003012:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003016:	1f05      	subs	r5, r0, #4
 8003018:	6808      	ldr	r0, [r1, #0]
 800301a:	6802      	ldr	r2, [r0, #0]
 800301c:	6891      	ldr	r1, [r2, #8]
 800301e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003022:	1f06      	subs	r6, r0, #4
 8003024:	42a5      	cmp	r5, r4
 8003026:	d309      	bcc.n	800303c <forward_tanh+0x48>
 8003028:	ed95 0a00 	vldr	s0, [r5]
 800302c:	f00d f8ec 	bl	8010208 <tanhf>
 8003030:	ed86 0a00 	vstr	s0, [r6]
 8003034:	1f2d      	subs	r5, r5, #4
 8003036:	1f36      	subs	r6, r6, #4
 8003038:	42a5      	cmp	r5, r4
 800303a:	d2f5      	bcs.n	8003028 <forward_tanh+0x34>
 800303c:	bd70      	pop	{r4, r5, r6, pc}

0800303e <forward_sm>:
 800303e:	b570      	push	{r4, r5, r6, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	6940      	ldr	r0, [r0, #20]
 8003044:	6800      	ldr	r0, [r0, #0]
 8003046:	6801      	ldr	r1, [r0, #0]
 8003048:	68c0      	ldr	r0, [r0, #12]
 800304a:	680c      	ldr	r4, [r1, #0]
 800304c:	6805      	ldr	r5, [r0, #0]
 800304e:	68a2      	ldr	r2, [r4, #8]
 8003050:	68a8      	ldr	r0, [r5, #8]
 8003052:	9001      	str	r0, [sp, #4]
 8003054:	9200      	str	r2, [sp, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	6866      	ldr	r6, [r4, #4]
 800305a:	68e1      	ldr	r1, [r4, #12]
 800305c:	6920      	ldr	r0, [r4, #16]
 800305e:	6824      	ldr	r4, [r4, #0]
 8003060:	4372      	muls	r2, r6
 8003062:	434a      	muls	r2, r1
 8003064:	4342      	muls	r2, r0
 8003066:	6828      	ldr	r0, [r5, #0]
 8003068:	68a1      	ldr	r1, [r4, #8]
 800306a:	6880      	ldr	r0, [r0, #8]
 800306c:	f7ff fa52 	bl	8002514 <nl_func_sm_array_f32>
 8003070:	b002      	add	sp, #8
 8003072:	bd70      	pop	{r4, r5, r6, pc}

08003074 <forward_hardmax>:
 8003074:	b430      	push	{r4, r5}
 8003076:	6941      	ldr	r1, [r0, #20]
 8003078:	680c      	ldr	r4, [r1, #0]
 800307a:	6980      	ldr	r0, [r0, #24]
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	6883      	ldr	r3, [r0, #8]
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	6808      	ldr	r0, [r1, #0]
 8003084:	1d0a      	adds	r2, r1, #4
 8003086:	6881      	ldr	r1, [r0, #8]
 8003088:	68e0      	ldr	r0, [r4, #12]
 800308a:	6804      	ldr	r4, [r0, #0]
 800308c:	6825      	ldr	r5, [r4, #0]
 800308e:	68a8      	ldr	r0, [r5, #8]
 8003090:	bc30      	pop	{r4, r5}
 8003092:	f7ff bb69 	b.w	8002768 <nl_func_hardmax_array_f32>
	...

08003098 <ai_array_fmt_name>:
 8003098:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800309c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80030a0:	d062      	beq.n	8003168 <ai_array_fmt_name+0xd0>
 80030a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80030a6:	1a89      	subs	r1, r1, r2
 80030a8:	f000 8094 	beq.w	80031d4 <ai_array_fmt_name+0x13c>
 80030ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b0:	1a89      	subs	r1, r1, r2
 80030b2:	d071      	beq.n	8003198 <ai_array_fmt_name+0x100>
 80030b4:	1a89      	subs	r1, r1, r2
 80030b6:	d063      	beq.n	8003180 <ai_array_fmt_name+0xe8>
 80030b8:	1fc9      	subs	r1, r1, #7
 80030ba:	f000 808e 	beq.w	80031da <ai_array_fmt_name+0x142>
 80030be:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80030c2:	1a89      	subs	r1, r1, r2
 80030c4:	d05f      	beq.n	8003186 <ai_array_fmt_name+0xee>
 80030c6:	390f      	subs	r1, #15
 80030c8:	f000 808a 	beq.w	80031e0 <ai_array_fmt_name+0x148>
 80030cc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80030d0:	1a89      	subs	r1, r1, r2
 80030d2:	d05b      	beq.n	800318c <ai_array_fmt_name+0xf4>
 80030d4:	391f      	subs	r1, #31
 80030d6:	f000 8086 	beq.w	80031e6 <ai_array_fmt_name+0x14e>
 80030da:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80030de:	1a89      	subs	r1, r1, r2
 80030e0:	d057      	beq.n	8003192 <ai_array_fmt_name+0xfa>
 80030e2:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 80036b8 <.text_15>
 80030e6:	1a89      	subs	r1, r1, r2
 80030e8:	f000 808f 	beq.w	800320a <ai_array_fmt_name+0x172>
 80030ec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80030f0:	1a89      	subs	r1, r1, r2
 80030f2:	f000 8087 	beq.w	8003204 <ai_array_fmt_name+0x16c>
 80030f6:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 80036bc <.text_16>
 80030fa:	1a89      	subs	r1, r1, r2
 80030fc:	d05e      	beq.n	80031bc <ai_array_fmt_name+0x124>
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	1a89      	subs	r1, r1, r2
 8003104:	d057      	beq.n	80031b6 <ai_array_fmt_name+0x11e>
 8003106:	1a89      	subs	r1, r1, r2
 8003108:	d049      	beq.n	800319e <ai_array_fmt_name+0x106>
 800310a:	1fc9      	subs	r1, r1, #7
 800310c:	d059      	beq.n	80031c2 <ai_array_fmt_name+0x12a>
 800310e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003112:	1a89      	subs	r1, r1, r2
 8003114:	d046      	beq.n	80031a4 <ai_array_fmt_name+0x10c>
 8003116:	390f      	subs	r1, #15
 8003118:	d056      	beq.n	80031c8 <ai_array_fmt_name+0x130>
 800311a:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800311e:	1a89      	subs	r1, r1, r2
 8003120:	d043      	beq.n	80031aa <ai_array_fmt_name+0x112>
 8003122:	391f      	subs	r1, #31
 8003124:	d053      	beq.n	80031ce <ai_array_fmt_name+0x136>
 8003126:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800312a:	1a89      	subs	r1, r1, r2
 800312c:	d040      	beq.n	80031b0 <ai_array_fmt_name+0x118>
 800312e:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 80036b8 <.text_15>
 8003132:	1a89      	subs	r1, r1, r2
 8003134:	d063      	beq.n	80031fe <ai_array_fmt_name+0x166>
 8003136:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800313a:	1a89      	subs	r1, r1, r2
 800313c:	d05c      	beq.n	80031f8 <ai_array_fmt_name+0x160>
 800313e:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 80036c0 <.text_17>
 8003142:	1a89      	subs	r1, r1, r2
 8003144:	d019      	beq.n	800317a <ai_array_fmt_name+0xe2>
 8003146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800314a:	1a89      	subs	r1, r1, r2
 800314c:	d00f      	beq.n	800316e <ai_array_fmt_name+0xd6>
 800314e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003152:	1a89      	subs	r1, r1, r2
 8003154:	d00e      	beq.n	8003174 <ai_array_fmt_name+0xdc>
 8003156:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 80036c4 <.text_18>
 800315a:	1a89      	subs	r1, r1, r2
 800315c:	d049      	beq.n	80031f2 <ai_array_fmt_name+0x15a>
 800315e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003162:	1a89      	subs	r1, r1, r2
 8003164:	d042      	beq.n	80031ec <ai_array_fmt_name+0x154>
 8003166:	e053      	b.n	8003210 <ai_array_fmt_name+0x178>
 8003168:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 800316c:	4770      	bx	lr
 800316e:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8003172:	4770      	bx	lr
 8003174:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8003178:	4770      	bx	lr
 800317a:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 800317e:	4770      	bx	lr
 8003180:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8003184:	4770      	bx	lr
 8003186:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 800318a:	4770      	bx	lr
 800318c:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8003190:	4770      	bx	lr
 8003192:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8003196:	4770      	bx	lr
 8003198:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 800319c:	4770      	bx	lr
 800319e:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031a2:	4770      	bx	lr
 80031a4:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031a8:	4770      	bx	lr
 80031aa:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031ae:	4770      	bx	lr
 80031b0:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031b4:	4770      	bx	lr
 80031b6:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031ba:	4770      	bx	lr
 80031bc:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031c0:	4770      	bx	lr
 80031c2:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031c6:	4770      	bx	lr
 80031c8:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031cc:	4770      	bx	lr
 80031ce:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031d2:	4770      	bx	lr
 80031d4:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031d8:	4770      	bx	lr
 80031da:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031de:	4770      	bx	lr
 80031e0:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031e4:	4770      	bx	lr
 80031e6:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 80031ea:	4770      	bx	lr
 80031ec:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 80031f0:	4770      	bx	lr
 80031f2:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 80031f6:	4770      	bx	lr
 80031f8:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 80031fc:	4770      	bx	lr
 80031fe:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8003202:	4770      	bx	lr
 8003204:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8003208:	4770      	bx	lr
 800320a:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800320e:	4770      	bx	lr
 8003210:	f36f 000d 	bfc	r0, #0, #14
 8003214:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003218:	2840      	cmp	r0, #64	; 0x40
 800321a:	d009      	beq.n	8003230 <ai_array_fmt_name+0x198>
 800321c:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 80036c8 <.text_19>
 8003220:	4288      	cmp	r0, r1
 8003222:	d00b      	beq.n	800323c <ai_array_fmt_name+0x1a4>
 8003224:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 80036cc <.text_20>
 8003228:	4288      	cmp	r0, r1
 800322a:	d004      	beq.n	8003236 <ai_array_fmt_name+0x19e>
 800322c:	a07a      	add	r0, pc, #488	; (adr r0, 8003418 <.text_8>)
 800322e:	4770      	bx	lr
 8003230:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8003234:	4770      	bx	lr
 8003236:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 800323a:	4770      	bx	lr
 800323c:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8003240:	4770      	bx	lr

08003242 <ai_array_fmt_exported>:
 8003242:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003246:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800324a:	d068      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800324c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003250:	1a89      	subs	r1, r1, r2
 8003252:	d064      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003258:	1a89      	subs	r1, r1, r2
 800325a:	d062      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800325c:	1a89      	subs	r1, r1, r2
 800325e:	d05e      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003260:	1fc9      	subs	r1, r1, #7
 8003262:	d05c      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003264:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003268:	1a89      	subs	r1, r1, r2
 800326a:	d058      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800326c:	390f      	subs	r1, #15
 800326e:	d056      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003270:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003274:	1a89      	subs	r1, r1, r2
 8003276:	d054      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003278:	391f      	subs	r1, #31
 800327a:	d052      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800327c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003280:	1a89      	subs	r1, r1, r2
 8003282:	d04e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003284:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 80036b8 <.text_15>
 8003288:	1a89      	subs	r1, r1, r2
 800328a:	d04a      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800328c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003290:	1a89      	subs	r1, r1, r2
 8003292:	d046      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003294:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 80036bc <.text_16>
 8003298:	1a89      	subs	r1, r1, r2
 800329a:	d040      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	1a89      	subs	r1, r1, r2
 80032a2:	d03e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032a4:	1a89      	subs	r1, r1, r2
 80032a6:	d03a      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032a8:	1fc9      	subs	r1, r1, #7
 80032aa:	d038      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032ac:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80032b0:	1a89      	subs	r1, r1, r2
 80032b2:	d034      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032b4:	390f      	subs	r1, #15
 80032b6:	d032      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032b8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80032bc:	1a89      	subs	r1, r1, r2
 80032be:	d030      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032c0:	391f      	subs	r1, #31
 80032c2:	d02e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032c4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80032c8:	1a89      	subs	r1, r1, r2
 80032ca:	d02a      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032cc:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 80036b8 <.text_15>
 80032d0:	1a89      	subs	r1, r1, r2
 80032d2:	d026      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032d4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80032d8:	1a89      	subs	r1, r1, r2
 80032da:	d022      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032dc:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 80036c0 <.text_17>
 80032e0:	1a89      	subs	r1, r1, r2
 80032e2:	d01e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e8:	1a89      	subs	r1, r1, r2
 80032ea:	d018      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032f0:	1a89      	subs	r1, r1, r2
 80032f2:	d016      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032f4:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 80036c4 <.text_18>
 80032f8:	1a89      	subs	r1, r1, r2
 80032fa:	d012      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032fc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003300:	1a89      	subs	r1, r1, r2
 8003302:	d00e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003304:	f36f 000d 	bfc	r0, #0, #14
 8003308:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800330c:	2840      	cmp	r0, #64	; 0x40
 800330e:	bf1f      	itttt	ne
 8003310:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036c8 <.text_19>
 8003314:	4298      	cmpne	r0, r3
 8003316:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036cc <.text_20>
 800331a:	4298      	cmpne	r0, r3
 800331c:	d101      	bne.n	8003322 <ai_array_fmt_exported+0xe0>
 800331e:	2001      	movs	r0, #1
 8003320:	4770      	bx	lr
 8003322:	2000      	movs	r0, #0
 8003324:	4770      	bx	lr

08003326 <ai_array_fmt_valid>:
 8003326:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800332a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800332e:	d069      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003330:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003334:	1a89      	subs	r1, r1, r2
 8003336:	d065      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333c:	1a89      	subs	r1, r1, r2
 800333e:	d061      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003340:	1a89      	subs	r1, r1, r2
 8003342:	d05f      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003344:	1fc9      	subs	r1, r1, #7
 8003346:	d05d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003348:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800334c:	1a89      	subs	r1, r1, r2
 800334e:	d059      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003350:	390f      	subs	r1, #15
 8003352:	d057      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003354:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003358:	1a89      	subs	r1, r1, r2
 800335a:	d053      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800335c:	391f      	subs	r1, #31
 800335e:	d051      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003360:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003364:	1a89      	subs	r1, r1, r2
 8003366:	d04d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003368:	f8df 234c 	ldr.w	r2, [pc, #844]	; 80036b8 <.text_15>
 800336c:	1a89      	subs	r1, r1, r2
 800336e:	d049      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003370:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003374:	1a89      	subs	r1, r1, r2
 8003376:	d045      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003378:	f8df 2340 	ldr.w	r2, [pc, #832]	; 80036bc <.text_16>
 800337c:	1a89      	subs	r1, r1, r2
 800337e:	d041      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003384:	1a89      	subs	r1, r1, r2
 8003386:	d03d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003388:	1a89      	subs	r1, r1, r2
 800338a:	d03b      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800338c:	1fc9      	subs	r1, r1, #7
 800338e:	d039      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003390:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003394:	1a89      	subs	r1, r1, r2
 8003396:	d035      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003398:	390f      	subs	r1, #15
 800339a:	d033      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800339c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80033a0:	1a89      	subs	r1, r1, r2
 80033a2:	d02f      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033a4:	391f      	subs	r1, #31
 80033a6:	d02d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033a8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80033ac:	1a89      	subs	r1, r1, r2
 80033ae:	d029      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033b0:	f8df 2304 	ldr.w	r2, [pc, #772]	; 80036b8 <.text_15>
 80033b4:	1a89      	subs	r1, r1, r2
 80033b6:	d025      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033b8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033bc:	1a89      	subs	r1, r1, r2
 80033be:	d021      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033c0:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 80036c0 <.text_17>
 80033c4:	1a89      	subs	r1, r1, r2
 80033c6:	d01d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033cc:	1a89      	subs	r1, r1, r2
 80033ce:	d019      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033d4:	1a89      	subs	r1, r1, r2
 80033d6:	d015      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033d8:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 80036c4 <.text_18>
 80033dc:	1a89      	subs	r1, r1, r2
 80033de:	d011      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033e0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033e4:	1a89      	subs	r1, r1, r2
 80033e6:	bf1e      	ittt	ne
 80033e8:	f36f 000d 	bfcne	r0, #0, #14
 80033ec:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 80033f0:	2840      	cmpne	r0, #64	; 0x40
 80033f2:	d007      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033f4:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 80036c8 <.text_19>
 80033f8:	4298      	cmp	r0, r3
 80033fa:	bf1c      	itt	ne
 80033fc:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 80036cc <.text_20>
 8003400:	4298      	cmpne	r0, r3
 8003402:	d101      	bne.n	8003408 <ai_array_fmt_valid+0xe2>
 8003404:	2001      	movs	r0, #1
 8003406:	4770      	bx	lr
 8003408:	2000      	movs	r0, #0
 800340a:	4770      	bx	lr

0800340c <ai_array_fmt_get_formats>:
 800340c:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 80036d0 <.text_21>
 8003410:	6001      	str	r1, [r0, #0]
 8003412:	201c      	movs	r0, #28
 8003414:	4770      	bx	lr
	...

08003418 <.text_8>:
 8003418:	00000000 	.word	0x00000000

0800341c <ai_buffer_fmt_name>:
 800341c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003420:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003424:	d022      	beq.n	800346c <ai_buffer_fmt_name+0x50>
 8003426:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800342a:	1a89      	subs	r1, r1, r2
 800342c:	d039      	beq.n	80034a2 <ai_buffer_fmt_name+0x86>
 800342e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003432:	1a89      	subs	r1, r1, r2
 8003434:	d020      	beq.n	8003478 <ai_buffer_fmt_name+0x5c>
 8003436:	1fc9      	subs	r1, r1, #7
 8003438:	d036      	beq.n	80034a8 <ai_buffer_fmt_name+0x8c>
 800343a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800343e:	1a89      	subs	r1, r1, r2
 8003440:	d01d      	beq.n	800347e <ai_buffer_fmt_name+0x62>
 8003442:	390f      	subs	r1, #15
 8003444:	d033      	beq.n	80034ae <ai_buffer_fmt_name+0x92>
 8003446:	4aa3      	ldr	r2, [pc, #652]	; (80036d4 <.text_22>)
 8003448:	1a89      	subs	r1, r1, r2
 800344a:	d021      	beq.n	8003490 <ai_buffer_fmt_name+0x74>
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	1a89      	subs	r1, r1, r2
 8003452:	d017      	beq.n	8003484 <ai_buffer_fmt_name+0x68>
 8003454:	1fc9      	subs	r1, r1, #7
 8003456:	d01e      	beq.n	8003496 <ai_buffer_fmt_name+0x7a>
 8003458:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800345c:	1a89      	subs	r1, r1, r2
 800345e:	d014      	beq.n	800348a <ai_buffer_fmt_name+0x6e>
 8003460:	390f      	subs	r1, #15
 8003462:	d01b      	beq.n	800349c <ai_buffer_fmt_name+0x80>
 8003464:	4a9c      	ldr	r2, [pc, #624]	; (80036d8 <.text_23>)
 8003466:	1a89      	subs	r1, r1, r2
 8003468:	d003      	beq.n	8003472 <ai_buffer_fmt_name+0x56>
 800346a:	e023      	b.n	80034b4 <ai_buffer_fmt_name+0x98>
 800346c:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8003470:	4770      	bx	lr
 8003472:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8003476:	4770      	bx	lr
 8003478:	f20f 3094 	addw	r0, pc, #916	; 0x394
 800347c:	4770      	bx	lr
 800347e:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8003482:	4770      	bx	lr
 8003484:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8003488:	4770      	bx	lr
 800348a:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 800348e:	4770      	bx	lr
 8003490:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8003494:	4770      	bx	lr
 8003496:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 800349a:	4770      	bx	lr
 800349c:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80034a0:	4770      	bx	lr
 80034a2:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034a6:	4770      	bx	lr
 80034a8:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034ac:	4770      	bx	lr
 80034ae:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80034b2:	4770      	bx	lr
 80034b4:	0b80      	lsrs	r0, r0, #14
 80034b6:	0380      	lsls	r0, r0, #14
 80034b8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80034bc:	2840      	cmp	r0, #64	; 0x40
 80034be:	d007      	beq.n	80034d0 <ai_buffer_fmt_name+0xb4>
 80034c0:	4981      	ldr	r1, [pc, #516]	; (80036c8 <.text_19>)
 80034c2:	4288      	cmp	r0, r1
 80034c4:	d00a      	beq.n	80034dc <ai_buffer_fmt_name+0xc0>
 80034c6:	4981      	ldr	r1, [pc, #516]	; (80036cc <.text_20>)
 80034c8:	4288      	cmp	r0, r1
 80034ca:	d004      	beq.n	80034d6 <ai_buffer_fmt_name+0xba>
 80034cc:	a079      	add	r0, pc, #484	; (adr r0, 80036b4 <.text_14>)
 80034ce:	4770      	bx	lr
 80034d0:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 80034d4:	4770      	bx	lr
 80034d6:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 80034da:	4770      	bx	lr
 80034dc:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 80034e0:	4770      	bx	lr

080034e2 <ai_buffer_fmt_valid>:
 80034e2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80034e6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80034ea:	d02d      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80034f0:	1a89      	subs	r1, r1, r2
 80034f2:	d029      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f8:	1a89      	subs	r1, r1, r2
 80034fa:	d025      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034fc:	1fc9      	subs	r1, r1, #7
 80034fe:	d023      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003500:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003504:	1a89      	subs	r1, r1, r2
 8003506:	d01f      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003508:	390f      	subs	r1, #15
 800350a:	d01d      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800350c:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <.text_22>)
 800350e:	1a89      	subs	r1, r1, r2
 8003510:	d01a      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003516:	1a89      	subs	r1, r1, r2
 8003518:	d016      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800351a:	1fc9      	subs	r1, r1, #7
 800351c:	d014      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800351e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003522:	1a89      	subs	r1, r1, r2
 8003524:	d010      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003526:	390f      	subs	r1, #15
 8003528:	d00e      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800352a:	4a6b      	ldr	r2, [pc, #428]	; (80036d8 <.text_23>)
 800352c:	1a89      	subs	r1, r1, r2
 800352e:	bf1f      	itttt	ne
 8003530:	0b80      	lsrne	r0, r0, #14
 8003532:	0380      	lslne	r0, r0, #14
 8003534:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8003538:	2840      	cmpne	r0, #64	; 0x40
 800353a:	d005      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800353c:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <.text_19>)
 800353e:	4298      	cmp	r0, r3
 8003540:	bf1c      	itt	ne
 8003542:	4b62      	ldrne	r3, [pc, #392]	; (80036cc <.text_20>)
 8003544:	4298      	cmpne	r0, r3
 8003546:	d101      	bne.n	800354c <ai_buffer_fmt_valid+0x6a>
 8003548:	2001      	movs	r0, #1
 800354a:	4770      	bx	lr
 800354c:	2000      	movs	r0, #0
 800354e:	4770      	bx	lr

08003550 <ai_buffer_fmt_get_formats>:
 8003550:	4962      	ldr	r1, [pc, #392]	; (80036dc <.text_24>)
 8003552:	6001      	str	r1, [r0, #0]
 8003554:	200c      	movs	r0, #12
 8003556:	4770      	bx	lr

08003558 <ai_array_to_buffer_fmt>:
 8003558:	4601      	mov	r1, r0
 800355a:	2040      	movs	r0, #64	; 0x40
 800355c:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8003560:	2a02      	cmp	r2, #2
 8003562:	d104      	bne.n	800356e <ai_array_to_buffer_fmt+0x16>
 8003564:	485e      	ldr	r0, [pc, #376]	; (80036e0 <.text_25>)
 8003566:	4008      	ands	r0, r1
 8003568:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800356c:	e037      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 800356e:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8003572:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <.text_19>)
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	d02d      	beq.n	80035d4 <ai_array_to_buffer_fmt+0x7c>
 8003578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	d01b      	beq.n	80035b8 <ai_array_to_buffer_fmt+0x60>
 8003580:	1fd2      	subs	r2, r2, #7
 8003582:	d029      	beq.n	80035d8 <ai_array_to_buffer_fmt+0x80>
 8003584:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	d017      	beq.n	80035bc <ai_array_to_buffer_fmt+0x64>
 800358c:	3a0f      	subs	r2, #15
 800358e:	d025      	beq.n	80035dc <ai_array_to_buffer_fmt+0x84>
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <.text_22>)
 8003592:	1ad2      	subs	r2, r2, r3
 8003594:	d018      	beq.n	80035c8 <ai_array_to_buffer_fmt+0x70>
 8003596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359a:	1ad2      	subs	r2, r2, r3
 800359c:	d010      	beq.n	80035c0 <ai_array_to_buffer_fmt+0x68>
 800359e:	1fd2      	subs	r2, r2, #7
 80035a0:	d014      	beq.n	80035cc <ai_array_to_buffer_fmt+0x74>
 80035a2:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80035a6:	1ad2      	subs	r2, r2, r3
 80035a8:	d00c      	beq.n	80035c4 <ai_array_to_buffer_fmt+0x6c>
 80035aa:	3a0f      	subs	r2, #15
 80035ac:	d010      	beq.n	80035d0 <ai_array_to_buffer_fmt+0x78>
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <.text_23>)
 80035b0:	1ad2      	subs	r2, r2, r3
 80035b2:	d114      	bne.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035b4:	484b      	ldr	r0, [pc, #300]	; (80036e4 <.text_26>)
 80035b6:	e012      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035b8:	484b      	ldr	r0, [pc, #300]	; (80036e8 <.text_27>)
 80035ba:	e010      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035bc:	484b      	ldr	r0, [pc, #300]	; (80036ec <.text_28>)
 80035be:	e00e      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c0:	484b      	ldr	r0, [pc, #300]	; (80036f0 <.text_29>)
 80035c2:	e00c      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c4:	484b      	ldr	r0, [pc, #300]	; (80036f4 <.text_30>)
 80035c6:	e00a      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c8:	4840      	ldr	r0, [pc, #256]	; (80036cc <.text_20>)
 80035ca:	e008      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035cc:	484a      	ldr	r0, [pc, #296]	; (80036f8 <.text_31>)
 80035ce:	e006      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d0:	484a      	ldr	r0, [pc, #296]	; (80036fc <.text_32>)
 80035d2:	e004      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d4:	4618      	mov	r0, r3
 80035d6:	e002      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d8:	4849      	ldr	r0, [pc, #292]	; (8003700 <.text_33>)
 80035da:	e000      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035dc:	4849      	ldr	r0, [pc, #292]	; (8003704 <.text_34>)
 80035de:	004a      	lsls	r2, r1, #1
 80035e0:	bf4c      	ite	mi
 80035e2:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 80035e6:	2200      	movpl	r2, #0
 80035e8:	4310      	orrs	r0, r2
 80035ea:	008a      	lsls	r2, r1, #2
 80035ec:	bf4c      	ite	mi
 80035ee:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 80035f2:	2200      	movpl	r2, #0
 80035f4:	4310      	orrs	r0, r2
 80035f6:	0109      	lsls	r1, r1, #4
 80035f8:	bf4c      	ite	mi
 80035fa:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 80035fe:	2100      	movpl	r1, #0
 8003600:	4308      	orrs	r0, r1
 8003602:	4770      	bx	lr

08003604 <ai_buffer_to_array_fmt>:
 8003604:	4602      	mov	r2, r0
 8003606:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 800360a:	3840      	subs	r0, #64	; 0x40
 800360c:	d022      	beq.n	8003654 <ai_buffer_to_array_fmt+0x50>
 800360e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003612:	1a40      	subs	r0, r0, r1
 8003614:	d030      	beq.n	8003678 <ai_buffer_to_array_fmt+0x74>
 8003616:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800361a:	1a40      	subs	r0, r0, r1
 800361c:	d01e      	beq.n	800365c <ai_buffer_to_array_fmt+0x58>
 800361e:	1fc0      	subs	r0, r0, #7
 8003620:	d02c      	beq.n	800367c <ai_buffer_to_array_fmt+0x78>
 8003622:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8003626:	1a40      	subs	r0, r0, r1
 8003628:	d01a      	beq.n	8003660 <ai_buffer_to_array_fmt+0x5c>
 800362a:	380f      	subs	r0, #15
 800362c:	d028      	beq.n	8003680 <ai_buffer_to_array_fmt+0x7c>
 800362e:	4929      	ldr	r1, [pc, #164]	; (80036d4 <.text_22>)
 8003630:	1a40      	subs	r0, r0, r1
 8003632:	d01b      	beq.n	800366c <ai_buffer_to_array_fmt+0x68>
 8003634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003638:	1a40      	subs	r0, r0, r1
 800363a:	d013      	beq.n	8003664 <ai_buffer_to_array_fmt+0x60>
 800363c:	1fc0      	subs	r0, r0, #7
 800363e:	d017      	beq.n	8003670 <ai_buffer_to_array_fmt+0x6c>
 8003640:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8003644:	1a40      	subs	r0, r0, r1
 8003646:	d00f      	beq.n	8003668 <ai_buffer_to_array_fmt+0x64>
 8003648:	380f      	subs	r0, #15
 800364a:	d013      	beq.n	8003674 <ai_buffer_to_array_fmt+0x70>
 800364c:	4922      	ldr	r1, [pc, #136]	; (80036d8 <.text_23>)
 800364e:	1a40      	subs	r0, r0, r1
 8003650:	d002      	beq.n	8003658 <ai_buffer_to_array_fmt+0x54>
 8003652:	e017      	b.n	8003684 <ai_buffer_to_array_fmt+0x80>
 8003654:	2040      	movs	r0, #64	; 0x40
 8003656:	e01f      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003658:	4822      	ldr	r0, [pc, #136]	; (80036e4 <.text_26>)
 800365a:	e01d      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800365c:	4822      	ldr	r0, [pc, #136]	; (80036e8 <.text_27>)
 800365e:	e01b      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <.text_28>)
 8003662:	e019      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003664:	4822      	ldr	r0, [pc, #136]	; (80036f0 <.text_29>)
 8003666:	e017      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003668:	4822      	ldr	r0, [pc, #136]	; (80036f4 <.text_30>)
 800366a:	e015      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800366c:	4817      	ldr	r0, [pc, #92]	; (80036cc <.text_20>)
 800366e:	e013      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003670:	4821      	ldr	r0, [pc, #132]	; (80036f8 <.text_31>)
 8003672:	e011      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003674:	4821      	ldr	r0, [pc, #132]	; (80036fc <.text_32>)
 8003676:	e00f      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003678:	4813      	ldr	r0, [pc, #76]	; (80036c8 <.text_19>)
 800367a:	e00d      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800367c:	4820      	ldr	r0, [pc, #128]	; (8003700 <.text_33>)
 800367e:	e00b      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003680:	4820      	ldr	r0, [pc, #128]	; (8003704 <.text_34>)
 8003682:	e009      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003684:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8003688:	f3c2 000d 	ubfx	r0, r2, #0, #14
 800368c:	2900      	cmp	r1, #0
 800368e:	bf14      	ite	ne
 8003690:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8003694:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8003698:	0051      	lsls	r1, r2, #1
 800369a:	bf48      	it	mi
 800369c:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80036a0:	0091      	lsls	r1, r2, #2
 80036a2:	bf48      	it	mi
 80036a4:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80036a8:	0111      	lsls	r1, r2, #4
 80036aa:	bf48      	it	mi
 80036ac:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80036b0:	4770      	bx	lr
	...

080036b4 <.text_14>:
 80036b4:	00000000 	.word	0x00000000

080036b8 <.text_15>:
 80036b8:	002be80f 	.word	0x002be80f

080036bc <.text_16>:
 80036bc:	003bf7f1 	.word	0x003bf7f1

080036c0 <.text_17>:
 80036c0:	00b9fff1 	.word	0x00b9fff1

080036c4 <.text_18>:
 80036c4:	004df000 	.word	0x004df000

080036c8 <.text_19>:
 80036c8:	00040040 	.word	0x00040040

080036cc <.text_20>:
 80036cc:	00840040 	.word	0x00840040

080036d0 <.text_21>:
 80036d0:	0801154c 	.word	0x0801154c

080036d4 <.text_22>:
 80036d4:	007ff7f1 	.word	0x007ff7f1

080036d8 <.text_23>:
 80036d8:	00fe07f1 	.word	0x00fe07f1

080036dc <.text_24>:
 80036dc:	080115bc 	.word	0x080115bc

080036e0 <.text_25>:
 80036e0:	00803fff 	.word	0x00803fff

080036e4 <.text_26>:
 80036e4:	01821040 	.word	0x01821040

080036e8 <.text_27>:
 80036e8:	00040440 	.word	0x00040440

080036ec <.text_28>:
 80036ec:	00040840 	.word	0x00040840

080036f0 <.text_29>:
 80036f0:	00840440 	.word	0x00840440

080036f4 <.text_30>:
 80036f4:	00840840 	.word	0x00840840

080036f8 <.text_31>:
 80036f8:	00840447 	.word	0x00840447

080036fc <.text_32>:
 80036fc:	0084084f 	.word	0x0084084f

08003700 <.text_33>:
 8003700:	00040447 	.word	0x00040447

08003704 <.text_34>:
 8003704:	0004084f 	.word	0x0004084f

08003708 <ai_array_get_byte_size>:
 8003708:	b909      	cbnz	r1, 800370e <ai_array_get_byte_size+0x6>
 800370a:	2000      	movs	r0, #0
 800370c:	4770      	bx	lr
 800370e:	11c2      	asrs	r2, r0, #7
 8003710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003714:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8003718:	189b      	adds	r3, r3, r2
 800371a:	4359      	muls	r1, r3
 800371c:	1dc9      	adds	r1, r1, #7
 800371e:	08c9      	lsrs	r1, r1, #3
 8003720:	1543      	asrs	r3, r0, #21
 8003722:	00c9      	lsls	r1, r1, #3
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	ea4f 4c60 	mov.w	ip, r0, asr #17
 800372c:	40d9      	lsrs	r1, r3
 800372e:	f00c 0c0f 	and.w	ip, ip, #15
 8003732:	f1bc 0f04 	cmp.w	ip, #4
 8003736:	d00a      	beq.n	800374e <ai_array_get_byte_size+0x46>
 8003738:	f1bc 0f08 	cmp.w	ip, #8
 800373c:	bf02      	ittt	eq
 800373e:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8003742:	1882      	addeq	r2, r0, r2
 8003744:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8003748:	1dc9      	adds	r1, r1, #7
 800374a:	08c8      	lsrs	r0, r1, #3
 800374c:	4770      	bx	lr
 800374e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8003752:	1882      	adds	r2, r0, r2
 8003754:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003758:	1dc9      	adds	r1, r1, #7
 800375a:	08c8      	lsrs	r0, r1, #3
 800375c:	4770      	bx	lr

0800375e <ai_array_get_data_byte_size>:
 800375e:	b909      	cbnz	r1, 8003764 <ai_array_get_data_byte_size+0x6>
 8003760:	2000      	movs	r0, #0
 8003762:	4770      	bx	lr
 8003764:	11c2      	asrs	r2, r0, #7
 8003766:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800376a:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800376e:	189a      	adds	r2, r3, r2
 8003770:	4351      	muls	r1, r2
 8003772:	1dc9      	adds	r1, r1, #7
 8003774:	08c9      	lsrs	r1, r1, #3
 8003776:	1540      	asrs	r0, r0, #21
 8003778:	00c9      	lsls	r1, r1, #3
 800377a:	f000 0003 	and.w	r0, r0, #3
 800377e:	40c1      	lsrs	r1, r0
 8003780:	1dc9      	adds	r1, r1, #7
 8003782:	08c8      	lsrs	r0, r1, #3
 8003784:	4770      	bx	lr

08003786 <ai_array_get_elems_from_size>:
 8003786:	b909      	cbnz	r1, 800378c <ai_array_get_elems_from_size+0x6>
 8003788:	2000      	movs	r0, #0
 800378a:	4770      	bx	lr
 800378c:	1442      	asrs	r2, r0, #17
 800378e:	00c9      	lsls	r1, r1, #3
 8003790:	f002 020f 	and.w	r2, r2, #15
 8003794:	2a04      	cmp	r2, #4
 8003796:	d002      	beq.n	800379e <ai_array_get_elems_from_size+0x18>
 8003798:	2a08      	cmp	r2, #8
 800379a:	d009      	beq.n	80037b0 <ai_array_get_elems_from_size+0x2a>
 800379c:	e010      	b.n	80037c0 <ai_array_get_elems_from_size+0x3a>
 800379e:	11c3      	asrs	r3, r0, #7
 80037a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a4:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80037a8:	18d2      	adds	r2, r2, r3
 80037aa:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80037ae:	e007      	b.n	80037c0 <ai_array_get_elems_from_size+0x3a>
 80037b0:	11c2      	asrs	r2, r0, #7
 80037b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037b6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80037ba:	189a      	adds	r2, r3, r2
 80037bc:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 80037c0:	1542      	asrs	r2, r0, #21
 80037c2:	f002 0203 	and.w	r2, r2, #3
 80037c6:	4091      	lsls	r1, r2
 80037c8:	1dc9      	adds	r1, r1, #7
 80037ca:	11c2      	asrs	r2, r0, #7
 80037cc:	08c9      	lsrs	r1, r1, #3
 80037ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037d2:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80037d6:	00c9      	lsls	r1, r1, #3
 80037d8:	1880      	adds	r0, r0, r2
 80037da:	fbb1 f0f0 	udiv	r0, r1, r0
 80037de:	4770      	bx	lr

080037e0 <.text_38>:
 80037e0:	5f544d46 	.word	0x5f544d46
 80037e4:	454e4f4e 	.word	0x454e4f4e
 80037e8:	00000000 	.word	0x00000000

080037ec <.text_39>:
 80037ec:	5f544d46 	.word	0x5f544d46
 80037f0:	414f4c46 	.word	0x414f4c46
 80037f4:	0054      	.short	0x0054
	...

080037f8 <.text_40>:
 80037f8:	5f544d46 	.word	0x5f544d46
 80037fc:	414f4c46 	.word	0x414f4c46
 8003800:	00343654 	.word	0x00343654

08003804 <.text_41>:
 8003804:	5f544d46 	.word	0x5f544d46
 8003808:	414f4c46 	.word	0x414f4c46
 800380c:	00363154 	.word	0x00363154

08003810 <.text_42>:
 8003810:	5f544d46 	.word	0x5f544d46
 8003814:	3855      	.short	0x3855
	...

08003818 <.text_43>:
 8003818:	5f544d46 	.word	0x5f544d46
 800381c:	00363155 	.word	0x00363155

08003820 <.text_44>:
 8003820:	5f544d46 	.word	0x5f544d46
 8003824:	00323355 	.word	0x00323355

08003828 <.text_45>:
 8003828:	5f544d46 	.word	0x5f544d46
 800382c:	00343655 	.word	0x00343655

08003830 <.text_46>:
 8003830:	5f544d46 	.word	0x5f544d46
 8003834:	3455      	.short	0x3455
	...

08003838 <.text_47>:
 8003838:	5f544d46 	.word	0x5f544d46
 800383c:	3853      	.short	0x3853
	...

08003840 <.text_48>:
 8003840:	5f544d46 	.word	0x5f544d46
 8003844:	00363153 	.word	0x00363153

08003848 <.text_49>:
 8003848:	5f544d46 	.word	0x5f544d46
 800384c:	00323353 	.word	0x00323353

08003850 <.text_50>:
 8003850:	5f544d46 	.word	0x5f544d46
 8003854:	00343653 	.word	0x00343653

08003858 <.text_51>:
 8003858:	5f544d46 	.word	0x5f544d46
 800385c:	3453      	.short	0x3453
	...

08003860 <.text_52>:
 8003860:	5f544d46 	.word	0x5f544d46
 8003864:	0051      	.short	0x0051
	...

08003868 <.text_53>:
 8003868:	5f544d46 	.word	0x5f544d46
 800386c:	3751      	.short	0x3751
	...

08003870 <.text_54>:
 8003870:	5f544d46 	.word	0x5f544d46
 8003874:	00353151 	.word	0x00353151

08003878 <.text_55>:
 8003878:	5f544d46 	.word	0x5f544d46
 800387c:	00313351 	.word	0x00313351

08003880 <.text_56>:
 8003880:	5f544d46 	.word	0x5f544d46
 8003884:	5155      	.short	0x5155
	...

08003888 <.text_57>:
 8003888:	5f544d46 	.word	0x5f544d46
 800388c:	00375155 	.word	0x00375155

08003890 <.text_58>:
 8003890:	5f544d46 	.word	0x5f544d46
 8003894:	35315155 	.word	0x35315155
 8003898:	00000000 	.word	0x00000000

0800389c <.text_59>:
 800389c:	5f544d46 	.word	0x5f544d46
 80038a0:	31335155 	.word	0x31335155
 80038a4:	00000000 	.word	0x00000000

080038a8 <.text_60>:
 80038a8:	5f544d46 	.word	0x5f544d46
 80038ac:	3454554c 	.word	0x3454554c
 80038b0:	4f4c465f 	.word	0x4f4c465f
 80038b4:	5441      	.short	0x5441
	...

080038b8 <.text_61>:
 80038b8:	5f544d46 	.word	0x5f544d46
 80038bc:	3854554c 	.word	0x3854554c
 80038c0:	4f4c465f 	.word	0x4f4c465f
 80038c4:	5441      	.short	0x5441
	...

080038c8 <.text_62>:
 80038c8:	5f544d46 	.word	0x5f544d46
 80038cc:	3454554c 	.word	0x3454554c
 80038d0:	3531515f 	.word	0x3531515f
 80038d4:	00000000 	.word	0x00000000

080038d8 <.text_63>:
 80038d8:	5f544d46 	.word	0x5f544d46
 80038dc:	3854554c 	.word	0x3854554c
 80038e0:	3531515f 	.word	0x3531515f
 80038e4:	00000000 	.word	0x00000000

080038e8 <.text_64>:
 80038e8:	5f544d46 	.word	0x5f544d46
 80038ec:	3454554c 	.word	0x3454554c
 80038f0:	3151555f 	.word	0x3151555f
 80038f4:	0035      	.short	0x0035
	...

080038f8 <.text_65>:
 80038f8:	5f544d46 	.word	0x5f544d46
 80038fc:	3854554c 	.word	0x3854554c
 8003900:	3151555f 	.word	0x3151555f
 8003904:	0035      	.short	0x0035
	...

08003908 <.text_66>:
 8003908:	415f4941 	.word	0x415f4941
 800390c:	59415252 	.word	0x59415252
 8003910:	524f465f 	.word	0x524f465f
 8003914:	5f54414d 	.word	0x5f54414d
 8003918:	454e4f4e 	.word	0x454e4f4e
 800391c:	00000000 	.word	0x00000000

08003920 <.text_67>:
 8003920:	415f4941 	.word	0x415f4941
 8003924:	59415252 	.word	0x59415252
 8003928:	524f465f 	.word	0x524f465f
 800392c:	5f54414d 	.word	0x5f54414d
 8003930:	0051      	.short	0x0051
	...

08003934 <.text_68>:
 8003934:	415f4941 	.word	0x415f4941
 8003938:	59415252 	.word	0x59415252
 800393c:	524f465f 	.word	0x524f465f
 8003940:	5f54414d 	.word	0x5f54414d
 8003944:	5155      	.short	0x5155
	...

08003948 <.text_69>:
 8003948:	425f4941 	.word	0x425f4941
 800394c:	45464655 	.word	0x45464655
 8003950:	4f465f52 	.word	0x4f465f52
 8003954:	54414d52 	.word	0x54414d52
 8003958:	4e4f4e5f 	.word	0x4e4f4e5f
 800395c:	0045      	.short	0x0045
	...

08003960 <.text_70>:
 8003960:	425f4941 	.word	0x425f4941
 8003964:	45464655 	.word	0x45464655
 8003968:	4f465f52 	.word	0x4f465f52
 800396c:	54414d52 	.word	0x54414d52
 8003970:	515f      	.short	0x515f
	...

08003974 <.text_71>:
 8003974:	425f4941 	.word	0x425f4941
 8003978:	45464655 	.word	0x45464655
 800397c:	4f465f52 	.word	0x4f465f52
 8003980:	54414d52 	.word	0x54414d52
 8003984:	0051555f 	.word	0x0051555f

08003988 <ai_math_dot_array>:
 8003988:	b530      	push	{r4, r5, lr}
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	b081      	sub	sp, #4
 8003990:	4611      	mov	r1, r2
 8003992:	461a      	mov	r2, r3
 8003994:	2500      	movs	r5, #0
 8003996:	9500      	str	r5, [sp, #0]
 8003998:	466b      	mov	r3, sp
 800399a:	f000 ffb5 	bl	8004908 <arm_dot_prod_f32>
 800399e:	ed94 0a00 	vldr	s0, [r4]
 80039a2:	eddd 0a00 	vldr	s1, [sp]
 80039a6:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039aa:	edc4 0a00 	vstr	s1, [r4]
 80039ae:	b001      	add	sp, #4
 80039b0:	bd30      	pop	{r4, r5, pc}
	...

080039b4 <ai_math_sqrt>:
 80039b4:	eef0 0a40 	vmov.f32	s1, s0
 80039b8:	eef5 0a40 	vcmp.f32	s1, #0.0
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003a64 <.text_12>
 80039c4:	db01      	blt.n	80039ca <ai_math_sqrt+0x16>
 80039c6:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80039ca:	4770      	bx	lr

080039cc <ai_math_exp>:
 80039cc:	f00c bc6e 	b.w	80102ac <expf>

080039d0 <ai_math_pow>:
 80039d0:	f00c bd5c 	b.w	801048c <powf>

080039d4 <ai_math_tanh>:
 80039d4:	f00c bc18 	b.w	8010208 <tanhf>

080039d8 <ai_math_relu>:
 80039d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	bf48      	it	mi
 80039e2:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8003a64 <.text_12>
 80039e6:	4770      	bx	lr

080039e8 <ai_math_prelu>:
 80039e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	bf48      	it	mi
 80039f2:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 80039f6:	4770      	bx	lr

080039f8 <ai_math_sigmoid>:
 80039f8:	b500      	push	{lr}
 80039fa:	b081      	sub	sp, #4
 80039fc:	eeb1 0a40 	vneg.f32	s0, s0
 8003a00:	f00c fc54 	bl	80102ac <expf>
 8003a04:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a08:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a10:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8003a14:	b001      	add	sp, #4
 8003a16:	bd00      	pop	{pc}

08003a18 <ai_math_hard_sigmoid>:
 8003a18:	eef0 0a40 	vmov.f32	s1, s0
 8003a1c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003a68 <.text_13>
 8003a20:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003a24:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003a28:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003a6c <.text_14>
 8003a2c:	eeb4 0a60 	vcmp.f32	s0, s1
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	da07      	bge.n	8003a46 <ai_math_hard_sigmoid+0x2e>
 8003a36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	d504      	bpl.n	8003a4a <ai_math_hard_sigmoid+0x32>
 8003a40:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003a64 <.text_12>
 8003a44:	4770      	bx	lr
 8003a46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a4a:	4770      	bx	lr

08003a4c <ai_math_sign>:
 8003a4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	bfcc      	ite	gt
 8003a56:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8003a70 <.text_15>
 8003a5a:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8003a74 <.text_16>
 8003a5e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003a62:	4770      	bx	lr

08003a64 <.text_12>:
 8003a64:	00000000 	.word	0x00000000

08003a68 <.text_13>:
 8003a68:	3e4ccccd 	.word	0x3e4ccccd

08003a6c <.text_14>:
 8003a6c:	3f800001 	.word	0x3f800001

08003a70 <.text_15>:
 8003a70:	00000001 	.word	0x00000001

08003a74 <.text_16>:
 8003a74:	ffffffff 	.word	0xffffffff

08003a78 <ai_sum>:
 8003a78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a7c:	4770      	bx	lr

08003a7e <ai_sub>:
 8003a7e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003a82:	4770      	bx	lr

08003a84 <ai_mul>:
 8003a84:	ee20 0a20 	vmul.f32	s0, s0, s1
 8003a88:	4770      	bx	lr

08003a8a <ai_div>:
 8003a8a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a8e:	4770      	bx	lr

08003a90 <ai_max>:
 8003a90:	eef4 0a40 	vcmp.f32	s1, s0
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	bf58      	it	pl
 8003a9a:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003a9e:	4770      	bx	lr

08003aa0 <ai_min>:
 8003aa0:	eeb4 0a60 	vcmp.f32	s0, s1
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bf58      	it	pl
 8003aaa:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003aae:	4770      	bx	lr

08003ab0 <__aeabi_memset>:
 8003ab0:	b470      	push	{r4, r5, r6}
 8003ab2:	0784      	lsls	r4, r0, #30
 8003ab4:	d046      	beq.n	8003b44 <__aeabi_memset+0x94>
 8003ab6:	1e4c      	subs	r4, r1, #1
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d041      	beq.n	8003b40 <__aeabi_memset+0x90>
 8003abc:	b2d5      	uxtb	r5, r2
 8003abe:	4603      	mov	r3, r0
 8003ac0:	e002      	b.n	8003ac8 <__aeabi_memset+0x18>
 8003ac2:	1e61      	subs	r1, r4, #1
 8003ac4:	b3e4      	cbz	r4, 8003b40 <__aeabi_memset+0x90>
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	f803 5b01 	strb.w	r5, [r3], #1
 8003acc:	0799      	lsls	r1, r3, #30
 8003ace:	d1f8      	bne.n	8003ac2 <__aeabi_memset+0x12>
 8003ad0:	2c03      	cmp	r4, #3
 8003ad2:	d92e      	bls.n	8003b32 <__aeabi_memset+0x82>
 8003ad4:	b2d5      	uxtb	r5, r2
 8003ad6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003ada:	2c0f      	cmp	r4, #15
 8003adc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003ae0:	d919      	bls.n	8003b16 <__aeabi_memset+0x66>
 8003ae2:	4626      	mov	r6, r4
 8003ae4:	f103 0110 	add.w	r1, r3, #16
 8003ae8:	3e10      	subs	r6, #16
 8003aea:	2e0f      	cmp	r6, #15
 8003aec:	f841 5c10 	str.w	r5, [r1, #-16]
 8003af0:	f841 5c0c 	str.w	r5, [r1, #-12]
 8003af4:	f841 5c08 	str.w	r5, [r1, #-8]
 8003af8:	f841 5c04 	str.w	r5, [r1, #-4]
 8003afc:	f101 0110 	add.w	r1, r1, #16
 8003b00:	d8f2      	bhi.n	8003ae8 <__aeabi_memset+0x38>
 8003b02:	f1a4 0110 	sub.w	r1, r4, #16
 8003b06:	f021 010f 	bic.w	r1, r1, #15
 8003b0a:	f004 040f 	and.w	r4, r4, #15
 8003b0e:	3110      	adds	r1, #16
 8003b10:	2c03      	cmp	r4, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	d90d      	bls.n	8003b32 <__aeabi_memset+0x82>
 8003b16:	461e      	mov	r6, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	3904      	subs	r1, #4
 8003b1c:	2903      	cmp	r1, #3
 8003b1e:	f846 5b04 	str.w	r5, [r6], #4
 8003b22:	d8fa      	bhi.n	8003b1a <__aeabi_memset+0x6a>
 8003b24:	1f21      	subs	r1, r4, #4
 8003b26:	f021 0103 	bic.w	r1, r1, #3
 8003b2a:	3104      	adds	r1, #4
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f004 0403 	and.w	r4, r4, #3
 8003b32:	b12c      	cbz	r4, 8003b40 <__aeabi_memset+0x90>
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	441c      	add	r4, r3
 8003b38:	f803 2b01 	strb.w	r2, [r3], #1
 8003b3c:	42a3      	cmp	r3, r4
 8003b3e:	d1fb      	bne.n	8003b38 <__aeabi_memset+0x88>
 8003b40:	bc70      	pop	{r4, r5, r6}
 8003b42:	4770      	bx	lr
 8003b44:	460c      	mov	r4, r1
 8003b46:	4603      	mov	r3, r0
 8003b48:	e7c2      	b.n	8003ad0 <__aeabi_memset+0x20>

08003b4a <strlen>:
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	d1fb      	bne.n	8003b4c <strlen+0x2>
 8003b54:	1a18      	subs	r0, r3, r0
 8003b56:	3801      	subs	r0, #1
 8003b58:	4770      	bx	lr
 8003b5a:	0000      	movs	r0, r0
 8003b5c:	0000      	movs	r0, r0
	...

08003b60 <memchr>:
 8003b60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003b64:	2a10      	cmp	r2, #16
 8003b66:	db2b      	blt.n	8003bc0 <memchr+0x60>
 8003b68:	f010 0f07 	tst.w	r0, #7
 8003b6c:	d008      	beq.n	8003b80 <memchr+0x20>
 8003b6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003b72:	3a01      	subs	r2, #1
 8003b74:	428b      	cmp	r3, r1
 8003b76:	d02d      	beq.n	8003bd4 <memchr+0x74>
 8003b78:	f010 0f07 	tst.w	r0, #7
 8003b7c:	b342      	cbz	r2, 8003bd0 <memchr+0x70>
 8003b7e:	d1f6      	bne.n	8003b6e <memchr+0xe>
 8003b80:	b4f0      	push	{r4, r5, r6, r7}
 8003b82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003b86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8003b8a:	f022 0407 	bic.w	r4, r2, #7
 8003b8e:	f07f 0700 	mvns.w	r7, #0
 8003b92:	2300      	movs	r3, #0
 8003b94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003b98:	3c08      	subs	r4, #8
 8003b9a:	ea85 0501 	eor.w	r5, r5, r1
 8003b9e:	ea86 0601 	eor.w	r6, r6, r1
 8003ba2:	fa85 f547 	uadd8	r5, r5, r7
 8003ba6:	faa3 f587 	sel	r5, r3, r7
 8003baa:	fa86 f647 	uadd8	r6, r6, r7
 8003bae:	faa5 f687 	sel	r6, r5, r7
 8003bb2:	b98e      	cbnz	r6, 8003bd8 <memchr+0x78>
 8003bb4:	d1ee      	bne.n	8003b94 <memchr+0x34>
 8003bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8003bb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003bbc:	f002 0207 	and.w	r2, r2, #7
 8003bc0:	b132      	cbz	r2, 8003bd0 <memchr+0x70>
 8003bc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	ea83 0301 	eor.w	r3, r3, r1
 8003bcc:	b113      	cbz	r3, 8003bd4 <memchr+0x74>
 8003bce:	d1f8      	bne.n	8003bc2 <memchr+0x62>
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	4770      	bx	lr
 8003bd4:	3801      	subs	r0, #1
 8003bd6:	4770      	bx	lr
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	bf06      	itte	eq
 8003bdc:	4635      	moveq	r5, r6
 8003bde:	3803      	subeq	r0, #3
 8003be0:	3807      	subne	r0, #7
 8003be2:	f015 0f01 	tst.w	r5, #1
 8003be6:	d107      	bne.n	8003bf8 <memchr+0x98>
 8003be8:	3001      	adds	r0, #1
 8003bea:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003bee:	bf02      	ittt	eq
 8003bf0:	3001      	addeq	r0, #1
 8003bf2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003bf6:	3001      	addeq	r0, #1
 8003bf8:	bcf0      	pop	{r4, r5, r6, r7}
 8003bfa:	3801      	subs	r0, #1
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop

08003c00 <__aeabi_drsub>:
 8003c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003c04:	e002      	b.n	8003c0c <__adddf3>
 8003c06:	bf00      	nop

08003c08 <__aeabi_dsub>:
 8003c08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003c0c <__adddf3>:
 8003c0c:	b530      	push	{r4, r5, lr}
 8003c0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003c12:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003c16:	ea94 0f05 	teq	r4, r5
 8003c1a:	bf08      	it	eq
 8003c1c:	ea90 0f02 	teqeq	r0, r2
 8003c20:	bf1f      	itttt	ne
 8003c22:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003c26:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003c2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003c2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003c32:	f000 80e2 	beq.w	8003dfa <__adddf3+0x1ee>
 8003c36:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003c3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003c3e:	bfb8      	it	lt
 8003c40:	426d      	neglt	r5, r5
 8003c42:	dd0c      	ble.n	8003c5e <__adddf3+0x52>
 8003c44:	442c      	add	r4, r5
 8003c46:	ea80 0202 	eor.w	r2, r0, r2
 8003c4a:	ea81 0303 	eor.w	r3, r1, r3
 8003c4e:	ea82 0000 	eor.w	r0, r2, r0
 8003c52:	ea83 0101 	eor.w	r1, r3, r1
 8003c56:	ea80 0202 	eor.w	r2, r0, r2
 8003c5a:	ea81 0303 	eor.w	r3, r1, r3
 8003c5e:	2d36      	cmp	r5, #54	; 0x36
 8003c60:	bf88      	it	hi
 8003c62:	bd30      	pophi	{r4, r5, pc}
 8003c64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003c68:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003c6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003c70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003c74:	d002      	beq.n	8003c7c <__adddf3+0x70>
 8003c76:	4240      	negs	r0, r0
 8003c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003c7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003c80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003c84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003c88:	d002      	beq.n	8003c90 <__adddf3+0x84>
 8003c8a:	4252      	negs	r2, r2
 8003c8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003c90:	ea94 0f05 	teq	r4, r5
 8003c94:	f000 80a7 	beq.w	8003de6 <__adddf3+0x1da>
 8003c98:	f1a4 0401 	sub.w	r4, r4, #1
 8003c9c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003ca0:	db0d      	blt.n	8003cbe <__adddf3+0xb2>
 8003ca2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003ca6:	fa22 f205 	lsr.w	r2, r2, r5
 8003caa:	1880      	adds	r0, r0, r2
 8003cac:	f141 0100 	adc.w	r1, r1, #0
 8003cb0:	fa03 f20e 	lsl.w	r2, r3, lr
 8003cb4:	1880      	adds	r0, r0, r2
 8003cb6:	fa43 f305 	asr.w	r3, r3, r5
 8003cba:	4159      	adcs	r1, r3
 8003cbc:	e00e      	b.n	8003cdc <__adddf3+0xd0>
 8003cbe:	f1a5 0520 	sub.w	r5, r5, #32
 8003cc2:	f10e 0e20 	add.w	lr, lr, #32
 8003cc6:	2a01      	cmp	r2, #1
 8003cc8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003ccc:	bf28      	it	cs
 8003cce:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003cd2:	fa43 f305 	asr.w	r3, r3, r5
 8003cd6:	18c0      	adds	r0, r0, r3
 8003cd8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003cdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003ce0:	d507      	bpl.n	8003cf2 <__adddf3+0xe6>
 8003ce2:	f04f 0e00 	mov.w	lr, #0
 8003ce6:	f1dc 0c00 	rsbs	ip, ip, #0
 8003cea:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003cee:	eb6e 0101 	sbc.w	r1, lr, r1
 8003cf2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003cf6:	d31b      	bcc.n	8003d30 <__adddf3+0x124>
 8003cf8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003cfc:	d30c      	bcc.n	8003d18 <__adddf3+0x10c>
 8003cfe:	0849      	lsrs	r1, r1, #1
 8003d00:	ea5f 0030 	movs.w	r0, r0, rrx
 8003d04:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003d08:	f104 0401 	add.w	r4, r4, #1
 8003d0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003d10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003d14:	f080 809a 	bcs.w	8003e4c <__adddf3+0x240>
 8003d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003d1c:	bf08      	it	eq
 8003d1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003d22:	f150 0000 	adcs.w	r0, r0, #0
 8003d26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003d2a:	ea41 0105 	orr.w	r1, r1, r5
 8003d2e:	bd30      	pop	{r4, r5, pc}
 8003d30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003d34:	4140      	adcs	r0, r0
 8003d36:	eb41 0101 	adc.w	r1, r1, r1
 8003d3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d3e:	f1a4 0401 	sub.w	r4, r4, #1
 8003d42:	d1e9      	bne.n	8003d18 <__adddf3+0x10c>
 8003d44:	f091 0f00 	teq	r1, #0
 8003d48:	bf04      	itt	eq
 8003d4a:	4601      	moveq	r1, r0
 8003d4c:	2000      	moveq	r0, #0
 8003d4e:	fab1 f381 	clz	r3, r1
 8003d52:	bf08      	it	eq
 8003d54:	3320      	addeq	r3, #32
 8003d56:	f1a3 030b 	sub.w	r3, r3, #11
 8003d5a:	f1b3 0220 	subs.w	r2, r3, #32
 8003d5e:	da0c      	bge.n	8003d7a <__adddf3+0x16e>
 8003d60:	320c      	adds	r2, #12
 8003d62:	dd08      	ble.n	8003d76 <__adddf3+0x16a>
 8003d64:	f102 0c14 	add.w	ip, r2, #20
 8003d68:	f1c2 020c 	rsb	r2, r2, #12
 8003d6c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003d70:	fa21 f102 	lsr.w	r1, r1, r2
 8003d74:	e00c      	b.n	8003d90 <__adddf3+0x184>
 8003d76:	f102 0214 	add.w	r2, r2, #20
 8003d7a:	bfd8      	it	le
 8003d7c:	f1c2 0c20 	rsble	ip, r2, #32
 8003d80:	fa01 f102 	lsl.w	r1, r1, r2
 8003d84:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003d88:	bfdc      	itt	le
 8003d8a:	ea41 010c 	orrle.w	r1, r1, ip
 8003d8e:	4090      	lslle	r0, r2
 8003d90:	1ae4      	subs	r4, r4, r3
 8003d92:	bfa2      	ittt	ge
 8003d94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003d98:	4329      	orrge	r1, r5
 8003d9a:	bd30      	popge	{r4, r5, pc}
 8003d9c:	ea6f 0404 	mvn.w	r4, r4
 8003da0:	3c1f      	subs	r4, #31
 8003da2:	da1c      	bge.n	8003dde <__adddf3+0x1d2>
 8003da4:	340c      	adds	r4, #12
 8003da6:	dc0e      	bgt.n	8003dc6 <__adddf3+0x1ba>
 8003da8:	f104 0414 	add.w	r4, r4, #20
 8003dac:	f1c4 0220 	rsb	r2, r4, #32
 8003db0:	fa20 f004 	lsr.w	r0, r0, r4
 8003db4:	fa01 f302 	lsl.w	r3, r1, r2
 8003db8:	ea40 0003 	orr.w	r0, r0, r3
 8003dbc:	fa21 f304 	lsr.w	r3, r1, r4
 8003dc0:	ea45 0103 	orr.w	r1, r5, r3
 8003dc4:	bd30      	pop	{r4, r5, pc}
 8003dc6:	f1c4 040c 	rsb	r4, r4, #12
 8003dca:	f1c4 0220 	rsb	r2, r4, #32
 8003dce:	fa20 f002 	lsr.w	r0, r0, r2
 8003dd2:	fa01 f304 	lsl.w	r3, r1, r4
 8003dd6:	ea40 0003 	orr.w	r0, r0, r3
 8003dda:	4629      	mov	r1, r5
 8003ddc:	bd30      	pop	{r4, r5, pc}
 8003dde:	fa21 f004 	lsr.w	r0, r1, r4
 8003de2:	4629      	mov	r1, r5
 8003de4:	bd30      	pop	{r4, r5, pc}
 8003de6:	f094 0f00 	teq	r4, #0
 8003dea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003dee:	bf06      	itte	eq
 8003df0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003df4:	3401      	addeq	r4, #1
 8003df6:	3d01      	subne	r5, #1
 8003df8:	e74e      	b.n	8003c98 <__adddf3+0x8c>
 8003dfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003dfe:	bf18      	it	ne
 8003e00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003e04:	d029      	beq.n	8003e5a <__adddf3+0x24e>
 8003e06:	ea94 0f05 	teq	r4, r5
 8003e0a:	bf08      	it	eq
 8003e0c:	ea90 0f02 	teqeq	r0, r2
 8003e10:	d005      	beq.n	8003e1e <__adddf3+0x212>
 8003e12:	ea54 0c00 	orrs.w	ip, r4, r0
 8003e16:	bf04      	itt	eq
 8003e18:	4619      	moveq	r1, r3
 8003e1a:	4610      	moveq	r0, r2
 8003e1c:	bd30      	pop	{r4, r5, pc}
 8003e1e:	ea91 0f03 	teq	r1, r3
 8003e22:	bf1e      	ittt	ne
 8003e24:	2100      	movne	r1, #0
 8003e26:	2000      	movne	r0, #0
 8003e28:	bd30      	popne	{r4, r5, pc}
 8003e2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003e2e:	d105      	bne.n	8003e3c <__adddf3+0x230>
 8003e30:	0040      	lsls	r0, r0, #1
 8003e32:	4149      	adcs	r1, r1
 8003e34:	bf28      	it	cs
 8003e36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003e3a:	bd30      	pop	{r4, r5, pc}
 8003e3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003e40:	bf3c      	itt	cc
 8003e42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003e46:	bd30      	popcc	{r4, r5, pc}
 8003e48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003e4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003e50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	bd30      	pop	{r4, r5, pc}
 8003e5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003e5e:	bf1a      	itte	ne
 8003e60:	4619      	movne	r1, r3
 8003e62:	4610      	movne	r0, r2
 8003e64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003e68:	bf1c      	itt	ne
 8003e6a:	460b      	movne	r3, r1
 8003e6c:	4602      	movne	r2, r0
 8003e6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003e72:	bf06      	itte	eq
 8003e74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003e78:	ea91 0f03 	teqeq	r1, r3
 8003e7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003e80:	bd30      	pop	{r4, r5, pc}
 8003e82:	bf00      	nop

08003e84 <__aeabi_ui2d>:
 8003e84:	f090 0f00 	teq	r0, #0
 8003e88:	bf04      	itt	eq
 8003e8a:	2100      	moveq	r1, #0
 8003e8c:	4770      	bxeq	lr
 8003e8e:	b530      	push	{r4, r5, lr}
 8003e90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003e94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003e98:	f04f 0500 	mov.w	r5, #0
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	e750      	b.n	8003d44 <__adddf3+0x138>
 8003ea2:	bf00      	nop

08003ea4 <__aeabi_i2d>:
 8003ea4:	f090 0f00 	teq	r0, #0
 8003ea8:	bf04      	itt	eq
 8003eaa:	2100      	moveq	r1, #0
 8003eac:	4770      	bxeq	lr
 8003eae:	b530      	push	{r4, r5, lr}
 8003eb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003eb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003eb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003ebc:	bf48      	it	mi
 8003ebe:	4240      	negmi	r0, r0
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	e73e      	b.n	8003d44 <__adddf3+0x138>
 8003ec6:	bf00      	nop

08003ec8 <__aeabi_f2d>:
 8003ec8:	0042      	lsls	r2, r0, #1
 8003eca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003ece:	ea4f 0131 	mov.w	r1, r1, rrx
 8003ed2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003ed6:	bf1f      	itttt	ne
 8003ed8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003edc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003ee0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003ee4:	4770      	bxne	lr
 8003ee6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8003eea:	bf08      	it	eq
 8003eec:	4770      	bxeq	lr
 8003eee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003ef2:	bf04      	itt	eq
 8003ef4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003ef8:	4770      	bxeq	lr
 8003efa:	b530      	push	{r4, r5, lr}
 8003efc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003f00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003f04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003f08:	e71c      	b.n	8003d44 <__adddf3+0x138>
 8003f0a:	bf00      	nop

08003f0c <__aeabi_ul2d>:
 8003f0c:	ea50 0201 	orrs.w	r2, r0, r1
 8003f10:	bf08      	it	eq
 8003f12:	4770      	bxeq	lr
 8003f14:	b530      	push	{r4, r5, lr}
 8003f16:	f04f 0500 	mov.w	r5, #0
 8003f1a:	e00a      	b.n	8003f32 <__aeabi_l2d+0x16>

08003f1c <__aeabi_l2d>:
 8003f1c:	ea50 0201 	orrs.w	r2, r0, r1
 8003f20:	bf08      	it	eq
 8003f22:	4770      	bxeq	lr
 8003f24:	b530      	push	{r4, r5, lr}
 8003f26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003f2a:	d502      	bpl.n	8003f32 <__aeabi_l2d+0x16>
 8003f2c:	4240      	negs	r0, r0
 8003f2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003f32:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003f36:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003f3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003f3e:	f43f aed8 	beq.w	8003cf2 <__adddf3+0xe6>
 8003f42:	f04f 0203 	mov.w	r2, #3
 8003f46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003f4a:	bf18      	it	ne
 8003f4c:	3203      	addne	r2, #3
 8003f4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003f52:	bf18      	it	ne
 8003f54:	3203      	addne	r2, #3
 8003f56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003f5a:	f1c2 0320 	rsb	r3, r2, #32
 8003f5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003f62:	fa20 f002 	lsr.w	r0, r0, r2
 8003f66:	fa01 fe03 	lsl.w	lr, r1, r3
 8003f6a:	ea40 000e 	orr.w	r0, r0, lr
 8003f6e:	fa21 f102 	lsr.w	r1, r1, r2
 8003f72:	4414      	add	r4, r2
 8003f74:	e6bd      	b.n	8003cf2 <__adddf3+0xe6>
 8003f76:	bf00      	nop

08003f78 <__aeabi_dmul>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003f7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003f82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003f86:	bf1d      	ittte	ne
 8003f88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003f8c:	ea94 0f0c 	teqne	r4, ip
 8003f90:	ea95 0f0c 	teqne	r5, ip
 8003f94:	f000 f8de 	bleq	8004154 <__aeabi_dmul+0x1dc>
 8003f98:	442c      	add	r4, r5
 8003f9a:	ea81 0603 	eor.w	r6, r1, r3
 8003f9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003fa2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003fa6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003faa:	bf18      	it	ne
 8003fac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003fb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb8:	d038      	beq.n	800402c <__aeabi_dmul+0xb4>
 8003fba:	fba0 ce02 	umull	ip, lr, r0, r2
 8003fbe:	f04f 0500 	mov.w	r5, #0
 8003fc2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003fc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003fca:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003fce:	f04f 0600 	mov.w	r6, #0
 8003fd2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003fd6:	f09c 0f00 	teq	ip, #0
 8003fda:	bf18      	it	ne
 8003fdc:	f04e 0e01 	orrne.w	lr, lr, #1
 8003fe0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003fe4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003fe8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003fec:	d204      	bcs.n	8003ff8 <__aeabi_dmul+0x80>
 8003fee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003ff2:	416d      	adcs	r5, r5
 8003ff4:	eb46 0606 	adc.w	r6, r6, r6
 8003ff8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003ffc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004000:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004004:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004008:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800400c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004010:	bf88      	it	hi
 8004012:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004016:	d81e      	bhi.n	8004056 <__aeabi_dmul+0xde>
 8004018:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800401c:	bf08      	it	eq
 800401e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004022:	f150 0000 	adcs.w	r0, r0, #0
 8004026:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004030:	ea46 0101 	orr.w	r1, r6, r1
 8004034:	ea40 0002 	orr.w	r0, r0, r2
 8004038:	ea81 0103 	eor.w	r1, r1, r3
 800403c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004040:	bfc2      	ittt	gt
 8004042:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004046:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800404a:	bd70      	popgt	{r4, r5, r6, pc}
 800404c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004050:	f04f 0e00 	mov.w	lr, #0
 8004054:	3c01      	subs	r4, #1
 8004056:	f300 80ab 	bgt.w	80041b0 <__aeabi_dmul+0x238>
 800405a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800405e:	bfde      	ittt	le
 8004060:	2000      	movle	r0, #0
 8004062:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004066:	bd70      	pople	{r4, r5, r6, pc}
 8004068:	f1c4 0400 	rsb	r4, r4, #0
 800406c:	3c20      	subs	r4, #32
 800406e:	da35      	bge.n	80040dc <__aeabi_dmul+0x164>
 8004070:	340c      	adds	r4, #12
 8004072:	dc1b      	bgt.n	80040ac <__aeabi_dmul+0x134>
 8004074:	f104 0414 	add.w	r4, r4, #20
 8004078:	f1c4 0520 	rsb	r5, r4, #32
 800407c:	fa00 f305 	lsl.w	r3, r0, r5
 8004080:	fa20 f004 	lsr.w	r0, r0, r4
 8004084:	fa01 f205 	lsl.w	r2, r1, r5
 8004088:	ea40 0002 	orr.w	r0, r0, r2
 800408c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004090:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004094:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004098:	fa21 f604 	lsr.w	r6, r1, r4
 800409c:	eb42 0106 	adc.w	r1, r2, r6
 80040a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80040a4:	bf08      	it	eq
 80040a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	f1c4 040c 	rsb	r4, r4, #12
 80040b0:	f1c4 0520 	rsb	r5, r4, #32
 80040b4:	fa00 f304 	lsl.w	r3, r0, r4
 80040b8:	fa20 f005 	lsr.w	r0, r0, r5
 80040bc:	fa01 f204 	lsl.w	r2, r1, r4
 80040c0:	ea40 0002 	orr.w	r0, r0, r2
 80040c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80040c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80040cc:	f141 0100 	adc.w	r1, r1, #0
 80040d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80040d4:	bf08      	it	eq
 80040d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f1c4 0520 	rsb	r5, r4, #32
 80040e0:	fa00 f205 	lsl.w	r2, r0, r5
 80040e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80040e8:	fa20 f304 	lsr.w	r3, r0, r4
 80040ec:	fa01 f205 	lsl.w	r2, r1, r5
 80040f0:	ea43 0302 	orr.w	r3, r3, r2
 80040f4:	fa21 f004 	lsr.w	r0, r1, r4
 80040f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80040fc:	fa21 f204 	lsr.w	r2, r1, r4
 8004100:	ea20 0002 	bic.w	r0, r0, r2
 8004104:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004108:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800410c:	bf08      	it	eq
 800410e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f094 0f00 	teq	r4, #0
 8004118:	d10f      	bne.n	800413a <__aeabi_dmul+0x1c2>
 800411a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800411e:	0040      	lsls	r0, r0, #1
 8004120:	eb41 0101 	adc.w	r1, r1, r1
 8004124:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004128:	bf08      	it	eq
 800412a:	3c01      	subeq	r4, #1
 800412c:	d0f7      	beq.n	800411e <__aeabi_dmul+0x1a6>
 800412e:	ea41 0106 	orr.w	r1, r1, r6
 8004132:	f095 0f00 	teq	r5, #0
 8004136:	bf18      	it	ne
 8004138:	4770      	bxne	lr
 800413a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800413e:	0052      	lsls	r2, r2, #1
 8004140:	eb43 0303 	adc.w	r3, r3, r3
 8004144:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004148:	bf08      	it	eq
 800414a:	3d01      	subeq	r5, #1
 800414c:	d0f7      	beq.n	800413e <__aeabi_dmul+0x1c6>
 800414e:	ea43 0306 	orr.w	r3, r3, r6
 8004152:	4770      	bx	lr
 8004154:	ea94 0f0c 	teq	r4, ip
 8004158:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800415c:	bf18      	it	ne
 800415e:	ea95 0f0c 	teqne	r5, ip
 8004162:	d00c      	beq.n	800417e <__aeabi_dmul+0x206>
 8004164:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004168:	bf18      	it	ne
 800416a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800416e:	d1d1      	bne.n	8004114 <__aeabi_dmul+0x19c>
 8004170:	ea81 0103 	eor.w	r1, r1, r3
 8004174:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	bd70      	pop	{r4, r5, r6, pc}
 800417e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004182:	bf06      	itte	eq
 8004184:	4610      	moveq	r0, r2
 8004186:	4619      	moveq	r1, r3
 8004188:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800418c:	d019      	beq.n	80041c2 <__aeabi_dmul+0x24a>
 800418e:	ea94 0f0c 	teq	r4, ip
 8004192:	d102      	bne.n	800419a <__aeabi_dmul+0x222>
 8004194:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004198:	d113      	bne.n	80041c2 <__aeabi_dmul+0x24a>
 800419a:	ea95 0f0c 	teq	r5, ip
 800419e:	d105      	bne.n	80041ac <__aeabi_dmul+0x234>
 80041a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80041a4:	bf1c      	itt	ne
 80041a6:	4610      	movne	r0, r2
 80041a8:	4619      	movne	r1, r3
 80041aa:	d10a      	bne.n	80041c2 <__aeabi_dmul+0x24a>
 80041ac:	ea81 0103 	eor.w	r1, r1, r3
 80041b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80041b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80041b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80041c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80041ca:	bd70      	pop	{r4, r5, r6, pc}

080041cc <__aeabi_ddiv>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80041d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80041d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80041da:	bf1d      	ittte	ne
 80041dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80041e0:	ea94 0f0c 	teqne	r4, ip
 80041e4:	ea95 0f0c 	teqne	r5, ip
 80041e8:	f000 f8a7 	bleq	800433a <__aeabi_ddiv+0x16e>
 80041ec:	eba4 0405 	sub.w	r4, r4, r5
 80041f0:	ea81 0e03 	eor.w	lr, r1, r3
 80041f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80041f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80041fc:	f000 8088 	beq.w	8004310 <__aeabi_ddiv+0x144>
 8004200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004204:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004208:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800420c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004210:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004214:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004218:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800421c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004220:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004224:	429d      	cmp	r5, r3
 8004226:	bf08      	it	eq
 8004228:	4296      	cmpeq	r6, r2
 800422a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800422e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004232:	d202      	bcs.n	800423a <__aeabi_ddiv+0x6e>
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	ea4f 0232 	mov.w	r2, r2, rrx
 800423a:	1ab6      	subs	r6, r6, r2
 800423c:	eb65 0503 	sbc.w	r5, r5, r3
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	ea4f 0232 	mov.w	r2, r2, rrx
 8004246:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800424a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800424e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004252:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004256:	bf22      	ittt	cs
 8004258:	1ab6      	subcs	r6, r6, r2
 800425a:	4675      	movcs	r5, lr
 800425c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	ea4f 0232 	mov.w	r2, r2, rrx
 8004266:	ebb6 0e02 	subs.w	lr, r6, r2
 800426a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800426e:	bf22      	ittt	cs
 8004270:	1ab6      	subcs	r6, r6, r2
 8004272:	4675      	movcs	r5, lr
 8004274:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	ea4f 0232 	mov.w	r2, r2, rrx
 800427e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004282:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004286:	bf22      	ittt	cs
 8004288:	1ab6      	subcs	r6, r6, r2
 800428a:	4675      	movcs	r5, lr
 800428c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	ea4f 0232 	mov.w	r2, r2, rrx
 8004296:	ebb6 0e02 	subs.w	lr, r6, r2
 800429a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800429e:	bf22      	ittt	cs
 80042a0:	1ab6      	subcs	r6, r6, r2
 80042a2:	4675      	movcs	r5, lr
 80042a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80042a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80042ac:	d018      	beq.n	80042e0 <__aeabi_ddiv+0x114>
 80042ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80042b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80042b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80042ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80042be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80042c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80042c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80042ca:	d1c0      	bne.n	800424e <__aeabi_ddiv+0x82>
 80042cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80042d0:	d10b      	bne.n	80042ea <__aeabi_ddiv+0x11e>
 80042d2:	ea41 0100 	orr.w	r1, r1, r0
 80042d6:	f04f 0000 	mov.w	r0, #0
 80042da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80042de:	e7b6      	b.n	800424e <__aeabi_ddiv+0x82>
 80042e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80042e4:	bf04      	itt	eq
 80042e6:	4301      	orreq	r1, r0
 80042e8:	2000      	moveq	r0, #0
 80042ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80042ee:	bf88      	it	hi
 80042f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80042f4:	f63f aeaf 	bhi.w	8004056 <__aeabi_dmul+0xde>
 80042f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80042fc:	bf04      	itt	eq
 80042fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004306:	f150 0000 	adcs.w	r0, r0, #0
 800430a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004314:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004318:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800431c:	bfc2      	ittt	gt
 800431e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004322:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004326:	bd70      	popgt	{r4, r5, r6, pc}
 8004328:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800432c:	f04f 0e00 	mov.w	lr, #0
 8004330:	3c01      	subs	r4, #1
 8004332:	e690      	b.n	8004056 <__aeabi_dmul+0xde>
 8004334:	ea45 0e06 	orr.w	lr, r5, r6
 8004338:	e68d      	b.n	8004056 <__aeabi_dmul+0xde>
 800433a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800433e:	ea94 0f0c 	teq	r4, ip
 8004342:	bf08      	it	eq
 8004344:	ea95 0f0c 	teqeq	r5, ip
 8004348:	f43f af3b 	beq.w	80041c2 <__aeabi_dmul+0x24a>
 800434c:	ea94 0f0c 	teq	r4, ip
 8004350:	d10a      	bne.n	8004368 <__aeabi_ddiv+0x19c>
 8004352:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004356:	f47f af34 	bne.w	80041c2 <__aeabi_dmul+0x24a>
 800435a:	ea95 0f0c 	teq	r5, ip
 800435e:	f47f af25 	bne.w	80041ac <__aeabi_dmul+0x234>
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	e72c      	b.n	80041c2 <__aeabi_dmul+0x24a>
 8004368:	ea95 0f0c 	teq	r5, ip
 800436c:	d106      	bne.n	800437c <__aeabi_ddiv+0x1b0>
 800436e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004372:	f43f aefd 	beq.w	8004170 <__aeabi_dmul+0x1f8>
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	e722      	b.n	80041c2 <__aeabi_dmul+0x24a>
 800437c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004380:	bf18      	it	ne
 8004382:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004386:	f47f aec5 	bne.w	8004114 <__aeabi_dmul+0x19c>
 800438a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800438e:	f47f af0d 	bne.w	80041ac <__aeabi_dmul+0x234>
 8004392:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004396:	f47f aeeb 	bne.w	8004170 <__aeabi_dmul+0x1f8>
 800439a:	e712      	b.n	80041c2 <__aeabi_dmul+0x24a>

0800439c <__gedf2>:
 800439c:	f04f 3cff 	mov.w	ip, #4294967295
 80043a0:	e006      	b.n	80043b0 <__cmpdf2+0x4>
 80043a2:	bf00      	nop

080043a4 <__ledf2>:
 80043a4:	f04f 0c01 	mov.w	ip, #1
 80043a8:	e002      	b.n	80043b0 <__cmpdf2+0x4>
 80043aa:	bf00      	nop

080043ac <__cmpdf2>:
 80043ac:	f04f 0c01 	mov.w	ip, #1
 80043b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80043b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80043b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80043bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80043c0:	bf18      	it	ne
 80043c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80043c6:	d01b      	beq.n	8004400 <__cmpdf2+0x54>
 80043c8:	b001      	add	sp, #4
 80043ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80043ce:	bf0c      	ite	eq
 80043d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80043d4:	ea91 0f03 	teqne	r1, r3
 80043d8:	bf02      	ittt	eq
 80043da:	ea90 0f02 	teqeq	r0, r2
 80043de:	2000      	moveq	r0, #0
 80043e0:	4770      	bxeq	lr
 80043e2:	f110 0f00 	cmn.w	r0, #0
 80043e6:	ea91 0f03 	teq	r1, r3
 80043ea:	bf58      	it	pl
 80043ec:	4299      	cmppl	r1, r3
 80043ee:	bf08      	it	eq
 80043f0:	4290      	cmpeq	r0, r2
 80043f2:	bf2c      	ite	cs
 80043f4:	17d8      	asrcs	r0, r3, #31
 80043f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80043fa:	f040 0001 	orr.w	r0, r0, #1
 80043fe:	4770      	bx	lr
 8004400:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004404:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004408:	d102      	bne.n	8004410 <__cmpdf2+0x64>
 800440a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800440e:	d107      	bne.n	8004420 <__cmpdf2+0x74>
 8004410:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004418:	d1d6      	bne.n	80043c8 <__cmpdf2+0x1c>
 800441a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800441e:	d0d3      	beq.n	80043c8 <__cmpdf2+0x1c>
 8004420:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <__aeabi_cdrcmple>:
 8004428:	4684      	mov	ip, r0
 800442a:	4610      	mov	r0, r2
 800442c:	4662      	mov	r2, ip
 800442e:	468c      	mov	ip, r1
 8004430:	4619      	mov	r1, r3
 8004432:	4663      	mov	r3, ip
 8004434:	e000      	b.n	8004438 <__aeabi_cdcmpeq>
 8004436:	bf00      	nop

08004438 <__aeabi_cdcmpeq>:
 8004438:	b501      	push	{r0, lr}
 800443a:	f7ff ffb7 	bl	80043ac <__cmpdf2>
 800443e:	2800      	cmp	r0, #0
 8004440:	bf48      	it	mi
 8004442:	f110 0f00 	cmnmi.w	r0, #0
 8004446:	bd01      	pop	{r0, pc}

08004448 <__aeabi_dcmpeq>:
 8004448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800444c:	f7ff fff4 	bl	8004438 <__aeabi_cdcmpeq>
 8004450:	bf0c      	ite	eq
 8004452:	2001      	moveq	r0, #1
 8004454:	2000      	movne	r0, #0
 8004456:	f85d fb08 	ldr.w	pc, [sp], #8
 800445a:	bf00      	nop

0800445c <__aeabi_dcmplt>:
 800445c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004460:	f7ff ffea 	bl	8004438 <__aeabi_cdcmpeq>
 8004464:	bf34      	ite	cc
 8004466:	2001      	movcc	r0, #1
 8004468:	2000      	movcs	r0, #0
 800446a:	f85d fb08 	ldr.w	pc, [sp], #8
 800446e:	bf00      	nop

08004470 <__aeabi_dcmple>:
 8004470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004474:	f7ff ffe0 	bl	8004438 <__aeabi_cdcmpeq>
 8004478:	bf94      	ite	ls
 800447a:	2001      	movls	r0, #1
 800447c:	2000      	movhi	r0, #0
 800447e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004482:	bf00      	nop

08004484 <__aeabi_dcmpge>:
 8004484:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004488:	f7ff ffce 	bl	8004428 <__aeabi_cdrcmple>
 800448c:	bf94      	ite	ls
 800448e:	2001      	movls	r0, #1
 8004490:	2000      	movhi	r0, #0
 8004492:	f85d fb08 	ldr.w	pc, [sp], #8
 8004496:	bf00      	nop

08004498 <__aeabi_dcmpgt>:
 8004498:	f84d ed08 	str.w	lr, [sp, #-8]!
 800449c:	f7ff ffc4 	bl	8004428 <__aeabi_cdrcmple>
 80044a0:	bf34      	ite	cc
 80044a2:	2001      	movcc	r0, #1
 80044a4:	2000      	movcs	r0, #0
 80044a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80044aa:	bf00      	nop

080044ac <__aeabi_dcmpun>:
 80044ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80044b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80044b4:	d102      	bne.n	80044bc <__aeabi_dcmpun+0x10>
 80044b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80044ba:	d10a      	bne.n	80044d2 <__aeabi_dcmpun+0x26>
 80044bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80044c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80044c4:	d102      	bne.n	80044cc <__aeabi_dcmpun+0x20>
 80044c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80044ca:	d102      	bne.n	80044d2 <__aeabi_dcmpun+0x26>
 80044cc:	f04f 0000 	mov.w	r0, #0
 80044d0:	4770      	bx	lr
 80044d2:	f04f 0001 	mov.w	r0, #1
 80044d6:	4770      	bx	lr

080044d8 <__aeabi_d2iz>:
 80044d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80044dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80044e0:	d215      	bcs.n	800450e <__aeabi_d2iz+0x36>
 80044e2:	d511      	bpl.n	8004508 <__aeabi_d2iz+0x30>
 80044e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80044e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80044ec:	d912      	bls.n	8004514 <__aeabi_d2iz+0x3c>
 80044ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80044f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80044fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80044fe:	fa23 f002 	lsr.w	r0, r3, r2
 8004502:	bf18      	it	ne
 8004504:	4240      	negne	r0, r0
 8004506:	4770      	bx	lr
 8004508:	f04f 0000 	mov.w	r0, #0
 800450c:	4770      	bx	lr
 800450e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004512:	d105      	bne.n	8004520 <__aeabi_d2iz+0x48>
 8004514:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004518:	bf08      	it	eq
 800451a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800451e:	4770      	bx	lr
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop

08004528 <__aeabi_d2uiz>:
 8004528:	004a      	lsls	r2, r1, #1
 800452a:	d211      	bcs.n	8004550 <__aeabi_d2uiz+0x28>
 800452c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004530:	d211      	bcs.n	8004556 <__aeabi_d2uiz+0x2e>
 8004532:	d50d      	bpl.n	8004550 <__aeabi_d2uiz+0x28>
 8004534:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004538:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800453c:	d40e      	bmi.n	800455c <__aeabi_d2uiz+0x34>
 800453e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004542:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004546:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800454a:	fa23 f002 	lsr.w	r0, r3, r2
 800454e:	4770      	bx	lr
 8004550:	f04f 0000 	mov.w	r0, #0
 8004554:	4770      	bx	lr
 8004556:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800455a:	d102      	bne.n	8004562 <__aeabi_d2uiz+0x3a>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	4770      	bx	lr
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	4770      	bx	lr

08004568 <__aeabi_d2f>:
 8004568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800456c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004570:	bf24      	itt	cs
 8004572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800457a:	d90d      	bls.n	8004598 <__aeabi_d2f+0x30>
 800457c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800458c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004590:	bf08      	it	eq
 8004592:	f020 0001 	biceq.w	r0, r0, #1
 8004596:	4770      	bx	lr
 8004598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800459c:	d121      	bne.n	80045e2 <__aeabi_d2f+0x7a>
 800459e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80045a2:	bfbc      	itt	lt
 80045a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80045a8:	4770      	bxlt	lr
 80045aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80045b2:	f1c2 0218 	rsb	r2, r2, #24
 80045b6:	f1c2 0c20 	rsb	ip, r2, #32
 80045ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80045be:	fa20 f002 	lsr.w	r0, r0, r2
 80045c2:	bf18      	it	ne
 80045c4:	f040 0001 	orrne.w	r0, r0, #1
 80045c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80045cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80045d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80045d4:	ea40 000c 	orr.w	r0, r0, ip
 80045d8:	fa23 f302 	lsr.w	r3, r3, r2
 80045dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045e0:	e7cc      	b.n	800457c <__aeabi_d2f+0x14>
 80045e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80045e6:	d107      	bne.n	80045f8 <__aeabi_d2f+0x90>
 80045e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80045ec:	bf1e      	ittt	ne
 80045ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80045f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80045f6:	4770      	bxne	lr
 80045f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80045fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop

08004608 <__aeabi_uldivmod>:
 8004608:	b953      	cbnz	r3, 8004620 <__aeabi_uldivmod+0x18>
 800460a:	b94a      	cbnz	r2, 8004620 <__aeabi_uldivmod+0x18>
 800460c:	2900      	cmp	r1, #0
 800460e:	bf08      	it	eq
 8004610:	2800      	cmpeq	r0, #0
 8004612:	bf1c      	itt	ne
 8004614:	f04f 31ff 	movne.w	r1, #4294967295
 8004618:	f04f 30ff 	movne.w	r0, #4294967295
 800461c:	f000 b972 	b.w	8004904 <__aeabi_idiv0>
 8004620:	f1ad 0c08 	sub.w	ip, sp, #8
 8004624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004628:	f000 f806 	bl	8004638 <__udivmoddi4>
 800462c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004634:	b004      	add	sp, #16
 8004636:	4770      	bx	lr

08004638 <__udivmoddi4>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	9e08      	ldr	r6, [sp, #32]
 800463e:	4604      	mov	r4, r0
 8004640:	4688      	mov	r8, r1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d14b      	bne.n	80046de <__udivmoddi4+0xa6>
 8004646:	428a      	cmp	r2, r1
 8004648:	4615      	mov	r5, r2
 800464a:	d967      	bls.n	800471c <__udivmoddi4+0xe4>
 800464c:	fab2 f282 	clz	r2, r2
 8004650:	b14a      	cbz	r2, 8004666 <__udivmoddi4+0x2e>
 8004652:	f1c2 0720 	rsb	r7, r2, #32
 8004656:	fa01 f302 	lsl.w	r3, r1, r2
 800465a:	fa20 f707 	lsr.w	r7, r0, r7
 800465e:	4095      	lsls	r5, r2
 8004660:	ea47 0803 	orr.w	r8, r7, r3
 8004664:	4094      	lsls	r4, r2
 8004666:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800466a:	0c23      	lsrs	r3, r4, #16
 800466c:	fbb8 f7fe 	udiv	r7, r8, lr
 8004670:	fa1f fc85 	uxth.w	ip, r5
 8004674:	fb0e 8817 	mls	r8, lr, r7, r8
 8004678:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800467c:	fb07 f10c 	mul.w	r1, r7, ip
 8004680:	4299      	cmp	r1, r3
 8004682:	d909      	bls.n	8004698 <__udivmoddi4+0x60>
 8004684:	18eb      	adds	r3, r5, r3
 8004686:	f107 30ff 	add.w	r0, r7, #4294967295
 800468a:	f080 811b 	bcs.w	80048c4 <__udivmoddi4+0x28c>
 800468e:	4299      	cmp	r1, r3
 8004690:	f240 8118 	bls.w	80048c4 <__udivmoddi4+0x28c>
 8004694:	3f02      	subs	r7, #2
 8004696:	442b      	add	r3, r5
 8004698:	1a5b      	subs	r3, r3, r1
 800469a:	b2a4      	uxth	r4, r4
 800469c:	fbb3 f0fe 	udiv	r0, r3, lr
 80046a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80046a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80046a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80046ac:	45a4      	cmp	ip, r4
 80046ae:	d909      	bls.n	80046c4 <__udivmoddi4+0x8c>
 80046b0:	192c      	adds	r4, r5, r4
 80046b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b6:	f080 8107 	bcs.w	80048c8 <__udivmoddi4+0x290>
 80046ba:	45a4      	cmp	ip, r4
 80046bc:	f240 8104 	bls.w	80048c8 <__udivmoddi4+0x290>
 80046c0:	3802      	subs	r0, #2
 80046c2:	442c      	add	r4, r5
 80046c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80046c8:	eba4 040c 	sub.w	r4, r4, ip
 80046cc:	2700      	movs	r7, #0
 80046ce:	b11e      	cbz	r6, 80046d8 <__udivmoddi4+0xa0>
 80046d0:	40d4      	lsrs	r4, r2
 80046d2:	2300      	movs	r3, #0
 80046d4:	e9c6 4300 	strd	r4, r3, [r6]
 80046d8:	4639      	mov	r1, r7
 80046da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046de:	428b      	cmp	r3, r1
 80046e0:	d909      	bls.n	80046f6 <__udivmoddi4+0xbe>
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	f000 80eb 	beq.w	80048be <__udivmoddi4+0x286>
 80046e8:	2700      	movs	r7, #0
 80046ea:	e9c6 0100 	strd	r0, r1, [r6]
 80046ee:	4638      	mov	r0, r7
 80046f0:	4639      	mov	r1, r7
 80046f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f6:	fab3 f783 	clz	r7, r3
 80046fa:	2f00      	cmp	r7, #0
 80046fc:	d147      	bne.n	800478e <__udivmoddi4+0x156>
 80046fe:	428b      	cmp	r3, r1
 8004700:	d302      	bcc.n	8004708 <__udivmoddi4+0xd0>
 8004702:	4282      	cmp	r2, r0
 8004704:	f200 80fa 	bhi.w	80048fc <__udivmoddi4+0x2c4>
 8004708:	1a84      	subs	r4, r0, r2
 800470a:	eb61 0303 	sbc.w	r3, r1, r3
 800470e:	2001      	movs	r0, #1
 8004710:	4698      	mov	r8, r3
 8004712:	2e00      	cmp	r6, #0
 8004714:	d0e0      	beq.n	80046d8 <__udivmoddi4+0xa0>
 8004716:	e9c6 4800 	strd	r4, r8, [r6]
 800471a:	e7dd      	b.n	80046d8 <__udivmoddi4+0xa0>
 800471c:	b902      	cbnz	r2, 8004720 <__udivmoddi4+0xe8>
 800471e:	deff      	udf	#255	; 0xff
 8004720:	fab2 f282 	clz	r2, r2
 8004724:	2a00      	cmp	r2, #0
 8004726:	f040 808f 	bne.w	8004848 <__udivmoddi4+0x210>
 800472a:	1b49      	subs	r1, r1, r5
 800472c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004730:	fa1f f885 	uxth.w	r8, r5
 8004734:	2701      	movs	r7, #1
 8004736:	fbb1 fcfe 	udiv	ip, r1, lr
 800473a:	0c23      	lsrs	r3, r4, #16
 800473c:	fb0e 111c 	mls	r1, lr, ip, r1
 8004740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004744:	fb08 f10c 	mul.w	r1, r8, ip
 8004748:	4299      	cmp	r1, r3
 800474a:	d907      	bls.n	800475c <__udivmoddi4+0x124>
 800474c:	18eb      	adds	r3, r5, r3
 800474e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8004752:	d202      	bcs.n	800475a <__udivmoddi4+0x122>
 8004754:	4299      	cmp	r1, r3
 8004756:	f200 80cd 	bhi.w	80048f4 <__udivmoddi4+0x2bc>
 800475a:	4684      	mov	ip, r0
 800475c:	1a59      	subs	r1, r3, r1
 800475e:	b2a3      	uxth	r3, r4
 8004760:	fbb1 f0fe 	udiv	r0, r1, lr
 8004764:	fb0e 1410 	mls	r4, lr, r0, r1
 8004768:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800476c:	fb08 f800 	mul.w	r8, r8, r0
 8004770:	45a0      	cmp	r8, r4
 8004772:	d907      	bls.n	8004784 <__udivmoddi4+0x14c>
 8004774:	192c      	adds	r4, r5, r4
 8004776:	f100 33ff 	add.w	r3, r0, #4294967295
 800477a:	d202      	bcs.n	8004782 <__udivmoddi4+0x14a>
 800477c:	45a0      	cmp	r8, r4
 800477e:	f200 80b6 	bhi.w	80048ee <__udivmoddi4+0x2b6>
 8004782:	4618      	mov	r0, r3
 8004784:	eba4 0408 	sub.w	r4, r4, r8
 8004788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800478c:	e79f      	b.n	80046ce <__udivmoddi4+0x96>
 800478e:	f1c7 0c20 	rsb	ip, r7, #32
 8004792:	40bb      	lsls	r3, r7
 8004794:	fa22 fe0c 	lsr.w	lr, r2, ip
 8004798:	ea4e 0e03 	orr.w	lr, lr, r3
 800479c:	fa01 f407 	lsl.w	r4, r1, r7
 80047a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80047a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80047a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80047ac:	4325      	orrs	r5, r4
 80047ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80047b2:	0c2c      	lsrs	r4, r5, #16
 80047b4:	fb08 3319 	mls	r3, r8, r9, r3
 80047b8:	fa1f fa8e 	uxth.w	sl, lr
 80047bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80047c0:	fb09 f40a 	mul.w	r4, r9, sl
 80047c4:	429c      	cmp	r4, r3
 80047c6:	fa02 f207 	lsl.w	r2, r2, r7
 80047ca:	fa00 f107 	lsl.w	r1, r0, r7
 80047ce:	d90b      	bls.n	80047e8 <__udivmoddi4+0x1b0>
 80047d0:	eb1e 0303 	adds.w	r3, lr, r3
 80047d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80047d8:	f080 8087 	bcs.w	80048ea <__udivmoddi4+0x2b2>
 80047dc:	429c      	cmp	r4, r3
 80047de:	f240 8084 	bls.w	80048ea <__udivmoddi4+0x2b2>
 80047e2:	f1a9 0902 	sub.w	r9, r9, #2
 80047e6:	4473      	add	r3, lr
 80047e8:	1b1b      	subs	r3, r3, r4
 80047ea:	b2ad      	uxth	r5, r5
 80047ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80047f0:	fb08 3310 	mls	r3, r8, r0, r3
 80047f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80047f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80047fc:	45a2      	cmp	sl, r4
 80047fe:	d908      	bls.n	8004812 <__udivmoddi4+0x1da>
 8004800:	eb1e 0404 	adds.w	r4, lr, r4
 8004804:	f100 33ff 	add.w	r3, r0, #4294967295
 8004808:	d26b      	bcs.n	80048e2 <__udivmoddi4+0x2aa>
 800480a:	45a2      	cmp	sl, r4
 800480c:	d969      	bls.n	80048e2 <__udivmoddi4+0x2aa>
 800480e:	3802      	subs	r0, #2
 8004810:	4474      	add	r4, lr
 8004812:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8004816:	fba0 8902 	umull	r8, r9, r0, r2
 800481a:	eba4 040a 	sub.w	r4, r4, sl
 800481e:	454c      	cmp	r4, r9
 8004820:	46c2      	mov	sl, r8
 8004822:	464b      	mov	r3, r9
 8004824:	d354      	bcc.n	80048d0 <__udivmoddi4+0x298>
 8004826:	d051      	beq.n	80048cc <__udivmoddi4+0x294>
 8004828:	2e00      	cmp	r6, #0
 800482a:	d069      	beq.n	8004900 <__udivmoddi4+0x2c8>
 800482c:	ebb1 050a 	subs.w	r5, r1, sl
 8004830:	eb64 0403 	sbc.w	r4, r4, r3
 8004834:	fa04 fc0c 	lsl.w	ip, r4, ip
 8004838:	40fd      	lsrs	r5, r7
 800483a:	40fc      	lsrs	r4, r7
 800483c:	ea4c 0505 	orr.w	r5, ip, r5
 8004840:	e9c6 5400 	strd	r5, r4, [r6]
 8004844:	2700      	movs	r7, #0
 8004846:	e747      	b.n	80046d8 <__udivmoddi4+0xa0>
 8004848:	f1c2 0320 	rsb	r3, r2, #32
 800484c:	fa20 f703 	lsr.w	r7, r0, r3
 8004850:	4095      	lsls	r5, r2
 8004852:	fa01 f002 	lsl.w	r0, r1, r2
 8004856:	fa21 f303 	lsr.w	r3, r1, r3
 800485a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800485e:	4338      	orrs	r0, r7
 8004860:	0c01      	lsrs	r1, r0, #16
 8004862:	fbb3 f7fe 	udiv	r7, r3, lr
 8004866:	fa1f f885 	uxth.w	r8, r5
 800486a:	fb0e 3317 	mls	r3, lr, r7, r3
 800486e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004872:	fb07 f308 	mul.w	r3, r7, r8
 8004876:	428b      	cmp	r3, r1
 8004878:	fa04 f402 	lsl.w	r4, r4, r2
 800487c:	d907      	bls.n	800488e <__udivmoddi4+0x256>
 800487e:	1869      	adds	r1, r5, r1
 8004880:	f107 3cff 	add.w	ip, r7, #4294967295
 8004884:	d22f      	bcs.n	80048e6 <__udivmoddi4+0x2ae>
 8004886:	428b      	cmp	r3, r1
 8004888:	d92d      	bls.n	80048e6 <__udivmoddi4+0x2ae>
 800488a:	3f02      	subs	r7, #2
 800488c:	4429      	add	r1, r5
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	b281      	uxth	r1, r0
 8004892:	fbb3 f0fe 	udiv	r0, r3, lr
 8004896:	fb0e 3310 	mls	r3, lr, r0, r3
 800489a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800489e:	fb00 f308 	mul.w	r3, r0, r8
 80048a2:	428b      	cmp	r3, r1
 80048a4:	d907      	bls.n	80048b6 <__udivmoddi4+0x27e>
 80048a6:	1869      	adds	r1, r5, r1
 80048a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80048ac:	d217      	bcs.n	80048de <__udivmoddi4+0x2a6>
 80048ae:	428b      	cmp	r3, r1
 80048b0:	d915      	bls.n	80048de <__udivmoddi4+0x2a6>
 80048b2:	3802      	subs	r0, #2
 80048b4:	4429      	add	r1, r5
 80048b6:	1ac9      	subs	r1, r1, r3
 80048b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80048bc:	e73b      	b.n	8004736 <__udivmoddi4+0xfe>
 80048be:	4637      	mov	r7, r6
 80048c0:	4630      	mov	r0, r6
 80048c2:	e709      	b.n	80046d8 <__udivmoddi4+0xa0>
 80048c4:	4607      	mov	r7, r0
 80048c6:	e6e7      	b.n	8004698 <__udivmoddi4+0x60>
 80048c8:	4618      	mov	r0, r3
 80048ca:	e6fb      	b.n	80046c4 <__udivmoddi4+0x8c>
 80048cc:	4541      	cmp	r1, r8
 80048ce:	d2ab      	bcs.n	8004828 <__udivmoddi4+0x1f0>
 80048d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80048d4:	eb69 020e 	sbc.w	r2, r9, lr
 80048d8:	3801      	subs	r0, #1
 80048da:	4613      	mov	r3, r2
 80048dc:	e7a4      	b.n	8004828 <__udivmoddi4+0x1f0>
 80048de:	4660      	mov	r0, ip
 80048e0:	e7e9      	b.n	80048b6 <__udivmoddi4+0x27e>
 80048e2:	4618      	mov	r0, r3
 80048e4:	e795      	b.n	8004812 <__udivmoddi4+0x1da>
 80048e6:	4667      	mov	r7, ip
 80048e8:	e7d1      	b.n	800488e <__udivmoddi4+0x256>
 80048ea:	4681      	mov	r9, r0
 80048ec:	e77c      	b.n	80047e8 <__udivmoddi4+0x1b0>
 80048ee:	3802      	subs	r0, #2
 80048f0:	442c      	add	r4, r5
 80048f2:	e747      	b.n	8004784 <__udivmoddi4+0x14c>
 80048f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80048f8:	442b      	add	r3, r5
 80048fa:	e72f      	b.n	800475c <__udivmoddi4+0x124>
 80048fc:	4638      	mov	r0, r7
 80048fe:	e708      	b.n	8004712 <__udivmoddi4+0xda>
 8004900:	4637      	mov	r7, r6
 8004902:	e6e9      	b.n	80046d8 <__udivmoddi4+0xa0>

08004904 <__aeabi_idiv0>:
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop

08004908 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8004922:	e04a      	b.n	80049ba <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	60fa      	str	r2, [r7, #12]
 800492a:	ed93 7a00 	vldr	s14, [r3]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	1d1a      	adds	r2, r3, #4
 8004932:	60ba      	str	r2, [r7, #8]
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004944:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	60fa      	str	r2, [r7, #12]
 800494e:	ed93 7a00 	vldr	s14, [r3]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1d1a      	adds	r2, r3, #4
 8004956:	60ba      	str	r2, [r7, #8]
 8004958:	edd3 7a00 	vldr	s15, [r3]
 800495c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004960:	ed97 7a05 	vldr	s14, [r7, #20]
 8004964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004968:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	60fa      	str	r2, [r7, #12]
 8004972:	ed93 7a00 	vldr	s14, [r3]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	60ba      	str	r2, [r7, #8]
 800497c:	edd3 7a00 	vldr	s15, [r3]
 8004980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004984:	ed97 7a05 	vldr	s14, [r7, #20]
 8004988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498c:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1d1a      	adds	r2, r3, #4
 8004994:	60fa      	str	r2, [r7, #12]
 8004996:	ed93 7a00 	vldr	s14, [r3]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	60ba      	str	r2, [r7, #8]
 80049a0:	edd3 7a00 	vldr	s15, [r3]
 80049a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80049ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049b0:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1b1      	bne.n	8004924 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 80049c8:	e014      	b.n	80049f4 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	60fa      	str	r2, [r7, #12]
 80049d0:	ed93 7a00 	vldr	s14, [r3]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	1d1a      	adds	r2, r3, #4
 80049d8:	60ba      	str	r2, [r7, #8]
 80049da:	edd3 7a00 	vldr	s15, [r3]
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80049e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049ea:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e7      	bne.n	80049ca <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	601a      	str	r2, [r3, #0]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	817b      	strh	r3, [r7, #10]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	897a      	ldrh	r2, [r7, #10]
 8004a22:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	893a      	ldrh	r2, [r7, #8]
 8004a28:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	605a      	str	r2, [r3, #4]
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_Init+0x40>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <HAL_Init+0x40>)
 8004a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_Init+0x40>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <HAL_Init+0x40>)
 8004a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a58:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_Init+0x40>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <HAL_Init+0x40>)
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a64:	2003      	movs	r0, #3
 8004a66:	f000 f94d 	bl	8004d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f000 f808 	bl	8004a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a70:	f006 fdbc 	bl	800b5ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023c00 	.word	0x40023c00

08004a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <HAL_InitTick+0x54>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_InitTick+0x58>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	4619      	mov	r1, r3
 8004a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f965 	bl	8004d6e <HAL_SYSTICK_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e00e      	b.n	8004acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b0f      	cmp	r3, #15
 8004ab2:	d80a      	bhi.n	8004aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8004abc:	f000 f92d 	bl	8004d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ac0:	4a06      	ldr	r2, [pc, #24]	; (8004adc <HAL_InitTick+0x5c>)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000474 	.word	0x20000474
 8004ad8:	20000004 	.word	0x20000004
 8004adc:	20000000 	.word	0x20000000

08004ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_IncTick+0x20>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_IncTick+0x24>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4413      	add	r3, r2
 8004af0:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <HAL_IncTick+0x24>)
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000004 	.word	0x20000004
 8004b04:	20001b60 	.word	0x20001b60

08004b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <HAL_GetTick+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20001b60 	.word	0x20001b60

08004b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b28:	f7ff ffee 	bl	8004b08 <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d005      	beq.n	8004b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_Delay+0x40>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b46:	bf00      	nop
 8004b48:	f7ff ffde 	bl	8004b08 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d8f7      	bhi.n	8004b48 <HAL_Delay+0x28>
  {
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000004 	.word	0x20000004

08004b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b80:	4013      	ands	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	60d3      	str	r3, [r2, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	f003 0307 	and.w	r3, r3, #7
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	db0b      	blt.n	8004bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	4907      	ldr	r1, [pc, #28]	; (8004c00 <__NVIC_EnableIRQ+0x38>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	2001      	movs	r0, #1
 8004bea:	fa00 f202 	lsl.w	r2, r0, r2
 8004bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000e100 	.word	0xe000e100

08004c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	6039      	str	r1, [r7, #0]
 8004c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	db0a      	blt.n	8004c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	490c      	ldr	r1, [pc, #48]	; (8004c50 <__NVIC_SetPriority+0x4c>)
 8004c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c22:	0112      	lsls	r2, r2, #4
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	440b      	add	r3, r1
 8004c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c2c:	e00a      	b.n	8004c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	4908      	ldr	r1, [pc, #32]	; (8004c54 <__NVIC_SetPriority+0x50>)
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	0112      	lsls	r2, r2, #4
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	440b      	add	r3, r1
 8004c42:	761a      	strb	r2, [r3, #24]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	e000e100 	.word	0xe000e100
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f1c3 0307 	rsb	r3, r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	bf28      	it	cs
 8004c76:	2304      	movcs	r3, #4
 8004c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d902      	bls.n	8004c88 <NVIC_EncodePriority+0x30>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3b03      	subs	r3, #3
 8004c86:	e000      	b.n	8004c8a <NVIC_EncodePriority+0x32>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43da      	mvns	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	43d9      	mvns	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb0:	4313      	orrs	r3, r2
         );
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3724      	adds	r7, #36	; 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd0:	d301      	bcc.n	8004cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e00f      	b.n	8004cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <SysTick_Config+0x40>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cde:	210f      	movs	r1, #15
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	f7ff ff8e 	bl	8004c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <SysTick_Config+0x40>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cee:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <SysTick_Config+0x40>)
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	e000e010 	.word	0xe000e010

08004d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff ff29 	bl	8004b64 <__NVIC_SetPriorityGrouping>
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	4603      	mov	r3, r0
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d2c:	f7ff ff3e 	bl	8004bac <__NVIC_GetPriorityGrouping>
 8004d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	6978      	ldr	r0, [r7, #20]
 8004d38:	f7ff ff8e 	bl	8004c58 <NVIC_EncodePriority>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff5d 	bl	8004c04 <__NVIC_SetPriority>
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	4603      	mov	r3, r0
 8004d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff31 	bl	8004bc8 <__NVIC_EnableIRQ>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ffa2 	bl	8004cc0 <SysTick_Config>
 8004d7c:	4603      	mov	r3, r0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d106      	bne.n	8004da4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004d96:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004d9c:	f043 0304 	orr.w	r3, r3, #4
 8004da0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004da2:	e005      	b.n	8004db0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004daa:	f023 0304 	bic.w	r3, r3, #4
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	e000e010 	.word	0xe000e010

08004dc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e011      	b.n	8004df6 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	795b      	ldrb	r3, [r3, #5]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f006 fc2a 	bl	800b63c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_DCMI_Start_DMA+0x20>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e086      	b.n	8004f2e <HAL_DCMI_Start_DMA+0x12e>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0202 	bic.w	r2, r2, #2
 8004e4e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	4a34      	ldr	r2, [pc, #208]	; (8004f38 <HAL_DCMI_Start_DMA+0x138>)
 8004e66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	4a33      	ldr	r2, [pc, #204]	; (8004f3c <HAL_DCMI_Start_DMA+0x13c>)
 8004e6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	2200      	movs	r2, #0
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8a:	d20a      	bcs.n	8004ea2 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3328      	adds	r3, #40	; 0x28
 8004e96:	4619      	mov	r1, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	f000 faf4 	bl	8005488 <HAL_DMA_Start_IT>
 8004ea0:	e038      	b.n	8004f14 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <HAL_DCMI_Start_DMA+0x138>)
 8004ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8004ebc:	e009      	b.n	8004ed2 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	085a      	lsrs	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	005a      	lsls	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eda:	d2f0      	bcs.n	8004ebe <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	1e9a      	subs	r2, r3, #2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3328      	adds	r3, #40	; 0x28
 8004f04:	4619      	mov	r1, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	f000 fe14 	bl	8005b3c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08005109 	.word	0x08005109
 8004f3c:	08005233 	.word	0x08005233

08004f40 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8004f48:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <HAL_DCMI_Stop+0xb0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	4a29      	ldr	r2, [pc, #164]	; (8004ff4 <HAL_DCMI_Stop+0xb4>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_DCMI_Stop+0x2a>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e03e      	b.n	8004fe8 <HAL_DCMI_Stop+0xa8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	60ba      	str	r2, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d108      	bne.n	8004fa6 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa4:	e006      	b.n	8004fb4 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ea      	bne.n	8004f8a <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fabd 	bl	8005548 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000474 	.word	0x20000474
 8004ff4:	92492493 	.word	0x92492493

08004ff8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2204      	movs	r2, #4
 8005018:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	f043 0202 	orr.w	r2, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2204      	movs	r2, #4
 800502a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	4a2f      	ldr	r2, [pc, #188]	; (80050f0 <HAL_DCMI_IRQHandler+0xf8>)
 8005034:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	4618      	mov	r0, r3
 800503c:	f000 faf4 	bl	8005628 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	f043 0201 	orr.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2204      	movs	r2, #4
 8005062:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	4a21      	ldr	r2, [pc, #132]	; (80050f0 <HAL_DCMI_IRQHandler+0xf8>)
 800506c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fad8 	bl	8005628 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	d006      	beq.n	8005090 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2210      	movs	r2, #16
 8005088:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f005 fd54 	bl	800ab38 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2208      	movs	r2, #8
 80050a0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f826 	bl	80050f4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d019      	beq.n	80050e6 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d107      	bne.n	80050d0 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 021e 	bic.w	r2, r2, #30
 80050ce:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f005 fd19 	bl	800ab18 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	08005233 	.word	0x08005233

080050f4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d043      	beq.n	80051aa <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800512e:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d118      	bne.n	800516e <DCMI_DMAXferCplt+0x66>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d015      	beq.n	800516e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	00da      	lsls	r2, r3, #3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	2200      	movs	r2, #0
 800515c:	4619      	mov	r1, r3
 800515e:	f001 fe35 	bl	8006dcc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	1e5a      	subs	r2, r3, #1
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
 800516c:	e044      	b.n	80051f8 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d13c      	bne.n	80051f8 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	00da      	lsls	r2, r3, #3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	2201      	movs	r2, #1
 8005198:	4619      	mov	r1, r3
 800519a:	f001 fe17 	bl	8006dcc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	1e5a      	subs	r2, r3, #1
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
 80051a8:	e026      	b.n	80051f8 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d006      	beq.n	80051c8 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	e017      	b.n	80051f8 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10f      	bne.n	80051f8 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	0099      	lsls	r1, r3, #2
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	440a      	add	r2, r1
 80051ee:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	429a      	cmp	r2, r3
 8005202:	d112      	bne.n	800522a <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d103      	bne.n	800522a <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005246:	2b02      	cmp	r3, #2
 8005248:	d003      	beq.n	8005252 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f005 fc88 	bl	800ab68 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8005258:	bf00      	nop
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e058      	b.n	8005324 <HAL_DCMI_Init+0xc4>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f006 f9fe 	bl	800b680 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800529a:	f023 0308 	bic.w	r3, r3, #8
 800529e:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80052b4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80052c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80052cc:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d112      	bne.n	8005304 <HAL_DCMI_Init+0xa4>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	7f1b      	ldrb	r3, [r3, #28]
 80052e2:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7f5b      	ldrb	r3, [r3, #29]
 80052e8:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80052ea:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7f9b      	ldrb	r3, [r3, #30]
 80052f0:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80052f2:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7fdb      	ldrb	r3, [r3, #31]
 80052fa:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8005300:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8005302:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 021e 	orr.w	r2, r2, #30
 8005312:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005338:	f7ff fbe6 	bl	8004b08 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e099      	b.n	800547c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005368:	e00f      	b.n	800538a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800536a:	f7ff fbcd 	bl	8004b08 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b05      	cmp	r3, #5
 8005376:	d908      	bls.n	800538a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2203      	movs	r2, #3
 8005382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e078      	b.n	800547c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e8      	bne.n	800536a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4b38      	ldr	r3, [pc, #224]	; (8005484 <HAL_DMA_Init+0x158>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d107      	bne.n	80053f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	4313      	orrs	r3, r2
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	2b04      	cmp	r3, #4
 800541c:	d117      	bne.n	800544e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00e      	beq.n	800544e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fb09 	bl	8005a48 <DMA_CheckFifoParam>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2240      	movs	r2, #64	; 0x40
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800544a:	2301      	movs	r3, #1
 800544c:	e016      	b.n	800547c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fac0 	bl	80059dc <DMA_CalcBaseAndBitshift>
 800545c:	4603      	mov	r3, r0
 800545e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	223f      	movs	r2, #63	; 0x3f
 8005466:	409a      	lsls	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	f010803f 	.word	0xf010803f

08005488 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_DMA_Start_IT+0x26>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e048      	b.n	8005540 <HAL_DMA_Start_IT+0xb8>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d137      	bne.n	8005532 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fa52 	bl	8005980 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e0:	223f      	movs	r2, #63	; 0x3f
 80054e2:	409a      	lsls	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0216 	orr.w	r2, r2, #22
 80054f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005506:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e005      	b.n	800553e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005554:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005556:	f7ff fad7 	bl	8004b08 <HAL_GetTick>
 800555a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d008      	beq.n	800557a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2280      	movs	r2, #128	; 0x80
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e052      	b.n	8005620 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0216 	bic.w	r2, r2, #22
 8005588:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005598:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <HAL_DMA_Abort+0x62>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0208 	bic.w	r2, r2, #8
 80055b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ca:	e013      	b.n	80055f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055cc:	f7ff fa9c 	bl	8004b08 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d90c      	bls.n	80055f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2203      	movs	r2, #3
 80055ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e015      	b.n	8005620 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e4      	bne.n	80055cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005606:	223f      	movs	r2, #63	; 0x3f
 8005608:	409a      	lsls	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d004      	beq.n	8005646 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2280      	movs	r2, #128	; 0x80
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e00c      	b.n	8005660 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2205      	movs	r2, #5
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005678:	4b92      	ldr	r3, [pc, #584]	; (80058c4 <HAL_DMA_IRQHandler+0x258>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a92      	ldr	r2, [pc, #584]	; (80058c8 <HAL_DMA_IRQHandler+0x25c>)
 800567e:	fba2 2303 	umull	r2, r3, r2, r3
 8005682:	0a9b      	lsrs	r3, r3, #10
 8005684:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	2208      	movs	r2, #8
 8005698:	409a      	lsls	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01a      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d013      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0204 	bic.w	r2, r2, #4
 80056be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	2208      	movs	r2, #8
 80056c6:	409a      	lsls	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d0:	f043 0201 	orr.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056dc:	2201      	movs	r2, #1
 80056de:	409a      	lsls	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d012      	beq.n	800570e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	2201      	movs	r2, #1
 80056fc:	409a      	lsls	r2, r3
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005706:	f043 0202 	orr.w	r2, r3, #2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005712:	2204      	movs	r2, #4
 8005714:	409a      	lsls	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d012      	beq.n	8005744 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005730:	2204      	movs	r2, #4
 8005732:	409a      	lsls	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	f043 0204 	orr.w	r2, r3, #4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005748:	2210      	movs	r2, #16
 800574a:	409a      	lsls	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d043      	beq.n	80057dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d03c      	beq.n	80057dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005766:	2210      	movs	r2, #16
 8005768:	409a      	lsls	r2, r3
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d018      	beq.n	80057ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d108      	bne.n	800579c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d024      	beq.n	80057dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4798      	blx	r3
 800579a:	e01f      	b.n	80057dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01b      	beq.n	80057dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
 80057ac:	e016      	b.n	80057dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d107      	bne.n	80057cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0208 	bic.w	r2, r2, #8
 80057ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e0:	2220      	movs	r2, #32
 80057e2:	409a      	lsls	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 808e 	beq.w	800590a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8086 	beq.w	800590a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005802:	2220      	movs	r2, #32
 8005804:	409a      	lsls	r2, r3
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b05      	cmp	r3, #5
 8005814:	d136      	bne.n	8005884 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0216 	bic.w	r2, r2, #22
 8005824:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005834:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <HAL_DMA_IRQHandler+0x1da>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0208 	bic.w	r2, r2, #8
 8005854:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585a:	223f      	movs	r2, #63	; 0x3f
 800585c:	409a      	lsls	r2, r3
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	2b00      	cmp	r3, #0
 8005878:	d07d      	beq.n	8005976 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
        }
        return;
 8005882:	e078      	b.n	8005976 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01c      	beq.n	80058cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d030      	beq.n	800590a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
 80058b0:	e02b      	b.n	800590a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d027      	beq.n	800590a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
 80058c2:	e022      	b.n	800590a <HAL_DMA_IRQHandler+0x29e>
 80058c4:	20000474 	.word	0x20000474
 80058c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10f      	bne.n	80058fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0210 	bic.w	r2, r2, #16
 80058e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	2b00      	cmp	r3, #0
 8005910:	d032      	beq.n	8005978 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d022      	beq.n	8005964 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2205      	movs	r2, #5
 8005922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	3301      	adds	r3, #1
 800593a:	60bb      	str	r3, [r7, #8]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	429a      	cmp	r2, r3
 8005940:	d307      	bcc.n	8005952 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f2      	bne.n	8005936 <HAL_DMA_IRQHandler+0x2ca>
 8005950:	e000      	b.n	8005954 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005952:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
 8005974:	e000      	b.n	8005978 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005976:	bf00      	nop
    }
  }
}
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop

08005980 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800599c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d108      	bne.n	80059c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059be:	e007      	b.n	80059d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	3b10      	subs	r3, #16
 80059ec:	4a14      	ldr	r2, [pc, #80]	; (8005a40 <DMA_CalcBaseAndBitshift+0x64>)
 80059ee:	fba2 2303 	umull	r2, r3, r2, r3
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059f6:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <DMA_CalcBaseAndBitshift+0x68>)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d909      	bls.n	8005a1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a1c:	e007      	b.n	8005a2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	aaaaaaab 	.word	0xaaaaaaab
 8005a44:	080115ec 	.word	0x080115ec

08005a48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d11f      	bne.n	8005aa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d855      	bhi.n	8005b14 <DMA_CheckFifoParam+0xcc>
 8005a68:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <DMA_CheckFifoParam+0x28>)
 8005a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6e:	bf00      	nop
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005a93 	.word	0x08005a93
 8005a78:	08005a81 	.word	0x08005a81
 8005a7c:	08005b15 	.word	0x08005b15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d045      	beq.n	8005b18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a90:	e042      	b.n	8005b18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a9a:	d13f      	bne.n	8005b1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa0:	e03c      	b.n	8005b1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aaa:	d121      	bne.n	8005af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d836      	bhi.n	8005b20 <DMA_CheckFifoParam+0xd8>
 8005ab2:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <DMA_CheckFifoParam+0x70>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005acf 	.word	0x08005acf
 8005ac0:	08005ac9 	.word	0x08005ac9
 8005ac4:	08005ae1 	.word	0x08005ae1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
      break;
 8005acc:	e02f      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d024      	beq.n	8005b24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ade:	e021      	b.n	8005b24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ae8:	d11e      	bne.n	8005b28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005aee:	e01b      	b.n	8005b28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d902      	bls.n	8005afc <DMA_CheckFifoParam+0xb4>
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d003      	beq.n	8005b02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005afa:	e018      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      break;
 8005b00:	e015      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
      break;
 8005b12:	e00b      	b.n	8005b2c <DMA_CheckFifoParam+0xe4>
      break;
 8005b14:	bf00      	nop
 8005b16:	e00a      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
      break;
 8005b18:	bf00      	nop
 8005b1a:	e008      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
      break;
 8005b1c:	bf00      	nop
 8005b1e:	e006      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
      break;
 8005b20:	bf00      	nop
 8005b22:	e004      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
      break;
 8005b24:	bf00      	nop
 8005b26:	e002      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
      break;   
 8005b28:	bf00      	nop
 8005b2a:	e000      	b.n	8005b2e <DMA_CheckFifoParam+0xe6>
      break;
 8005b2c:	bf00      	nop
    }
  } 
  
  return status; 
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d106      	bne.n	8005b64 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f001 b913 	b.w	8006d8a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2240      	movs	r2, #64	; 0x40
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f001 b901 	b.w	8006d8a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d102      	bne.n	8005b98 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8005b92:	2302      	movs	r3, #2
 8005b94:	f001 b8f9 	b.w	8006d8a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	f041 80e7 	bne.w	8006d7c <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005bca:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f001 f910 	bl	8006e00 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	4b99      	ldr	r3, [pc, #612]	; (8005e4c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d960      	bls.n	8005cae <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a97      	ldr	r2, [pc, #604]	; (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d057      	beq.n	8005ca6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a96      	ldr	r2, [pc, #600]	; (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d050      	beq.n	8005ca2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a94      	ldr	r2, [pc, #592]	; (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d049      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a93      	ldr	r2, [pc, #588]	; (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d042      	beq.n	8005c9a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a91      	ldr	r2, [pc, #580]	; (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03a      	beq.n	8005c94 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a90      	ldr	r2, [pc, #576]	; (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d032      	beq.n	8005c8e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a8e      	ldr	r2, [pc, #568]	; (8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d02a      	beq.n	8005c88 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a8d      	ldr	r2, [pc, #564]	; (8005e6c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d022      	beq.n	8005c82 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a8b      	ldr	r2, [pc, #556]	; (8005e70 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d01a      	beq.n	8005c7c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a8a      	ldr	r2, [pc, #552]	; (8005e74 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d012      	beq.n	8005c76 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a88      	ldr	r2, [pc, #544]	; (8005e78 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00a      	beq.n	8005c70 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a87      	ldr	r2, [pc, #540]	; (8005e7c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d102      	bne.n	8005c6a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8005c64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c68:	e01e      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c6e:	e01b      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c74:	e018      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c7a:	e015      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c80:	e012      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c86:	e00f      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c8c:	e00c      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c92:	e009      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c98:	e006      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	e004      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	e002      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005ca2:	2320      	movs	r3, #32
 8005ca4:	e000      	b.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005ca6:	2320      	movs	r3, #32
 8005ca8:	4a75      	ldr	r2, [pc, #468]	; (8005e80 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8005caa:	60d3      	str	r3, [r2, #12]
 8005cac:	e150      	b.n	8005f50 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4b73      	ldr	r3, [pc, #460]	; (8005e84 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d960      	bls.n	8005d7c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a64      	ldr	r2, [pc, #400]	; (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d057      	beq.n	8005d74 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a62      	ldr	r2, [pc, #392]	; (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d050      	beq.n	8005d70 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a61      	ldr	r2, [pc, #388]	; (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d049      	beq.n	8005d6c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a5f      	ldr	r2, [pc, #380]	; (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d042      	beq.n	8005d68 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a5e      	ldr	r2, [pc, #376]	; (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d03a      	beq.n	8005d62 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a5c      	ldr	r2, [pc, #368]	; (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d032      	beq.n	8005d5c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a5b      	ldr	r2, [pc, #364]	; (8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d02a      	beq.n	8005d56 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a59      	ldr	r2, [pc, #356]	; (8005e6c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d022      	beq.n	8005d50 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a58      	ldr	r2, [pc, #352]	; (8005e70 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d01a      	beq.n	8005d4a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a56      	ldr	r2, [pc, #344]	; (8005e74 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d012      	beq.n	8005d44 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a55      	ldr	r2, [pc, #340]	; (8005e78 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00a      	beq.n	8005d3e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a53      	ldr	r2, [pc, #332]	; (8005e7c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d102      	bne.n	8005d38 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8005d32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d36:	e01e      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d3c:	e01b      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d42:	e018      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d48:	e015      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d4e:	e012      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d54:	e00f      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d5a:	e00c      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d60:	e009      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d66:	e006      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	e004      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	e002      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d70:	2320      	movs	r3, #32
 8005d72:	e000      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d74:	2320      	movs	r3, #32
 8005d76:	4a42      	ldr	r2, [pc, #264]	; (8005e80 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8005d78:	6093      	str	r3, [r2, #8]
 8005d7a:	e0e9      	b.n	8005f50 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	4b41      	ldr	r3, [pc, #260]	; (8005e88 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8005d84:	429a      	cmp	r2, r3
 8005d86:	f240 8083 	bls.w	8005e90 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a30      	ldr	r2, [pc, #192]	; (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d057      	beq.n	8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2e      	ldr	r2, [pc, #184]	; (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d050      	beq.n	8005e40 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2d      	ldr	r2, [pc, #180]	; (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d049      	beq.n	8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d042      	beq.n	8005e38 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d03a      	beq.n	8005e32 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a28      	ldr	r2, [pc, #160]	; (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d032      	beq.n	8005e2c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a27      	ldr	r2, [pc, #156]	; (8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d02a      	beq.n	8005e26 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a25      	ldr	r2, [pc, #148]	; (8005e6c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d022      	beq.n	8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d01a      	beq.n	8005e1a <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a22      	ldr	r2, [pc, #136]	; (8005e74 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d012      	beq.n	8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00a      	beq.n	8005e0e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d102      	bne.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8005e02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e06:	e01e      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e0c:	e01b      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e12:	e018      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e18:	e015      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e1e:	e012      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e24:	e00f      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e2a:	e00c      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e30:	e009      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e36:	e006      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e38:	2320      	movs	r3, #32
 8005e3a:	e004      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	e002      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e40:	2320      	movs	r3, #32
 8005e42:	e000      	b.n	8005e46 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e44:	2320      	movs	r3, #32
 8005e46:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8005e48:	60d3      	str	r3, [r2, #12]
 8005e4a:	e081      	b.n	8005f50 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8005e4c:	40026458 	.word	0x40026458
 8005e50:	40026010 	.word	0x40026010
 8005e54:	40026410 	.word	0x40026410
 8005e58:	40026070 	.word	0x40026070
 8005e5c:	40026470 	.word	0x40026470
 8005e60:	40026028 	.word	0x40026028
 8005e64:	40026428 	.word	0x40026428
 8005e68:	40026088 	.word	0x40026088
 8005e6c:	40026488 	.word	0x40026488
 8005e70:	40026040 	.word	0x40026040
 8005e74:	40026440 	.word	0x40026440
 8005e78:	400260a0 	.word	0x400260a0
 8005e7c:	400264a0 	.word	0x400264a0
 8005e80:	40026400 	.word	0x40026400
 8005e84:	400260b8 	.word	0x400260b8
 8005e88:	40026058 	.word	0x40026058
 8005e8c:	40026000 	.word	0x40026000
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a96      	ldr	r2, [pc, #600]	; (80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d057      	beq.n	8005f4a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a95      	ldr	r2, [pc, #596]	; (80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d050      	beq.n	8005f46 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a93      	ldr	r2, [pc, #588]	; (80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d049      	beq.n	8005f42 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a92      	ldr	r2, [pc, #584]	; (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d042      	beq.n	8005f3e <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a90      	ldr	r2, [pc, #576]	; (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d03a      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a8f      	ldr	r2, [pc, #572]	; (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d032      	beq.n	8005f32 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a8d      	ldr	r2, [pc, #564]	; (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d02a      	beq.n	8005f2c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a8c      	ldr	r2, [pc, #560]	; (800610c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a8a      	ldr	r2, [pc, #552]	; (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01a      	beq.n	8005f20 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a89      	ldr	r2, [pc, #548]	; (8006114 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d012      	beq.n	8005f1a <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a87      	ldr	r2, [pc, #540]	; (8006118 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00a      	beq.n	8005f14 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a86      	ldr	r2, [pc, #536]	; (800611c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d102      	bne.n	8005f0e <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8005f08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f0c:	e01e      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f12:	e01b      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f18:	e018      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f1e:	e015      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f24:	e012      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f2a:	e00f      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f30:	e00c      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f36:	e009      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f3c:	e006      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f3e:	2320      	movs	r3, #32
 8005f40:	e004      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f42:	2320      	movs	r3, #32
 8005f44:	e002      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f46:	2320      	movs	r3, #32
 8005f48:	e000      	b.n	8005f4c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f4a:	2320      	movs	r3, #32
 8005f4c:	4a74      	ldr	r2, [pc, #464]	; (8006120 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8005f4e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	4b73      	ldr	r3, [pc, #460]	; (8006124 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d960      	bls.n	800601e <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a63      	ldr	r2, [pc, #396]	; (80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d057      	beq.n	8006016 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a62      	ldr	r2, [pc, #392]	; (80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d050      	beq.n	8006012 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a60      	ldr	r2, [pc, #384]	; (80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d049      	beq.n	800600e <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a5f      	ldr	r2, [pc, #380]	; (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d042      	beq.n	800600a <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a5d      	ldr	r2, [pc, #372]	; (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d03a      	beq.n	8006004 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a5c      	ldr	r2, [pc, #368]	; (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d032      	beq.n	8005ffe <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a5a      	ldr	r2, [pc, #360]	; (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d02a      	beq.n	8005ff8 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a59      	ldr	r2, [pc, #356]	; (800610c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d022      	beq.n	8005ff2 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a57      	ldr	r2, [pc, #348]	; (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01a      	beq.n	8005fec <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a56      	ldr	r2, [pc, #344]	; (8006114 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d012      	beq.n	8005fe6 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a54      	ldr	r2, [pc, #336]	; (8006118 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a53      	ldr	r2, [pc, #332]	; (800611c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d102      	bne.n	8005fda <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8005fd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fd8:	e01e      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005fde:	e01b      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fe0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fe4:	e018      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fe6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fea:	e015      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ff0:	e012      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff6:	e00f      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ffc:	e00c      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006002:	e009      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8006004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006008:	e006      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800600a:	2310      	movs	r3, #16
 800600c:	e004      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800600e:	2310      	movs	r3, #16
 8006010:	e002      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8006012:	2310      	movs	r3, #16
 8006014:	e000      	b.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8006016:	2310      	movs	r3, #16
 8006018:	4a43      	ldr	r2, [pc, #268]	; (8006128 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800601a:	60d3      	str	r3, [r2, #12]
 800601c:	e14f      	b.n	80062be <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	4b41      	ldr	r3, [pc, #260]	; (800612c <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8006026:	429a      	cmp	r2, r3
 8006028:	f240 8082 	bls.w	8006130 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d057      	beq.n	80060e6 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d050      	beq.n	80060e2 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2c      	ldr	r2, [pc, #176]	; (80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d049      	beq.n	80060de <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d042      	beq.n	80060da <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a29      	ldr	r2, [pc, #164]	; (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d03a      	beq.n	80060d4 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a28      	ldr	r2, [pc, #160]	; (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d032      	beq.n	80060ce <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a26      	ldr	r2, [pc, #152]	; (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d02a      	beq.n	80060c8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a25      	ldr	r2, [pc, #148]	; (800610c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d022      	beq.n	80060c2 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a23      	ldr	r2, [pc, #140]	; (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d01a      	beq.n	80060bc <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a22      	ldr	r2, [pc, #136]	; (8006114 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d012      	beq.n	80060b6 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a20      	ldr	r2, [pc, #128]	; (8006118 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00a      	beq.n	80060b0 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d102      	bne.n	80060aa <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80060a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060a8:	e01e      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80060ae:	e01b      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060b4:	e018      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060ba:	e015      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060c0:	e012      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c6:	e00f      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060cc:	e00c      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d2:	e009      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d8:	e006      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060da:	2310      	movs	r3, #16
 80060dc:	e004      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060de:	2310      	movs	r3, #16
 80060e0:	e002      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060e2:	2310      	movs	r3, #16
 80060e4:	e000      	b.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060e6:	2310      	movs	r3, #16
 80060e8:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80060ea:	6093      	str	r3, [r2, #8]
 80060ec:	e0e7      	b.n	80062be <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80060ee:	bf00      	nop
 80060f0:	40026010 	.word	0x40026010
 80060f4:	40026410 	.word	0x40026410
 80060f8:	40026070 	.word	0x40026070
 80060fc:	40026470 	.word	0x40026470
 8006100:	40026028 	.word	0x40026028
 8006104:	40026428 	.word	0x40026428
 8006108:	40026088 	.word	0x40026088
 800610c:	40026488 	.word	0x40026488
 8006110:	40026040 	.word	0x40026040
 8006114:	40026440 	.word	0x40026440
 8006118:	400260a0 	.word	0x400260a0
 800611c:	400264a0 	.word	0x400264a0
 8006120:	40026000 	.word	0x40026000
 8006124:	40026458 	.word	0x40026458
 8006128:	40026400 	.word	0x40026400
 800612c:	400260b8 	.word	0x400260b8
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	4b96      	ldr	r3, [pc, #600]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8006138:	429a      	cmp	r2, r3
 800613a:	d960      	bls.n	80061fe <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a94      	ldr	r2, [pc, #592]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d057      	beq.n	80061f6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a93      	ldr	r2, [pc, #588]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d050      	beq.n	80061f2 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a91      	ldr	r2, [pc, #580]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d049      	beq.n	80061ee <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a90      	ldr	r2, [pc, #576]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d042      	beq.n	80061ea <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a8e      	ldr	r2, [pc, #568]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d03a      	beq.n	80061e4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a8d      	ldr	r2, [pc, #564]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d032      	beq.n	80061de <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a8b      	ldr	r2, [pc, #556]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d02a      	beq.n	80061d8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a8a      	ldr	r2, [pc, #552]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d022      	beq.n	80061d2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a88      	ldr	r2, [pc, #544]	; (80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d01a      	beq.n	80061cc <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a87      	ldr	r2, [pc, #540]	; (80063b8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d012      	beq.n	80061c6 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a85      	ldr	r2, [pc, #532]	; (80063bc <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00a      	beq.n	80061c0 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a84      	ldr	r2, [pc, #528]	; (80063c0 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d102      	bne.n	80061ba <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80061b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061b8:	e01e      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061be:	e01b      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061c4:	e018      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061ca:	e015      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061d0:	e012      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d6:	e00f      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061dc:	e00c      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e2:	e009      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e8:	e006      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061ea:	2310      	movs	r3, #16
 80061ec:	e004      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061ee:	2310      	movs	r3, #16
 80061f0:	e002      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061f2:	2310      	movs	r3, #16
 80061f4:	e000      	b.n	80061f8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061f6:	2310      	movs	r3, #16
 80061f8:	4a72      	ldr	r2, [pc, #456]	; (80063c4 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80061fa:	60d3      	str	r3, [r2, #12]
 80061fc:	e05f      	b.n	80062be <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a64      	ldr	r2, [pc, #400]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d057      	beq.n	80062b8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a62      	ldr	r2, [pc, #392]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d050      	beq.n	80062b4 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a61      	ldr	r2, [pc, #388]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d049      	beq.n	80062b0 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a5f      	ldr	r2, [pc, #380]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d042      	beq.n	80062ac <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a5e      	ldr	r2, [pc, #376]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d03a      	beq.n	80062a6 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a5c      	ldr	r2, [pc, #368]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d032      	beq.n	80062a0 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a5b      	ldr	r2, [pc, #364]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d02a      	beq.n	800629a <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a59      	ldr	r2, [pc, #356]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a58      	ldr	r2, [pc, #352]	; (80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d01a      	beq.n	800628e <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a56      	ldr	r2, [pc, #344]	; (80063b8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d012      	beq.n	8006288 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a55      	ldr	r2, [pc, #340]	; (80063bc <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00a      	beq.n	8006282 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a53      	ldr	r2, [pc, #332]	; (80063c0 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d102      	bne.n	800627c <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8006276:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800627a:	e01e      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800627c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006280:	e01b      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8006282:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006286:	e018      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8006288:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800628c:	e015      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800628e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006292:	e012      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8006294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006298:	e00f      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800629a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629e:	e00c      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a4:	e009      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062aa:	e006      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062ac:	2310      	movs	r3, #16
 80062ae:	e004      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062b0:	2310      	movs	r3, #16
 80062b2:	e002      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062b4:	2310      	movs	r3, #16
 80062b6:	e000      	b.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062b8:	2310      	movs	r3, #16
 80062ba:	4a42      	ldr	r2, [pc, #264]	; (80063c4 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80062bc:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	4b40      	ldr	r3, [pc, #256]	; (80063c8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80062c6:	429a      	cmp	r2, r3
 80062c8:	f240 8082 	bls.w	80063d0 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a30      	ldr	r2, [pc, #192]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d057      	beq.n	8006386 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d050      	beq.n	8006382 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2d      	ldr	r2, [pc, #180]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d049      	beq.n	800637e <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2c      	ldr	r2, [pc, #176]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d042      	beq.n	800637a <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03a      	beq.n	8006374 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d032      	beq.n	800636e <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a27      	ldr	r2, [pc, #156]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d02a      	beq.n	8006368 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01a      	beq.n	800635c <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d012      	beq.n	8006356 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a21      	ldr	r2, [pc, #132]	; (80063bc <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00a      	beq.n	8006350 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d102      	bne.n	800634a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8006344:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006348:	e01e      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800634a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800634e:	e01b      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006354:	e018      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006356:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800635a:	e015      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800635c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006360:	e012      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006366:	e00f      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636c:	e00c      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800636e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006372:	e009      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006378:	e006      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800637a:	2308      	movs	r3, #8
 800637c:	e004      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800637e:	2308      	movs	r3, #8
 8006380:	e002      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006382:	2308      	movs	r3, #8
 8006384:	e000      	b.n	8006388 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006386:	2308      	movs	r3, #8
 8006388:	4a10      	ldr	r2, [pc, #64]	; (80063cc <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800638a:	60d3      	str	r3, [r2, #12]
 800638c:	e16f      	b.n	800666e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800638e:	bf00      	nop
 8006390:	40026058 	.word	0x40026058
 8006394:	40026010 	.word	0x40026010
 8006398:	40026410 	.word	0x40026410
 800639c:	40026070 	.word	0x40026070
 80063a0:	40026470 	.word	0x40026470
 80063a4:	40026028 	.word	0x40026028
 80063a8:	40026428 	.word	0x40026428
 80063ac:	40026088 	.word	0x40026088
 80063b0:	40026488 	.word	0x40026488
 80063b4:	40026040 	.word	0x40026040
 80063b8:	40026440 	.word	0x40026440
 80063bc:	400260a0 	.word	0x400260a0
 80063c0:	400264a0 	.word	0x400264a0
 80063c4:	40026000 	.word	0x40026000
 80063c8:	40026458 	.word	0x40026458
 80063cc:	40026400 	.word	0x40026400
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	4b94      	ldr	r3, [pc, #592]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80063d8:	429a      	cmp	r2, r3
 80063da:	d960      	bls.n	800649e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a92      	ldr	r2, [pc, #584]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d057      	beq.n	8006496 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a91      	ldr	r2, [pc, #580]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d050      	beq.n	8006492 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a8f      	ldr	r2, [pc, #572]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d049      	beq.n	800648e <HAL_DMAEx_MultiBufferStart_IT+0x952>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a8e      	ldr	r2, [pc, #568]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d042      	beq.n	800648a <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a8c      	ldr	r2, [pc, #560]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d03a      	beq.n	8006484 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a8b      	ldr	r2, [pc, #556]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d032      	beq.n	800647e <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a89      	ldr	r2, [pc, #548]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d02a      	beq.n	8006478 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a88      	ldr	r2, [pc, #544]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a86      	ldr	r2, [pc, #536]	; (800664c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01a      	beq.n	800646c <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a85      	ldr	r2, [pc, #532]	; (8006650 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d012      	beq.n	8006466 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a83      	ldr	r2, [pc, #524]	; (8006654 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00a      	beq.n	8006460 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a82      	ldr	r2, [pc, #520]	; (8006658 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d102      	bne.n	800645a <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8006454:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006458:	e01e      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800645a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800645e:	e01b      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006460:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006464:	e018      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006466:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800646a:	e015      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800646c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006470:	e012      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006476:	e00f      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800647c:	e00c      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800647e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006482:	e009      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006488:	e006      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800648a:	2308      	movs	r3, #8
 800648c:	e004      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800648e:	2308      	movs	r3, #8
 8006490:	e002      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006492:	2308      	movs	r3, #8
 8006494:	e000      	b.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006496:	2308      	movs	r3, #8
 8006498:	4a70      	ldr	r2, [pc, #448]	; (800665c <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 800649a:	6093      	str	r3, [r2, #8]
 800649c:	e0e7      	b.n	800666e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	4b6e      	ldr	r3, [pc, #440]	; (8006660 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d960      	bls.n	800656c <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a5f      	ldr	r2, [pc, #380]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d057      	beq.n	8006564 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a5d      	ldr	r2, [pc, #372]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d050      	beq.n	8006560 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5c      	ldr	r2, [pc, #368]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d049      	beq.n	800655c <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a5a      	ldr	r2, [pc, #360]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d042      	beq.n	8006558 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a59      	ldr	r2, [pc, #356]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d03a      	beq.n	8006552 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a57      	ldr	r2, [pc, #348]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d032      	beq.n	800654c <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a56      	ldr	r2, [pc, #344]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02a      	beq.n	8006546 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a54      	ldr	r2, [pc, #336]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d022      	beq.n	8006540 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a53      	ldr	r2, [pc, #332]	; (800664c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d01a      	beq.n	800653a <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a51      	ldr	r2, [pc, #324]	; (8006650 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d012      	beq.n	8006534 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a50      	ldr	r2, [pc, #320]	; (8006654 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00a      	beq.n	800652e <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a4e      	ldr	r2, [pc, #312]	; (8006658 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d102      	bne.n	8006528 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8006522:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006526:	e01e      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800652c:	e01b      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800652e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006532:	e018      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006534:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006538:	e015      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800653a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800653e:	e012      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006544:	e00f      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800654a:	e00c      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800654c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006550:	e009      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006556:	e006      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006558:	2308      	movs	r3, #8
 800655a:	e004      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800655c:	2308      	movs	r3, #8
 800655e:	e002      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006560:	2308      	movs	r3, #8
 8006562:	e000      	b.n	8006566 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006564:	2308      	movs	r3, #8
 8006566:	4a3f      	ldr	r2, [pc, #252]	; (8006664 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8006568:	60d3      	str	r3, [r2, #12]
 800656a:	e080      	b.n	800666e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a2e      	ldr	r2, [pc, #184]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d078      	beq.n	8006668 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a2d      	ldr	r2, [pc, #180]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d050      	beq.n	8006622 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d049      	beq.n	800661e <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d042      	beq.n	800661a <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a28      	ldr	r2, [pc, #160]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d03a      	beq.n	8006614 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a27      	ldr	r2, [pc, #156]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d032      	beq.n	800660e <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a25      	ldr	r2, [pc, #148]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d02a      	beq.n	8006608 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a24      	ldr	r2, [pc, #144]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d022      	beq.n	8006602 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01a      	beq.n	80065fc <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d012      	beq.n	80065f6 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00a      	beq.n	80065f0 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d102      	bne.n	80065ea <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80065e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065e8:	e03f      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065ee:	e03c      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065f4:	e039      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065fa:	e036      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006600:	e033      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006606:	e030      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800660c:	e02d      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800660e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006612:	e02a      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006618:	e027      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800661a:	2308      	movs	r3, #8
 800661c:	e025      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800661e:	2308      	movs	r3, #8
 8006620:	e023      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006622:	2308      	movs	r3, #8
 8006624:	e021      	b.n	800666a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006626:	bf00      	nop
 8006628:	400260b8 	.word	0x400260b8
 800662c:	40026010 	.word	0x40026010
 8006630:	40026410 	.word	0x40026410
 8006634:	40026070 	.word	0x40026070
 8006638:	40026470 	.word	0x40026470
 800663c:	40026028 	.word	0x40026028
 8006640:	40026428 	.word	0x40026428
 8006644:	40026088 	.word	0x40026088
 8006648:	40026488 	.word	0x40026488
 800664c:	40026040 	.word	0x40026040
 8006650:	40026440 	.word	0x40026440
 8006654:	400260a0 	.word	0x400260a0
 8006658:	400264a0 	.word	0x400264a0
 800665c:	40026400 	.word	0x40026400
 8006660:	40026058 	.word	0x40026058
 8006664:	40026000 	.word	0x40026000
 8006668:	2308      	movs	r3, #8
 800666a:	4a9a      	ldr	r2, [pc, #616]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800666c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	4b98      	ldr	r3, [pc, #608]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8006676:	429a      	cmp	r2, r3
 8006678:	d960      	bls.n	800673c <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a97      	ldr	r2, [pc, #604]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d057      	beq.n	8006734 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a95      	ldr	r2, [pc, #596]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d050      	beq.n	8006730 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a94      	ldr	r2, [pc, #592]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d049      	beq.n	800672c <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a92      	ldr	r2, [pc, #584]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d042      	beq.n	8006728 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a91      	ldr	r2, [pc, #580]	; (80068ec <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d03a      	beq.n	8006722 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a8f      	ldr	r2, [pc, #572]	; (80068f0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d032      	beq.n	800671c <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a8e      	ldr	r2, [pc, #568]	; (80068f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d02a      	beq.n	8006716 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a8c      	ldr	r2, [pc, #560]	; (80068f8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d022      	beq.n	8006710 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a8b      	ldr	r2, [pc, #556]	; (80068fc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d01a      	beq.n	800670a <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a89      	ldr	r2, [pc, #548]	; (8006900 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d012      	beq.n	8006704 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a88      	ldr	r2, [pc, #544]	; (8006904 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00a      	beq.n	80066fe <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a86      	ldr	r2, [pc, #536]	; (8006908 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d102      	bne.n	80066f8 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80066f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066f6:	e01e      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80066f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066fc:	e01b      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80066fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006702:	e018      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006704:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006708:	e015      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800670a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800670e:	e012      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006714:	e00f      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800671a:	e00c      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800671c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006720:	e009      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006726:	e006      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006728:	2304      	movs	r3, #4
 800672a:	e004      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800672c:	2304      	movs	r3, #4
 800672e:	e002      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006730:	2304      	movs	r3, #4
 8006732:	e000      	b.n	8006736 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006734:	2304      	movs	r3, #4
 8006736:	4a75      	ldr	r2, [pc, #468]	; (800690c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8006738:	60d3      	str	r3, [r2, #12]
 800673a:	e151      	b.n	80069e0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	4b73      	ldr	r3, [pc, #460]	; (8006910 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8006744:	429a      	cmp	r2, r3
 8006746:	d960      	bls.n	800680a <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a63      	ldr	r2, [pc, #396]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d057      	beq.n	8006802 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a62      	ldr	r2, [pc, #392]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d050      	beq.n	80067fe <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a60      	ldr	r2, [pc, #384]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d049      	beq.n	80067fa <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a5f      	ldr	r2, [pc, #380]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d042      	beq.n	80067f6 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a5d      	ldr	r2, [pc, #372]	; (80068ec <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d03a      	beq.n	80067f0 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a5c      	ldr	r2, [pc, #368]	; (80068f0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d032      	beq.n	80067ea <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a5a      	ldr	r2, [pc, #360]	; (80068f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d02a      	beq.n	80067e4 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a59      	ldr	r2, [pc, #356]	; (80068f8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d022      	beq.n	80067de <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a57      	ldr	r2, [pc, #348]	; (80068fc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01a      	beq.n	80067d8 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a56      	ldr	r2, [pc, #344]	; (8006900 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d012      	beq.n	80067d2 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a54      	ldr	r2, [pc, #336]	; (8006904 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00a      	beq.n	80067cc <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a53      	ldr	r2, [pc, #332]	; (8006908 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d102      	bne.n	80067c6 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80067c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067c4:	e01e      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067ca:	e01b      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067d0:	e018      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067d6:	e015      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067dc:	e012      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e2:	e00f      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e8:	e00c      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ee:	e009      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067f4:	e006      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067f6:	2304      	movs	r3, #4
 80067f8:	e004      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067fa:	2304      	movs	r3, #4
 80067fc:	e002      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067fe:	2304      	movs	r3, #4
 8006800:	e000      	b.n	8006804 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8006802:	2304      	movs	r3, #4
 8006804:	4a41      	ldr	r2, [pc, #260]	; (800690c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8006806:	6093      	str	r3, [r2, #8]
 8006808:	e0ea      	b.n	80069e0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	4b40      	ldr	r3, [pc, #256]	; (8006914 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8006812:	429a      	cmp	r2, r3
 8006814:	f240 8084 	bls.w	8006920 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a2f      	ldr	r2, [pc, #188]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d07a      	beq.n	8006918 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a2e      	ldr	r2, [pc, #184]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d050      	beq.n	80068ce <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d049      	beq.n	80068ca <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2b      	ldr	r2, [pc, #172]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d042      	beq.n	80068c6 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a29      	ldr	r2, [pc, #164]	; (80068ec <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d03a      	beq.n	80068c0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a28      	ldr	r2, [pc, #160]	; (80068f0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d032      	beq.n	80068ba <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a26      	ldr	r2, [pc, #152]	; (80068f4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d02a      	beq.n	80068b4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a25      	ldr	r2, [pc, #148]	; (80068f8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a23      	ldr	r2, [pc, #140]	; (80068fc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01a      	beq.n	80068a8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a22      	ldr	r2, [pc, #136]	; (8006900 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d012      	beq.n	80068a2 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a20      	ldr	r2, [pc, #128]	; (8006904 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00a      	beq.n	800689c <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d102      	bne.n	8006896 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8006890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006894:	e041      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8006896:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800689a:	e03e      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800689c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068a0:	e03b      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068a6:	e038      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068ac:	e035      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b2:	e032      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b8:	e02f      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068be:	e02c      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068c4:	e029      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068c6:	2304      	movs	r3, #4
 80068c8:	e027      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068ca:	2304      	movs	r3, #4
 80068cc:	e025      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068ce:	2304      	movs	r3, #4
 80068d0:	e023      	b.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068d2:	bf00      	nop
 80068d4:	40026000 	.word	0x40026000
 80068d8:	40026458 	.word	0x40026458
 80068dc:	40026010 	.word	0x40026010
 80068e0:	40026410 	.word	0x40026410
 80068e4:	40026070 	.word	0x40026070
 80068e8:	40026470 	.word	0x40026470
 80068ec:	40026028 	.word	0x40026028
 80068f0:	40026428 	.word	0x40026428
 80068f4:	40026088 	.word	0x40026088
 80068f8:	40026488 	.word	0x40026488
 80068fc:	40026040 	.word	0x40026040
 8006900:	40026440 	.word	0x40026440
 8006904:	400260a0 	.word	0x400260a0
 8006908:	400264a0 	.word	0x400264a0
 800690c:	40026400 	.word	0x40026400
 8006910:	400260b8 	.word	0x400260b8
 8006914:	40026058 	.word	0x40026058
 8006918:	2304      	movs	r3, #4
 800691a:	4a94      	ldr	r2, [pc, #592]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800691c:	60d3      	str	r3, [r2, #12]
 800691e:	e05f      	b.n	80069e0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a92      	ldr	r2, [pc, #584]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d057      	beq.n	80069da <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a91      	ldr	r2, [pc, #580]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d050      	beq.n	80069d6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a8f      	ldr	r2, [pc, #572]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d049      	beq.n	80069d2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a8e      	ldr	r2, [pc, #568]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d042      	beq.n	80069ce <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a8c      	ldr	r2, [pc, #560]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d03a      	beq.n	80069c8 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a8b      	ldr	r2, [pc, #556]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d032      	beq.n	80069c2 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a89      	ldr	r2, [pc, #548]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d02a      	beq.n	80069bc <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a88      	ldr	r2, [pc, #544]	; (8006b8c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d022      	beq.n	80069b6 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a86      	ldr	r2, [pc, #536]	; (8006b90 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d01a      	beq.n	80069b0 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a85      	ldr	r2, [pc, #532]	; (8006b94 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d012      	beq.n	80069aa <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a83      	ldr	r2, [pc, #524]	; (8006b98 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00a      	beq.n	80069a4 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a82      	ldr	r2, [pc, #520]	; (8006b9c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d102      	bne.n	800699e <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8006998:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800699c:	e01e      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800699e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069a2:	e01b      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069a8:	e018      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069ae:	e015      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069b4:	e012      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ba:	e00f      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069c0:	e00c      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069c6:	e009      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069cc:	e006      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069ce:	2304      	movs	r3, #4
 80069d0:	e004      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069d2:	2304      	movs	r3, #4
 80069d4:	e002      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069d6:	2304      	movs	r3, #4
 80069d8:	e000      	b.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069da:	2304      	movs	r3, #4
 80069dc:	4a63      	ldr	r2, [pc, #396]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80069de:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	4b6e      	ldr	r3, [pc, #440]	; (8006ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d95c      	bls.n	8006aa6 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a5f      	ldr	r2, [pc, #380]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d053      	beq.n	8006a9e <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5e      	ldr	r2, [pc, #376]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d04c      	beq.n	8006a9a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5c      	ldr	r2, [pc, #368]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d045      	beq.n	8006a96 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a5b      	ldr	r2, [pc, #364]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d03e      	beq.n	8006a92 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a59      	ldr	r2, [pc, #356]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d037      	beq.n	8006a8e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a58      	ldr	r2, [pc, #352]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d030      	beq.n	8006a8a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a56      	ldr	r2, [pc, #344]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d029      	beq.n	8006a86 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a55      	ldr	r2, [pc, #340]	; (8006b8c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d022      	beq.n	8006a82 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a53      	ldr	r2, [pc, #332]	; (8006b90 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01a      	beq.n	8006a7c <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a52      	ldr	r2, [pc, #328]	; (8006b94 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d012      	beq.n	8006a76 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a50      	ldr	r2, [pc, #320]	; (8006b98 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00a      	beq.n	8006a70 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a4f      	ldr	r2, [pc, #316]	; (8006b9c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d102      	bne.n	8006a6a <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8006a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a68:	e01a      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a6e:	e017      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a74:	e014      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a7a:	e011      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a80:	e00e      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a82:	2340      	movs	r3, #64	; 0x40
 8006a84:	e00c      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a86:	2340      	movs	r3, #64	; 0x40
 8006a88:	e00a      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a8a:	2340      	movs	r3, #64	; 0x40
 8006a8c:	e008      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a8e:	2340      	movs	r3, #64	; 0x40
 8006a90:	e006      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e004      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e002      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4a40      	ldr	r2, [pc, #256]	; (8006ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8006aa2:	60d3      	str	r3, [r2, #12]
 8006aa4:	e141      	b.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4b3e      	ldr	r3, [pc, #248]	; (8006ba8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d97c      	bls.n	8006bac <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a2e      	ldr	r2, [pc, #184]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d053      	beq.n	8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a2c      	ldr	r2, [pc, #176]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d04c      	beq.n	8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d045      	beq.n	8006b5c <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a29      	ldr	r2, [pc, #164]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d03e      	beq.n	8006b58 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a28      	ldr	r2, [pc, #160]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d037      	beq.n	8006b54 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a26      	ldr	r2, [pc, #152]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d030      	beq.n	8006b50 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d029      	beq.n	8006b4c <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a23      	ldr	r2, [pc, #140]	; (8006b8c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d022      	beq.n	8006b48 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d01a      	beq.n	8006b42 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a20      	ldr	r2, [pc, #128]	; (8006b94 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d012      	beq.n	8006b3c <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00a      	beq.n	8006b36 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d102      	bne.n	8006b30 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8006b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b2e:	e01a      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b34:	e017      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b3a:	e014      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b40:	e011      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b46:	e00e      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b48:	2340      	movs	r3, #64	; 0x40
 8006b4a:	e00c      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b4c:	2340      	movs	r3, #64	; 0x40
 8006b4e:	e00a      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b50:	2340      	movs	r3, #64	; 0x40
 8006b52:	e008      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b54:	2340      	movs	r3, #64	; 0x40
 8006b56:	e006      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e004      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e002      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b64:	2301      	movs	r3, #1
 8006b66:	4a0f      	ldr	r2, [pc, #60]	; (8006ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8006b68:	6093      	str	r3, [r2, #8]
 8006b6a:	e0de      	b.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8006b6c:	40026000 	.word	0x40026000
 8006b70:	40026010 	.word	0x40026010
 8006b74:	40026410 	.word	0x40026410
 8006b78:	40026070 	.word	0x40026070
 8006b7c:	40026470 	.word	0x40026470
 8006b80:	40026028 	.word	0x40026028
 8006b84:	40026428 	.word	0x40026428
 8006b88:	40026088 	.word	0x40026088
 8006b8c:	40026488 	.word	0x40026488
 8006b90:	40026040 	.word	0x40026040
 8006b94:	40026440 	.word	0x40026440
 8006b98:	400260a0 	.word	0x400260a0
 8006b9c:	400264a0 	.word	0x400264a0
 8006ba0:	40026458 	.word	0x40026458
 8006ba4:	40026400 	.word	0x40026400
 8006ba8:	400260b8 	.word	0x400260b8
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4b78      	ldr	r3, [pc, #480]	; (8006d94 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d95c      	bls.n	8006c72 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a76      	ldr	r2, [pc, #472]	; (8006d98 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d053      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a75      	ldr	r2, [pc, #468]	; (8006d9c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d04c      	beq.n	8006c66 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a73      	ldr	r2, [pc, #460]	; (8006da0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d045      	beq.n	8006c62 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a72      	ldr	r2, [pc, #456]	; (8006da4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d03e      	beq.n	8006c5e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a70      	ldr	r2, [pc, #448]	; (8006da8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d037      	beq.n	8006c5a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6f      	ldr	r2, [pc, #444]	; (8006dac <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d030      	beq.n	8006c56 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6d      	ldr	r2, [pc, #436]	; (8006db0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d029      	beq.n	8006c52 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a6c      	ldr	r2, [pc, #432]	; (8006db4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d022      	beq.n	8006c4e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a6a      	ldr	r2, [pc, #424]	; (8006db8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01a      	beq.n	8006c48 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a69      	ldr	r2, [pc, #420]	; (8006dbc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d012      	beq.n	8006c42 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a67      	ldr	r2, [pc, #412]	; (8006dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00a      	beq.n	8006c3c <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a66      	ldr	r2, [pc, #408]	; (8006dc4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d102      	bne.n	8006c36 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8006c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c34:	e01a      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c3a:	e017      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c40:	e014      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c46:	e011      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c4c:	e00e      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c4e:	2340      	movs	r3, #64	; 0x40
 8006c50:	e00c      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	e00a      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	e008      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c5a:	2340      	movs	r3, #64	; 0x40
 8006c5c:	e006      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e004      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e002      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4a56      	ldr	r2, [pc, #344]	; (8006dc8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8006c6e:	60d3      	str	r3, [r2, #12]
 8006c70:	e05b      	b.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a48      	ldr	r2, [pc, #288]	; (8006d98 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d053      	beq.n	8006d24 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a46      	ldr	r2, [pc, #280]	; (8006d9c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d04c      	beq.n	8006d20 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a45      	ldr	r2, [pc, #276]	; (8006da0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d045      	beq.n	8006d1c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a43      	ldr	r2, [pc, #268]	; (8006da4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d03e      	beq.n	8006d18 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a42      	ldr	r2, [pc, #264]	; (8006da8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d037      	beq.n	8006d14 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a40      	ldr	r2, [pc, #256]	; (8006dac <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d030      	beq.n	8006d10 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a3f      	ldr	r2, [pc, #252]	; (8006db0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d029      	beq.n	8006d0c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a3d      	ldr	r2, [pc, #244]	; (8006db4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d022      	beq.n	8006d08 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a3c      	ldr	r2, [pc, #240]	; (8006db8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d01a      	beq.n	8006d02 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a3a      	ldr	r2, [pc, #232]	; (8006dbc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d012      	beq.n	8006cfc <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a39      	ldr	r2, [pc, #228]	; (8006dc0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00a      	beq.n	8006cf6 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a37      	ldr	r2, [pc, #220]	; (8006dc4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d102      	bne.n	8006cf0 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8006cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cee:	e01a      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006cf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006cf4:	e017      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cfa:	e014      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d00:	e011      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d06:	e00e      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	e00c      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d0c:	2340      	movs	r3, #64	; 0x40
 8006d0e:	e00a      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	e008      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d14:	2340      	movs	r3, #64	; 0x40
 8006d16:	e006      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e004      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e002      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d24:	2301      	movs	r3, #1
 8006d26:	4a28      	ldr	r2, [pc, #160]	; (8006dc8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8006d28:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 0216 	orr.w	r2, r2, #22
 8006d38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0208 	orr.w	r2, r2, #8
 8006d68:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0201 	orr.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e005      	b.n	8006d88 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006d84:	2302      	movs	r3, #2
 8006d86:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	40026058 	.word	0x40026058
 8006d98:	40026010 	.word	0x40026010
 8006d9c:	40026410 	.word	0x40026410
 8006da0:	40026070 	.word	0x40026070
 8006da4:	40026470 	.word	0x40026470
 8006da8:	40026028 	.word	0x40026028
 8006dac:	40026428 	.word	0x40026428
 8006db0:	40026088 	.word	0x40026088
 8006db4:	40026488 	.word	0x40026488
 8006db8:	40026040 	.word	0x40026040
 8006dbc:	40026440 	.word	0x40026440
 8006dc0:	400260a0 	.word	0x400260a0
 8006dc4:	400264a0 	.word	0x400264a0
 8006dc8:	40026000 	.word	0x40026000

08006dcc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	60da      	str	r2, [r3, #12]
 8006de8:	e003      	b.n	8006df2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d108      	bne.n	8006e30 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e2e:	e007      	b.n	8006e40 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	60da      	str	r2, [r3, #12]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b089      	sub	sp, #36	; 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	e16b      	b.n	8007140 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e68:	2201      	movs	r2, #1
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	f040 815a 	bne.w	800713a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d003      	beq.n	8006e96 <HAL_GPIO_Init+0x4a>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b12      	cmp	r3, #18
 8006e94:	d123      	bne.n	8006ede <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	08da      	lsrs	r2, r3, #3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3208      	adds	r2, #8
 8006e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	220f      	movs	r2, #15
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	43db      	mvns	r3, r3
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	08da      	lsrs	r2, r3, #3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3208      	adds	r2, #8
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	2203      	movs	r2, #3
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f003 0203 	and.w	r2, r3, #3
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d00b      	beq.n	8006f32 <HAL_GPIO_Init+0xe6>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d007      	beq.n	8006f32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f26:	2b11      	cmp	r3, #17
 8006f28:	d003      	beq.n	8006f32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b12      	cmp	r3, #18
 8006f30:	d130      	bne.n	8006f94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	2203      	movs	r2, #3
 8006f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f42:	43db      	mvns	r3, r3
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	4013      	ands	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	fa02 f303 	lsl.w	r3, r2, r3
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f68:	2201      	movs	r2, #1
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	43db      	mvns	r3, r3
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	4013      	ands	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	091b      	lsrs	r3, r3, #4
 8006f7e:	f003 0201 	and.w	r2, r3, #1
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80b4 	beq.w	800713a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	4b5f      	ldr	r3, [pc, #380]	; (8007154 <HAL_GPIO_Init+0x308>)
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	4a5e      	ldr	r2, [pc, #376]	; (8007154 <HAL_GPIO_Init+0x308>)
 8006fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fe2:	4b5c      	ldr	r3, [pc, #368]	; (8007154 <HAL_GPIO_Init+0x308>)
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fee:	4a5a      	ldr	r2, [pc, #360]	; (8007158 <HAL_GPIO_Init+0x30c>)
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	089b      	lsrs	r3, r3, #2
 8006ff4:	3302      	adds	r3, #2
 8006ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	220f      	movs	r2, #15
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	43db      	mvns	r3, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4013      	ands	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a51      	ldr	r2, [pc, #324]	; (800715c <HAL_GPIO_Init+0x310>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d02b      	beq.n	8007072 <HAL_GPIO_Init+0x226>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a50      	ldr	r2, [pc, #320]	; (8007160 <HAL_GPIO_Init+0x314>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d025      	beq.n	800706e <HAL_GPIO_Init+0x222>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a4f      	ldr	r2, [pc, #316]	; (8007164 <HAL_GPIO_Init+0x318>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01f      	beq.n	800706a <HAL_GPIO_Init+0x21e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a4e      	ldr	r2, [pc, #312]	; (8007168 <HAL_GPIO_Init+0x31c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d019      	beq.n	8007066 <HAL_GPIO_Init+0x21a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a4d      	ldr	r2, [pc, #308]	; (800716c <HAL_GPIO_Init+0x320>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <HAL_GPIO_Init+0x216>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a4c      	ldr	r2, [pc, #304]	; (8007170 <HAL_GPIO_Init+0x324>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00d      	beq.n	800705e <HAL_GPIO_Init+0x212>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a4b      	ldr	r2, [pc, #300]	; (8007174 <HAL_GPIO_Init+0x328>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d007      	beq.n	800705a <HAL_GPIO_Init+0x20e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a4a      	ldr	r2, [pc, #296]	; (8007178 <HAL_GPIO_Init+0x32c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d101      	bne.n	8007056 <HAL_GPIO_Init+0x20a>
 8007052:	2307      	movs	r3, #7
 8007054:	e00e      	b.n	8007074 <HAL_GPIO_Init+0x228>
 8007056:	2308      	movs	r3, #8
 8007058:	e00c      	b.n	8007074 <HAL_GPIO_Init+0x228>
 800705a:	2306      	movs	r3, #6
 800705c:	e00a      	b.n	8007074 <HAL_GPIO_Init+0x228>
 800705e:	2305      	movs	r3, #5
 8007060:	e008      	b.n	8007074 <HAL_GPIO_Init+0x228>
 8007062:	2304      	movs	r3, #4
 8007064:	e006      	b.n	8007074 <HAL_GPIO_Init+0x228>
 8007066:	2303      	movs	r3, #3
 8007068:	e004      	b.n	8007074 <HAL_GPIO_Init+0x228>
 800706a:	2302      	movs	r3, #2
 800706c:	e002      	b.n	8007074 <HAL_GPIO_Init+0x228>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <HAL_GPIO_Init+0x228>
 8007072:	2300      	movs	r3, #0
 8007074:	69fa      	ldr	r2, [r7, #28]
 8007076:	f002 0203 	and.w	r2, r2, #3
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	4093      	lsls	r3, r2
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	4313      	orrs	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007084:	4934      	ldr	r1, [pc, #208]	; (8007158 <HAL_GPIO_Init+0x30c>)
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	089b      	lsrs	r3, r3, #2
 800708a:	3302      	adds	r3, #2
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007092:	4b3a      	ldr	r3, [pc, #232]	; (800717c <HAL_GPIO_Init+0x330>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	43db      	mvns	r3, r3
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4013      	ands	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070b6:	4a31      	ldr	r2, [pc, #196]	; (800717c <HAL_GPIO_Init+0x330>)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070bc:	4b2f      	ldr	r3, [pc, #188]	; (800717c <HAL_GPIO_Init+0x330>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070e0:	4a26      	ldr	r2, [pc, #152]	; (800717c <HAL_GPIO_Init+0x330>)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070e6:	4b25      	ldr	r3, [pc, #148]	; (800717c <HAL_GPIO_Init+0x330>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	43db      	mvns	r3, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	4013      	ands	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800710a:	4a1c      	ldr	r2, [pc, #112]	; (800717c <HAL_GPIO_Init+0x330>)
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <HAL_GPIO_Init+0x330>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	43db      	mvns	r3, r3
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	4013      	ands	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007134:	4a11      	ldr	r2, [pc, #68]	; (800717c <HAL_GPIO_Init+0x330>)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	3301      	adds	r3, #1
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b0f      	cmp	r3, #15
 8007144:	f67f ae90 	bls.w	8006e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007148:	bf00      	nop
 800714a:	3724      	adds	r7, #36	; 0x24
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40023800 	.word	0x40023800
 8007158:	40013800 	.word	0x40013800
 800715c:	40020000 	.word	0x40020000
 8007160:	40020400 	.word	0x40020400
 8007164:	40020800 	.word	0x40020800
 8007168:	40020c00 	.word	0x40020c00
 800716c:	40021000 	.word	0x40021000
 8007170:	40021400 	.word	0x40021400
 8007174:	40021800 	.word	0x40021800
 8007178:	40021c00 	.word	0x40021c00
 800717c:	40013c00 	.word	0x40013c00

08007180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	887b      	ldrh	r3, [r7, #2]
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
 800719c:	e001      	b.n	80071a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	807b      	strh	r3, [r7, #2]
 80071bc:	4613      	mov	r3, r2
 80071be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071c0:	787b      	ldrb	r3, [r7, #1]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071c6:	887a      	ldrh	r2, [r7, #2]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071cc:	e003      	b.n	80071d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071ce:	887b      	ldrh	r3, [r7, #2]
 80071d0:	041a      	lsls	r2, r3, #16
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	619a      	str	r2, [r3, #24]
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e10f      	b.n	8007416 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f004 fafc 	bl	800b808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2224      	movs	r2, #36	; 0x24
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0201 	bic.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007228:	f001 f880 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 800722c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	4a7b      	ldr	r2, [pc, #492]	; (8007420 <HAL_I2C_Init+0x23c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d807      	bhi.n	8007248 <HAL_I2C_Init+0x64>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4a7a      	ldr	r2, [pc, #488]	; (8007424 <HAL_I2C_Init+0x240>)
 800723c:	4293      	cmp	r3, r2
 800723e:	bf94      	ite	ls
 8007240:	2301      	movls	r3, #1
 8007242:	2300      	movhi	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	e006      	b.n	8007256 <HAL_I2C_Init+0x72>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4a77      	ldr	r2, [pc, #476]	; (8007428 <HAL_I2C_Init+0x244>)
 800724c:	4293      	cmp	r3, r2
 800724e:	bf94      	ite	ls
 8007250:	2301      	movls	r3, #1
 8007252:	2300      	movhi	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e0db      	b.n	8007416 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a72      	ldr	r2, [pc, #456]	; (800742c <HAL_I2C_Init+0x248>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	0c9b      	lsrs	r3, r3, #18
 8007268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4a64      	ldr	r2, [pc, #400]	; (8007420 <HAL_I2C_Init+0x23c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d802      	bhi.n	8007298 <HAL_I2C_Init+0xb4>
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3301      	adds	r3, #1
 8007296:	e009      	b.n	80072ac <HAL_I2C_Init+0xc8>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	4a63      	ldr	r2, [pc, #396]	; (8007430 <HAL_I2C_Init+0x24c>)
 80072a4:	fba2 2303 	umull	r2, r3, r2, r3
 80072a8:	099b      	lsrs	r3, r3, #6
 80072aa:	3301      	adds	r3, #1
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6812      	ldr	r2, [r2, #0]
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	4956      	ldr	r1, [pc, #344]	; (8007420 <HAL_I2C_Init+0x23c>)
 80072c8:	428b      	cmp	r3, r1
 80072ca:	d80d      	bhi.n	80072e8 <HAL_I2C_Init+0x104>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	1e59      	subs	r1, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80072da:	3301      	adds	r3, #1
 80072dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	bf38      	it	cc
 80072e4:	2304      	movcc	r3, #4
 80072e6:	e04f      	b.n	8007388 <HAL_I2C_Init+0x1a4>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d111      	bne.n	8007314 <HAL_I2C_Init+0x130>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	1e58      	subs	r0, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6859      	ldr	r1, [r3, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	440b      	add	r3, r1
 80072fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007302:	3301      	adds	r3, #1
 8007304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf0c      	ite	eq
 800730c:	2301      	moveq	r3, #1
 800730e:	2300      	movne	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	e012      	b.n	800733a <HAL_I2C_Init+0x156>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	1e58      	subs	r0, r3, #1
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6859      	ldr	r1, [r3, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	0099      	lsls	r1, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	fbb0 f3f3 	udiv	r3, r0, r3
 800732a:	3301      	adds	r3, #1
 800732c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007330:	2b00      	cmp	r3, #0
 8007332:	bf0c      	ite	eq
 8007334:	2301      	moveq	r3, #1
 8007336:	2300      	movne	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_I2C_Init+0x15e>
 800733e:	2301      	movs	r3, #1
 8007340:	e022      	b.n	8007388 <HAL_I2C_Init+0x1a4>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10e      	bne.n	8007368 <HAL_I2C_Init+0x184>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1e58      	subs	r0, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6859      	ldr	r1, [r3, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	440b      	add	r3, r1
 8007358:	fbb0 f3f3 	udiv	r3, r0, r3
 800735c:	3301      	adds	r3, #1
 800735e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007366:	e00f      	b.n	8007388 <HAL_I2C_Init+0x1a4>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	1e58      	subs	r0, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6859      	ldr	r1, [r3, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	0099      	lsls	r1, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	fbb0 f3f3 	udiv	r3, r0, r3
 800737e:	3301      	adds	r3, #1
 8007380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	6809      	ldr	r1, [r1, #0]
 800738c:	4313      	orrs	r3, r2
 800738e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80073b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6911      	ldr	r1, [r2, #16]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68d2      	ldr	r2, [r2, #12]
 80073c2:	4311      	orrs	r1, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	430b      	orrs	r3, r1
 80073ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0201 	orr.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	000186a0 	.word	0x000186a0
 8007424:	001e847f 	.word	0x001e847f
 8007428:	003d08ff 	.word	0x003d08ff
 800742c:	431bde83 	.word	0x431bde83
 8007430:	10624dd3 	.word	0x10624dd3

08007434 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	461a      	mov	r2, r3
 8007442:	4603      	mov	r3, r0
 8007444:	817b      	strh	r3, [r7, #10]
 8007446:	460b      	mov	r3, r1
 8007448:	813b      	strh	r3, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800744e:	f7fd fb5b 	bl	8004b08 <HAL_GetTick>
 8007452:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b20      	cmp	r3, #32
 800745e:	f040 80d9 	bne.w	8007614 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	2319      	movs	r3, #25
 8007468:	2201      	movs	r2, #1
 800746a:	496d      	ldr	r1, [pc, #436]	; (8007620 <HAL_I2C_Mem_Write+0x1ec>)
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f965 	bl	800773c <I2C_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007478:	2302      	movs	r3, #2
 800747a:	e0cc      	b.n	8007616 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_I2C_Mem_Write+0x56>
 8007486:	2302      	movs	r3, #2
 8007488:	e0c5      	b.n	8007616 <HAL_I2C_Mem_Write+0x1e2>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b01      	cmp	r3, #1
 800749e:	d007      	beq.n	80074b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0201 	orr.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2221      	movs	r2, #33	; 0x21
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2240      	movs	r2, #64	; 0x40
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a4d      	ldr	r2, [pc, #308]	; (8007624 <HAL_I2C_Mem_Write+0x1f0>)
 80074f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074f2:	88f8      	ldrh	r0, [r7, #6]
 80074f4:	893a      	ldrh	r2, [r7, #8]
 80074f6:	8979      	ldrh	r1, [r7, #10]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4603      	mov	r3, r0
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f890 	bl	8007628 <I2C_RequestMemoryWrite>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d052      	beq.n	80075b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e081      	b.n	8007616 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 f9e6 	bl	80078e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00d      	beq.n	800753e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	2b04      	cmp	r3, #4
 8007528:	d107      	bne.n	800753a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e06b      	b.n	8007616 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	781a      	ldrb	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b04      	cmp	r3, #4
 800757a:	d11b      	bne.n	80075b4 <HAL_I2C_Mem_Write+0x180>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007580:	2b00      	cmp	r3, #0
 8007582:	d017      	beq.n	80075b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	781a      	ldrb	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1aa      	bne.n	8007512 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f9d2 	bl	800796a <I2C_WaitOnBTFFlagUntilTimeout>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00d      	beq.n	80075e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d107      	bne.n	80075e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e016      	b.n	8007616 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	e000      	b.n	8007616 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007614:	2302      	movs	r3, #2
  }
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	00100002 	.word	0x00100002
 8007624:	ffff0000 	.word	0xffff0000

08007628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	4608      	mov	r0, r1
 8007632:	4611      	mov	r1, r2
 8007634:	461a      	mov	r2, r3
 8007636:	4603      	mov	r3, r0
 8007638:	817b      	strh	r3, [r7, #10]
 800763a:	460b      	mov	r3, r1
 800763c:	813b      	strh	r3, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	2200      	movs	r2, #0
 800765a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f86c 	bl	800773c <I2C_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e05f      	b.n	800772e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800766e:	897b      	ldrh	r3, [r7, #10]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800767c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	6a3a      	ldr	r2, [r7, #32]
 8007682:	492d      	ldr	r1, [pc, #180]	; (8007738 <I2C_RequestMemoryWrite+0x110>)
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f8b0 	bl	80077ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e04c      	b.n	800772e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ac:	6a39      	ldr	r1, [r7, #32]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f91a 	bl	80078e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00d      	beq.n	80076d6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d107      	bne.n	80076d2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e02b      	b.n	800772e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d105      	bne.n	80076e8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076dc:	893b      	ldrh	r3, [r7, #8]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	611a      	str	r2, [r3, #16]
 80076e6:	e021      	b.n	800772c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076e8:	893b      	ldrh	r3, [r7, #8]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f8:	6a39      	ldr	r1, [r7, #32]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f8f4 	bl	80078e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00d      	beq.n	8007722 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	2b04      	cmp	r3, #4
 800770c:	d107      	bne.n	800771e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800771c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e005      	b.n	800772e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007722:	893b      	ldrh	r3, [r7, #8]
 8007724:	b2da      	uxtb	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	00010002 	.word	0x00010002

0800773c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800774c:	e025      	b.n	800779a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d021      	beq.n	800779a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007756:	f7fd f9d7 	bl	8004b08 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d116      	bne.n	800779a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f043 0220 	orr.w	r2, r3, #32
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e023      	b.n	80077e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	0c1b      	lsrs	r3, r3, #16
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d10d      	bne.n	80077c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	43da      	mvns	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4013      	ands	r3, r2
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	bf0c      	ite	eq
 80077b6:	2301      	moveq	r3, #1
 80077b8:	2300      	movne	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	e00c      	b.n	80077da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	43da      	mvns	r2, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4013      	ands	r3, r2
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d0b6      	beq.n	800774e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077f8:	e051      	b.n	800789e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007808:	d123      	bne.n	8007852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007818:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007822:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2220      	movs	r2, #32
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	f043 0204 	orr.w	r2, r3, #4
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e046      	b.n	80078e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d021      	beq.n	800789e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800785a:	f7fd f955 	bl	8004b08 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	d302      	bcc.n	8007870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d116      	bne.n	800789e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f043 0220 	orr.w	r2, r3, #32
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e020      	b.n	80078e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	0c1b      	lsrs	r3, r3, #16
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d10c      	bne.n	80078c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	43da      	mvns	r2, r3
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4013      	ands	r3, r2
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bf14      	ite	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	2300      	moveq	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	e00b      	b.n	80078da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	43da      	mvns	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4013      	ands	r3, r2
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	bf14      	ite	ne
 80078d4:	2301      	movne	r3, #1
 80078d6:	2300      	moveq	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d18d      	bne.n	80077fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078f4:	e02d      	b.n	8007952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 f878 	bl	80079ec <I2C_IsAcknowledgeFailed>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e02d      	b.n	8007962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d021      	beq.n	8007952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800790e:	f7fd f8fb 	bl	8004b08 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	d302      	bcc.n	8007924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d116      	bne.n	8007952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	f043 0220 	orr.w	r2, r3, #32
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e007      	b.n	8007962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795c:	2b80      	cmp	r3, #128	; 0x80
 800795e:	d1ca      	bne.n	80078f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007976:	e02d      	b.n	80079d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f837 	bl	80079ec <I2C_IsAcknowledgeFailed>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e02d      	b.n	80079e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d021      	beq.n	80079d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007990:	f7fd f8ba 	bl	8004b08 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	429a      	cmp	r2, r3
 800799e:	d302      	bcc.n	80079a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d116      	bne.n	80079d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	f043 0220 	orr.w	r2, r3, #32
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e007      	b.n	80079e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d1ca      	bne.n	8007978 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a02:	d11b      	bne.n	8007a3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	f043 0204 	orr.w	r2, r3, #4
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e22d      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d075      	beq.n	8007b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a6a:	4ba3      	ldr	r3, [pc, #652]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 030c 	and.w	r3, r3, #12
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d00c      	beq.n	8007a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a76:	4ba0      	ldr	r3, [pc, #640]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d112      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a82:	4b9d      	ldr	r3, [pc, #628]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a8e:	d10b      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a90:	4b99      	ldr	r3, [pc, #612]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d05b      	beq.n	8007b54 <HAL_RCC_OscConfig+0x108>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d157      	bne.n	8007b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e208      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab0:	d106      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x74>
 8007ab2:	4b91      	ldr	r3, [pc, #580]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a90      	ldr	r2, [pc, #576]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e01d      	b.n	8007afc <HAL_RCC_OscConfig+0xb0>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x98>
 8007aca:	4b8b      	ldr	r3, [pc, #556]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a8a      	ldr	r2, [pc, #552]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	4b88      	ldr	r3, [pc, #544]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a87      	ldr	r2, [pc, #540]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	e00b      	b.n	8007afc <HAL_RCC_OscConfig+0xb0>
 8007ae4:	4b84      	ldr	r3, [pc, #528]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a83      	ldr	r2, [pc, #524]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	4b81      	ldr	r3, [pc, #516]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a80      	ldr	r2, [pc, #512]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d013      	beq.n	8007b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b04:	f7fd f800 	bl	8004b08 <HAL_GetTick>
 8007b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b0a:	e008      	b.n	8007b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b0c:	f7fc fffc 	bl	8004b08 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b64      	cmp	r3, #100	; 0x64
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e1cd      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b1e:	4b76      	ldr	r3, [pc, #472]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0f0      	beq.n	8007b0c <HAL_RCC_OscConfig+0xc0>
 8007b2a:	e014      	b.n	8007b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b2c:	f7fc ffec 	bl	8004b08 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b34:	f7fc ffe8 	bl	8004b08 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b64      	cmp	r3, #100	; 0x64
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e1b9      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b46:	4b6c      	ldr	r3, [pc, #432]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f0      	bne.n	8007b34 <HAL_RCC_OscConfig+0xe8>
 8007b52:	e000      	b.n	8007b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d063      	beq.n	8007c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b62:	4b65      	ldr	r3, [pc, #404]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 030c 	and.w	r3, r3, #12
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b6e:	4b62      	ldr	r3, [pc, #392]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d11c      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b7a:	4b5f      	ldr	r3, [pc, #380]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d116      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b86:	4b5c      	ldr	r3, [pc, #368]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_RCC_OscConfig+0x152>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d001      	beq.n	8007b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e18d      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b9e:	4b56      	ldr	r3, [pc, #344]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4952      	ldr	r1, [pc, #328]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bb2:	e03a      	b.n	8007c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d020      	beq.n	8007bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bbc:	4b4f      	ldr	r3, [pc, #316]	; (8007cfc <HAL_RCC_OscConfig+0x2b0>)
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc2:	f7fc ffa1 	bl	8004b08 <HAL_GetTick>
 8007bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bc8:	e008      	b.n	8007bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bca:	f7fc ff9d 	bl	8004b08 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e16e      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bdc:	4b46      	ldr	r3, [pc, #280]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be8:	4b43      	ldr	r3, [pc, #268]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	4940      	ldr	r1, [pc, #256]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	600b      	str	r3, [r1, #0]
 8007bfc:	e015      	b.n	8007c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bfe:	4b3f      	ldr	r3, [pc, #252]	; (8007cfc <HAL_RCC_OscConfig+0x2b0>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c04:	f7fc ff80 	bl	8004b08 <HAL_GetTick>
 8007c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c0a:	e008      	b.n	8007c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c0c:	f7fc ff7c 	bl	8004b08 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e14d      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c1e:	4b36      	ldr	r3, [pc, #216]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f0      	bne.n	8007c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d030      	beq.n	8007c98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d016      	beq.n	8007c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c3e:	4b30      	ldr	r3, [pc, #192]	; (8007d00 <HAL_RCC_OscConfig+0x2b4>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c44:	f7fc ff60 	bl	8004b08 <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c4c:	f7fc ff5c 	bl	8004b08 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e12d      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c5e:	4b26      	ldr	r3, [pc, #152]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0f0      	beq.n	8007c4c <HAL_RCC_OscConfig+0x200>
 8007c6a:	e015      	b.n	8007c98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c6c:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <HAL_RCC_OscConfig+0x2b4>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c72:	f7fc ff49 	bl	8004b08 <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c7a:	f7fc ff45 	bl	8004b08 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e116      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f0      	bne.n	8007c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 80a0 	beq.w	8007de6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007caa:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10f      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	4a0e      	ldr	r2, [pc, #56]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <HAL_RCC_OscConfig+0x2ac>)
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <HAL_RCC_OscConfig+0x2b8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d121      	bne.n	8007d26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ce2:	4b08      	ldr	r3, [pc, #32]	; (8007d04 <HAL_RCC_OscConfig+0x2b8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a07      	ldr	r2, [pc, #28]	; (8007d04 <HAL_RCC_OscConfig+0x2b8>)
 8007ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cee:	f7fc ff0b 	bl	8004b08 <HAL_GetTick>
 8007cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cf4:	e011      	b.n	8007d1a <HAL_RCC_OscConfig+0x2ce>
 8007cf6:	bf00      	nop
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	42470000 	.word	0x42470000
 8007d00:	42470e80 	.word	0x42470e80
 8007d04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d08:	f7fc fefe 	bl	8004b08 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e0cf      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d1a:	4b6a      	ldr	r3, [pc, #424]	; (8007ec4 <HAL_RCC_OscConfig+0x478>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0f0      	beq.n	8007d08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d106      	bne.n	8007d3c <HAL_RCC_OscConfig+0x2f0>
 8007d2e:	4b66      	ldr	r3, [pc, #408]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	4a65      	ldr	r2, [pc, #404]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d34:	f043 0301 	orr.w	r3, r3, #1
 8007d38:	6713      	str	r3, [r2, #112]	; 0x70
 8007d3a:	e01c      	b.n	8007d76 <HAL_RCC_OscConfig+0x32a>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	d10c      	bne.n	8007d5e <HAL_RCC_OscConfig+0x312>
 8007d44:	4b60      	ldr	r3, [pc, #384]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	4a5f      	ldr	r2, [pc, #380]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d4a:	f043 0304 	orr.w	r3, r3, #4
 8007d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d50:	4b5d      	ldr	r3, [pc, #372]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	4a5c      	ldr	r2, [pc, #368]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d5c:	e00b      	b.n	8007d76 <HAL_RCC_OscConfig+0x32a>
 8007d5e:	4b5a      	ldr	r3, [pc, #360]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d62:	4a59      	ldr	r2, [pc, #356]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d64:	f023 0301 	bic.w	r3, r3, #1
 8007d68:	6713      	str	r3, [r2, #112]	; 0x70
 8007d6a:	4b57      	ldr	r3, [pc, #348]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	4a56      	ldr	r2, [pc, #344]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d70:	f023 0304 	bic.w	r3, r3, #4
 8007d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d015      	beq.n	8007daa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d7e:	f7fc fec3 	bl	8004b08 <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d84:	e00a      	b.n	8007d9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d86:	f7fc febf 	bl	8004b08 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e08e      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d9c:	4b4a      	ldr	r3, [pc, #296]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0ee      	beq.n	8007d86 <HAL_RCC_OscConfig+0x33a>
 8007da8:	e014      	b.n	8007dd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007daa:	f7fc fead 	bl	8004b08 <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007db0:	e00a      	b.n	8007dc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007db2:	f7fc fea9 	bl	8004b08 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e078      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dc8:	4b3f      	ldr	r3, [pc, #252]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1ee      	bne.n	8007db2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d105      	bne.n	8007de6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dda:	4b3b      	ldr	r3, [pc, #236]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	4a3a      	ldr	r2, [pc, #232]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d064      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dee:	4b36      	ldr	r3, [pc, #216]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 030c 	and.w	r3, r3, #12
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d05c      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d141      	bne.n	8007e86 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e02:	4b32      	ldr	r3, [pc, #200]	; (8007ecc <HAL_RCC_OscConfig+0x480>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e08:	f7fc fe7e 	bl	8004b08 <HAL_GetTick>
 8007e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e10:	f7fc fe7a 	bl	8004b08 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e04b      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e22:	4b29      	ldr	r3, [pc, #164]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f0      	bne.n	8007e10 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69da      	ldr	r2, [r3, #28]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	019b      	lsls	r3, r3, #6
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	3b01      	subs	r3, #1
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	061b      	lsls	r3, r3, #24
 8007e52:	491d      	ldr	r1, [pc, #116]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e58:	4b1c      	ldr	r3, [pc, #112]	; (8007ecc <HAL_RCC_OscConfig+0x480>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e5e:	f7fc fe53 	bl	8004b08 <HAL_GetTick>
 8007e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e64:	e008      	b.n	8007e78 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e66:	f7fc fe4f 	bl	8004b08 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e020      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e78:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0f0      	beq.n	8007e66 <HAL_RCC_OscConfig+0x41a>
 8007e84:	e018      	b.n	8007eb8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e86:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <HAL_RCC_OscConfig+0x480>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e8c:	f7fc fe3c 	bl	8004b08 <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e94:	f7fc fe38 	bl	8004b08 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e009      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ea6:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <HAL_RCC_OscConfig+0x47c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f0      	bne.n	8007e94 <HAL_RCC_OscConfig+0x448>
 8007eb2:	e001      	b.n	8007eb8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	40007000 	.word	0x40007000
 8007ec8:	40023800 	.word	0x40023800
 8007ecc:	42470060 	.word	0x42470060

08007ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e0ca      	b.n	800807a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ee4:	4b67      	ldr	r3, [pc, #412]	; (8008084 <HAL_RCC_ClockConfig+0x1b4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d90c      	bls.n	8007f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ef2:	4b64      	ldr	r3, [pc, #400]	; (8008084 <HAL_RCC_ClockConfig+0x1b4>)
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007efa:	4b62      	ldr	r3, [pc, #392]	; (8008084 <HAL_RCC_ClockConfig+0x1b4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d001      	beq.n	8007f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e0b6      	b.n	800807a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d020      	beq.n	8007f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f24:	4b58      	ldr	r3, [pc, #352]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	4a57      	ldr	r2, [pc, #348]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f3c:	4b52      	ldr	r3, [pc, #328]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	4a51      	ldr	r2, [pc, #324]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f48:	4b4f      	ldr	r3, [pc, #316]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	494c      	ldr	r1, [pc, #304]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d044      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d107      	bne.n	8007f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f6e:	4b46      	ldr	r3, [pc, #280]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d119      	bne.n	8007fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e07d      	b.n	800807a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d003      	beq.n	8007f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d107      	bne.n	8007f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f8e:	4b3e      	ldr	r3, [pc, #248]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e06d      	b.n	800807a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f9e:	4b3a      	ldr	r3, [pc, #232]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e065      	b.n	800807a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fae:	4b36      	ldr	r3, [pc, #216]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f023 0203 	bic.w	r2, r3, #3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	4933      	ldr	r1, [pc, #204]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fc0:	f7fc fda2 	bl	8004b08 <HAL_GetTick>
 8007fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fc6:	e00a      	b.n	8007fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc8:	f7fc fd9e 	bl	8004b08 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e04d      	b.n	800807a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fde:	4b2a      	ldr	r3, [pc, #168]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f003 020c 	and.w	r2, r3, #12
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d1eb      	bne.n	8007fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ff0:	4b24      	ldr	r3, [pc, #144]	; (8008084 <HAL_RCC_ClockConfig+0x1b4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d20c      	bcs.n	8008018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffe:	4b21      	ldr	r3, [pc, #132]	; (8008084 <HAL_RCC_ClockConfig+0x1b4>)
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <HAL_RCC_ClockConfig+0x1b4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d001      	beq.n	8008018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e030      	b.n	800807a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d008      	beq.n	8008036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008024:	4b18      	ldr	r3, [pc, #96]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	4915      	ldr	r1, [pc, #84]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8008032:	4313      	orrs	r3, r2
 8008034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	490d      	ldr	r1, [pc, #52]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 8008052:	4313      	orrs	r3, r2
 8008054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008056:	f000 f885 	bl	8008164 <HAL_RCC_GetSysClockFreq>
 800805a:	4601      	mov	r1, r0
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <HAL_RCC_ClockConfig+0x1b8>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	091b      	lsrs	r3, r3, #4
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	4a09      	ldr	r2, [pc, #36]	; (800808c <HAL_RCC_ClockConfig+0x1bc>)
 8008068:	5cd3      	ldrb	r3, [r2, r3]
 800806a:	fa21 f303 	lsr.w	r3, r1, r3
 800806e:	4a08      	ldr	r2, [pc, #32]	; (8008090 <HAL_RCC_ClockConfig+0x1c0>)
 8008070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8008072:	2000      	movs	r0, #0
 8008074:	f7fc fd04 	bl	8004a80 <HAL_InitTick>

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40023c00 	.word	0x40023c00
 8008088:	40023800 	.word	0x40023800
 800808c:	080766f4 	.word	0x080766f4
 8008090:	20000474 	.word	0x20000474

08008094 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08c      	sub	sp, #48	; 0x30
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d129      	bne.n	80080fa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80080a6:	2300      	movs	r3, #0
 80080a8:	61bb      	str	r3, [r7, #24]
 80080aa:	4b2b      	ldr	r3, [pc, #172]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	4a2a      	ldr	r2, [pc, #168]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	6313      	str	r3, [r2, #48]	; 0x30
 80080b6:	4b28      	ldr	r3, [pc, #160]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80080c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c8:	2302      	movs	r3, #2
 80080ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080cc:	2303      	movs	r3, #3
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80080d4:	2300      	movs	r3, #0
 80080d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80080d8:	f107 031c 	add.w	r3, r7, #28
 80080dc:	4619      	mov	r1, r3
 80080de:	481f      	ldr	r0, [pc, #124]	; (800815c <HAL_RCC_MCOConfig+0xc8>)
 80080e0:	f7fe feb4 	bl	8006e4c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80080e4:	4b1c      	ldr	r3, [pc, #112]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	430b      	orrs	r3, r1
 80080f2:	4919      	ldr	r1, [pc, #100]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80080f8:	e029      	b.n	800814e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	4b16      	ldr	r3, [pc, #88]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	4a15      	ldr	r2, [pc, #84]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 8008104:	f043 0304 	orr.w	r3, r3, #4
 8008108:	6313      	str	r3, [r2, #48]	; 0x30
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800811a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800811c:	2302      	movs	r3, #2
 800811e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008120:	2303      	movs	r3, #3
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008124:	2300      	movs	r3, #0
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008128:	2300      	movs	r3, #0
 800812a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800812c:	f107 031c 	add.w	r3, r7, #28
 8008130:	4619      	mov	r1, r3
 8008132:	480b      	ldr	r0, [pc, #44]	; (8008160 <HAL_RCC_MCOConfig+0xcc>)
 8008134:	f7fe fe8a 	bl	8006e4c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8008138:	4b07      	ldr	r3, [pc, #28]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	00d9      	lsls	r1, r3, #3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	430b      	orrs	r3, r1
 8008148:	4903      	ldr	r1, [pc, #12]	; (8008158 <HAL_RCC_MCOConfig+0xc4>)
 800814a:	4313      	orrs	r3, r2
 800814c:	608b      	str	r3, [r1, #8]
}
 800814e:	bf00      	nop
 8008150:	3730      	adds	r7, #48	; 0x30
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40023800 	.word	0x40023800
 800815c:	40020000 	.word	0x40020000
 8008160:	40020800 	.word	0x40020800

08008164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	2300      	movs	r3, #0
 8008174:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800817a:	4b63      	ldr	r3, [pc, #396]	; (8008308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f003 030c 	and.w	r3, r3, #12
 8008182:	2b04      	cmp	r3, #4
 8008184:	d007      	beq.n	8008196 <HAL_RCC_GetSysClockFreq+0x32>
 8008186:	2b08      	cmp	r3, #8
 8008188:	d008      	beq.n	800819c <HAL_RCC_GetSysClockFreq+0x38>
 800818a:	2b00      	cmp	r3, #0
 800818c:	f040 80b4 	bne.w	80082f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008190:	4b5e      	ldr	r3, [pc, #376]	; (800830c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008192:	60bb      	str	r3, [r7, #8]
       break;
 8008194:	e0b3      	b.n	80082fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008196:	4b5e      	ldr	r3, [pc, #376]	; (8008310 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008198:	60bb      	str	r3, [r7, #8]
      break;
 800819a:	e0b0      	b.n	80082fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800819c:	4b5a      	ldr	r3, [pc, #360]	; (8008308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081a6:	4b58      	ldr	r3, [pc, #352]	; (8008308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d04a      	beq.n	8008248 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081b2:	4b55      	ldr	r3, [pc, #340]	; (8008308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	f04f 0400 	mov.w	r4, #0
 80081bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	ea03 0501 	and.w	r5, r3, r1
 80081c8:	ea04 0602 	and.w	r6, r4, r2
 80081cc:	4629      	mov	r1, r5
 80081ce:	4632      	mov	r2, r6
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	f04f 0400 	mov.w	r4, #0
 80081d8:	0154      	lsls	r4, r2, #5
 80081da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80081de:	014b      	lsls	r3, r1, #5
 80081e0:	4619      	mov	r1, r3
 80081e2:	4622      	mov	r2, r4
 80081e4:	1b49      	subs	r1, r1, r5
 80081e6:	eb62 0206 	sbc.w	r2, r2, r6
 80081ea:	f04f 0300 	mov.w	r3, #0
 80081ee:	f04f 0400 	mov.w	r4, #0
 80081f2:	0194      	lsls	r4, r2, #6
 80081f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80081f8:	018b      	lsls	r3, r1, #6
 80081fa:	1a5b      	subs	r3, r3, r1
 80081fc:	eb64 0402 	sbc.w	r4, r4, r2
 8008200:	f04f 0100 	mov.w	r1, #0
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	00e2      	lsls	r2, r4, #3
 800820a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800820e:	00d9      	lsls	r1, r3, #3
 8008210:	460b      	mov	r3, r1
 8008212:	4614      	mov	r4, r2
 8008214:	195b      	adds	r3, r3, r5
 8008216:	eb44 0406 	adc.w	r4, r4, r6
 800821a:	f04f 0100 	mov.w	r1, #0
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	0262      	lsls	r2, r4, #9
 8008224:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008228:	0259      	lsls	r1, r3, #9
 800822a:	460b      	mov	r3, r1
 800822c:	4614      	mov	r4, r2
 800822e:	4618      	mov	r0, r3
 8008230:	4621      	mov	r1, r4
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f04f 0400 	mov.w	r4, #0
 8008238:	461a      	mov	r2, r3
 800823a:	4623      	mov	r3, r4
 800823c:	f7fc f9e4 	bl	8004608 <__aeabi_uldivmod>
 8008240:	4603      	mov	r3, r0
 8008242:	460c      	mov	r4, r1
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	e049      	b.n	80082dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008248:	4b2f      	ldr	r3, [pc, #188]	; (8008308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	099b      	lsrs	r3, r3, #6
 800824e:	f04f 0400 	mov.w	r4, #0
 8008252:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	ea03 0501 	and.w	r5, r3, r1
 800825e:	ea04 0602 	and.w	r6, r4, r2
 8008262:	4629      	mov	r1, r5
 8008264:	4632      	mov	r2, r6
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	f04f 0400 	mov.w	r4, #0
 800826e:	0154      	lsls	r4, r2, #5
 8008270:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008274:	014b      	lsls	r3, r1, #5
 8008276:	4619      	mov	r1, r3
 8008278:	4622      	mov	r2, r4
 800827a:	1b49      	subs	r1, r1, r5
 800827c:	eb62 0206 	sbc.w	r2, r2, r6
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	f04f 0400 	mov.w	r4, #0
 8008288:	0194      	lsls	r4, r2, #6
 800828a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800828e:	018b      	lsls	r3, r1, #6
 8008290:	1a5b      	subs	r3, r3, r1
 8008292:	eb64 0402 	sbc.w	r4, r4, r2
 8008296:	f04f 0100 	mov.w	r1, #0
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	00e2      	lsls	r2, r4, #3
 80082a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80082a4:	00d9      	lsls	r1, r3, #3
 80082a6:	460b      	mov	r3, r1
 80082a8:	4614      	mov	r4, r2
 80082aa:	195b      	adds	r3, r3, r5
 80082ac:	eb44 0406 	adc.w	r4, r4, r6
 80082b0:	f04f 0100 	mov.w	r1, #0
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	02a2      	lsls	r2, r4, #10
 80082ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80082be:	0299      	lsls	r1, r3, #10
 80082c0:	460b      	mov	r3, r1
 80082c2:	4614      	mov	r4, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	4621      	mov	r1, r4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f04f 0400 	mov.w	r4, #0
 80082ce:	461a      	mov	r2, r3
 80082d0:	4623      	mov	r3, r4
 80082d2:	f7fc f999 	bl	8004608 <__aeabi_uldivmod>
 80082d6:	4603      	mov	r3, r0
 80082d8:	460c      	mov	r4, r1
 80082da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	0c1b      	lsrs	r3, r3, #16
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	3301      	adds	r3, #1
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f4:	60bb      	str	r3, [r7, #8]
      break;
 80082f6:	e002      	b.n	80082fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082f8:	4b04      	ldr	r3, [pc, #16]	; (800830c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80082fa:	60bb      	str	r3, [r7, #8]
      break;
 80082fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082fe:	68bb      	ldr	r3, [r7, #8]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008308:	40023800 	.word	0x40023800
 800830c:	00f42400 	.word	0x00f42400
 8008310:	007a1200 	.word	0x007a1200

08008314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008314:	b480      	push	{r7}
 8008316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008318:	4b03      	ldr	r3, [pc, #12]	; (8008328 <HAL_RCC_GetHCLKFreq+0x14>)
 800831a:	681b      	ldr	r3, [r3, #0]
}
 800831c:	4618      	mov	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	20000474 	.word	0x20000474

0800832c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008330:	f7ff fff0 	bl	8008314 <HAL_RCC_GetHCLKFreq>
 8008334:	4601      	mov	r1, r0
 8008336:	4b05      	ldr	r3, [pc, #20]	; (800834c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	0a9b      	lsrs	r3, r3, #10
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	4a03      	ldr	r2, [pc, #12]	; (8008350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008342:	5cd3      	ldrb	r3, [r2, r3]
 8008344:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008348:	4618      	mov	r0, r3
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40023800 	.word	0x40023800
 8008350:	08076704 	.word	0x08076704

08008354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008358:	f7ff ffdc 	bl	8008314 <HAL_RCC_GetHCLKFreq>
 800835c:	4601      	mov	r1, r0
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	0b5b      	lsrs	r3, r3, #13
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	4a03      	ldr	r2, [pc, #12]	; (8008378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800836a:	5cd3      	ldrb	r3, [r2, r3]
 800836c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008370:	4618      	mov	r0, r3
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40023800 	.word	0x40023800
 8008378:	08076704 	.word	0x08076704

0800837c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e034      	b.n	80083fc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f003 fb18 	bl	800b9dc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3308      	adds	r3, #8
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f000 fb5e 	bl	8008a78 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	461a      	mov	r2, r3
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	f000 fba8 	bl	8008b1c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6858      	ldr	r0, [r3, #4]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	f000 fbdd 	bl	8008b98 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	6892      	ldr	r2, [r2, #8]
 80083e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	6892      	ldr	r2, [r2, #8]
 80083f2:	f041 0101 	orr.w	r1, r1, #1
 80083f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e03f      	b.n	8008496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f003 fa1e 	bl	800b86c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2224      	movs	r2, #36	; 0x24
 8008434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f90b 	bl	8008664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691a      	ldr	r2, [r3, #16]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800845c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	695a      	ldr	r2, [r3, #20]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800846c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800847c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b088      	sub	sp, #32
 80084a2:	af02      	add	r7, sp, #8
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	f040 8083 	bne.w	80085c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <HAL_UART_Transmit+0x2e>
 80084c6:	88fb      	ldrh	r3, [r7, #6]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e07b      	b.n	80085c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_UART_Transmit+0x40>
 80084da:	2302      	movs	r3, #2
 80084dc:	e074      	b.n	80085c8 <HAL_UART_Transmit+0x12a>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2221      	movs	r2, #33	; 0x21
 80084f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80084f4:	f7fc fb08 	bl	8004b08 <HAL_GetTick>
 80084f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	88fa      	ldrh	r2, [r7, #6]
 8008504:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008506:	e042      	b.n	800858e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800850c:	b29b      	uxth	r3, r3
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851e:	d122      	bne.n	8008566 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2200      	movs	r2, #0
 8008528:	2180      	movs	r1, #128	; 0x80
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f850 	bl	80085d0 <UART_WaitOnFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e046      	b.n	80085c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d103      	bne.n	800855e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	3302      	adds	r3, #2
 800855a:	60bb      	str	r3, [r7, #8]
 800855c:	e017      	b.n	800858e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	3301      	adds	r3, #1
 8008562:	60bb      	str	r3, [r7, #8]
 8008564:	e013      	b.n	800858e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2200      	movs	r2, #0
 800856e:	2180      	movs	r1, #128	; 0x80
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 f82d 	bl	80085d0 <UART_WaitOnFlagUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e023      	b.n	80085c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	60ba      	str	r2, [r7, #8]
 8008586:	781a      	ldrb	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1b7      	bne.n	8008508 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2200      	movs	r2, #0
 80085a0:	2140      	movs	r1, #64	; 0x40
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 f814 	bl	80085d0 <UART_WaitOnFlagUntilTimeout>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e00a      	b.n	80085c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e000      	b.n	80085c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80085c6:	2302      	movs	r3, #2
  }
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e0:	e02c      	b.n	800863c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d028      	beq.n	800863c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d007      	beq.n	8008600 <UART_WaitOnFlagUntilTimeout+0x30>
 80085f0:	f7fc fa8a 	bl	8004b08 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d21d      	bcs.n	800863c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800860e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	695a      	ldr	r2, [r3, #20]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0201 	bic.w	r2, r2, #1
 800861e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e00f      	b.n	800865c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4013      	ands	r3, r2
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	429a      	cmp	r2, r3
 800864a:	bf0c      	ite	eq
 800864c:	2301      	moveq	r3, #1
 800864e:	2300      	movne	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	429a      	cmp	r2, r3
 8008658:	d0c3      	beq.n	80085e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008664:	b5b0      	push	{r4, r5, r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80086a4:	f023 030c 	bic.w	r3, r3, #12
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6812      	ldr	r2, [r2, #0]
 80086ac:	68f9      	ldr	r1, [r7, #12]
 80086ae:	430b      	orrs	r3, r1
 80086b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699a      	ldr	r2, [r3, #24]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d0:	f040 80e4 	bne.w	800889c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4aab      	ldr	r2, [pc, #684]	; (8008988 <UART_SetConfig+0x324>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d004      	beq.n	80086e8 <UART_SetConfig+0x84>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4aaa      	ldr	r2, [pc, #680]	; (800898c <UART_SetConfig+0x328>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d16c      	bne.n	80087c2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80086e8:	f7ff fe34 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 80086ec:	4602      	mov	r2, r0
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009a      	lsls	r2, r3, #2
 80086f6:	441a      	add	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008702:	4aa3      	ldr	r2, [pc, #652]	; (8008990 <UART_SetConfig+0x32c>)
 8008704:	fba2 2303 	umull	r2, r3, r2, r3
 8008708:	095b      	lsrs	r3, r3, #5
 800870a:	011c      	lsls	r4, r3, #4
 800870c:	f7ff fe22 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 8008710:	4602      	mov	r2, r0
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009a      	lsls	r2, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	fbb2 f5f3 	udiv	r5, r2, r3
 8008726:	f7ff fe15 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 800872a:	4602      	mov	r2, r0
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009a      	lsls	r2, r3, #2
 8008734:	441a      	add	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008740:	4a93      	ldr	r2, [pc, #588]	; (8008990 <UART_SetConfig+0x32c>)
 8008742:	fba2 2303 	umull	r2, r3, r2, r3
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	2264      	movs	r2, #100	; 0x64
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	1aeb      	subs	r3, r5, r3
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	3332      	adds	r3, #50	; 0x32
 8008754:	4a8e      	ldr	r2, [pc, #568]	; (8008990 <UART_SetConfig+0x32c>)
 8008756:	fba2 2303 	umull	r2, r3, r2, r3
 800875a:	095b      	lsrs	r3, r3, #5
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008762:	441c      	add	r4, r3
 8008764:	f7ff fdf6 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 8008768:	4602      	mov	r2, r0
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009a      	lsls	r2, r3, #2
 8008772:	441a      	add	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	fbb2 f5f3 	udiv	r5, r2, r3
 800877e:	f7ff fde9 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 8008782:	4602      	mov	r2, r0
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009a      	lsls	r2, r3, #2
 800878c:	441a      	add	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	4a7d      	ldr	r2, [pc, #500]	; (8008990 <UART_SetConfig+0x32c>)
 800879a:	fba2 2303 	umull	r2, r3, r2, r3
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	2264      	movs	r2, #100	; 0x64
 80087a2:	fb02 f303 	mul.w	r3, r2, r3
 80087a6:	1aeb      	subs	r3, r5, r3
 80087a8:	00db      	lsls	r3, r3, #3
 80087aa:	3332      	adds	r3, #50	; 0x32
 80087ac:	4a78      	ldr	r2, [pc, #480]	; (8008990 <UART_SetConfig+0x32c>)
 80087ae:	fba2 2303 	umull	r2, r3, r2, r3
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	f003 0207 	and.w	r2, r3, #7
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4422      	add	r2, r4
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	e154      	b.n	8008a6c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80087c2:	f7ff fdb3 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 80087c6:	4602      	mov	r2, r0
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009a      	lsls	r2, r3, #2
 80087d0:	441a      	add	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087dc:	4a6c      	ldr	r2, [pc, #432]	; (8008990 <UART_SetConfig+0x32c>)
 80087de:	fba2 2303 	umull	r2, r3, r2, r3
 80087e2:	095b      	lsrs	r3, r3, #5
 80087e4:	011c      	lsls	r4, r3, #4
 80087e6:	f7ff fda1 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 80087ea:	4602      	mov	r2, r0
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009a      	lsls	r2, r3, #2
 80087f4:	441a      	add	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8008800:	f7ff fd94 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 8008804:	4602      	mov	r2, r0
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009a      	lsls	r2, r3, #2
 800880e:	441a      	add	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	fbb2 f3f3 	udiv	r3, r2, r3
 800881a:	4a5d      	ldr	r2, [pc, #372]	; (8008990 <UART_SetConfig+0x32c>)
 800881c:	fba2 2303 	umull	r2, r3, r2, r3
 8008820:	095b      	lsrs	r3, r3, #5
 8008822:	2264      	movs	r2, #100	; 0x64
 8008824:	fb02 f303 	mul.w	r3, r2, r3
 8008828:	1aeb      	subs	r3, r5, r3
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	3332      	adds	r3, #50	; 0x32
 800882e:	4a58      	ldr	r2, [pc, #352]	; (8008990 <UART_SetConfig+0x32c>)
 8008830:	fba2 2303 	umull	r2, r3, r2, r3
 8008834:	095b      	lsrs	r3, r3, #5
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800883c:	441c      	add	r4, r3
 800883e:	f7ff fd75 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 8008842:	4602      	mov	r2, r0
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009a      	lsls	r2, r3, #2
 800884c:	441a      	add	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	fbb2 f5f3 	udiv	r5, r2, r3
 8008858:	f7ff fd68 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 800885c:	4602      	mov	r2, r0
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009a      	lsls	r2, r3, #2
 8008866:	441a      	add	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008872:	4a47      	ldr	r2, [pc, #284]	; (8008990 <UART_SetConfig+0x32c>)
 8008874:	fba2 2303 	umull	r2, r3, r2, r3
 8008878:	095b      	lsrs	r3, r3, #5
 800887a:	2264      	movs	r2, #100	; 0x64
 800887c:	fb02 f303 	mul.w	r3, r2, r3
 8008880:	1aeb      	subs	r3, r5, r3
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	3332      	adds	r3, #50	; 0x32
 8008886:	4a42      	ldr	r2, [pc, #264]	; (8008990 <UART_SetConfig+0x32c>)
 8008888:	fba2 2303 	umull	r2, r3, r2, r3
 800888c:	095b      	lsrs	r3, r3, #5
 800888e:	f003 0207 	and.w	r2, r3, #7
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4422      	add	r2, r4
 8008898:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800889a:	e0e7      	b.n	8008a6c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a39      	ldr	r2, [pc, #228]	; (8008988 <UART_SetConfig+0x324>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d004      	beq.n	80088b0 <UART_SetConfig+0x24c>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a38      	ldr	r2, [pc, #224]	; (800898c <UART_SetConfig+0x328>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d171      	bne.n	8008994 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80088b0:	f7ff fd50 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 80088b4:	4602      	mov	r2, r0
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009a      	lsls	r2, r3, #2
 80088be:	441a      	add	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ca:	4a31      	ldr	r2, [pc, #196]	; (8008990 <UART_SetConfig+0x32c>)
 80088cc:	fba2 2303 	umull	r2, r3, r2, r3
 80088d0:	095b      	lsrs	r3, r3, #5
 80088d2:	011c      	lsls	r4, r3, #4
 80088d4:	f7ff fd3e 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 80088d8:	4602      	mov	r2, r0
 80088da:	4613      	mov	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	009a      	lsls	r2, r3, #2
 80088e2:	441a      	add	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80088ee:	f7ff fd31 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 80088f2:	4602      	mov	r2, r0
 80088f4:	4613      	mov	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	009a      	lsls	r2, r3, #2
 80088fc:	441a      	add	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	fbb2 f3f3 	udiv	r3, r2, r3
 8008908:	4a21      	ldr	r2, [pc, #132]	; (8008990 <UART_SetConfig+0x32c>)
 800890a:	fba2 2303 	umull	r2, r3, r2, r3
 800890e:	095b      	lsrs	r3, r3, #5
 8008910:	2264      	movs	r2, #100	; 0x64
 8008912:	fb02 f303 	mul.w	r3, r2, r3
 8008916:	1aeb      	subs	r3, r5, r3
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	3332      	adds	r3, #50	; 0x32
 800891c:	4a1c      	ldr	r2, [pc, #112]	; (8008990 <UART_SetConfig+0x32c>)
 800891e:	fba2 2303 	umull	r2, r3, r2, r3
 8008922:	095b      	lsrs	r3, r3, #5
 8008924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008928:	441c      	add	r4, r3
 800892a:	f7ff fd13 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 800892e:	4602      	mov	r2, r0
 8008930:	4613      	mov	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	009a      	lsls	r2, r3, #2
 8008938:	441a      	add	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	fbb2 f5f3 	udiv	r5, r2, r3
 8008944:	f7ff fd06 	bl	8008354 <HAL_RCC_GetPCLK2Freq>
 8008948:	4602      	mov	r2, r0
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	009a      	lsls	r2, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	fbb2 f3f3 	udiv	r3, r2, r3
 800895e:	4a0c      	ldr	r2, [pc, #48]	; (8008990 <UART_SetConfig+0x32c>)
 8008960:	fba2 2303 	umull	r2, r3, r2, r3
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	2264      	movs	r2, #100	; 0x64
 8008968:	fb02 f303 	mul.w	r3, r2, r3
 800896c:	1aeb      	subs	r3, r5, r3
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	3332      	adds	r3, #50	; 0x32
 8008972:	4a07      	ldr	r2, [pc, #28]	; (8008990 <UART_SetConfig+0x32c>)
 8008974:	fba2 2303 	umull	r2, r3, r2, r3
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	f003 020f 	and.w	r2, r3, #15
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4422      	add	r2, r4
 8008984:	609a      	str	r2, [r3, #8]
 8008986:	e071      	b.n	8008a6c <UART_SetConfig+0x408>
 8008988:	40011000 	.word	0x40011000
 800898c:	40011400 	.word	0x40011400
 8008990:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008994:	f7ff fcca 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 8008998:	4602      	mov	r2, r0
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009a      	lsls	r2, r3, #2
 80089a2:	441a      	add	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ae:	4a31      	ldr	r2, [pc, #196]	; (8008a74 <UART_SetConfig+0x410>)
 80089b0:	fba2 2303 	umull	r2, r3, r2, r3
 80089b4:	095b      	lsrs	r3, r3, #5
 80089b6:	011c      	lsls	r4, r3, #4
 80089b8:	f7ff fcb8 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 80089bc:	4602      	mov	r2, r0
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009a      	lsls	r2, r3, #2
 80089c6:	441a      	add	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80089d2:	f7ff fcab 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 80089d6:	4602      	mov	r2, r0
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009a      	lsls	r2, r3, #2
 80089e0:	441a      	add	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ec:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <UART_SetConfig+0x410>)
 80089ee:	fba2 2303 	umull	r2, r3, r2, r3
 80089f2:	095b      	lsrs	r3, r3, #5
 80089f4:	2264      	movs	r2, #100	; 0x64
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	1aeb      	subs	r3, r5, r3
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	3332      	adds	r3, #50	; 0x32
 8008a00:	4a1c      	ldr	r2, [pc, #112]	; (8008a74 <UART_SetConfig+0x410>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	095b      	lsrs	r3, r3, #5
 8008a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a0c:	441c      	add	r4, r3
 8008a0e:	f7ff fc8d 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4613      	mov	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	009a      	lsls	r2, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	fbb2 f5f3 	udiv	r5, r2, r3
 8008a28:	f7ff fc80 	bl	800832c <HAL_RCC_GetPCLK1Freq>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009a      	lsls	r2, r3, #2
 8008a36:	441a      	add	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a42:	4a0c      	ldr	r2, [pc, #48]	; (8008a74 <UART_SetConfig+0x410>)
 8008a44:	fba2 2303 	umull	r2, r3, r2, r3
 8008a48:	095b      	lsrs	r3, r3, #5
 8008a4a:	2264      	movs	r2, #100	; 0x64
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	1aeb      	subs	r3, r5, r3
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	3332      	adds	r3, #50	; 0x32
 8008a56:	4a07      	ldr	r2, [pc, #28]	; (8008a74 <UART_SetConfig+0x410>)
 8008a58:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5c:	095b      	lsrs	r3, r3, #5
 8008a5e:	f003 020f 	and.w	r2, r3, #15
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4422      	add	r2, r4
 8008a68:	609a      	str	r2, [r3, #8]
}
 8008a6a:	e7ff      	b.n	8008a6c <UART_SetConfig+0x408>
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bdb0      	pop	{r4, r5, r7, pc}
 8008a74:	51eb851f 	.word	0x51eb851f

08008a78 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a90:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	4b20      	ldr	r3, [pc, #128]	; (8008b18 <FSMC_NORSRAM_Init+0xa0>)
 8008a96:	4013      	ands	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008aa2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008aa8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008aae:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008ab4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008aba:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008ac0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008ac6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008acc:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008ad2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008ad8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008ade:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008ae4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d103      	bne.n	8008afc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	fff00080 	.word	0xfff00080

08008b1c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b36:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008b3e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008b4a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008b52:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008b5a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008b64:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	3b02      	subs	r3, #2
 8008b6c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008b6e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008b74:	4313      	orrs	r3, r2
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6979      	ldr	r1, [r7, #20]
 8008b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
	...

08008b98 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bb0:	d122      	bne.n	8008bf8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bba:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4b15      	ldr	r3, [pc, #84]	; (8008c14 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008bce:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008bd6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008bde:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008be4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6979      	ldr	r1, [r7, #20]
 8008bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008bf6:	e005      	b.n	8008c04 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	cff00000 	.word	0xcff00000

08008c18 <aiInit>:
   "Bag", "Ankle Boot"};
/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08e      	sub	sp, #56	; 0x38
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8008c20:	4b26      	ldr	r3, [pc, #152]	; (8008cbc <aiInit+0xa4>)
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	2301      	movs	r3, #1
 8008c26:	823b      	strh	r3, [r7, #16]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	827b      	strh	r3, [r7, #18]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	82bb      	strh	r3, [r7, #20]
 8008c30:	4b23      	ldr	r3, [pc, #140]	; (8008cc0 <aiInit+0xa8>)
 8008c32:	61bb      	str	r3, [r7, #24]
            AI_IMAGECLASSIFY_DATA_WEIGHTS(ai_imageclassify_data_weights_get()),
 8008c34:	f001 fb1e 	bl	800a274 <ai_imageclassify_data_weights_get>
 8008c38:	4603      	mov	r3, r0
    const ai_network_params params = {
 8008c3a:	61fb      	str	r3, [r7, #28]
 8008c3c:	4b21      	ldr	r3, [pc, #132]	; (8008cc4 <aiInit+0xac>)
 8008c3e:	623b      	str	r3, [r7, #32]
 8008c40:	2301      	movs	r3, #1
 8008c42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008c44:	2301      	movs	r3, #1
 8008c46:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008c48:	2301      	movs	r3, #1
 8008c4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008c4c:	f44f 730a 	mov.w	r3, #552	; 0x228
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	633b      	str	r3, [r7, #48]	; 0x30
            AI_IMAGECLASSIFY_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_imageclassify_create(&imageclassify, AI_IMAGECLASSIFY_DATA_CONFIG);
 8008c56:	2100      	movs	r1, #0
 8008c58:	481b      	ldr	r0, [pc, #108]	; (8008cc8 <aiInit+0xb0>)
 8008c5a:	f001 faa5 	bl	800a1a8 <ai_imageclassify_create>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type != AI_ERROR_NONE) {
 8008c62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <aiInit+0x58>
	    return -1;
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	e020      	b.n	8008cb2 <aiInit+0x9a>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_imageclassify_init(imageclassify, &params)) {
 8008c70:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <aiInit+0xb0>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f107 020c 	add.w	r2, r7, #12
 8008c78:	4611      	mov	r1, r2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f001 fab6 	bl	800a1ec <ai_imageclassify_init>
 8008c80:	4603      	mov	r3, r0
 8008c82:	f083 0301 	eor.w	r3, r3, #1
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d011      	beq.n	8008cb0 <aiInit+0x98>
        err = ai_imageclassify_get_error(imageclassify);
 8008c8c:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <aiInit+0xb0>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f001 fa7d 	bl	800a190 <ai_imageclassify_get_error>
 8008c96:	4603      	mov	r3, r0
 8008c98:	637b      	str	r3, [r7, #52]	; 0x34
        ai_imageclassify_destroy(imageclassify);
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <aiInit+0xb0>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 fa98 	bl	800a1d4 <ai_imageclassify_destroy>
        imageclassify = AI_HANDLE_NULL;
 8008ca4:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <aiInit+0xb0>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]
	    return -2;
 8008caa:	f06f 0301 	mvn.w	r3, #1
 8008cae:	e000      	b.n	8008cb2 <aiInit+0x9a>
    }

    return 0;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3738      	adds	r7, #56	; 0x38
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	40040440 	.word	0x40040440
 8008cc0:	00063628 	.word	0x00063628
 8008cc4:	00040440 	.word	0x00040440
 8008cc8:	20000668 	.word	0x20000668

08008ccc <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !imageclassify)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d006      	beq.n	8008cea <aiRun+0x1e>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <aiRun+0x1e>
 8008ce2:	4b17      	ldr	r3, [pc, #92]	; (8008d40 <aiRun+0x74>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <aiRun+0x24>
        return -1;
 8008cea:	f04f 33ff 	mov.w	r3, #4294967295
 8008cee:	e022      	b.n	8008d36 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8008cf0:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <aiRun+0x78>)
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8008cf6:	4a13      	ldr	r2, [pc, #76]	; (8008d44 <aiRun+0x78>)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 8008cfc:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <aiRun+0x7c>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8008d02:	4a11      	ldr	r2, [pc, #68]	; (8008d48 <aiRun+0x7c>)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_imageclassify_run(imageclassify, &ai_input[0], &ai_output[0]);
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <aiRun+0x74>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a0e      	ldr	r2, [pc, #56]	; (8008d48 <aiRun+0x7c>)
 8008d0e:	490d      	ldr	r1, [pc, #52]	; (8008d44 <aiRun+0x78>)
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 fa9e 	bl	800a252 <ai_imageclassify_run>
 8008d16:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d00a      	beq.n	8008d34 <aiRun+0x68>
        err = ai_imageclassify_get_error(imageclassify);
 8008d1e:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <aiRun+0x74>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f001 fa34 	bl	800a190 <ai_imageclassify_get_error>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008d32:	e000      	b.n	8008d36 <aiRun+0x6a>
    }

    return 0;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000668 	.word	0x20000668
 8008d44:	20000008 	.word	0x20000008
 8008d48:	2000001c 	.word	0x2000001c

08008d4c <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_IMAGECLASSIFY_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8008d50:	4802      	ldr	r0, [pc, #8]	; (8008d5c <MX_X_CUBE_AI_Init+0x10>)
 8008d52:	f7ff ff61 	bl	8008c18 <aiInit>
    /* USER CODE END 0 */
}
 8008d56:	bf00      	nop
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	2000066c 	.word	0x2000066c

08008d60 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b092      	sub	sp, #72	; 0x48
 8008d64:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
	int nb_run = 2;
 8008d66:	2302      	movs	r3, #2
 8008d68:	647b      	str	r3, [r7, #68]	; 0x44
    int res;
    int ranking[OUTPUT_CLASS_NUMBER];

    for(int i=0; i<OUTPUT_CLASS_NUMBER;i++) ranking[i]=i;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d6e:	e00a      	b.n	8008d86 <MX_X_CUBE_AI_Process+0x26>
 8008d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008d78:	4413      	add	r3, r2
 8008d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d7c:	f843 2c48 	str.w	r2, [r3, #-72]
 8008d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d82:	3301      	adds	r3, #1
 8008d84:	643b      	str	r3, [r7, #64]	; 0x40
 8008d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d88:	2b09      	cmp	r3, #9
 8008d8a:	ddf1      	ble.n	8008d70 <MX_X_CUBE_AI_Process+0x10>

    AI_ALIGNED(4)
    static ai_i8 out_data[AI_IMAGECLASSIFY_OUT_1_SIZE_BYTES];

    /* Retrieve format/type of the first input tensor - index 0 */
    const ai_buffer_format fmt_ = AI_BUFFER_FORMAT(&ai_input[0]);
 8008d8c:	4b3d      	ldr	r3, [pc, #244]	; (8008e84 <MX_X_CUBE_AI_Process+0x124>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008d94:	63bb      	str	r3, [r7, #56]	; 0x38
    const uint32_t type_ = AI_BUFFER_FMT_GET_TYPE(fmt_);
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	145b      	asrs	r3, r3, #17
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Perform nb_rub inferences (batch = 1) */
    while (--nb_run) {
 8008da0:	e065      	b.n	8008e6e <MX_X_CUBE_AI_Process+0x10e>

        /* ---------------------------------------- */
        /* Data generation and Pre-Process          */
        /* ---------------------------------------- */
        for (ai_size i=0;  i < AI_IMAGECLASSIFY_IN_1_SIZE; i++ ) {
 8008da2:	2300      	movs	r3, #0
 8008da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da6:	e015      	b.n	8008dd4 <MX_X_CUBE_AI_Process+0x74>

            /* Fill the input buffer with pixel data */
            float val = resizedImage[i];
 8008da8:	4a37      	ldr	r2, [pc, #220]	; (8008e88 <MX_X_CUBE_AI_Process+0x128>)
 8008daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dac:	4413      	add	r3, r2
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	ee07 3a90 	vmov	s15, r3
 8008db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

            /* Convert the data if necessary */
            if (type_ == AI_BUFFER_FMT_TYPE_FLOAT) {
 8008dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d105      	bne.n	8008dce <MX_X_CUBE_AI_Process+0x6e>
                ((float *)in_data)[i] = val;
 8008dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4a31      	ldr	r2, [pc, #196]	; (8008e8c <MX_X_CUBE_AI_Process+0x12c>)
 8008dc8:	4413      	add	r3, r2
 8008dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dcc:	601a      	str	r2, [r3, #0]
        for (ai_size i=0;  i < AI_IMAGECLASSIFY_IN_1_SIZE; i++ ) {
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd6:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8008dda:	d3e5      	bcc.n	8008da8 <MX_X_CUBE_AI_Process+0x48>
            }
        }

        /* Perform the inference */
        t1=HAL_GetTick();
 8008ddc:	f7fb fe94 	bl	8004b08 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	4b2b      	ldr	r3, [pc, #172]	; (8008e90 <MX_X_CUBE_AI_Process+0x130>)
 8008de4:	601a      	str	r2, [r3, #0]
        res = aiRun(in_data, out_data);
 8008de6:	492b      	ldr	r1, [pc, #172]	; (8008e94 <MX_X_CUBE_AI_Process+0x134>)
 8008de8:	4828      	ldr	r0, [pc, #160]	; (8008e8c <MX_X_CUBE_AI_Process+0x12c>)
 8008dea:	f7ff ff6f 	bl	8008ccc <aiRun>
 8008dee:	6338      	str	r0, [r7, #48]	; 0x30
        t2=HAL_GetTick();
 8008df0:	f7fb fe8a 	bl	8004b08 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	4b28      	ldr	r3, [pc, #160]	; (8008e98 <MX_X_CUBE_AI_Process+0x138>)
 8008df8:	601a      	str	r2, [r3, #0]
        /* Post-Process - process the output buffer */
        if(res==0)
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d136      	bne.n	8008e6e <MX_X_CUBE_AI_Process+0x10e>
               {
               	bubblesort(out_data,ranking,OUTPUT_CLASS_NUMBER);
 8008e00:	463b      	mov	r3, r7
 8008e02:	220a      	movs	r2, #10
 8008e04:	4619      	mov	r1, r3
 8008e06:	4823      	ldr	r0, [pc, #140]	; (8008e94 <MX_X_CUBE_AI_Process+0x134>)
 8008e08:	f000 f84e 	bl	8008ea8 <bubblesort>
               	/* Print the classification result */
               	printf("Inference Time: %d ms\n",((t2>=t1)?(t2-t1):((1<<24)-t1+t2)));
 8008e0c:	4b22      	ldr	r3, [pc, #136]	; (8008e98 <MX_X_CUBE_AI_Process+0x138>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	4b1f      	ldr	r3, [pc, #124]	; (8008e90 <MX_X_CUBE_AI_Process+0x130>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d305      	bcc.n	8008e24 <MX_X_CUBE_AI_Process+0xc4>
 8008e18:	4b1f      	ldr	r3, [pc, #124]	; (8008e98 <MX_X_CUBE_AI_Process+0x138>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b1c      	ldr	r3, [pc, #112]	; (8008e90 <MX_X_CUBE_AI_Process+0x130>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	e006      	b.n	8008e32 <MX_X_CUBE_AI_Process+0xd2>
 8008e24:	4b1c      	ldr	r3, [pc, #112]	; (8008e98 <MX_X_CUBE_AI_Process+0x138>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	4b19      	ldr	r3, [pc, #100]	; (8008e90 <MX_X_CUBE_AI_Process+0x130>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8008e32:	4619      	mov	r1, r3
 8008e34:	4819      	ldr	r0, [pc, #100]	; (8008e9c <MX_X_CUBE_AI_Process+0x13c>)
 8008e36:	f003 fda9 	bl	800c98c <iprintf>
               	printf("The Prediction is: %s",g_classes[ranking[0]]);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	4a18      	ldr	r2, [pc, #96]	; (8008ea0 <MX_X_CUBE_AI_Process+0x140>)
 8008e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e42:	4619      	mov	r1, r3
 8008e44:	4817      	ldr	r0, [pc, #92]	; (8008ea4 <MX_X_CUBE_AI_Process+0x144>)
 8008e46:	f003 fda1 	bl	800c98c <iprintf>
               	printf("\n");
 8008e4a:	200a      	movs	r0, #10
 8008e4c:	f003 fdb6 	bl	800c9bc <putchar>
               	uint8_t *ptr = g_classes[ranking[0]];
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	4a13      	ldr	r2, [pc, #76]	; (8008ea0 <MX_X_CUBE_AI_Process+0x140>)
 8008e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
               	BSP_LCD_SetTextColor(0x07E0);
 8008e5a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8008e5e:	f002 f907 	bl	800b070 <BSP_LCD_SetTextColor>
               	BSP_LCD_DisplayStringAt(0, 100, ptr , 0x01);
 8008e62:	2301      	movs	r3, #1
 8008e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e66:	2164      	movs	r1, #100	; 0x64
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f002 f97f 	bl	800b16c <BSP_LCD_DisplayStringAt>
    while (--nb_run) {
 8008e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e70:	3b01      	subs	r3, #1
 8008e72:	647b      	str	r3, [r7, #68]	; 0x44
 8008e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d193      	bne.n	8008da2 <MX_X_CUBE_AI_Process+0x42>
               }
    }
    /* USER CODE END 1 */
}
 8008e7a:	bf00      	nop
 8008e7c:	3748      	adds	r7, #72	; 0x48
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000008 	.word	0x20000008
 8008e88:	20001b6c 	.word	0x20001b6c
 8008e8c:	20000894 	.word	0x20000894
 8008e90:	20001b68 	.word	0x20001b68
 8008e94:	200014d4 	.word	0x200014d4
 8008e98:	20001b64 	.word	0x20001b64
 8008e9c:	080114f0 	.word	0x080114f0
 8008ea0:	20000030 	.word	0x20000030
 8008ea4:	08011508 	.word	0x08011508

08008ea8 <bubblesort>:
  * @brief  Bubble sorting algorithm
  * @param  None
  * @retval None
  */
static void bubblesort(float *prob,int *classes, int size)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b089      	sub	sp, #36	; 0x24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  float p;
  int c;

  for(int i=0; i<size; i++)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	61fb      	str	r3, [r7, #28]
 8008eb8:	e051      	b.n	8008f5e <bubblesort+0xb6>
  {
    for(int ii=0; ii<size-i-1; ii++)
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61bb      	str	r3, [r7, #24]
 8008ebe:	e044      	b.n	8008f4a <bubblesort+0xa2>
    {
      if(prob[ii]<prob[ii+1])
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	ed93 7a00 	vldr	s14, [r3]
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	edd3 7a00 	vldr	s15, [r3]
 8008eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee2:	d52f      	bpl.n	8008f44 <bubblesort+0x9c>
      {
        p=prob[ii];
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	617b      	str	r3, [r7, #20]
        prob[ii]=prob[ii+1];
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	441a      	add	r2, r3
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	68f9      	ldr	r1, [r7, #12]
 8008f00:	440b      	add	r3, r1
 8008f02:	6812      	ldr	r2, [r2, #0]
 8008f04:	601a      	str	r2, [r3, #0]
        prob[ii+1]=p;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	601a      	str	r2, [r3, #0]
        c = classes[ii];
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	613b      	str	r3, [r7, #16]
        classes[ii]=classes[ii+1];
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	3301      	adds	r3, #1
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	441a      	add	r2, r3
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	440b      	add	r3, r1
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	601a      	str	r2, [r3, #0]
        classes[ii+1]=c;
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	4413      	add	r3, r2
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	601a      	str	r2, [r3, #0]
    for(int ii=0; ii<size-i-1; ii++)
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	3301      	adds	r3, #1
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	dbb3      	blt.n	8008ec0 <bubblesort+0x18>
  for(int i=0; i<size; i++)
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	dba9      	blt.n	8008eba <bubblesort+0x12>
      }
    }
  }
}
 8008f66:	bf00      	nop
 8008f68:	3724      	adds	r7, #36	; 0x24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <DCMI_OV9655Config>:
  * @param  None
  * @retval None
  */

uint8_t DCMI_OV9655Config(void)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	af00      	add	r7, sp, #0
  
  MCO1_Init();
 8008f76:	f000 f82f 	bl	8008fd8 <MCO1_Init>
  Delay_ms(0xfff);
 8008f7a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008f7e:	f000 fcff 	bl	8009980 <Delay_ms>
  /* Reset and check the presence of the OV9655 camera module */
  if(DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x12, 0x80))
 8008f82:	2280      	movs	r2, #128	; 0x80
 8008f84:	2112      	movs	r1, #18
 8008f86:	2060      	movs	r0, #96	; 0x60
 8008f88:	f001 fffe 	bl	800af88 <DCMI_SingleRandomWrite>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <DCMI_OV9655Config+0x24>
  {
     return (0xFF);
 8008f92:	23ff      	movs	r3, #255	; 0xff
 8008f94:	e017      	b.n	8008fc6 <DCMI_OV9655Config+0x54>
  }
  Delay_ms(0xfff);
 8008f96:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008f9a:	f000 fcf1 	bl	8009980 <Delay_ms>

  /* OV9655 Camera size setup */    
#if defined (QQVGA_SIZE)
  DCMI_OV9655_QQVGASizeSetup();
#elif defined (QVGA_SIZE)
  DCMI_OV9655_QVGASizeSetup();
 8008f9e:	f000 f822 	bl	8008fe6 <DCMI_OV9655_QVGASizeSetup>
#endif 

  /* Set the RGB565 mode */
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, OV9655_COM7, 0x63);
 8008fa2:	2263      	movs	r2, #99	; 0x63
 8008fa4:	2112      	movs	r1, #18
 8008fa6:	2060      	movs	r0, #96	; 0x60
 8008fa8:	f001 ffee 	bl	800af88 <DCMI_SingleRandomWrite>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, OV9655_COM15, 0x10);
 8008fac:	2210      	movs	r2, #16
 8008fae:	2140      	movs	r1, #64	; 0x40
 8008fb0:	2060      	movs	r0, #96	; 0x60
 8008fb2:	f001 ffe9 	bl	800af88 <DCMI_SingleRandomWrite>

  /* Invert the HRef signal*/
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, OV9655_COM10, 0x08);
 8008fb6:	2208      	movs	r2, #8
 8008fb8:	2115      	movs	r1, #21
 8008fba:	2060      	movs	r0, #96	; 0x60
 8008fbc:	f001 ffe4 	bl	800af88 <DCMI_SingleRandomWrite>
  
  
  /* Configure the DCMI to interface with the OV9655 camera module */
  DCMI_Config();
 8008fc0:	f000 f803 	bl	8008fca <DCMI_Config>

  return (0x00);
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <DCMI_Config>:

void DCMI_Config(void)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	af00      	add	r7, sp, #0
//  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
//  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
//  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
//     
//  DMA_Init(DMA2_Stream1, &DMA_InitStructure); 
}
 8008fce:	bf00      	nop
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <MCO1_Init>:
  * @brief  Set PA8 Output SYSCLK/2.
  * @param  None
  * @retval None
  */
void MCO1_Init(void)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;  
//	GPIO_Init(GPIOA, &GPIO_InitStructure);
//	
//	RCC_MCO1Config(RCC_MCO1Source_HSE, RCC_MCO1Div_1);
}
 8008fdc:	bf00      	nop
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <DCMI_OV9655_QVGASizeSetup>:
// uint8_t OV9655_QVGA_table[]=
// {

// };
void DCMI_OV9655_QVGASizeSetup(void)
{  
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	af00      	add	r7, sp, #0
	
  Delay(TIMEOUT);
 8008fea:	2002      	movs	r0, #2
 8008fec:	f000 fcb8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x00, 0x00);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	2060      	movs	r0, #96	; 0x60
 8008ff6:	f001 ffc7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8008ffa:	2002      	movs	r0, #2
 8008ffc:	f000 fcb0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x01, 0x80);
 8009000:	2280      	movs	r2, #128	; 0x80
 8009002:	2101      	movs	r1, #1
 8009004:	2060      	movs	r0, #96	; 0x60
 8009006:	f001 ffbf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800900a:	2002      	movs	r0, #2
 800900c:	f000 fca8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x02, 0x80);
 8009010:	2280      	movs	r2, #128	; 0x80
 8009012:	2102      	movs	r1, #2
 8009014:	2060      	movs	r0, #96	; 0x60
 8009016:	f001 ffb7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800901a:	2002      	movs	r0, #2
 800901c:	f000 fca0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x03, 0x02);
 8009020:	2202      	movs	r2, #2
 8009022:	2103      	movs	r1, #3
 8009024:	2060      	movs	r0, #96	; 0x60
 8009026:	f001 ffaf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800902a:	2002      	movs	r0, #2
 800902c:	f000 fc98 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x04, 0x00);
 8009030:	2200      	movs	r2, #0
 8009032:	2104      	movs	r1, #4
 8009034:	2060      	movs	r0, #96	; 0x60
 8009036:	f001 ffa7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800903a:	2002      	movs	r0, #2
 800903c:	f000 fc90 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x09, 0x03);
 8009040:	2203      	movs	r2, #3
 8009042:	2109      	movs	r1, #9
 8009044:	2060      	movs	r0, #96	; 0x60
 8009046:	f001 ff9f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800904a:	2002      	movs	r0, #2
 800904c:	f000 fc88 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x0b, 0x57);
 8009050:	2257      	movs	r2, #87	; 0x57
 8009052:	210b      	movs	r1, #11
 8009054:	2060      	movs	r0, #96	; 0x60
 8009056:	f001 ff97 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800905a:	2002      	movs	r0, #2
 800905c:	f000 fc80 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x0e, 0x1);
 8009060:	2201      	movs	r2, #1
 8009062:	210e      	movs	r1, #14
 8009064:	2060      	movs	r0, #96	; 0x60
 8009066:	f001 ff8f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800906a:	2002      	movs	r0, #2
 800906c:	f000 fc78 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x0f, 0xc0);
 8009070:	22c0      	movs	r2, #192	; 0xc0
 8009072:	210f      	movs	r1, #15
 8009074:	2060      	movs	r0, #96	; 0x60
 8009076:	f001 ff87 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800907a:	2002      	movs	r0, #2
 800907c:	f000 fc70 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x10, 0x50);
 8009080:	2250      	movs	r2, #80	; 0x50
 8009082:	2110      	movs	r1, #16
 8009084:	2060      	movs	r0, #96	; 0x60
 8009086:	f001 ff7f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800908a:	2002      	movs	r0, #2
 800908c:	f000 fc68 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x11, 0x80);
 8009090:	2280      	movs	r2, #128	; 0x80
 8009092:	2111      	movs	r1, #17
 8009094:	2060      	movs	r0, #96	; 0x60
 8009096:	f001 ff77 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800909a:	2002      	movs	r0, #2
 800909c:	f000 fc60 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x12, 0x63);
 80090a0:	2263      	movs	r2, #99	; 0x63
 80090a2:	2112      	movs	r1, #18
 80090a4:	2060      	movs	r0, #96	; 0x60
 80090a6:	f001 ff6f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090aa:	2002      	movs	r0, #2
 80090ac:	f000 fc58 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x13, 0xef);
 80090b0:	22ef      	movs	r2, #239	; 0xef
 80090b2:	2113      	movs	r1, #19
 80090b4:	2060      	movs	r0, #96	; 0x60
 80090b6:	f001 ff67 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090ba:	2002      	movs	r0, #2
 80090bc:	f000 fc50 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x14, 0x3a);
 80090c0:	223a      	movs	r2, #58	; 0x3a
 80090c2:	2114      	movs	r1, #20
 80090c4:	2060      	movs	r0, #96	; 0x60
 80090c6:	f001 ff5f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090ca:	2002      	movs	r0, #2
 80090cc:	f000 fc48 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x15, 0x18);
 80090d0:	2218      	movs	r2, #24
 80090d2:	2115      	movs	r1, #21
 80090d4:	2060      	movs	r0, #96	; 0x60
 80090d6:	f001 ff57 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090da:	2002      	movs	r0, #2
 80090dc:	f000 fc40 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x16, 0x24);
 80090e0:	2224      	movs	r2, #36	; 0x24
 80090e2:	2116      	movs	r1, #22
 80090e4:	2060      	movs	r0, #96	; 0x60
 80090e6:	f001 ff4f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090ea:	2002      	movs	r0, #2
 80090ec:	f000 fc38 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x17, 0x18);
 80090f0:	2218      	movs	r2, #24
 80090f2:	2117      	movs	r1, #23
 80090f4:	2060      	movs	r0, #96	; 0x60
 80090f6:	f001 ff47 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80090fa:	2002      	movs	r0, #2
 80090fc:	f000 fc30 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x18, 0x04);
 8009100:	2204      	movs	r2, #4
 8009102:	2118      	movs	r1, #24
 8009104:	2060      	movs	r0, #96	; 0x60
 8009106:	f001 ff3f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800910a:	2002      	movs	r0, #2
 800910c:	f000 fc28 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x19, 0x01);
 8009110:	2201      	movs	r2, #1
 8009112:	2119      	movs	r1, #25
 8009114:	2060      	movs	r0, #96	; 0x60
 8009116:	f001 ff37 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800911a:	2002      	movs	r0, #2
 800911c:	f000 fc20 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x1a, 0x81);
 8009120:	2281      	movs	r2, #129	; 0x81
 8009122:	211a      	movs	r1, #26
 8009124:	2060      	movs	r0, #96	; 0x60
 8009126:	f001 ff2f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800912a:	2002      	movs	r0, #2
 800912c:	f000 fc18 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x1e, 0x00); /*0x20*/
 8009130:	2200      	movs	r2, #0
 8009132:	211e      	movs	r1, #30
 8009134:	2060      	movs	r0, #96	; 0x60
 8009136:	f001 ff27 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT); 					                          
 800913a:	2002      	movs	r0, #2
 800913c:	f000 fc10 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x24, 0x3c);
 8009140:	223c      	movs	r2, #60	; 0x3c
 8009142:	2124      	movs	r1, #36	; 0x24
 8009144:	2060      	movs	r0, #96	; 0x60
 8009146:	f001 ff1f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800914a:	2002      	movs	r0, #2
 800914c:	f000 fc08 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x25, 0x36);
 8009150:	2236      	movs	r2, #54	; 0x36
 8009152:	2125      	movs	r1, #37	; 0x25
 8009154:	2060      	movs	r0, #96	; 0x60
 8009156:	f001 ff17 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);						                          
 800915a:	2002      	movs	r0, #2
 800915c:	f000 fc00 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x26, 0x72);
 8009160:	2272      	movs	r2, #114	; 0x72
 8009162:	2126      	movs	r1, #38	; 0x26
 8009164:	2060      	movs	r0, #96	; 0x60
 8009166:	f001 ff0f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);							                        
 800916a:	2002      	movs	r0, #2
 800916c:	f000 fbf8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x27, 0x08);
 8009170:	2208      	movs	r2, #8
 8009172:	2127      	movs	r1, #39	; 0x27
 8009174:	2060      	movs	r0, #96	; 0x60
 8009176:	f001 ff07 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800917a:	2002      	movs	r0, #2
 800917c:	f000 fbf0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x28, 0x08);
 8009180:	2208      	movs	r2, #8
 8009182:	2128      	movs	r1, #40	; 0x28
 8009184:	2060      	movs	r0, #96	; 0x60
 8009186:	f001 feff 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800918a:	2002      	movs	r0, #2
 800918c:	f000 fbe8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x29, 0x15);
 8009190:	2215      	movs	r2, #21
 8009192:	2129      	movs	r1, #41	; 0x29
 8009194:	2060      	movs	r0, #96	; 0x60
 8009196:	f001 fef7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800919a:	2002      	movs	r0, #2
 800919c:	f000 fbe0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x2a, 0x00);
 80091a0:	2200      	movs	r2, #0
 80091a2:	212a      	movs	r1, #42	; 0x2a
 80091a4:	2060      	movs	r0, #96	; 0x60
 80091a6:	f001 feef 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091aa:	2002      	movs	r0, #2
 80091ac:	f000 fbd8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x2b, 0x00);
 80091b0:	2200      	movs	r2, #0
 80091b2:	212b      	movs	r1, #43	; 0x2b
 80091b4:	2060      	movs	r0, #96	; 0x60
 80091b6:	f001 fee7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091ba:	2002      	movs	r0, #2
 80091bc:	f000 fbd0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x2c, 0x08);
 80091c0:	2208      	movs	r2, #8
 80091c2:	212c      	movs	r1, #44	; 0x2c
 80091c4:	2060      	movs	r0, #96	; 0x60
 80091c6:	f001 fedf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091ca:	2002      	movs	r0, #2
 80091cc:	f000 fbc8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x32, 0x12);
 80091d0:	2212      	movs	r2, #18
 80091d2:	2132      	movs	r1, #50	; 0x32
 80091d4:	2060      	movs	r0, #96	; 0x60
 80091d6:	f001 fed7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091da:	2002      	movs	r0, #2
 80091dc:	f000 fbc0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x33, 0x00);
 80091e0:	2200      	movs	r2, #0
 80091e2:	2133      	movs	r1, #51	; 0x33
 80091e4:	2060      	movs	r0, #96	; 0x60
 80091e6:	f001 fecf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091ea:	2002      	movs	r0, #2
 80091ec:	f000 fbb8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x34, 0x3f);
 80091f0:	223f      	movs	r2, #63	; 0x3f
 80091f2:	2134      	movs	r1, #52	; 0x34
 80091f4:	2060      	movs	r0, #96	; 0x60
 80091f6:	f001 fec7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80091fa:	2002      	movs	r0, #2
 80091fc:	f000 fbb0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x35, 0x00);
 8009200:	2200      	movs	r2, #0
 8009202:	2135      	movs	r1, #53	; 0x35
 8009204:	2060      	movs	r0, #96	; 0x60
 8009206:	f001 febf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800920a:	2002      	movs	r0, #2
 800920c:	f000 fba8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x36, 0x3a);
 8009210:	223a      	movs	r2, #58	; 0x3a
 8009212:	2136      	movs	r1, #54	; 0x36
 8009214:	2060      	movs	r0, #96	; 0x60
 8009216:	f001 feb7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800921a:	2002      	movs	r0, #2
 800921c:	f000 fba0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x38, 0x72);
 8009220:	2272      	movs	r2, #114	; 0x72
 8009222:	2138      	movs	r1, #56	; 0x38
 8009224:	2060      	movs	r0, #96	; 0x60
 8009226:	f001 feaf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800922a:	2002      	movs	r0, #2
 800922c:	f000 fb98 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x39, 0x57);
 8009230:	2257      	movs	r2, #87	; 0x57
 8009232:	2139      	movs	r1, #57	; 0x39
 8009234:	2060      	movs	r0, #96	; 0x60
 8009236:	f001 fea7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800923a:	2002      	movs	r0, #2
 800923c:	f000 fb90 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3a, 0xca);
 8009240:	22ca      	movs	r2, #202	; 0xca
 8009242:	213a      	movs	r1, #58	; 0x3a
 8009244:	2060      	movs	r0, #96	; 0x60
 8009246:	f001 fe9f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800924a:	2002      	movs	r0, #2
 800924c:	f000 fb88 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3b, 0x04);
 8009250:	2204      	movs	r2, #4
 8009252:	213b      	movs	r1, #59	; 0x3b
 8009254:	2060      	movs	r0, #96	; 0x60
 8009256:	f001 fe97 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800925a:	2002      	movs	r0, #2
 800925c:	f000 fb80 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3d, 0x99);
 8009260:	2299      	movs	r2, #153	; 0x99
 8009262:	213d      	movs	r1, #61	; 0x3d
 8009264:	2060      	movs	r0, #96	; 0x60
 8009266:	f001 fe8f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800926a:	2002      	movs	r0, #2
 800926c:	f000 fb78 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3e, 0x02); 
 8009270:	2202      	movs	r2, #2
 8009272:	213e      	movs	r1, #62	; 0x3e
 8009274:	2060      	movs	r0, #96	; 0x60
 8009276:	f001 fe87 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800927a:	2002      	movs	r0, #2
 800927c:	f000 fb70 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x3f, 0xc1);
 8009280:	22c1      	movs	r2, #193	; 0xc1
 8009282:	213f      	movs	r1, #63	; 0x3f
 8009284:	2060      	movs	r0, #96	; 0x60
 8009286:	f001 fe7f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800928a:	2002      	movs	r0, #2
 800928c:	f000 fb68 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x40, 0xd0);
 8009290:	22d0      	movs	r2, #208	; 0xd0
 8009292:	2140      	movs	r1, #64	; 0x40
 8009294:	2060      	movs	r0, #96	; 0x60
 8009296:	f001 fe77 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800929a:	2002      	movs	r0, #2
 800929c:	f000 fb60 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x41, 0x41);
 80092a0:	2241      	movs	r2, #65	; 0x41
 80092a2:	2141      	movs	r1, #65	; 0x41
 80092a4:	2060      	movs	r0, #96	; 0x60
 80092a6:	f001 fe6f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092aa:	2002      	movs	r0, #2
 80092ac:	f000 fb58 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x42, 0xc0);
 80092b0:	22c0      	movs	r2, #192	; 0xc0
 80092b2:	2142      	movs	r1, #66	; 0x42
 80092b4:	2060      	movs	r0, #96	; 0x60
 80092b6:	f001 fe67 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092ba:	2002      	movs	r0, #2
 80092bc:	f000 fb50 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x43, 0x0a);
 80092c0:	220a      	movs	r2, #10
 80092c2:	2143      	movs	r1, #67	; 0x43
 80092c4:	2060      	movs	r0, #96	; 0x60
 80092c6:	f001 fe5f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092ca:	2002      	movs	r0, #2
 80092cc:	f000 fb48 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x44, 0xf0);
 80092d0:	22f0      	movs	r2, #240	; 0xf0
 80092d2:	2144      	movs	r1, #68	; 0x44
 80092d4:	2060      	movs	r0, #96	; 0x60
 80092d6:	f001 fe57 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092da:	2002      	movs	r0, #2
 80092dc:	f000 fb40 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x45, 0x46);
 80092e0:	2246      	movs	r2, #70	; 0x46
 80092e2:	2145      	movs	r1, #69	; 0x45
 80092e4:	2060      	movs	r0, #96	; 0x60
 80092e6:	f001 fe4f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092ea:	2002      	movs	r0, #2
 80092ec:	f000 fb38 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x46, 0x62);
 80092f0:	2262      	movs	r2, #98	; 0x62
 80092f2:	2146      	movs	r1, #70	; 0x46
 80092f4:	2060      	movs	r0, #96	; 0x60
 80092f6:	f001 fe47 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80092fa:	2002      	movs	r0, #2
 80092fc:	f000 fb30 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x47, 0x2a);
 8009300:	222a      	movs	r2, #42	; 0x2a
 8009302:	2147      	movs	r1, #71	; 0x47
 8009304:	2060      	movs	r0, #96	; 0x60
 8009306:	f001 fe3f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800930a:	2002      	movs	r0, #2
 800930c:	f000 fb28 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x48, 0x3c);
 8009310:	223c      	movs	r2, #60	; 0x3c
 8009312:	2148      	movs	r1, #72	; 0x48
 8009314:	2060      	movs	r0, #96	; 0x60
 8009316:	f001 fe37 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800931a:	2002      	movs	r0, #2
 800931c:	f000 fb20 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4a, 0xfc);
 8009320:	22fc      	movs	r2, #252	; 0xfc
 8009322:	214a      	movs	r1, #74	; 0x4a
 8009324:	2060      	movs	r0, #96	; 0x60
 8009326:	f001 fe2f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800932a:	2002      	movs	r0, #2
 800932c:	f000 fb18 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4b, 0xfc);
 8009330:	22fc      	movs	r2, #252	; 0xfc
 8009332:	214b      	movs	r1, #75	; 0x4b
 8009334:	2060      	movs	r0, #96	; 0x60
 8009336:	f001 fe27 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800933a:	2002      	movs	r0, #2
 800933c:	f000 fb10 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4c, 0x7f);
 8009340:	227f      	movs	r2, #127	; 0x7f
 8009342:	214c      	movs	r1, #76	; 0x4c
 8009344:	2060      	movs	r0, #96	; 0x60
 8009346:	f001 fe1f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800934a:	2002      	movs	r0, #2
 800934c:	f000 fb08 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4d, 0x7f);
 8009350:	227f      	movs	r2, #127	; 0x7f
 8009352:	214d      	movs	r1, #77	; 0x4d
 8009354:	2060      	movs	r0, #96	; 0x60
 8009356:	f001 fe17 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800935a:	2002      	movs	r0, #2
 800935c:	f000 fb00 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4e, 0x7f);
 8009360:	227f      	movs	r2, #127	; 0x7f
 8009362:	214e      	movs	r1, #78	; 0x4e
 8009364:	2060      	movs	r0, #96	; 0x60
 8009366:	f001 fe0f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800936a:	2002      	movs	r0, #2
 800936c:	f000 faf8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x4f, 0x98);
 8009370:	2298      	movs	r2, #152	; 0x98
 8009372:	214f      	movs	r1, #79	; 0x4f
 8009374:	2060      	movs	r0, #96	; 0x60
 8009376:	f001 fe07 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800937a:	2002      	movs	r0, #2
 800937c:	f000 faf0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x50, 0x98);
 8009380:	2298      	movs	r2, #152	; 0x98
 8009382:	2150      	movs	r1, #80	; 0x50
 8009384:	2060      	movs	r0, #96	; 0x60
 8009386:	f001 fdff 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800938a:	2002      	movs	r0, #2
 800938c:	f000 fae8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x51, 0x00);
 8009390:	2200      	movs	r2, #0
 8009392:	2151      	movs	r1, #81	; 0x51
 8009394:	2060      	movs	r0, #96	; 0x60
 8009396:	f001 fdf7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800939a:	2002      	movs	r0, #2
 800939c:	f000 fae0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x52, 0x28);
 80093a0:	2228      	movs	r2, #40	; 0x28
 80093a2:	2152      	movs	r1, #82	; 0x52
 80093a4:	2060      	movs	r0, #96	; 0x60
 80093a6:	f001 fdef 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093aa:	2002      	movs	r0, #2
 80093ac:	f000 fad8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x53, 0x70);
 80093b0:	2270      	movs	r2, #112	; 0x70
 80093b2:	2153      	movs	r1, #83	; 0x53
 80093b4:	2060      	movs	r0, #96	; 0x60
 80093b6:	f001 fde7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093ba:	2002      	movs	r0, #2
 80093bc:	f000 fad0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x54, 0x98);
 80093c0:	2298      	movs	r2, #152	; 0x98
 80093c2:	2154      	movs	r1, #84	; 0x54
 80093c4:	2060      	movs	r0, #96	; 0x60
 80093c6:	f001 fddf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093ca:	2002      	movs	r0, #2
 80093cc:	f000 fac8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x58, 0x1a);
 80093d0:	221a      	movs	r2, #26
 80093d2:	2158      	movs	r1, #88	; 0x58
 80093d4:	2060      	movs	r0, #96	; 0x60
 80093d6:	f001 fdd7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093da:	2002      	movs	r0, #2
 80093dc:	f000 fac0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x59, 0x85);
 80093e0:	2285      	movs	r2, #133	; 0x85
 80093e2:	2159      	movs	r1, #89	; 0x59
 80093e4:	2060      	movs	r0, #96	; 0x60
 80093e6:	f001 fdcf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093ea:	2002      	movs	r0, #2
 80093ec:	f000 fab8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5a, 0xa9);
 80093f0:	22a9      	movs	r2, #169	; 0xa9
 80093f2:	215a      	movs	r1, #90	; 0x5a
 80093f4:	2060      	movs	r0, #96	; 0x60
 80093f6:	f001 fdc7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80093fa:	2002      	movs	r0, #2
 80093fc:	f000 fab0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5b, 0x64);
 8009400:	2264      	movs	r2, #100	; 0x64
 8009402:	215b      	movs	r1, #91	; 0x5b
 8009404:	2060      	movs	r0, #96	; 0x60
 8009406:	f001 fdbf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800940a:	2002      	movs	r0, #2
 800940c:	f000 faa8 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5c, 0x84);
 8009410:	2284      	movs	r2, #132	; 0x84
 8009412:	215c      	movs	r1, #92	; 0x5c
 8009414:	2060      	movs	r0, #96	; 0x60
 8009416:	f001 fdb7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800941a:	2002      	movs	r0, #2
 800941c:	f000 faa0 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5d, 0x53);
 8009420:	2253      	movs	r2, #83	; 0x53
 8009422:	215d      	movs	r1, #93	; 0x5d
 8009424:	2060      	movs	r0, #96	; 0x60
 8009426:	f001 fdaf 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800942a:	2002      	movs	r0, #2
 800942c:	f000 fa98 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5e, 0x0e);
 8009430:	220e      	movs	r2, #14
 8009432:	215e      	movs	r1, #94	; 0x5e
 8009434:	2060      	movs	r0, #96	; 0x60
 8009436:	f001 fda7 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800943a:	2002      	movs	r0, #2
 800943c:	f000 fa90 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x5f, 0xf0);
 8009440:	22f0      	movs	r2, #240	; 0xf0
 8009442:	215f      	movs	r1, #95	; 0x5f
 8009444:	2060      	movs	r0, #96	; 0x60
 8009446:	f001 fd9f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800944a:	2002      	movs	r0, #2
 800944c:	f000 fa88 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x60, 0xf0);
 8009450:	22f0      	movs	r2, #240	; 0xf0
 8009452:	2160      	movs	r1, #96	; 0x60
 8009454:	2060      	movs	r0, #96	; 0x60
 8009456:	f001 fd97 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800945a:	2002      	movs	r0, #2
 800945c:	f000 fa80 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x61, 0xf0);
 8009460:	22f0      	movs	r2, #240	; 0xf0
 8009462:	2161      	movs	r1, #97	; 0x61
 8009464:	2060      	movs	r0, #96	; 0x60
 8009466:	f001 fd8f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800946a:	2002      	movs	r0, #2
 800946c:	f000 fa78 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x62, 0x00);
 8009470:	2200      	movs	r2, #0
 8009472:	2162      	movs	r1, #98	; 0x62
 8009474:	2060      	movs	r0, #96	; 0x60
 8009476:	f001 fd87 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800947a:	2002      	movs	r0, #2
 800947c:	f000 fa70 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x63, 0x00);
 8009480:	2200      	movs	r2, #0
 8009482:	2163      	movs	r1, #99	; 0x63
 8009484:	2060      	movs	r0, #96	; 0x60
 8009486:	f001 fd7f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800948a:	2002      	movs	r0, #2
 800948c:	f000 fa68 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x64, 0x02);
 8009490:	2202      	movs	r2, #2
 8009492:	2164      	movs	r1, #100	; 0x64
 8009494:	2060      	movs	r0, #96	; 0x60
 8009496:	f001 fd77 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800949a:	2002      	movs	r0, #2
 800949c:	f000 fa60 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x65, 0x20);
 80094a0:	2220      	movs	r2, #32
 80094a2:	2165      	movs	r1, #101	; 0x65
 80094a4:	2060      	movs	r0, #96	; 0x60
 80094a6:	f001 fd6f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094aa:	2002      	movs	r0, #2
 80094ac:	f000 fa58 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x66, 0x00);
 80094b0:	2200      	movs	r2, #0
 80094b2:	2166      	movs	r1, #102	; 0x66
 80094b4:	2060      	movs	r0, #96	; 0x60
 80094b6:	f001 fd67 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094ba:	2002      	movs	r0, #2
 80094bc:	f000 fa50 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x69, 0x0a);
 80094c0:	220a      	movs	r2, #10
 80094c2:	2169      	movs	r1, #105	; 0x69
 80094c4:	2060      	movs	r0, #96	; 0x60
 80094c6:	f001 fd5f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094ca:	2002      	movs	r0, #2
 80094cc:	f000 fa48 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6b, 0x0a);
 80094d0:	220a      	movs	r2, #10
 80094d2:	216b      	movs	r1, #107	; 0x6b
 80094d4:	2060      	movs	r0, #96	; 0x60
 80094d6:	f001 fd57 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094da:	2002      	movs	r0, #2
 80094dc:	f000 fa40 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6c, 0x04);
 80094e0:	2204      	movs	r2, #4
 80094e2:	216c      	movs	r1, #108	; 0x6c
 80094e4:	2060      	movs	r0, #96	; 0x60
 80094e6:	f001 fd4f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094ea:	2002      	movs	r0, #2
 80094ec:	f000 fa38 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6d, 0x55);
 80094f0:	2255      	movs	r2, #85	; 0x55
 80094f2:	216d      	movs	r1, #109	; 0x6d
 80094f4:	2060      	movs	r0, #96	; 0x60
 80094f6:	f001 fd47 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80094fa:	2002      	movs	r0, #2
 80094fc:	f000 fa30 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6e, 0x00);
 8009500:	2200      	movs	r2, #0
 8009502:	216e      	movs	r1, #110	; 0x6e
 8009504:	2060      	movs	r0, #96	; 0x60
 8009506:	f001 fd3f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800950a:	2002      	movs	r0, #2
 800950c:	f000 fa28 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x6f, 0x9d);
 8009510:	229d      	movs	r2, #157	; 0x9d
 8009512:	216f      	movs	r1, #111	; 0x6f
 8009514:	2060      	movs	r0, #96	; 0x60
 8009516:	f001 fd37 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800951a:	2002      	movs	r0, #2
 800951c:	f000 fa20 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x70, 0x21);
 8009520:	2221      	movs	r2, #33	; 0x21
 8009522:	2170      	movs	r1, #112	; 0x70
 8009524:	2060      	movs	r0, #96	; 0x60
 8009526:	f001 fd2f 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800952a:	2002      	movs	r0, #2
 800952c:	f000 fa18 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x71, 0x78);
 8009530:	2278      	movs	r2, #120	; 0x78
 8009532:	2171      	movs	r1, #113	; 0x71
 8009534:	2060      	movs	r0, #96	; 0x60
 8009536:	f001 fd27 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 800953a:	2002      	movs	r0, #2
 800953c:	f000 fa10 	bl	8009960 <Delay>
  Delay(TIMEOUT);
 8009540:	2002      	movs	r0, #2
 8009542:	f000 fa0d 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x72, 0x11); 
 8009546:	2211      	movs	r2, #17
 8009548:	2172      	movs	r1, #114	; 0x72
 800954a:	2060      	movs	r0, #96	; 0x60
 800954c:	f001 fd1c 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009550:	2002      	movs	r0, #2
 8009552:	f000 fa05 	bl	8009960 <Delay>
  Delay(TIMEOUT);
 8009556:	2002      	movs	r0, #2
 8009558:	f000 fa02 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x73, 0x01);
 800955c:	2201      	movs	r2, #1
 800955e:	2173      	movs	r1, #115	; 0x73
 8009560:	2060      	movs	r0, #96	; 0x60
 8009562:	f001 fd11 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009566:	2002      	movs	r0, #2
 8009568:	f000 f9fa 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x74, 0x10); 
 800956c:	2210      	movs	r2, #16
 800956e:	2174      	movs	r1, #116	; 0x74
 8009570:	2060      	movs	r0, #96	; 0x60
 8009572:	f001 fd09 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009576:	2002      	movs	r0, #2
 8009578:	f000 f9f2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x75, 0x10); 
 800957c:	2210      	movs	r2, #16
 800957e:	2175      	movs	r1, #117	; 0x75
 8009580:	2060      	movs	r0, #96	; 0x60
 8009582:	f001 fd01 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009586:	2002      	movs	r0, #2
 8009588:	f000 f9ea 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x76, 0x01);
 800958c:	2201      	movs	r2, #1
 800958e:	2176      	movs	r1, #118	; 0x76
 8009590:	2060      	movs	r0, #96	; 0x60
 8009592:	f001 fcf9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009596:	2002      	movs	r0, #2
 8009598:	f000 f9e2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x77, 0x02);
 800959c:	2202      	movs	r2, #2
 800959e:	2177      	movs	r1, #119	; 0x77
 80095a0:	2060      	movs	r0, #96	; 0x60
 80095a2:	f001 fcf1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095a6:	2002      	movs	r0, #2
 80095a8:	f000 f9da 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7A, 0x12);
 80095ac:	2212      	movs	r2, #18
 80095ae:	217a      	movs	r1, #122	; 0x7a
 80095b0:	2060      	movs	r0, #96	; 0x60
 80095b2:	f001 fce9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095b6:	2002      	movs	r0, #2
 80095b8:	f000 f9d2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7B, 0x08);
 80095bc:	2208      	movs	r2, #8
 80095be:	217b      	movs	r1, #123	; 0x7b
 80095c0:	2060      	movs	r0, #96	; 0x60
 80095c2:	f001 fce1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095c6:	2002      	movs	r0, #2
 80095c8:	f000 f9ca 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7C, 0x16);
 80095cc:	2216      	movs	r2, #22
 80095ce:	217c      	movs	r1, #124	; 0x7c
 80095d0:	2060      	movs	r0, #96	; 0x60
 80095d2:	f001 fcd9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095d6:	2002      	movs	r0, #2
 80095d8:	f000 f9c2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7D, 0x30);
 80095dc:	2230      	movs	r2, #48	; 0x30
 80095de:	217d      	movs	r1, #125	; 0x7d
 80095e0:	2060      	movs	r0, #96	; 0x60
 80095e2:	f001 fcd1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095e6:	2002      	movs	r0, #2
 80095e8:	f000 f9ba 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7E, 0x5e);
 80095ec:	225e      	movs	r2, #94	; 0x5e
 80095ee:	217e      	movs	r1, #126	; 0x7e
 80095f0:	2060      	movs	r0, #96	; 0x60
 80095f2:	f001 fcc9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80095f6:	2002      	movs	r0, #2
 80095f8:	f000 f9b2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x7F, 0x72);
 80095fc:	2272      	movs	r2, #114	; 0x72
 80095fe:	217f      	movs	r1, #127	; 0x7f
 8009600:	2060      	movs	r0, #96	; 0x60
 8009602:	f001 fcc1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009606:	2002      	movs	r0, #2
 8009608:	f000 f9aa 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x80, 0x82);
 800960c:	2282      	movs	r2, #130	; 0x82
 800960e:	2180      	movs	r1, #128	; 0x80
 8009610:	2060      	movs	r0, #96	; 0x60
 8009612:	f001 fcb9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009616:	2002      	movs	r0, #2
 8009618:	f000 f9a2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x81, 0x8e);
 800961c:	228e      	movs	r2, #142	; 0x8e
 800961e:	2181      	movs	r1, #129	; 0x81
 8009620:	2060      	movs	r0, #96	; 0x60
 8009622:	f001 fcb1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009626:	2002      	movs	r0, #2
 8009628:	f000 f99a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x82, 0x9a);
 800962c:	229a      	movs	r2, #154	; 0x9a
 800962e:	2182      	movs	r1, #130	; 0x82
 8009630:	2060      	movs	r0, #96	; 0x60
 8009632:	f001 fca9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009636:	2002      	movs	r0, #2
 8009638:	f000 f992 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x83, 0xa4);
 800963c:	22a4      	movs	r2, #164	; 0xa4
 800963e:	2183      	movs	r1, #131	; 0x83
 8009640:	2060      	movs	r0, #96	; 0x60
 8009642:	f001 fca1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009646:	2002      	movs	r0, #2
 8009648:	f000 f98a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x84, 0xac);
 800964c:	22ac      	movs	r2, #172	; 0xac
 800964e:	2184      	movs	r1, #132	; 0x84
 8009650:	2060      	movs	r0, #96	; 0x60
 8009652:	f001 fc99 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009656:	2002      	movs	r0, #2
 8009658:	f000 f982 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x85, 0xb8);
 800965c:	22b8      	movs	r2, #184	; 0xb8
 800965e:	2185      	movs	r1, #133	; 0x85
 8009660:	2060      	movs	r0, #96	; 0x60
 8009662:	f001 fc91 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009666:	2002      	movs	r0, #2
 8009668:	f000 f97a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x86, 0xc3);
 800966c:	22c3      	movs	r2, #195	; 0xc3
 800966e:	2186      	movs	r1, #134	; 0x86
 8009670:	2060      	movs	r0, #96	; 0x60
 8009672:	f001 fc89 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009676:	2002      	movs	r0, #2
 8009678:	f000 f972 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x87, 0xd6);
 800967c:	22d6      	movs	r2, #214	; 0xd6
 800967e:	2187      	movs	r1, #135	; 0x87
 8009680:	2060      	movs	r0, #96	; 0x60
 8009682:	f001 fc81 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009686:	2002      	movs	r0, #2
 8009688:	f000 f96a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x88, 0xe6);
 800968c:	22e6      	movs	r2, #230	; 0xe6
 800968e:	2188      	movs	r1, #136	; 0x88
 8009690:	2060      	movs	r0, #96	; 0x60
 8009692:	f001 fc79 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009696:	2002      	movs	r0, #2
 8009698:	f000 f962 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x89, 0xf2);
 800969c:	22f2      	movs	r2, #242	; 0xf2
 800969e:	2189      	movs	r1, #137	; 0x89
 80096a0:	2060      	movs	r0, #96	; 0x60
 80096a2:	f001 fc71 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80096a6:	2002      	movs	r0, #2
 80096a8:	f000 f95a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x8a, 0x24);
 80096ac:	2224      	movs	r2, #36	; 0x24
 80096ae:	218a      	movs	r1, #138	; 0x8a
 80096b0:	2060      	movs	r0, #96	; 0x60
 80096b2:	f001 fc69 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80096b6:	2002      	movs	r0, #2
 80096b8:	f000 f952 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x8c, 0x80);
 80096bc:	2280      	movs	r2, #128	; 0x80
 80096be:	218c      	movs	r1, #140	; 0x8c
 80096c0:	2060      	movs	r0, #96	; 0x60
 80096c2:	f001 fc61 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80096c6:	2002      	movs	r0, #2
 80096c8:	f000 f94a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x90, 0x7d);
 80096cc:	227d      	movs	r2, #125	; 0x7d
 80096ce:	2190      	movs	r1, #144	; 0x90
 80096d0:	2060      	movs	r0, #96	; 0x60
 80096d2:	f001 fc59 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80096d6:	2002      	movs	r0, #2
 80096d8:	f000 f942 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x91, 0x7b);
 80096dc:	227b      	movs	r2, #123	; 0x7b
 80096de:	2191      	movs	r1, #145	; 0x91
 80096e0:	2060      	movs	r0, #96	; 0x60
 80096e2:	f001 fc51 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80096e6:	2002      	movs	r0, #2
 80096e8:	f000 f93a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x9d, 0x02);
 80096ec:	2202      	movs	r2, #2
 80096ee:	219d      	movs	r1, #157	; 0x9d
 80096f0:	2060      	movs	r0, #96	; 0x60
 80096f2:	f001 fc49 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80096f6:	2002      	movs	r0, #2
 80096f8:	f000 f932 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x9e, 0x02);
 80096fc:	2202      	movs	r2, #2
 80096fe:	219e      	movs	r1, #158	; 0x9e
 8009700:	2060      	movs	r0, #96	; 0x60
 8009702:	f001 fc41 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009706:	2002      	movs	r0, #2
 8009708:	f000 f92a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0x9f, 0x7a);
 800970c:	227a      	movs	r2, #122	; 0x7a
 800970e:	219f      	movs	r1, #159	; 0x9f
 8009710:	2060      	movs	r0, #96	; 0x60
 8009712:	f001 fc39 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009716:	2002      	movs	r0, #2
 8009718:	f000 f922 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa0, 0x79);
 800971c:	2279      	movs	r2, #121	; 0x79
 800971e:	21a0      	movs	r1, #160	; 0xa0
 8009720:	2060      	movs	r0, #96	; 0x60
 8009722:	f001 fc31 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009726:	2002      	movs	r0, #2
 8009728:	f000 f91a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa1, 0x1f);
 800972c:	221f      	movs	r2, #31
 800972e:	21a1      	movs	r1, #161	; 0xa1
 8009730:	2060      	movs	r0, #96	; 0x60
 8009732:	f001 fc29 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009736:	2002      	movs	r0, #2
 8009738:	f000 f912 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa4, 0x50);
 800973c:	2250      	movs	r2, #80	; 0x50
 800973e:	21a4      	movs	r1, #164	; 0xa4
 8009740:	2060      	movs	r0, #96	; 0x60
 8009742:	f001 fc21 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009746:	2002      	movs	r0, #2
 8009748:	f000 f90a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa5, 0x68);
 800974c:	2268      	movs	r2, #104	; 0x68
 800974e:	21a5      	movs	r1, #165	; 0xa5
 8009750:	2060      	movs	r0, #96	; 0x60
 8009752:	f001 fc19 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009756:	2002      	movs	r0, #2
 8009758:	f000 f902 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa6, 0x4a);
 800975c:	224a      	movs	r2, #74	; 0x4a
 800975e:	21a6      	movs	r1, #166	; 0xa6
 8009760:	2060      	movs	r0, #96	; 0x60
 8009762:	f001 fc11 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009766:	2002      	movs	r0, #2
 8009768:	f000 f8fa 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa8, 0xc1);
 800976c:	22c1      	movs	r2, #193	; 0xc1
 800976e:	21a8      	movs	r1, #168	; 0xa8
 8009770:	2060      	movs	r0, #96	; 0x60
 8009772:	f001 fc09 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009776:	2002      	movs	r0, #2
 8009778:	f000 f8f2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xa9, 0xef);
 800977c:	22ef      	movs	r2, #239	; 0xef
 800977e:	21a9      	movs	r1, #169	; 0xa9
 8009780:	2060      	movs	r0, #96	; 0x60
 8009782:	f001 fc01 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009786:	2002      	movs	r0, #2
 8009788:	f000 f8ea 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xaa, 0x92);
 800978c:	2292      	movs	r2, #146	; 0x92
 800978e:	21aa      	movs	r1, #170	; 0xaa
 8009790:	2060      	movs	r0, #96	; 0x60
 8009792:	f001 fbf9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009796:	2002      	movs	r0, #2
 8009798:	f000 f8e2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xab, 0x04);
 800979c:	2204      	movs	r2, #4
 800979e:	21ab      	movs	r1, #171	; 0xab
 80097a0:	2060      	movs	r0, #96	; 0x60
 80097a2:	f001 fbf1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80097a6:	2002      	movs	r0, #2
 80097a8:	f000 f8da 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xac, 0x80);
 80097ac:	2280      	movs	r2, #128	; 0x80
 80097ae:	21ac      	movs	r1, #172	; 0xac
 80097b0:	2060      	movs	r0, #96	; 0x60
 80097b2:	f001 fbe9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80097b6:	2002      	movs	r0, #2
 80097b8:	f000 f8d2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xad, 0x80);
 80097bc:	2280      	movs	r2, #128	; 0x80
 80097be:	21ad      	movs	r1, #173	; 0xad
 80097c0:	2060      	movs	r0, #96	; 0x60
 80097c2:	f001 fbe1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80097c6:	2002      	movs	r0, #2
 80097c8:	f000 f8ca 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xae, 0x80);
 80097cc:	2280      	movs	r2, #128	; 0x80
 80097ce:	21ae      	movs	r1, #174	; 0xae
 80097d0:	2060      	movs	r0, #96	; 0x60
 80097d2:	f001 fbd9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80097d6:	2002      	movs	r0, #2
 80097d8:	f000 f8c2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xaf, 0x80);
 80097dc:	2280      	movs	r2, #128	; 0x80
 80097de:	21af      	movs	r1, #175	; 0xaf
 80097e0:	2060      	movs	r0, #96	; 0x60
 80097e2:	f001 fbd1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80097e6:	2002      	movs	r0, #2
 80097e8:	f000 f8ba 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb2, 0xf2);
 80097ec:	22f2      	movs	r2, #242	; 0xf2
 80097ee:	21b2      	movs	r1, #178	; 0xb2
 80097f0:	2060      	movs	r0, #96	; 0x60
 80097f2:	f001 fbc9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80097f6:	2002      	movs	r0, #2
 80097f8:	f000 f8b2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb3, 0x20);
 80097fc:	2220      	movs	r2, #32
 80097fe:	21b3      	movs	r1, #179	; 0xb3
 8009800:	2060      	movs	r0, #96	; 0x60
 8009802:	f001 fbc1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009806:	2002      	movs	r0, #2
 8009808:	f000 f8aa 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb4, 0x20);
 800980c:	2220      	movs	r2, #32
 800980e:	21b4      	movs	r1, #180	; 0xb4
 8009810:	2060      	movs	r0, #96	; 0x60
 8009812:	f001 fbb9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009816:	2002      	movs	r0, #2
 8009818:	f000 f8a2 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb5, 0x00);
 800981c:	2200      	movs	r2, #0
 800981e:	21b5      	movs	r1, #181	; 0xb5
 8009820:	2060      	movs	r0, #96	; 0x60
 8009822:	f001 fbb1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009826:	2002      	movs	r0, #2
 8009828:	f000 f89a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb6, 0xaf);
 800982c:	22af      	movs	r2, #175	; 0xaf
 800982e:	21b6      	movs	r1, #182	; 0xb6
 8009830:	2060      	movs	r0, #96	; 0x60
 8009832:	f001 fba9 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009836:	2002      	movs	r0, #2
 8009838:	f000 f892 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xb6, 0xaf);
 800983c:	22af      	movs	r2, #175	; 0xaf
 800983e:	21b6      	movs	r1, #182	; 0xb6
 8009840:	2060      	movs	r0, #96	; 0x60
 8009842:	f001 fba1 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009846:	2002      	movs	r0, #2
 8009848:	f000 f88a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbb, 0xae);
 800984c:	22ae      	movs	r2, #174	; 0xae
 800984e:	21bb      	movs	r1, #187	; 0xbb
 8009850:	2060      	movs	r0, #96	; 0x60
 8009852:	f001 fb99 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009856:	2002      	movs	r0, #2
 8009858:	f000 f882 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbc, 0x7f);
 800985c:	227f      	movs	r2, #127	; 0x7f
 800985e:	21bc      	movs	r1, #188	; 0xbc
 8009860:	2060      	movs	r0, #96	; 0x60
 8009862:	f001 fb91 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009866:	2002      	movs	r0, #2
 8009868:	f000 f87a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbd, 0x7f);
 800986c:	227f      	movs	r2, #127	; 0x7f
 800986e:	21bd      	movs	r1, #189	; 0xbd
 8009870:	2060      	movs	r0, #96	; 0x60
 8009872:	f001 fb89 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009876:	2002      	movs	r0, #2
 8009878:	f000 f872 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbe, 0x7f);
 800987c:	227f      	movs	r2, #127	; 0x7f
 800987e:	21be      	movs	r1, #190	; 0xbe
 8009880:	2060      	movs	r0, #96	; 0x60
 8009882:	f001 fb81 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009886:	2002      	movs	r0, #2
 8009888:	f000 f86a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbf, 0x7f);
 800988c:	227f      	movs	r2, #127	; 0x7f
 800988e:	21bf      	movs	r1, #191	; 0xbf
 8009890:	2060      	movs	r0, #96	; 0x60
 8009892:	f001 fb79 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009896:	2002      	movs	r0, #2
 8009898:	f000 f862 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xbf, 0x7f);
 800989c:	227f      	movs	r2, #127	; 0x7f
 800989e:	21bf      	movs	r1, #191	; 0xbf
 80098a0:	2060      	movs	r0, #96	; 0x60
 80098a2:	f001 fb71 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80098a6:	2002      	movs	r0, #2
 80098a8:	f000 f85a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc0, 0xaa);
 80098ac:	22aa      	movs	r2, #170	; 0xaa
 80098ae:	21c0      	movs	r1, #192	; 0xc0
 80098b0:	2060      	movs	r0, #96	; 0x60
 80098b2:	f001 fb69 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80098b6:	2002      	movs	r0, #2
 80098b8:	f000 f852 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc1, 0xc0);
 80098bc:	22c0      	movs	r2, #192	; 0xc0
 80098be:	21c1      	movs	r1, #193	; 0xc1
 80098c0:	2060      	movs	r0, #96	; 0x60
 80098c2:	f001 fb61 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80098c6:	2002      	movs	r0, #2
 80098c8:	f000 f84a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc2, 0x01);
 80098cc:	2201      	movs	r2, #1
 80098ce:	21c2      	movs	r1, #194	; 0xc2
 80098d0:	2060      	movs	r0, #96	; 0x60
 80098d2:	f001 fb59 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80098d6:	2002      	movs	r0, #2
 80098d8:	f000 f842 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc3, 0x4e);
 80098dc:	224e      	movs	r2, #78	; 0x4e
 80098de:	21c3      	movs	r1, #195	; 0xc3
 80098e0:	2060      	movs	r0, #96	; 0x60
 80098e2:	f001 fb51 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80098e6:	2002      	movs	r0, #2
 80098e8:	f000 f83a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc6, 0x05);
 80098ec:	2205      	movs	r2, #5
 80098ee:	21c6      	movs	r1, #198	; 0xc6
 80098f0:	2060      	movs	r0, #96	; 0x60
 80098f2:	f001 fb49 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 80098f6:	2002      	movs	r0, #2
 80098f8:	f000 f832 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc7, 0x81);
 80098fc:	2281      	movs	r2, #129	; 0x81
 80098fe:	21c7      	movs	r1, #199	; 0xc7
 8009900:	2060      	movs	r0, #96	; 0x60
 8009902:	f001 fb41 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009906:	2002      	movs	r0, #2
 8009908:	f000 f82a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xc9, 0xe0);
 800990c:	22e0      	movs	r2, #224	; 0xe0
 800990e:	21c9      	movs	r1, #201	; 0xc9
 8009910:	2060      	movs	r0, #96	; 0x60
 8009912:	f001 fb39 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009916:	2002      	movs	r0, #2
 8009918:	f000 f822 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xca, 0xe8);
 800991c:	22e8      	movs	r2, #232	; 0xe8
 800991e:	21ca      	movs	r1, #202	; 0xca
 8009920:	2060      	movs	r0, #96	; 0x60
 8009922:	f001 fb31 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009926:	2002      	movs	r0, #2
 8009928:	f000 f81a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xcb, 0xf0);
 800992c:	22f0      	movs	r2, #240	; 0xf0
 800992e:	21cb      	movs	r1, #203	; 0xcb
 8009930:	2060      	movs	r0, #96	; 0x60
 8009932:	f001 fb29 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009936:	2002      	movs	r0, #2
 8009938:	f000 f812 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xcc, 0xd8);
 800993c:	22d8      	movs	r2, #216	; 0xd8
 800993e:	21cc      	movs	r1, #204	; 0xcc
 8009940:	2060      	movs	r0, #96	; 0x60
 8009942:	f001 fb21 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009946:	2002      	movs	r0, #2
 8009948:	f000 f80a 	bl	8009960 <Delay>
  DCMI_SingleRandomWrite(OV9655_DEVICE_WRITE_ADDRESS, 0xcd, 0x93);
 800994c:	2293      	movs	r2, #147	; 0x93
 800994e:	21cd      	movs	r1, #205	; 0xcd
 8009950:	2060      	movs	r0, #96	; 0x60
 8009952:	f001 fb19 	bl	800af88 <DCMI_SingleRandomWrite>
  Delay(TIMEOUT);
 8009956:	2002      	movs	r0, #2
 8009958:	f000 f802 	bl	8009960 <Delay>
}                                                     
 800995c:	bf00      	nop
 800995e:	bd80      	pop	{r7, pc}

08009960 <Delay>:
 			 			  
/**
  * @}
  */
static void Delay(uint32_t nTime)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  while(nTime--);
 8009968:	bf00      	nop
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	1e5a      	subs	r2, r3, #1
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1fa      	bne.n	800996a <Delay+0xa>
} 
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <Delay_ms>:

static void Delay_ms(uint32_t nTime)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  while(nTime--)
 8009988:	e003      	b.n	8009992 <Delay_ms+0x12>
  	{Delay(1000);}
 800998a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800998e:	f7ff ffe7 	bl	8009960 <Delay>
  while(nTime--)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	1e5a      	subs	r2, r3, #1
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1f6      	bne.n	800998a <Delay_ms+0xa>

}
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 80099a8:	bf00      	nop
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
	...

080099b4 <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	60fb      	str	r3, [r7, #12]
 80099c6:	e00c      	b.n	80099e2 <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 80099c8:	4a0a      	ldr	r2, [pc, #40]	; (80099f4 <LCD_IO_WriteMultipleData+0x40>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	881b      	ldrh	r3, [r3, #0]
 80099ce:	8013      	strh	r3, [r2, #0]
    counter--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]
    pData += 2;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3302      	adds	r3, #2
 80099da:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3b01      	subs	r3, #1
 80099e0:	60fb      	str	r3, [r7, #12]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1ef      	bne.n	80099c8 <LCD_IO_WriteMultipleData+0x14>
  }
}
 80099e8:	bf00      	nop
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	60010000 	.word	0x60010000

080099f8 <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 8009a02:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8009a06:	79fa      	ldrb	r2, [r7, #7]
 8009a08:	b292      	uxth	r2, r2
 8009a0a:	801a      	strh	r2, [r3, #0]

}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 8009a18:	b480      	push	{r7}
 8009a1a:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 8009a1c:	4b03      	ldr	r3, [pc, #12]	; (8009a2c <LCD_IO_ReadData+0x14>)
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	b29b      	uxth	r3, r3
  
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	60010000 	.word	0x60010000

08009a30 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8009a34:	f7ff ffb6 	bl	80099a4 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8009a38:	2101      	movs	r1, #1
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f000 f9a6 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8009a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a44:	2001      	movs	r0, #1
 8009a46:	f000 f9a1 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8009a4a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8009a4e:	2002      	movs	r0, #2
 8009a50:	f000 f99c 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8009a54:	f241 0118 	movw	r1, #4120	; 0x1018
 8009a58:	2003      	movs	r0, #3
 8009a5a:	f000 f997 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8009a5e:	2100      	movs	r1, #0
 8009a60:	2004      	movs	r0, #4
 8009a62:	f000 f993 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8009a66:	f240 2102 	movw	r1, #514	; 0x202
 8009a6a:	2008      	movs	r0, #8
 8009a6c:	f000 f98e 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8009a70:	2100      	movs	r1, #0
 8009a72:	2009      	movs	r0, #9
 8009a74:	f000 f98a 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8009a78:	2100      	movs	r1, #0
 8009a7a:	200a      	movs	r0, #10
 8009a7c:	f000 f986 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8009a80:	2100      	movs	r1, #0
 8009a82:	200c      	movs	r0, #12
 8009a84:	f000 f982 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8009a88:	2100      	movs	r1, #0
 8009a8a:	200d      	movs	r0, #13
 8009a8c:	f000 f97e 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8009a90:	2100      	movs	r1, #0
 8009a92:	200f      	movs	r0, #15
 8009a94:	f000 f97a 	bl	8009d8c <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8009a98:	2100      	movs	r1, #0
 8009a9a:	2010      	movs	r0, #16
 8009a9c:	f000 f976 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	2011      	movs	r0, #17
 8009aa4:	f000 f972 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	2012      	movs	r0, #18
 8009aac:	f000 f96e 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	2013      	movs	r0, #19
 8009ab4:	f000 f96a 	bl	8009d8c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8009ab8:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8009abc:	2010      	movs	r0, #16
 8009abe:	f000 f965 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8009ac2:	f240 1137 	movw	r1, #311	; 0x137
 8009ac6:	2011      	movs	r0, #17
 8009ac8:	f000 f960 	bl	8009d8c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8009acc:	f240 1139 	movw	r1, #313	; 0x139
 8009ad0:	2012      	movs	r0, #18
 8009ad2:	f000 f95b 	bl	8009d8c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8009ad6:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8009ada:	2013      	movs	r0, #19
 8009adc:	f000 f956 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8009ae0:	2113      	movs	r1, #19
 8009ae2:	2029      	movs	r0, #41	; 0x29
 8009ae4:	f000 f952 	bl	8009d8c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8009ae8:	2100      	movs	r1, #0
 8009aea:	2020      	movs	r0, #32
 8009aec:	f000 f94e 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8009af0:	2100      	movs	r1, #0
 8009af2:	2021      	movs	r0, #33	; 0x21
 8009af4:	f000 f94a 	bl	8009d8c <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8009af8:	2107      	movs	r1, #7
 8009afa:	2030      	movs	r0, #48	; 0x30
 8009afc:	f000 f946 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8009b00:	f240 3102 	movw	r1, #770	; 0x302
 8009b04:	2031      	movs	r0, #49	; 0x31
 8009b06:	f000 f941 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 8009b0a:	f240 1105 	movw	r1, #261	; 0x105
 8009b0e:	2032      	movs	r0, #50	; 0x32
 8009b10:	f000 f93c 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8009b14:	f240 2106 	movw	r1, #518	; 0x206
 8009b18:	2035      	movs	r0, #53	; 0x35
 8009b1a:	f000 f937 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8009b1e:	f640 0108 	movw	r1, #2056	; 0x808
 8009b22:	2036      	movs	r0, #54	; 0x36
 8009b24:	f000 f932 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8009b28:	f240 2106 	movw	r1, #518	; 0x206
 8009b2c:	2037      	movs	r0, #55	; 0x37
 8009b2e:	f000 f92d 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8009b32:	f240 5104 	movw	r1, #1284	; 0x504
 8009b36:	2038      	movs	r0, #56	; 0x38
 8009b38:	f000 f928 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8009b3c:	2107      	movs	r1, #7
 8009b3e:	2039      	movs	r0, #57	; 0x39
 8009b40:	f000 f924 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8009b44:	f240 1105 	movw	r1, #261	; 0x105
 8009b48:	203c      	movs	r0, #60	; 0x3c
 8009b4a:	f000 f91f 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8009b4e:	f640 0108 	movw	r1, #2056	; 0x808
 8009b52:	203d      	movs	r0, #61	; 0x3d
 8009b54:	f000 f91a 	bl	8009d8c <ili9325_WriteReg>
  HAL_Delay(50); 
 8009b58:	2032      	movs	r0, #50	; 0x32
 8009b5a:	f7fa ffe1 	bl	8004b20 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8009b5e:	2100      	movs	r1, #0
 8009b60:	2050      	movs	r0, #80	; 0x50
 8009b62:	f000 f913 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8009b66:	21ef      	movs	r1, #239	; 0xef
 8009b68:	2051      	movs	r0, #81	; 0x51
 8009b6a:	f000 f90f 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8009b6e:	2100      	movs	r1, #0
 8009b70:	2052      	movs	r0, #82	; 0x52
 8009b72:	f000 f90b 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8009b76:	f240 113f 	movw	r1, #319	; 0x13f
 8009b7a:	2053      	movs	r0, #83	; 0x53
 8009b7c:	f000 f906 	bl	8009d8c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8009b80:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8009b84:	2060      	movs	r0, #96	; 0x60
 8009b86:	f000 f901 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	2061      	movs	r0, #97	; 0x61
 8009b8e:	f000 f8fd 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8009b92:	2100      	movs	r1, #0
 8009b94:	206a      	movs	r0, #106	; 0x6a
 8009b96:	f000 f8f9 	bl	8009d8c <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	2080      	movs	r0, #128	; 0x80
 8009b9e:	f000 f8f5 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	2081      	movs	r0, #129	; 0x81
 8009ba6:	f000 f8f1 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 8009baa:	2100      	movs	r1, #0
 8009bac:	2082      	movs	r0, #130	; 0x82
 8009bae:	f000 f8ed 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	2083      	movs	r0, #131	; 0x83
 8009bb6:	f000 f8e9 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 8009bba:	2100      	movs	r1, #0
 8009bbc:	2084      	movs	r0, #132	; 0x84
 8009bbe:	f000 f8e5 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	2085      	movs	r0, #133	; 0x85
 8009bc6:	f000 f8e1 	bl	8009d8c <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 8009bca:	2110      	movs	r1, #16
 8009bcc:	2090      	movs	r0, #144	; 0x90
 8009bce:	f000 f8dd 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	2092      	movs	r0, #146	; 0x92
 8009bd6:	f000 f8d9 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 8009bda:	2103      	movs	r1, #3
 8009bdc:	2093      	movs	r0, #147	; 0x93
 8009bde:	f000 f8d5 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 8009be2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8009be6:	2095      	movs	r0, #149	; 0x95
 8009be8:	f000 f8d0 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8009bec:	2100      	movs	r1, #0
 8009bee:	2097      	movs	r0, #151	; 0x97
 8009bf0:	f000 f8cc 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	2098      	movs	r0, #152	; 0x98
 8009bf8:	f000 f8c8 	bl	8009d8c <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x0028);
 8009bfc:	2128      	movs	r1, #40	; 0x28
 8009bfe:	2003      	movs	r0, #3
 8009c00:	f000 f8c4 	bl	8009d8c <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 8009c04:	f240 1173 	movw	r1, #371	; 0x173
 8009c08:	2007      	movs	r0, #7
 8009c0a:	f000 f8bf 	bl	8009d8c <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8009c0e:	2100      	movs	r1, #0
 8009c10:	2000      	movs	r0, #0
 8009c12:	f000 f86d 	bl	8009cf0 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009c16:	2022      	movs	r0, #34	; 0x22
 8009c18:	f7ff feee 	bl	80099f8 <LCD_IO_WriteReg>
}
 8009c1c:	bf00      	nop
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8009c24:	2100      	movs	r1, #0
 8009c26:	2010      	movs	r0, #16
 8009c28:	f000 f8b0 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	2011      	movs	r0, #17
 8009c30:	f000 f8ac 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8009c34:	2100      	movs	r1, #0
 8009c36:	2012      	movs	r0, #18
 8009c38:	f000 f8a8 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	2013      	movs	r0, #19
 8009c40:	f000 f8a4 	bl	8009d8c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8009c44:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8009c48:	2010      	movs	r0, #16
 8009c4a:	f000 f89f 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8009c4e:	f240 1137 	movw	r1, #311	; 0x137
 8009c52:	2011      	movs	r0, #17
 8009c54:	f000 f89a 	bl	8009d8c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8009c58:	f240 1139 	movw	r1, #313	; 0x139
 8009c5c:	2012      	movs	r0, #18
 8009c5e:	f000 f895 	bl	8009d8c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8009c62:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8009c66:	2013      	movs	r0, #19
 8009c68:	f000 f890 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8009c6c:	2113      	movs	r1, #19
 8009c6e:	2029      	movs	r0, #41	; 0x29
 8009c70:	f000 f88c 	bl	8009d8c <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8009c74:	f240 1173 	movw	r1, #371	; 0x173
 8009c78:	2007      	movs	r0, #7
 8009c7a:	f000 f887 	bl	8009d8c <ili9325_WriteReg>
}
 8009c7e:	bf00      	nop
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8009c86:	2100      	movs	r1, #0
 8009c88:	2010      	movs	r0, #16
 8009c8a:	f000 f87f 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8009c8e:	2100      	movs	r1, #0
 8009c90:	2011      	movs	r0, #17
 8009c92:	f000 f87b 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8009c96:	2100      	movs	r1, #0
 8009c98:	2012      	movs	r0, #18
 8009c9a:	f000 f877 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	2013      	movs	r0, #19
 8009ca2:	f000 f873 	bl	8009d8c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	2029      	movs	r0, #41	; 0x29
 8009caa:	f000 f86f 	bl	8009d8c <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 8009cae:	2100      	movs	r1, #0
 8009cb0:	2007      	movs	r0, #7
 8009cb2:	f000 f86b 	bl	8009d8c <ili9325_WriteReg>
}
 8009cb6:	bf00      	nop
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 8009cbe:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8009cd0:	23f0      	movs	r3, #240	; 0xf0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8009ce0:	f7ff fe60 	bl	80099a4 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f000 f866 	bl	8009db6 <ili9325_ReadReg>
 8009cea:	4603      	mov	r3, r0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	460a      	mov	r2, r1
 8009cfa:	80fb      	strh	r3, [r7, #6]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 8009d00:	88bb      	ldrh	r3, [r7, #4]
 8009d02:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	4619      	mov	r1, r3
 8009d0a:	2020      	movs	r0, #32
 8009d0c:	f000 f83e 	bl	8009d8c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	4619      	mov	r1, r3
 8009d14:	2021      	movs	r0, #33	; 0x21
 8009d16:	f000 f839 	bl	8009d8c <ili9325_WriteReg>

}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	4603      	mov	r3, r0
 8009d2a:	80fb      	strh	r3, [r7, #6]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	80bb      	strh	r3, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8009d34:	88ba      	ldrh	r2, [r7, #4]
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7ff ffd8 	bl	8009cf0 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009d40:	2022      	movs	r0, #34	; 0x22
 8009d42:	f7ff fe59 	bl	80099f8 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8009d46:	1cbb      	adds	r3, r7, #2
 8009d48:	2102      	movs	r1, #2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff fe32 	bl	80099b4 <LCD_IO_WriteMultipleData>
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	460a      	mov	r2, r1
 8009d62:	80fb      	strh	r3, [r7, #6]
 8009d64:	4613      	mov	r3, r2
 8009d66:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8009d68:	88ba      	ldrh	r2, [r7, #4]
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff ffbe 	bl	8009cf0 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009d74:	2022      	movs	r0, #34	; 0x22
 8009d76:	f7ff fe3f 	bl	80099f8 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 8009d7a:	f7ff fe4d 	bl	8009a18 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8009d7e:	f7ff fe4b 	bl	8009a18 <LCD_IO_ReadData>
 8009d82:	4603      	mov	r3, r0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	460a      	mov	r2, r1
 8009d96:	71fb      	strb	r3, [r7, #7]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fe2a 	bl	80099f8 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8009da4:	1d3b      	adds	r3, r7, #4
 8009da6:	2102      	movs	r1, #2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff fe03 	bl	80099b4 <LCD_IO_WriteMultipleData>
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fe18 	bl	80099f8 <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8009dc8:	f7ff fe26 	bl	8009a18 <LCD_IO_ReadData>
 8009dcc:	4603      	mov	r3, r0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8009dd6:	b590      	push	{r4, r7, lr}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	4604      	mov	r4, r0
 8009dde:	4608      	mov	r0, r1
 8009de0:	4611      	mov	r1, r2
 8009de2:	461a      	mov	r2, r3
 8009de4:	4623      	mov	r3, r4
 8009de6:	80fb      	strh	r3, [r7, #6]
 8009de8:	4603      	mov	r3, r0
 8009dea:	80bb      	strh	r3, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	807b      	strh	r3, [r7, #2]
 8009df0:	4613      	mov	r3, r2
 8009df2:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 8009df4:	88bb      	ldrh	r3, [r7, #4]
 8009df6:	425b      	negs	r3, r3
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	883b      	ldrh	r3, [r7, #0]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	33f0      	adds	r3, #240	; 0xf0
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	4619      	mov	r1, r3
 8009e06:	2050      	movs	r0, #80	; 0x50
 8009e08:	f7ff ffc0 	bl	8009d8c <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 8009e0c:	88bb      	ldrh	r3, [r7, #4]
 8009e0e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	4619      	mov	r1, r3
 8009e16:	2051      	movs	r0, #81	; 0x51
 8009e18:	f7ff ffb8 	bl	8009d8c <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 8009e1c:	88fb      	ldrh	r3, [r7, #6]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	2052      	movs	r0, #82	; 0x52
 8009e22:	f7ff ffb3 	bl	8009d8c <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 8009e26:	88fa      	ldrh	r2, [r7, #6]
 8009e28:	887b      	ldrh	r3, [r7, #2]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	4619      	mov	r1, r3
 8009e34:	2053      	movs	r0, #83	; 0x53
 8009e36:	f7ff ffa9 	bl	8009d8c <ili9325_WriteReg>
  
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd90      	pop	{r4, r7, pc}
	...

08009e44 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	4623      	mov	r3, r4
 8009e54:	80fb      	strh	r3, [r7, #6]
 8009e56:	4603      	mov	r3, r0
 8009e58:	80bb      	strh	r3, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	807b      	strh	r3, [r7, #2]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8009e66:	887a      	ldrh	r2, [r7, #2]
 8009e68:	88bb      	ldrh	r3, [r7, #4]
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff ff3f 	bl	8009cf0 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009e72:	2022      	movs	r0, #34	; 0x22
 8009e74:	f7ff fdc0 	bl	80099f8 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8009e78:	2300      	movs	r3, #0
 8009e7a:	81fb      	strh	r3, [r7, #14]
 8009e7c:	e007      	b.n	8009e8e <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8009e7e:	89fb      	ldrh	r3, [r7, #14]
 8009e80:	490a      	ldr	r1, [pc, #40]	; (8009eac <ili9325_DrawHLine+0x68>)
 8009e82:	88fa      	ldrh	r2, [r7, #6]
 8009e84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8009e88:	89fb      	ldrh	r3, [r7, #14]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	81fb      	strh	r3, [r7, #14]
 8009e8e:	89fa      	ldrh	r2, [r7, #14]
 8009e90:	883b      	ldrh	r3, [r7, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d3f3      	bcc.n	8009e7e <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8009e96:	883b      	ldrh	r3, [r7, #0]
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4803      	ldr	r0, [pc, #12]	; (8009eac <ili9325_DrawHLine+0x68>)
 8009e9e:	f7ff fd89 	bl	80099b4 <LCD_IO_WriteMultipleData>
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd90      	pop	{r4, r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	200014fc 	.word	0x200014fc

08009eb0 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8009eb0:	b590      	push	{r4, r7, lr}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	4611      	mov	r1, r2
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4623      	mov	r3, r4
 8009ec0:	80fb      	strh	r3, [r7, #6]
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	80bb      	strh	r3, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	807b      	strh	r3, [r7, #2]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 8009ed2:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8009ed6:	2003      	movs	r0, #3
 8009ed8:	f7ff ff58 	bl	8009d8c <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8009edc:	887a      	ldrh	r2, [r7, #2]
 8009ede:	88bb      	ldrh	r3, [r7, #4]
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff ff04 	bl	8009cf0 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009ee8:	2022      	movs	r0, #34	; 0x22
 8009eea:	f7ff fd85 	bl	80099f8 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8009eee:	2300      	movs	r3, #0
 8009ef0:	81fb      	strh	r3, [r7, #14]
 8009ef2:	e007      	b.n	8009f04 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8009ef4:	89fb      	ldrh	r3, [r7, #14]
 8009ef6:	490d      	ldr	r1, [pc, #52]	; (8009f2c <ili9325_DrawVLine+0x7c>)
 8009ef8:	88fa      	ldrh	r2, [r7, #6]
 8009efa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8009efe:	89fb      	ldrh	r3, [r7, #14]
 8009f00:	3301      	adds	r3, #1
 8009f02:	81fb      	strh	r3, [r7, #14]
 8009f04:	89fa      	ldrh	r2, [r7, #14]
 8009f06:	883b      	ldrh	r3, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d3f3      	bcc.n	8009ef4 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8009f0c:	883b      	ldrh	r3, [r7, #0]
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	4619      	mov	r1, r3
 8009f12:	4806      	ldr	r0, [pc, #24]	; (8009f2c <ili9325_DrawVLine+0x7c>)
 8009f14:	f7ff fd4e 	bl	80099b4 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 8009f18:	f241 0128 	movw	r1, #4136	; 0x1028
 8009f1c:	2003      	movs	r0, #3
 8009f1e:	f7ff ff35 	bl	8009d8c <ili9325_WriteReg>
}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd90      	pop	{r4, r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	200014fc 	.word	0x200014fc

08009f30 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	603a      	str	r2, [r7, #0]
 8009f3a:	80fb      	strh	r3, [r7, #6]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	2300      	movs	r3, #0
 8009f46:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	3302      	adds	r3, #2
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	3304      	adds	r3, #4
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	041b      	lsls	r3, r3, #16
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	330a      	adds	r3, #10
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	330c      	adds	r3, #12
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	041b      	lsls	r3, r3, #16
 8009f78:	461a      	mov	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	085b      	lsrs	r3, r3, #1
 8009f88:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4413      	add	r3, r2
 8009f90:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 8009f92:	f241 0138 	movw	r1, #4152	; 0x1038
 8009f96:	2003      	movs	r0, #3
 8009f98:	f7ff fef8 	bl	8009d8c <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8009f9c:	88ba      	ldrh	r2, [r7, #4]
 8009f9e:	88fb      	ldrh	r3, [r7, #6]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff fea4 	bl	8009cf0 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8009fa8:	2022      	movs	r0, #34	; 0x22
 8009faa:	f7ff fd25 	bl	80099f8 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6838      	ldr	r0, [r7, #0]
 8009fb6:	f7ff fcfd 	bl	80099b4 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8009fba:	f241 0128 	movw	r1, #4136	; 0x1028
 8009fbe:	2003      	movs	r0, #3
 8009fc0:	f7ff fee4 	bl	8009d8c <ili9325_WriteReg>
}
 8009fc4:	bf00      	nop
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8009fcc:	b590      	push	{r4, r7, lr}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4623      	mov	r3, r4
 8009fdc:	80fb      	strh	r3, [r7, #6]
 8009fde:	4603      	mov	r3, r0
 8009fe0:	80bb      	strh	r3, [r7, #4]
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	807b      	strh	r3, [r7, #2]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8009fee:	887b      	ldrh	r3, [r7, #2]
 8009ff0:	883a      	ldrh	r2, [r7, #0]
 8009ff2:	fb02 f303 	mul.w	r3, r2, r3
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8009ff8:	88ba      	ldrh	r2, [r7, #4]
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff fe76 	bl	8009cf0 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800a004:	2022      	movs	r0, #34	; 0x22
 800a006:	f7ff fcf7 	bl	80099f8 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	4619      	mov	r1, r3
 800a010:	6a38      	ldr	r0, [r7, #32]
 800a012:	f7ff fccf 	bl	80099b4 <LCD_IO_WriteMultipleData>
}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd90      	pop	{r4, r7, pc}
	...

0800a020 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 800a02a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800a02e:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 800a030:	2100      	movs	r1, #0
 800a032:	2000      	movs	r0, #0
 800a034:	f7ff fe5c 	bl	8009cf0 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800a038:	2022      	movs	r0, #34	; 0x22
 800a03a:	f7ff fcdd 	bl	80099f8 <LCD_IO_WriteReg>
  
  while((size--) != 0)
 800a03e:	e002      	b.n	800a046 <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 800a040:	4a05      	ldr	r2, [pc, #20]	; (800a058 <ili9325_Clear+0x38>)
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	1e5a      	subs	r2, r3, #1
 800a04a:	60fa      	str	r2, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1f7      	bne.n	800a040 <ili9325_Clear+0x20>
  }
}
 800a050:	bf00      	nop
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	60010000 	.word	0x60010000

0800a05c <imageclassify_configure_activations>:


AI_DECLARE_STATIC
ai_bool imageclassify_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	3303      	adds	r3, #3
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800a072:	4b14      	ldr	r3, [pc, #80]	; (800a0c4 <imageclassify_configure_activations+0x68>)
 800a074:	2200      	movs	r2, #0
 800a076:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800a078:	4b12      	ldr	r3, [pc, #72]	; (800a0c4 <imageclassify_configure_activations+0x68>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 800a07e:	4a12      	ldr	r2, [pc, #72]	; (800a0c8 <imageclassify_configure_activations+0x6c>)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 800a084:	4a10      	ldr	r2, [pc, #64]	; (800a0c8 <imageclassify_configure_activations+0x6c>)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 800a08a:	4a10      	ldr	r2, [pc, #64]	; (800a0cc <imageclassify_configure_activations+0x70>)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 800a090:	4a0e      	ldr	r2, [pc, #56]	; (800a0cc <imageclassify_configure_activations+0x70>)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 512);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a09c:	4a0c      	ldr	r2, [pc, #48]	; (800a0d0 <imageclassify_configure_activations+0x74>)
 800a09e:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 512);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a0a6:	4a0a      	ldr	r2, [pc, #40]	; (800a0d0 <imageclassify_configure_activations+0x74>)
 800a0a8:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 800a0aa:	4b0a      	ldr	r3, [pc, #40]	; (800a0d4 <imageclassify_configure_activations+0x78>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 800a0b0:	4b08      	ldr	r3, [pc, #32]	; (800a0d4 <imageclassify_configure_activations+0x78>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800a0b6:	2301      	movs	r3, #1
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	20000124 	.word	0x20000124
 800a0c8:	20000134 	.word	0x20000134
 800a0cc:	20000144 	.word	0x20000144
 800a0d0:	20000154 	.word	0x20000154
 800a0d4:	20000164 	.word	0x20000164

0800a0d8 <imageclassify_configure_weights>:


AI_DECLARE_STATIC
ai_bool imageclassify_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800a0e8:	4b25      	ldr	r3, [pc, #148]	; (800a180 <imageclassify_configure_weights+0xa8>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0f0:	4a23      	ldr	r2, [pc, #140]	; (800a180 <imageclassify_configure_weights+0xa8>)
 800a0f2:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 407040);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 23c6 	add.w	r3, r3, #405504	; 0x63000
 800a0fa:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800a0fe:	4a20      	ldr	r2, [pc, #128]	; (800a180 <imageclassify_configure_weights+0xa8>)
 800a100:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 407040);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f503 23c6 	add.w	r3, r3, #405504	; 0x63000
 800a108:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800a10c:	4a1c      	ldr	r2, [pc, #112]	; (800a180 <imageclassify_configure_weights+0xa8>)
 800a10e:	60d3      	str	r3, [r2, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800a110:	4b1c      	ldr	r3, [pc, #112]	; (800a184 <imageclassify_configure_weights+0xac>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a118:	4a1a      	ldr	r2, [pc, #104]	; (800a184 <imageclassify_configure_weights+0xac>)
 800a11a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 401920);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 800a122:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a126:	4a17      	ldr	r2, [pc, #92]	; (800a184 <imageclassify_configure_weights+0xac>)
 800a128:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 401920);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 800a130:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a134:	4a13      	ldr	r2, [pc, #76]	; (800a184 <imageclassify_configure_weights+0xac>)
 800a136:	60d3      	str	r3, [r2, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800a138:	4b13      	ldr	r3, [pc, #76]	; (800a188 <imageclassify_configure_weights+0xb0>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a140:	4a11      	ldr	r2, [pc, #68]	; (800a188 <imageclassify_configure_weights+0xb0>)
 800a142:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 401408);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 800a14a:	4a0f      	ldr	r2, [pc, #60]	; (800a188 <imageclassify_configure_weights+0xb0>)
 800a14c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 401408);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 800a154:	4a0c      	ldr	r2, [pc, #48]	; (800a188 <imageclassify_configure_weights+0xb0>)
 800a156:	60d3      	str	r3, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800a158:	4b0c      	ldr	r3, [pc, #48]	; (800a18c <imageclassify_configure_weights+0xb4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a160:	4a0a      	ldr	r2, [pc, #40]	; (800a18c <imageclassify_configure_weights+0xb4>)
 800a162:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 800a164:	4a09      	ldr	r2, [pc, #36]	; (800a18c <imageclassify_configure_weights+0xb4>)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 800a16a:	4a08      	ldr	r2, [pc, #32]	; (800a18c <imageclassify_configure_weights+0xb4>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 800a170:	2301      	movs	r3, #1
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	200000e4 	.word	0x200000e4
 800a184:	200000f4 	.word	0x200000f4
 800a188:	20000104 	.word	0x20000104
 800a18c:	20000114 	.word	0x20000114

0800a190 <ai_imageclassify_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_imageclassify_get_error(ai_handle network)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7f6 fa61 	bl	8000660 <ai_platform_network_get_error>
 800a19e:	4603      	mov	r3, r0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <ai_imageclassify_create>:

AI_API_ENTRY
ai_error ai_imageclassify_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af02      	add	r7, sp, #8
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4a04      	ldr	r2, [pc, #16]	; (800a1d0 <ai_imageclassify_create+0x28>)
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7f6 fb33 	bl	800082c <ai_platform_network_create>
 800a1c6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20000094 	.word	0x20000094

0800a1d4 <ai_imageclassify_destroy>:

AI_API_ENTRY
ai_handle ai_imageclassify_destroy(ai_handle network)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7f6 fb61 	bl	80008a4 <ai_platform_network_destroy>
 800a1e2:	4603      	mov	r3, r0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <ai_imageclassify_init>:

AI_API_ENTRY
ai_bool ai_imageclassify_init(
  ai_handle network, const ai_network_params* params)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7f6 fb72 	bl	80008e2 <ai_platform_network_init>
 800a1fe:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <ai_imageclassify_init+0x1e>
 800a206:	2300      	movs	r3, #0
 800a208:	e01f      	b.n	800a24a <ai_imageclassify_init+0x5e>

  ai_bool ok = true;
 800a20a:	2301      	movs	r3, #1
 800a20c:	72fb      	strb	r3, [r7, #11]
  ok &= imageclassify_configure_weights(net_ctx, &params->params);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	4619      	mov	r1, r3
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff ff60 	bl	800a0d8 <imageclassify_configure_weights>
 800a218:	4603      	mov	r3, r0
 800a21a:	461a      	mov	r2, r3
 800a21c:	7afb      	ldrb	r3, [r7, #11]
 800a21e:	4013      	ands	r3, r2
 800a220:	2b00      	cmp	r3, #0
 800a222:	bf14      	ite	ne
 800a224:	2301      	movne	r3, #1
 800a226:	2300      	moveq	r3, #0
 800a228:	72fb      	strb	r3, [r7, #11]
  ok &= imageclassify_configure_activations(net_ctx, &params->activations);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	3314      	adds	r3, #20
 800a22e:	4619      	mov	r1, r3
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f7ff ff13 	bl	800a05c <imageclassify_configure_activations>
 800a236:	4603      	mov	r3, r0
 800a238:	461a      	mov	r2, r3
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	4013      	ands	r3, r2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bf14      	ite	ne
 800a242:	2301      	movne	r3, #1
 800a244:	2300      	moveq	r3, #0
 800a246:	72fb      	strb	r3, [r7, #11]

  return ok;
 800a248:	7afb      	ldrb	r3, [r7, #11]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <ai_imageclassify_run>:


AI_API_ENTRY
ai_i32 ai_imageclassify_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	68b9      	ldr	r1, [r7, #8]
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7f6 fb93 	bl	800098e <ai_platform_network_process>
 800a268:	4603      	mov	r3, r0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <ai_imageclassify_data_weights_get>:
#include "imageclassify_data.h"

ai_handle ai_imageclassify_data_weights_get(void)
{
 800a274:	b480      	push	{r7}
 800a276:	af00      	add	r7, sp, #0
    0x0b, 0x3e, 0x0f, 0xfa, 0x61, 0x3e, 0x5c, 0x03, 0xaa, 0xbe,
    0xd7, 0x7c, 0x1d, 0x3e, 0xc8, 0xa9, 0xee, 0x3d, 0x67, 0x77,
    0x1f, 0x3e, 0x76, 0x83, 0xf9, 0xbd, 0xa2, 0x7a, 0xd0, 0xbe
  };

  return AI_HANDLE_PTR(s_imageclassify_weights);
 800a278:	4b02      	ldr	r3, [pc, #8]	; (800a284 <ai_imageclassify_data_weights_get+0x10>)
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	08011614 	.word	0x08011614

0800a288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08a      	sub	sp, #40	; 0x28
 800a28c:	af08      	add	r7, sp, #32
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a28e:	f7fa fbd5 	bl	8004a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a292:	f000 f92f 	bl	800a4f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a296:	f000 fa55 	bl	800a744 <MX_GPIO_Init>
  MX_DMA_Init();
 800a29a:	f000 fa33 	bl	800a704 <MX_DMA_Init>
  MX_CRC_Init();
 800a29e:	f000 f99d 	bl	800a5dc <MX_CRC_Init>
  MX_DCMI_Init();
 800a2a2:	f000 f9af 	bl	800a604 <MX_DCMI_Init>
  MX_FSMC_Init();
 800a2a6:	f000 fb8b 	bl	800a9c0 <MX_FSMC_Init>
  MX_I2C2_Init();
 800a2aa:	f000 f9d3 	bl	800a654 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800a2ae:	f000 f9ff 	bl	800a6b0 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 800a2b2:	f7fe fd4b 	bl	8008d4c <MX_X_CUBE_AI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t ret = BSP_LCD_Init();
 800a2b6:	f000 fe89 	bl	800afcc <BSP_LCD_Init>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	71fb      	strb	r3, [r7, #7]
  if(ret==0x00)
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <main+0x44>
  {
	   BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a2c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a2c8:	f000 fef2 	bl	800b0b0 <BSP_LCD_Clear>
  }

   printf("Demo Start\r\n");
 800a2cc:	4876      	ldr	r0, [pc, #472]	; (800a4a8 <main+0x220>)
 800a2ce:	f002 fbe5 	bl	800ca9c <puts>
   printf("OV9655 Init: ");
 800a2d2:	4876      	ldr	r0, [pc, #472]	; (800a4ac <main+0x224>)
 800a2d4:	f002 fb5a 	bl	800c98c <iprintf>
   if(DCMI_OV9655Config() == 0)
 800a2d8:	f7fe fe4b 	bl	8008f72 <DCMI_OV9655Config>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <main+0x62>
   {
     printf("OK\r\n");
 800a2e2:	4873      	ldr	r0, [pc, #460]	; (800a4b0 <main+0x228>)
 800a2e4:	f002 fbda 	bl	800ca9c <puts>
 800a2e8:	e002      	b.n	800a2f0 <main+0x68>
   }
   else
   {
     printf("failed\r\n");
 800a2ea:	4872      	ldr	r0, [pc, #456]	; (800a4b4 <main+0x22c>)
 800a2ec:	f002 fbd6 	bl	800ca9c <puts>
   }

	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a2f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a2f4:	f000 fedc 	bl	800b0b0 <BSP_LCD_Clear>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	f000 feb9 	bl	800b070 <BSP_LCD_SetTextColor>
	  //BSP_LCD_DisplayStringAt(0, 100, displayMsg, CENTER_MODE);
	  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)camera_bufferDisplay, DISPLAY_BUFFER_LEN/2);
 800a2fe:	4a6e      	ldr	r2, [pc, #440]	; (800a4b8 <main+0x230>)
 800a300:	23a0      	movs	r3, #160	; 0xa0
 800a302:	2100      	movs	r1, #0
 800a304:	486d      	ldr	r0, [pc, #436]	; (800a4bc <main+0x234>)
 800a306:	f7fa fd7b 	bl	8004e00 <HAL_DCMI_Start_DMA>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if(LineXferCplt)
 800a30a:	4b6d      	ldr	r3, [pc, #436]	; (800a4c0 <main+0x238>)
 800a30c:	f993 3000 	ldrsb.w	r3, [r3]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d028      	beq.n	800a366 <main+0xde>
	      {
	        /* Resolution of the output image is 320 * 242, but 4 pixels in Y axis are discarded. */
	        if((LineCounter >= YSIZE + 2) && FrameXferCplt)
 800a314:	4b6b      	ldr	r3, [pc, #428]	; (800a4c4 <main+0x23c>)
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	2bf1      	cmp	r3, #241	; 0xf1
 800a31a:	d916      	bls.n	800a34a <main+0xc2>
 800a31c:	4b6a      	ldr	r3, [pc, #424]	; (800a4c8 <main+0x240>)
 800a31e:	f993 3000 	ldrsb.w	r3, [r3]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d011      	beq.n	800a34a <main+0xc2>
	        {
	          /* Set image position */
	          ili9325_SetCursor(0, YSIZE + y_offset);
 800a326:	4b69      	ldr	r3, [pc, #420]	; (800a4cc <main+0x244>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	33f0      	adds	r3, #240	; 0xf0
 800a32e:	b29b      	uxth	r3, r3
 800a330:	4619      	mov	r1, r3
 800a332:	2000      	movs	r0, #0
 800a334:	f7ff fcdc 	bl	8009cf0 <ili9325_SetCursor>
	          /* Prepare to write GRAM (0x22) */
	          LCD_IO_WriteReg(LCD_REG_34);
 800a338:	2022      	movs	r0, #34	; 0x22
 800a33a:	f7ff fb5d 	bl	80099f8 <LCD_IO_WriteReg>
	          FrameXferCplt = 0;
 800a33e:	4b62      	ldr	r3, [pc, #392]	; (800a4c8 <main+0x240>)
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
	          LineCounter = 0;
 800a344:	4b5f      	ldr	r3, [pc, #380]	; (800a4c4 <main+0x23c>)
 800a346:	2200      	movs	r2, #0
 800a348:	801a      	strh	r2, [r3, #0]
	        }
	        /* Converts uint16_t camera_buffer to uint8_t, so the actual length is BUFFER_LEN * 2 */
	        LCD_IO_WriteMultipleData((uint8_t *)camera_bufferDisplay, DISPLAY_BUFFER_LEN*2);
 800a34a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800a34e:	485a      	ldr	r0, [pc, #360]	; (800a4b8 <main+0x230>)
 800a350:	f7ff fb30 	bl	80099b4 <LCD_IO_WriteMultipleData>
	        /* Converts uint16_t camera_buffer to uint32_t, so the actual length is BUFFER_LEN / 2 */
	        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)camera_bufferDisplay, DISPLAY_BUFFER_LEN/2);
 800a354:	4a58      	ldr	r2, [pc, #352]	; (800a4b8 <main+0x230>)
 800a356:	23a0      	movs	r3, #160	; 0xa0
 800a358:	2100      	movs	r1, #0
 800a35a:	4858      	ldr	r0, [pc, #352]	; (800a4bc <main+0x234>)
 800a35c:	f7fa fd50 	bl	8004e00 <HAL_DCMI_Start_DMA>
	        LineXferCplt = 0;
 800a360:	4b57      	ldr	r3, [pc, #348]	; (800a4c0 <main+0x238>)
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
	      }
	  pushBtn = HAL_GPIO_ReadPin(Push_button_GPIO_Port, Push_button_Pin);
 800a366:	2101      	movs	r1, #1
 800a368:	4859      	ldr	r0, [pc, #356]	; (800a4d0 <main+0x248>)
 800a36a:	f7fc ff09 	bl	8007180 <HAL_GPIO_ReadPin>
 800a36e:	4603      	mov	r3, r0
 800a370:	461a      	mov	r2, r3
 800a372:	4b58      	ldr	r3, [pc, #352]	; (800a4d4 <main+0x24c>)
 800a374:	701a      	strb	r2, [r3, #0]
	  if(pushBtn == GPIO_PIN_RESET)
 800a376:	4b57      	ldr	r3, [pc, #348]	; (800a4d4 <main+0x24c>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d170      	bne.n	800a460 <main+0x1d8>
	  {
		  HAL_DCMI_Stop(&hdcmi);
 800a37e:	484f      	ldr	r0, [pc, #316]	; (800a4bc <main+0x234>)
 800a380:	f7fa fdde 	bl	8004f40 <HAL_DCMI_Stop>
		  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Ready, GPIO_PIN_RESET);
 800a384:	2200      	movs	r2, #0
 800a386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a38a:	4853      	ldr	r0, [pc, #332]	; (800a4d8 <main+0x250>)
 800a38c:	f7fc ff10 	bl	80071b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin, GPIO_PIN_SET);
 800a390:	2201      	movs	r2, #1
 800a392:	2104      	movs	r1, #4
 800a394:	4851      	ldr	r0, [pc, #324]	; (800a4dc <main+0x254>)
 800a396:	f7fc ff0b 	bl	80071b0 <HAL_GPIO_WritePin>
		  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)SRAM_Addr, BUFFER_LEN);
 800a39a:	4b51      	ldr	r3, [pc, #324]	; (800a4e0 <main+0x258>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	4845      	ldr	r0, [pc, #276]	; (800a4bc <main+0x234>)
 800a3a6:	f7fa fd2b 	bl	8004e00 <HAL_DCMI_Start_DMA>
		  HAL_Delay(1000);
 800a3aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a3ae:	f7fa fbb7 	bl	8004b20 <HAL_Delay>
		  HAL_DCMI_Stop(&hdcmi);
 800a3b2:	4842      	ldr	r0, [pc, #264]	; (800a4bc <main+0x234>)
 800a3b4:	f7fa fdc4 	bl	8004f40 <HAL_DCMI_Stop>
		  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin_Capture, GPIO_PIN_SET);
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	2108      	movs	r1, #8
 800a3bc:	4847      	ldr	r0, [pc, #284]	; (800a4dc <main+0x254>)
 800a3be:	f7fc fef7 	bl	80071b0 <HAL_GPIO_WritePin>
		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a3c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a3c6:	f000 fe73 	bl	800b0b0 <BSP_LCD_Clear>
		  ImageResize((uint8_t*)SRAM_Addr, 320, 240, 2, 0, 0, 0, 0, (uint8_t*)resize_160, 160, 120);
 800a3ca:	4b45      	ldr	r3, [pc, #276]	; (800a4e0 <main+0x258>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	2378      	movs	r3, #120	; 0x78
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	23a0      	movs	r3, #160	; 0xa0
 800a3d6:	9305      	str	r3, [sp, #20]
 800a3d8:	4b42      	ldr	r3, [pc, #264]	; (800a4e4 <main+0x25c>)
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9303      	str	r3, [sp, #12]
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	9302      	str	r3, [sp, #8]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9301      	str	r3, [sp, #4]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	22f0      	movs	r2, #240	; 0xf0
 800a3f0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3f4:	f000 fbc8 	bl	800ab88 <ImageResize>
		  ili9325_DrawRGBImage(0, 0, 160, 120, (uint8_t*)resize_160);
 800a3f8:	4b3a      	ldr	r3, [pc, #232]	; (800a4e4 <main+0x25c>)
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	2378      	movs	r3, #120	; 0x78
 800a3fe:	22a0      	movs	r2, #160	; 0xa0
 800a400:	2100      	movs	r1, #0
 800a402:	2000      	movs	r0, #0
 800a404:	f7ff fde2 	bl	8009fcc <ili9325_DrawRGBImage>
		  convert_8Bit_Grayscale(resize_160);
 800a408:	4836      	ldr	r0, [pc, #216]	; (800a4e4 <main+0x25c>)
 800a40a:	f000 fd21 	bl	800ae50 <convert_8Bit_Grayscale>
		  ImageResize((uint8_t*)grayscale, 160, 120, 1, 0, 0, 0, 0, (uint8_t*)resizedImage, 28, 28);
 800a40e:	231c      	movs	r3, #28
 800a410:	9306      	str	r3, [sp, #24]
 800a412:	231c      	movs	r3, #28
 800a414:	9305      	str	r3, [sp, #20]
 800a416:	4b34      	ldr	r3, [pc, #208]	; (800a4e8 <main+0x260>)
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	2300      	movs	r3, #0
 800a41c:	9303      	str	r3, [sp, #12]
 800a41e:	2300      	movs	r3, #0
 800a420:	9302      	str	r3, [sp, #8]
 800a422:	2300      	movs	r3, #0
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	2300      	movs	r3, #0
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	2301      	movs	r3, #1
 800a42c:	2278      	movs	r2, #120	; 0x78
 800a42e:	21a0      	movs	r1, #160	; 0xa0
 800a430:	482e      	ldr	r0, [pc, #184]	; (800a4ec <main+0x264>)
 800a432:	f000 fba9 	bl	800ab88 <ImageResize>
		  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Inference, GPIO_PIN_SET);
 800a436:	2201      	movs	r2, #1
 800a438:	2101      	movs	r1, #1
 800a43a:	4827      	ldr	r0, [pc, #156]	; (800a4d8 <main+0x250>)
 800a43c:	f7fc feb8 	bl	80071b0 <HAL_GPIO_WritePin>
		  MX_X_CUBE_AI_Process();
 800a440:	f7fe fc8e 	bl	8008d60 <MX_X_CUBE_AI_Process>
		  HAL_Delay(2000);
 800a444:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a448:	f7fa fb6a 	bl	8004b20 <HAL_Delay>
		  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)camera_bufferDisplay, DISPLAY_BUFFER_LEN/2);
 800a44c:	4a1a      	ldr	r2, [pc, #104]	; (800a4b8 <main+0x230>)
 800a44e:	23a0      	movs	r3, #160	; 0xa0
 800a450:	2100      	movs	r1, #0
 800a452:	481a      	ldr	r0, [pc, #104]	; (800a4bc <main+0x234>)
 800a454:	f7fa fcd4 	bl	8004e00 <HAL_DCMI_Start_DMA>
		  restart=1;
 800a458:	4b25      	ldr	r3, [pc, #148]	; (800a4f0 <main+0x268>)
 800a45a:	2201      	movs	r2, #1
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	e754      	b.n	800a30a <main+0x82>
	  }
	  else if(pushBtn == GPIO_PIN_SET)
 800a460:	4b1c      	ldr	r3, [pc, #112]	; (800a4d4 <main+0x24c>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b01      	cmp	r3, #1
 800a466:	f47f af50 	bne.w	800a30a <main+0x82>
	  {
		  if(restart)
 800a46a:	4b21      	ldr	r3, [pc, #132]	; (800a4f0 <main+0x268>)
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f43f af4b 	beq.w	800a30a <main+0x82>
		  {
			  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Ready, GPIO_PIN_SET);
 800a474:	2201      	movs	r2, #1
 800a476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a47a:	4817      	ldr	r0, [pc, #92]	; (800a4d8 <main+0x250>)
 800a47c:	f7fc fe98 	bl	80071b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin, GPIO_PIN_RESET);
 800a480:	2200      	movs	r2, #0
 800a482:	2104      	movs	r1, #4
 800a484:	4815      	ldr	r0, [pc, #84]	; (800a4dc <main+0x254>)
 800a486:	f7fc fe93 	bl	80071b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin_Capture, GPIO_PIN_RESET);
 800a48a:	2200      	movs	r2, #0
 800a48c:	2108      	movs	r1, #8
 800a48e:	4813      	ldr	r0, [pc, #76]	; (800a4dc <main+0x254>)
 800a490:	f7fc fe8e 	bl	80071b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Inference, GPIO_PIN_RESET);
 800a494:	2200      	movs	r2, #0
 800a496:	2101      	movs	r1, #1
 800a498:	480f      	ldr	r0, [pc, #60]	; (800a4d8 <main+0x250>)
 800a49a:	f7fc fe89 	bl	80071b0 <HAL_GPIO_WritePin>
			  restart=0;
 800a49e:	4b14      	ldr	r3, [pc, #80]	; (800a4f0 <main+0x268>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	701a      	strb	r2, [r3, #0]
	  if(LineXferCplt)
 800a4a4:	e731      	b.n	800a30a <main+0x82>
 800a4a6:	bf00      	nop
 800a4a8:	08011520 	.word	0x08011520
 800a4ac:	0801152c 	.word	0x0801152c
 800a4b0:	0801153c 	.word	0x0801153c
 800a4b4:	08011540 	.word	0x08011540
 800a4b8:	2000b608 	.word	0x2000b608
 800a4bc:	2000b588 	.word	0x2000b588
 800a4c0:	200017dd 	.word	0x200017dd
 800a4c4:	200017de 	.word	0x200017de
 800a4c8:	200017dc 	.word	0x200017dc
 800a4cc:	20000468 	.word	0x20000468
 800a4d0:	40020000 	.word	0x40020000
 800a4d4:	2000b8d8 	.word	0x2000b8d8
 800a4d8:	40022000 	.word	0x40022000
 800a4dc:	40021c00 	.word	0x40021c00
 800a4e0:	20000464 	.word	0x20000464
 800a4e4:	20001e7c 	.word	0x20001e7c
 800a4e8:	20001b6c 	.word	0x20001b6c
 800a4ec:	2000b8dc 	.word	0x2000b8dc
 800a4f0:	200017e0 	.word	0x200017e0

0800a4f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b094      	sub	sp, #80	; 0x50
 800a4f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
		  RCC_ClkInitTypeDef RCC_ClkInitStruct;

		    /**Configure the main internal regulator output voltage
		    */
		  __HAL_RCC_PWR_CLK_ENABLE();
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60bb      	str	r3, [r7, #8]
 800a4fe:	4b34      	ldr	r3, [pc, #208]	; (800a5d0 <SystemClock_Config+0xdc>)
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	4a33      	ldr	r2, [pc, #204]	; (800a5d0 <SystemClock_Config+0xdc>)
 800a504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a508:	6413      	str	r3, [r2, #64]	; 0x40
 800a50a:	4b31      	ldr	r3, [pc, #196]	; (800a5d0 <SystemClock_Config+0xdc>)
 800a50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a512:	60bb      	str	r3, [r7, #8]
 800a514:	68bb      	ldr	r3, [r7, #8]

		  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a516:	2300      	movs	r3, #0
 800a518:	607b      	str	r3, [r7, #4]
 800a51a:	4b2e      	ldr	r3, [pc, #184]	; (800a5d4 <SystemClock_Config+0xe0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a2d      	ldr	r2, [pc, #180]	; (800a5d4 <SystemClock_Config+0xe0>)
 800a520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	4b2b      	ldr	r3, [pc, #172]	; (800a5d4 <SystemClock_Config+0xe0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a52e:	607b      	str	r3, [r7, #4]
 800a530:	687b      	ldr	r3, [r7, #4]

		    /**Initializes the CPU, AHB and APB busses clocks
		    */
		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a532:	2302      	movs	r3, #2
 800a534:	623b      	str	r3, [r7, #32]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a536:	2301      	movs	r3, #1
 800a538:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.HSICalibrationValue = 16;
 800a53a:	2310      	movs	r3, #16
 800a53c:	633b      	str	r3, [r7, #48]	; 0x30
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a53e:	2302      	movs	r3, #2
 800a540:	63bb      	str	r3, [r7, #56]	; 0x38
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a542:	2300      	movs	r3, #0
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
		  RCC_OscInitStruct.PLL.PLLM = 8;
 800a546:	2308      	movs	r3, #8
 800a548:	643b      	str	r3, [r7, #64]	; 0x40
		  RCC_OscInitStruct.PLL.PLLN = 168;
 800a54a:	23a8      	movs	r3, #168	; 0xa8
 800a54c:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a54e:	2302      	movs	r3, #2
 800a550:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a552:	2304      	movs	r3, #4
 800a554:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a556:	f107 0320 	add.w	r3, r7, #32
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fd fa76 	bl	8007a4c <HAL_RCC_OscConfig>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <SystemClock_Config+0x76>
		  {
		    Error_Handler();
 800a566:	f000 fd07 	bl	800af78 <Error_Handler>
		  }

		    /**Initializes the CPU, AHB and APB busses clocks
		    */
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a56a:	230f      	movs	r3, #15
 800a56c:	60fb      	str	r3, [r7, #12]
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a56e:	2302      	movs	r3, #2
 800a570:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a576:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a57a:	61bb      	str	r3, [r7, #24]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a57c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a580:	61fb      	str	r3, [r7, #28]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a582:	f107 030c 	add.w	r3, r7, #12
 800a586:	2105      	movs	r1, #5
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fd fca1 	bl	8007ed0 <HAL_RCC_ClockConfig>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <SystemClock_Config+0xa4>
		  {
		    Error_Handler();
 800a594:	f000 fcf0 	bl	800af78 <Error_Handler>
		  }

		  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	2000      	movs	r0, #0
 800a59e:	f7fd fd79 	bl	8008094 <HAL_RCC_MCOConfig>

		    /**Configure the Systick interrupt time
		    */
		  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a5a2:	f7fd feb7 	bl	8008314 <HAL_RCC_GetHCLKFreq>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <SystemClock_Config+0xe4>)
 800a5aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a5ae:	099b      	lsrs	r3, r3, #6
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fa fbdc 	bl	8004d6e <HAL_SYSTICK_Config>

		    /**Configure the Systick
		    */
		  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a5b6:	2004      	movs	r0, #4
 800a5b8:	f7fa fbe6 	bl	8004d88 <HAL_SYSTICK_CLKSourceConfig>

		  /* SysTick_IRQn interrupt configuration */
		  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2100      	movs	r1, #0
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c4:	f7fa fba9 	bl	8004d1a <HAL_NVIC_SetPriority>
}
 800a5c8:	bf00      	nop
 800a5ca:	3750      	adds	r7, #80	; 0x50
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	40023800 	.word	0x40023800
 800a5d4:	40007000 	.word	0x40007000
 800a5d8:	10624dd3 	.word	0x10624dd3

0800a5dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a5e0:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <MX_CRC_Init+0x20>)
 800a5e2:	4a07      	ldr	r2, [pc, #28]	; (800a600 <MX_CRC_Init+0x24>)
 800a5e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a5e6:	4805      	ldr	r0, [pc, #20]	; (800a5fc <MX_CRC_Init+0x20>)
 800a5e8:	f7fa fbea 	bl	8004dc0 <HAL_CRC_Init>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800a5f2:	f000 fcc1 	bl	800af78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800a5f6:	bf00      	nop
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	2000b47c 	.word	0x2000b47c
 800a600:	40023000 	.word	0x40023000

0800a604 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 800a608:	4b10      	ldr	r3, [pc, #64]	; (800a64c <MX_DCMI_Init+0x48>)
 800a60a:	4a11      	ldr	r2, [pc, #68]	; (800a650 <MX_DCMI_Init+0x4c>)
 800a60c:	601a      	str	r2, [r3, #0]
	  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800a60e:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <MX_DCMI_Init+0x48>)
 800a610:	2200      	movs	r2, #0
 800a612:	605a      	str	r2, [r3, #4]
	  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800a614:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <MX_DCMI_Init+0x48>)
 800a616:	2200      	movs	r2, #0
 800a618:	609a      	str	r2, [r3, #8]
	  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800a61a:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <MX_DCMI_Init+0x48>)
 800a61c:	2280      	movs	r2, #128	; 0x80
 800a61e:	60da      	str	r2, [r3, #12]
	  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800a620:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <MX_DCMI_Init+0x48>)
 800a622:	2240      	movs	r2, #64	; 0x40
 800a624:	611a      	str	r2, [r3, #16]
	  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800a626:	4b09      	ldr	r3, [pc, #36]	; (800a64c <MX_DCMI_Init+0x48>)
 800a628:	2200      	movs	r2, #0
 800a62a:	615a      	str	r2, [r3, #20]
	  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800a62c:	4b07      	ldr	r3, [pc, #28]	; (800a64c <MX_DCMI_Init+0x48>)
 800a62e:	2200      	movs	r2, #0
 800a630:	619a      	str	r2, [r3, #24]
	  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <MX_DCMI_Init+0x48>)
 800a634:	2200      	movs	r2, #0
 800a636:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800a638:	4804      	ldr	r0, [pc, #16]	; (800a64c <MX_DCMI_Init+0x48>)
 800a63a:	f7fa fe11 	bl	8005260 <HAL_DCMI_Init>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 800a644:	f000 fc98 	bl	800af78 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800a648:	bf00      	nop
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	2000b588 	.word	0x2000b588
 800a650:	50050000 	.word	0x50050000

0800a654 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800a658:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a65a:	4a13      	ldr	r2, [pc, #76]	; (800a6a8 <MX_I2C2_Init+0x54>)
 800a65c:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 800a65e:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a660:	4a12      	ldr	r2, [pc, #72]	; (800a6ac <MX_I2C2_Init+0x58>)
 800a662:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a664:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a666:	2200      	movs	r2, #0
 800a668:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 800a66a:	4b0e      	ldr	r3, [pc, #56]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a670:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a676:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 800a67e:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a680:	2200      	movs	r2, #0
 800a682:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a686:	2200      	movs	r2, #0
 800a688:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a68a:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a690:	4804      	ldr	r0, [pc, #16]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a692:	f7fc fda7 	bl	80071e4 <HAL_I2C_Init>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800a69c:	f000 fc6c 	bl	800af78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a6a0:	bf00      	nop
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	2000b484 	.word	0x2000b484
 800a6a8:	40005800 	.word	0x40005800
 800a6ac:	000186a0 	.word	0x000186a0

0800a6b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a6b4:	4b11      	ldr	r3, [pc, #68]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6b6:	4a12      	ldr	r2, [pc, #72]	; (800a700 <MX_USART1_UART_Init+0x50>)
 800a6b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a6ba:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a6c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a6c2:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a6c8:	4b0c      	ldr	r3, [pc, #48]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a6ce:	4b0b      	ldr	r3, [pc, #44]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a6d4:	4b09      	ldr	r3, [pc, #36]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6d6:	220c      	movs	r2, #12
 800a6d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a6da:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a6e0:	4b06      	ldr	r3, [pc, #24]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a6e6:	4805      	ldr	r0, [pc, #20]	; (800a6fc <MX_USART1_UART_Init+0x4c>)
 800a6e8:	f7fd fe8c 	bl	8008404 <HAL_UART_Init>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a6f2:	f000 fc41 	bl	800af78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a6f6:	bf00      	nop
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	2000b5c8 	.word	0x2000b5c8
 800a700:	40011000 	.word	0x40011000

0800a704 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a70a:	2300      	movs	r3, #0
 800a70c:	607b      	str	r3, [r7, #4]
 800a70e:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <MX_DMA_Init+0x3c>)
 800a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a712:	4a0b      	ldr	r2, [pc, #44]	; (800a740 <MX_DMA_Init+0x3c>)
 800a714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a718:	6313      	str	r3, [r2, #48]	; 0x30
 800a71a:	4b09      	ldr	r3, [pc, #36]	; (800a740 <MX_DMA_Init+0x3c>)
 800a71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a722:	607b      	str	r3, [r7, #4]
 800a724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800a726:	2200      	movs	r2, #0
 800a728:	2100      	movs	r1, #0
 800a72a:	2039      	movs	r0, #57	; 0x39
 800a72c:	f7fa faf5 	bl	8004d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800a730:	2039      	movs	r0, #57	; 0x39
 800a732:	f7fa fb0e 	bl	8004d52 <HAL_NVIC_EnableIRQ>

}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	40023800 	.word	0x40023800

0800a744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08e      	sub	sp, #56	; 0x38
 800a748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a74e:	2200      	movs	r2, #0
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	605a      	str	r2, [r3, #4]
 800a754:	609a      	str	r2, [r3, #8]
 800a756:	60da      	str	r2, [r3, #12]
 800a758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a75a:	2300      	movs	r3, #0
 800a75c:	623b      	str	r3, [r7, #32]
 800a75e:	4b91      	ldr	r3, [pc, #580]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a762:	4a90      	ldr	r2, [pc, #576]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a764:	f043 0310 	orr.w	r3, r3, #16
 800a768:	6313      	str	r3, [r2, #48]	; 0x30
 800a76a:	4b8e      	ldr	r3, [pc, #568]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76e:	f003 0310 	and.w	r3, r3, #16
 800a772:	623b      	str	r3, [r7, #32]
 800a774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a776:	2300      	movs	r3, #0
 800a778:	61fb      	str	r3, [r7, #28]
 800a77a:	4b8a      	ldr	r3, [pc, #552]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	4a89      	ldr	r2, [pc, #548]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a780:	f043 0320 	orr.w	r3, r3, #32
 800a784:	6313      	str	r3, [r2, #48]	; 0x30
 800a786:	4b87      	ldr	r3, [pc, #540]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	61fb      	str	r3, [r7, #28]
 800a790:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a792:	2300      	movs	r3, #0
 800a794:	61bb      	str	r3, [r7, #24]
 800a796:	4b83      	ldr	r3, [pc, #524]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	4a82      	ldr	r2, [pc, #520]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a7a2:	4b80      	ldr	r3, [pc, #512]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7aa:	61bb      	str	r3, [r7, #24]
 800a7ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	617b      	str	r3, [r7, #20]
 800a7b2:	4b7c      	ldr	r3, [pc, #496]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	4a7b      	ldr	r2, [pc, #492]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7b8:	f043 0301 	orr.w	r3, r3, #1
 800a7bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a7be:	4b79      	ldr	r3, [pc, #484]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	613b      	str	r3, [r7, #16]
 800a7ce:	4b75      	ldr	r3, [pc, #468]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	4a74      	ldr	r2, [pc, #464]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a7da:	4b72      	ldr	r3, [pc, #456]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e2:	613b      	str	r3, [r7, #16]
 800a7e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	4b6e      	ldr	r3, [pc, #440]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ee:	4a6d      	ldr	r2, [pc, #436]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7f0:	f043 0302 	orr.w	r3, r3, #2
 800a7f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a7f6:	4b6b      	ldr	r3, [pc, #428]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	60fb      	str	r3, [r7, #12]
 800a800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a802:	2300      	movs	r3, #0
 800a804:	60bb      	str	r3, [r7, #8]
 800a806:	4b67      	ldr	r3, [pc, #412]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80a:	4a66      	ldr	r2, [pc, #408]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a80c:	f043 0308 	orr.w	r3, r3, #8
 800a810:	6313      	str	r3, [r2, #48]	; 0x30
 800a812:	4b64      	ldr	r3, [pc, #400]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a816:	f003 0308 	and.w	r3, r3, #8
 800a81a:	60bb      	str	r3, [r7, #8]
 800a81c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a81e:	2300      	movs	r3, #0
 800a820:	607b      	str	r3, [r7, #4]
 800a822:	4b60      	ldr	r3, [pc, #384]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a826:	4a5f      	ldr	r2, [pc, #380]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a82c:	6313      	str	r3, [r2, #48]	; 0x30
 800a82e:	4b5d      	ldr	r3, [pc, #372]	; (800a9a4 <MX_GPIO_Init+0x260>)
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a836:	607b      	str	r3, [r7, #4]
 800a838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A23_GPIO_Port, A23_Pin, GPIO_PIN_SET);
 800a83a:	2201      	movs	r2, #1
 800a83c:	2104      	movs	r1, #4
 800a83e:	485a      	ldr	r0, [pc, #360]	; (800a9a8 <MX_GPIO_Init+0x264>)
 800a840:	f7fc fcb6 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_SET);
 800a844:	2201      	movs	r2, #1
 800a846:	2180      	movs	r1, #128	; 0x80
 800a848:	4858      	ldr	r0, [pc, #352]	; (800a9ac <MX_GPIO_Init+0x268>)
 800a84a:	f7fc fcb1 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_RESET);
 800a84e:	2200      	movs	r2, #0
 800a850:	2104      	movs	r1, #4
 800a852:	4857      	ldr	r0, [pc, #348]	; (800a9b0 <MX_GPIO_Init+0x26c>)
 800a854:	f7fc fcac 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800a858:	2200      	movs	r2, #0
 800a85a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a85e:	4855      	ldr	r0, [pc, #340]	; (800a9b4 <MX_GPIO_Init+0x270>)
 800a860:	f7fc fca6 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A24_GPIO_Port, A24_Pin, GPIO_PIN_SET);
 800a864:	2201      	movs	r2, #1
 800a866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a86a:	4852      	ldr	r0, [pc, #328]	; (800a9b4 <MX_GPIO_Init+0x270>)
 800a86c:	f7fc fca0 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin, GPIO_PIN_RESET);
 800a870:	2200      	movs	r2, #0
 800a872:	2104      	movs	r1, #4
 800a874:	484e      	ldr	r0, [pc, #312]	; (800a9b0 <MX_GPIO_Init+0x26c>)
 800a876:	f7fc fc9b 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_PORT, LED_Pin_Capture, GPIO_PIN_RESET);
 800a87a:	2200      	movs	r2, #0
 800a87c:	2108      	movs	r1, #8
 800a87e:	484c      	ldr	r0, [pc, #304]	; (800a9b0 <MX_GPIO_Init+0x26c>)
 800a880:	f7fc fc96 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Inference, GPIO_PIN_RESET);
 800a884:	2200      	movs	r2, #0
 800a886:	2101      	movs	r1, #1
 800a888:	484b      	ldr	r0, [pc, #300]	; (800a9b8 <MX_GPIO_Init+0x274>)
 800a88a:	f7fc fc91 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_PORT, LED_Pin_Ready, GPIO_PIN_RESET);
 800a88e:	2200      	movs	r2, #0
 800a890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a894:	4848      	ldr	r0, [pc, #288]	; (800a9b8 <MX_GPIO_Init+0x274>)
 800a896:	f7fc fc8b 	bl	80071b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A23_Pin */
  GPIO_InitStruct.Pin = A23_Pin;
 800a89a:	2304      	movs	r3, #4
 800a89c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(A23_GPIO_Port, &GPIO_InitStruct);
 800a8aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	483d      	ldr	r0, [pc, #244]	; (800a9a8 <MX_GPIO_Init+0x264>)
 800a8b2:	f7fc facb 	bl	8006e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin_Capture */
    GPIO_InitStruct.Pin = LED_Pin_Capture;
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 800a8c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4838      	ldr	r0, [pc, #224]	; (800a9b0 <MX_GPIO_Init+0x26c>)
 800a8ce:	f7fc fabd 	bl	8006e4c <HAL_GPIO_Init>

    /*Configure GPIO pin : LED_Pin_Inference */
      GPIO_InitStruct.Pin = LED_Pin_Inference;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	633b      	str	r3, [r7, #48]	; 0x30
      HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 800a8e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4833      	ldr	r0, [pc, #204]	; (800a9b8 <MX_GPIO_Init+0x274>)
 800a8ea:	f7fc faaf 	bl	8006e4c <HAL_GPIO_Init>

      /*Configure GPIO pin : LED_Pin_Ready */
            GPIO_InitStruct.Pin = LED_Pin_Ready;
 800a8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	62bb      	str	r3, [r7, #40]	; 0x28
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	633b      	str	r3, [r7, #48]	; 0x30
            HAL_GPIO_Init(LED1_GPIO_PORT, &GPIO_InitStruct);
 800a900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a904:	4619      	mov	r1, r3
 800a906:	482c      	ldr	r0, [pc, #176]	; (800a9b8 <MX_GPIO_Init+0x274>)
 800a908:	f7fc faa0 	bl	8006e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BL_PWM_Pin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 800a90c:	2380      	movs	r3, #128	; 0x80
 800a90e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a910:	2301      	movs	r3, #1
 800a912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a914:	2300      	movs	r3, #0
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a918:	2300      	movs	r3, #0
 800a91a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800a91c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a920:	4619      	mov	r1, r3
 800a922:	4822      	ldr	r0, [pc, #136]	; (800a9ac <MX_GPIO_Init+0x268>)
 800a924:	f7fc fa92 	bl	8006e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_button_Pin */
  GPIO_InitStruct.Pin = Push_button_Pin;
 800a928:	2301      	movs	r3, #1
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a92c:	2300      	movs	r3, #0
 800a92e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a930:	2301      	movs	r3, #1
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Push_button_GPIO_Port, &GPIO_InitStruct);
 800a934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a938:	4619      	mov	r1, r3
 800a93a:	4820      	ldr	r0, [pc, #128]	; (800a9bc <MX_GPIO_Init+0x278>)
 800a93c:	f7fc fa86 	bl	8006e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a940:	2304      	movs	r3, #4
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a944:	2301      	movs	r3, #1
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a948:	2300      	movs	r3, #0
 800a94a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a94c:	2300      	movs	r3, #0
 800a94e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a954:	4619      	mov	r1, r3
 800a956:	4816      	ldr	r0, [pc, #88]	; (800a9b0 <MX_GPIO_Init+0x26c>)
 800a958:	f7fc fa78 	bl	8006e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a95c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a962:	2302      	movs	r3, #2
 800a964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a966:	2300      	movs	r3, #0
 800a968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a96a:	2300      	movs	r3, #0
 800a96c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a96e:	2300      	movs	r3, #0
 800a970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a976:	4619      	mov	r1, r3
 800a978:	4810      	ldr	r0, [pc, #64]	; (800a9bc <MX_GPIO_Init+0x278>)
 800a97a:	f7fc fa67 	bl	8006e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin A24_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|A24_Pin;
 800a97e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a984:	2301      	movs	r3, #1
 800a986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a98c:	2300      	movs	r3, #0
 800a98e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a994:	4619      	mov	r1, r3
 800a996:	4807      	ldr	r0, [pc, #28]	; (800a9b4 <MX_GPIO_Init+0x270>)
 800a998:	f7fc fa58 	bl	8006e4c <HAL_GPIO_Init>

}
 800a99c:	bf00      	nop
 800a99e:	3738      	adds	r7, #56	; 0x38
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	40023800 	.word	0x40023800
 800a9a8:	40021000 	.word	0x40021000
 800a9ac:	40021400 	.word	0x40021400
 800a9b0:	40021c00 	.word	0x40021c00
 800a9b4:	40021800 	.word	0x40021800
 800a9b8:	40022000 	.word	0x40022000
 800a9bc:	40020000 	.word	0x40020000

0800a9c0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800a9c6:	1d3b      	adds	r3, r7, #4
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	605a      	str	r2, [r3, #4]
 800a9ce:	609a      	str	r2, [r3, #8]
 800a9d0:	60da      	str	r2, [r3, #12]
 800a9d2:	611a      	str	r2, [r3, #16]
 800a9d4:	615a      	str	r2, [r3, #20]
 800a9d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800a9d8:	4b4c      	ldr	r3, [pc, #304]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800a9da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800a9de:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800a9e0:	4b4a      	ldr	r3, [pc, #296]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800a9e2:	4a4b      	ldr	r2, [pc, #300]	; (800ab10 <MX_FSMC_Init+0x150>)
 800a9e4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800a9e6:	4b49      	ldr	r3, [pc, #292]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800a9ec:	4b47      	ldr	r3, [pc, #284]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800a9f2:	4b46      	ldr	r3, [pc, #280]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800a9f8:	4b44      	ldr	r3, [pc, #272]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800a9fa:	2210      	movs	r2, #16
 800a9fc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800a9fe:	4b43      	ldr	r3, [pc, #268]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800aa04:	4b41      	ldr	r3, [pc, #260]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800aa0a:	4b40      	ldr	r3, [pc, #256]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800aa10:	4b3e      	ldr	r3, [pc, #248]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800aa16:	4b3d      	ldr	r3, [pc, #244]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aa1c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800aa1e:	4b3b      	ldr	r3, [pc, #236]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800aa24:	4b39      	ldr	r3, [pc, #228]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800aa2a:	4b38      	ldr	r3, [pc, #224]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800aa30:	4b36      	ldr	r3, [pc, #216]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800aa36:	4b35      	ldr	r3, [pc, #212]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 800aa3c:	2304      	movs	r3, #4
 800aa3e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800aa40:	230f      	movs	r3, #15
 800aa42:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 20;
 800aa44:	2314      	movs	r3, #20
 800aa46:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800aa50:	2311      	movs	r3, #17
 800aa52:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800aa54:	2300      	movs	r3, #0
 800aa56:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800aa58:	1d3b      	adds	r3, r7, #4
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	482b      	ldr	r0, [pc, #172]	; (800ab0c <MX_FSMC_Init+0x14c>)
 800aa60:	f7fd fc8c 	bl	800837c <HAL_SRAM_Init>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800aa6a:	f000 fa85 	bl	800af78 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800aa6e:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aa70:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800aa74:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800aa76:	4b27      	ldr	r3, [pc, #156]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aa78:	4a25      	ldr	r2, [pc, #148]	; (800ab10 <MX_FSMC_Init+0x150>)
 800aa7a:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800aa7c:	4b25      	ldr	r3, [pc, #148]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aa7e:	2204      	movs	r2, #4
 800aa80:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800aa82:	4b24      	ldr	r3, [pc, #144]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800aa88:	4b22      	ldr	r3, [pc, #136]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800aa8e:	4b21      	ldr	r3, [pc, #132]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aa90:	2210      	movs	r2, #16
 800aa92:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800aa94:	4b1f      	ldr	r3, [pc, #124]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800aa9a:	4b1e      	ldr	r3, [pc, #120]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	61da      	str	r2, [r3, #28]
  hsram2.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800aaa0:	4b1c      	ldr	r3, [pc, #112]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	621a      	str	r2, [r3, #32]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800aaa6:	4b1b      	ldr	r3, [pc, #108]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800aaac:	4b19      	ldr	r3, [pc, #100]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aaae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aab2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800aab4:	4b17      	ldr	r3, [pc, #92]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800aaba:	4b16      	ldr	r3, [pc, #88]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800aac0:	4b14      	ldr	r3, [pc, #80]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800aac6:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800aacc:	4b11      	ldr	r3, [pc, #68]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aace:	2200      	movs	r2, #0
 800aad0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 800aad2:	2304      	movs	r3, #4
 800aad4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800aad6:	230f      	movs	r3, #15
 800aad8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 20;
 800aada:	2314      	movs	r3, #20
 800aadc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 800aade:	2302      	movs	r3, #2
 800aae0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800aae2:	2310      	movs	r3, #16
 800aae4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800aae6:	2311      	movs	r3, #17
 800aae8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800aaea:	2300      	movs	r3, #0
 800aaec:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800aaee:	1d3b      	adds	r3, r7, #4
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4807      	ldr	r0, [pc, #28]	; (800ab14 <MX_FSMC_Init+0x154>)
 800aaf6:	f7fd fc41 	bl	800837c <HAL_SRAM_Init>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <MX_FSMC_Init+0x144>
  {
    Error_Handler( );
 800ab00:	f000 fa3a 	bl	800af78 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800ab04:	bf00      	nop
 800ab06:	3720      	adds	r7, #32
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	2000b538 	.word	0x2000b538
 800ab10:	a0000104 	.word	0xa0000104
 800ab14:	2000b888 	.word	0x2000b888

0800ab18 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  None
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* the first frame will be abnormal, discarded */
  FrameXferCplt=1;
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <HAL_DCMI_FrameEventCallback+0x1c>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	701a      	strb	r2, [r3, #0]
}
 800ab26:	bf00      	nop
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	200017dc 	.word	0x200017dc

0800ab38 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
	LineCounter++;
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <HAL_DCMI_LineEventCallback+0x28>)
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	3301      	adds	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <HAL_DCMI_LineEventCallback+0x28>)
 800ab4a:	801a      	strh	r2, [r3, #0]
	LineXferCplt=1;
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <HAL_DCMI_LineEventCallback+0x2c>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	701a      	strb	r2, [r3, #0]
}
 800ab52:	bf00      	nop
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	200017de 	.word	0x200017de
 800ab64:	200017dd 	.word	0x200017dd

0800ab68 <HAL_DCMI_ErrorCallback>:

void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
	printf("%d",hdcmi->ErrorCode);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab74:	4619      	mov	r1, r3
 800ab76:	4803      	ldr	r0, [pc, #12]	; (800ab84 <HAL_DCMI_ErrorCallback+0x1c>)
 800ab78:	f001 ff08 	bl	800c98c <iprintf>
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	08011548 	.word	0x08011548

0800ab88 <ImageResize>:
  */
void ImageResize(uint8_t *srcImage, uint32_t srcW, uint32_t srcH,
                 uint32_t pixelSize, uint32_t roiX, uint32_t roiY,
                 uint32_t roiW, uint32_t roiH,  uint8_t *dstImage,
                 uint32_t dstW, uint32_t dstH)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b0a1      	sub	sp, #132	; 0x84
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6178      	str	r0, [r7, #20]
 800ab90:	6139      	str	r1, [r7, #16]
 800ab92:	60fa      	str	r2, [r7, #12]
 800ab94:	60bb      	str	r3, [r7, #8]
  uint8_t *p1, *p2, *p3, *p4;

  int32_t offset1;
  int32_t offset2;

  srcStride = pixelSize * srcW;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	fb02 f303 	mul.w	r3, r2, r3
 800ab9e:	663b      	str	r3, [r7, #96]	; 0x60

  widthRatio = ((roiW ? roiW : srcW) / (float) dstW);
 800aba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d006      	beq.n	800abb6 <ImageResize+0x2e>
 800aba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abac:	ee07 3a90 	vmov	s15, r3
 800abb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb4:	e004      	b.n	800abc0 <ImageResize+0x38>
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	ee07 3a90 	vmov	s15, r3
 800abbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800abc4:	ee07 3a10 	vmov	s14, r3
 800abc8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800abcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800abd0:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
  heightRatio = ((roiH ? roiH : srcH) / (float) dstH);
 800abd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d006      	beq.n	800abea <ImageResize+0x62>
 800abdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abe0:	ee07 3a90 	vmov	s15, r3
 800abe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe8:	e004      	b.n	800abf4 <ImageResize+0x6c>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	ee07 3a90 	vmov	s15, r3
 800abf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800abf8:	ee07 3a10 	vmov	s14, r3
 800abfc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800ac00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac04:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58

  /* Get horizontal and vertical limits. */
  maxWidth = (roiW ? roiW : srcW) - 1;
 800ac08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <ImageResize+0x90>
 800ac10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac14:	3b01      	subs	r3, #1
 800ac16:	e001      	b.n	800ac1c <ImageResize+0x94>
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	657b      	str	r3, [r7, #84]	; 0x54
  maxHeight = (roiH ? roiH : srcH) - 1;
 800ac1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <ImageResize+0xa6>
 800ac26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	e001      	b.n	800ac32 <ImageResize+0xaa>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	653b      	str	r3, [r7, #80]	; 0x50

  for (int32_t y = 0; y < dstH; y++)
 800ac34:	2300      	movs	r3, #0
 800ac36:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac38:	e0fe      	b.n	800ae38 <ImageResize+0x2b0>
  {
    /* Get Y from source. */
    srcY = ((float) y * heightRatio) + roiY;
 800ac3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3c:	ee07 3a90 	vmov	s15, r3
 800ac40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac44:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800ac48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac50:	ee07 3a90 	vmov	s15, r3
 800ac54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac5c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    srcY1 = (int32_t) srcY;
 800ac60:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800ac64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac68:	ee17 3a90 	vmov	r3, s15
 800ac6c:	64bb      	str	r3, [r7, #72]	; 0x48
    srcY2 = (srcY1 == maxHeight) ? srcY1 : srcY1 + 1;
 800ac6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d002      	beq.n	800ac7c <ImageResize+0xf4>
 800ac76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac78:	3301      	adds	r3, #1
 800ac7a:	e000      	b.n	800ac7e <ImageResize+0xf6>
 800ac7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac7e:	647b      	str	r3, [r7, #68]	; 0x44
    dY1 = srcY - (float) srcY1;
 800ac80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ac8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac92:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    dY2 = 1.0f - dY1;
 800ac96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac9a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ac9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aca2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculates the pointers to the two needed lines of the source. */
    tmp1 = srcImage + srcY1 * srcStride;
 800aca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acaa:	fb02 f303 	mul.w	r3, r2, r3
 800acae:	461a      	mov	r2, r3
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	4413      	add	r3, r2
 800acb4:	63bb      	str	r3, [r7, #56]	; 0x38
    tmp2 = srcImage + srcY2 * srcStride;
 800acb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acba:	fb02 f303 	mul.w	r3, r2, r3
 800acbe:	461a      	mov	r2, r3
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	4413      	add	r3, r2
 800acc4:	637b      	str	r3, [r7, #52]	; 0x34

    for (int32_t x = 0; x < dstW; x++)
 800acc6:	2300      	movs	r3, #0
 800acc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800acca:	e0ac      	b.n	800ae26 <ImageResize+0x29e>
    {
      /* Get X from source. */
      srcX = x * widthRatio + roiX;
 800accc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acce:	ee07 3a90 	vmov	s15, r3
 800acd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800acd6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800acda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      dstX1 = (int32_t) srcX;
 800acf2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800acf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acfa:	ee17 3a90 	vmov	r3, s15
 800acfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      dstX2 = (dstX1 == maxWidth) ? dstX1 : dstX1 + 1;
 800ad00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d002      	beq.n	800ad0e <ImageResize+0x186>
 800ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	e000      	b.n	800ad10 <ImageResize+0x188>
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	62bb      	str	r3, [r7, #40]	; 0x28
      dX1 = srcX - /*(float32)*/dstX1;
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	ee07 3a90 	vmov	s15, r3
 800ad18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad1c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ad20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      dX2 = 1.0f - dX1;
 800ad28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad34:	edc7 7a08 	vstr	s15, [r7, #32]

      /* Calculates the four points (p1,p2, p3, p4) of the source. */
      offset1 = dstX1 * pixelSize;
 800ad38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	fb02 f303 	mul.w	r3, r2, r3
 800ad40:	61fb      	str	r3, [r7, #28]
      offset2 = dstX2 * pixelSize;
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	fb02 f303 	mul.w	r3, r2, r3
 800ad4a:	61bb      	str	r3, [r7, #24]
      p1 = tmp1 + offset1;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad50:	4413      	add	r3, r2
 800ad52:	67fb      	str	r3, [r7, #124]	; 0x7c
      p2 = tmp1 + offset2;
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad58:	4413      	add	r3, r2
 800ad5a:	67bb      	str	r3, [r7, #120]	; 0x78
      p3 = tmp2 + offset1;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad60:	4413      	add	r3, r2
 800ad62:	677b      	str	r3, [r7, #116]	; 0x74
      p4 = tmp2 + offset2;
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad68:	4413      	add	r3, r2
 800ad6a:	673b      	str	r3, [r7, #112]	; 0x70
      /* For each channel, interpolate the four points. */
      for (int32_t ch = 0; ch < pixelSize; ch++, dstImage++, p1++, p2++, p3++, p4++)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	667b      	str	r3, [r7, #100]	; 0x64
 800ad70:	e052      	b.n	800ae18 <ImageResize+0x290>
      {
        *dstImage = (uint8_t)(dY2 * (dX2 * (*p1) + dX1 * (*p2)) + dY1 * (dX2 * (*p3) + dX1 * (*p4)));
 800ad72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad7e:	edd7 7a08 	vldr	s15, [r7, #32]
 800ad82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ad92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ada2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ada6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	ee07 3a90 	vmov	s15, r3
 800adae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800adb2:	edd7 7a08 	vldr	s15, [r7, #32]
 800adb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800adba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800adc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800adca:	ee66 7a27 	vmul.f32	s15, s12, s15
 800adce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800add2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800add6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adda:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade2:	edc7 7a01 	vstr	s15, [r7, #4]
 800ade6:	793b      	ldrb	r3, [r7, #4]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adee:	701a      	strb	r2, [r3, #0]
      for (int32_t ch = 0; ch < pixelSize; ch++, dstImage++, p1++, p2++, p3++, p4++)
 800adf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adf2:	3301      	adds	r3, #1
 800adf4:	667b      	str	r3, [r7, #100]	; 0x64
 800adf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adfa:	3301      	adds	r3, #1
 800adfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae02:	3301      	adds	r3, #1
 800ae04:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae08:	3301      	adds	r3, #1
 800ae0a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae0e:	3301      	adds	r3, #1
 800ae10:	677b      	str	r3, [r7, #116]	; 0x74
 800ae12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae14:	3301      	adds	r3, #1
 800ae16:	673b      	str	r3, [r7, #112]	; 0x70
 800ae18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d8a8      	bhi.n	800ad72 <ImageResize+0x1ea>
    for (int32_t x = 0; x < dstW; x++)
 800ae20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae22:	3301      	adds	r3, #1
 800ae24:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae28:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	f63f af4d 	bhi.w	800accc <ImageResize+0x144>
  for (int32_t y = 0; y < dstH; y++)
 800ae32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae34:	3301      	adds	r3, #1
 800ae36:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae3a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	f63f aefb 	bhi.w	800ac3a <ImageResize+0xb2>
      }
    }
  }
}
 800ae44:	bf00      	nop
 800ae46:	3784      	adds	r7, #132	; 0x84
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <convert_8Bit_Grayscale>:
		      }
}

// Convert to 8 bit grayscale
void convert_8Bit_Grayscale(uint16_t* buffer)
{
 800ae50:	b5b0      	push	{r4, r5, r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
	for(int16_t i=0; i< 19200; i++)
 800ae58:	2300      	movs	r3, #0
 800ae5a:	81fb      	strh	r3, [r7, #14]
 800ae5c:	e061      	b.n	800af22 <convert_8Bit_Grayscale+0xd2>
		      {
		   	   uint16_t pixel = *buffer;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	81bb      	strh	r3, [r7, #12]
		   	   uint8_t red = ((pixel & 0xF800)>>11);
 800ae64:	89bb      	ldrh	r3, [r7, #12]
 800ae66:	0adb      	lsrs	r3, r3, #11
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	72fb      	strb	r3, [r7, #11]
		   	   uint8_t green = ((pixel & 0x07E0)>>5);
 800ae6c:	89bb      	ldrh	r3, [r7, #12]
 800ae6e:	115b      	asrs	r3, r3, #5
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae76:	72bb      	strb	r3, [r7, #10]
		   	   uint8_t blue = (pixel & 0x001F);
 800ae78:	89bb      	ldrh	r3, [r7, #12]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f003 031f 	and.w	r3, r3, #31
 800ae80:	727b      	strb	r3, [r7, #9]
		   	   grayscale[i] = (0.2126 * red) + (0.7152 * green / 2.0) + (0.0722 * blue);
 800ae82:	7afb      	ldrb	r3, [r7, #11]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7f9 f80d 	bl	8003ea4 <__aeabi_i2d>
 800ae8a:	a32c      	add	r3, pc, #176	; (adr r3, 800af3c <convert_8Bit_Grayscale+0xec>)
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae90:	f7f9 f872 	bl	8003f78 <__aeabi_dmul>
 800ae94:	4603      	mov	r3, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4625      	mov	r5, r4
 800ae9a:	461c      	mov	r4, r3
 800ae9c:	7abb      	ldrb	r3, [r7, #10]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f9 f800 	bl	8003ea4 <__aeabi_i2d>
 800aea4:	a327      	add	r3, pc, #156	; (adr r3, 800af44 <convert_8Bit_Grayscale+0xf4>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	f7f9 f865 	bl	8003f78 <__aeabi_dmul>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aebe:	f7f9 f985 	bl	80041cc <__aeabi_ddiv>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4620      	mov	r0, r4
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7f8 fe9f 	bl	8003c0c <__adddf3>
 800aece:	4603      	mov	r3, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	4625      	mov	r5, r4
 800aed4:	461c      	mov	r4, r3
 800aed6:	7a7b      	ldrb	r3, [r7, #9]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7f8 ffe3 	bl	8003ea4 <__aeabi_i2d>
 800aede:	a31b      	add	r3, pc, #108	; (adr r3, 800af4c <convert_8Bit_Grayscale+0xfc>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f7f9 f848 	bl	8003f78 <__aeabi_dmul>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	4620      	mov	r0, r4
 800aeee:	4629      	mov	r1, r5
 800aef0:	f7f8 fe8c 	bl	8003c0c <__adddf3>
 800aef4:	4603      	mov	r3, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	461a      	mov	r2, r3
 800aefa:	4623      	mov	r3, r4
 800aefc:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800af00:	4610      	mov	r0, r2
 800af02:	4619      	mov	r1, r3
 800af04:	f7f9 fb10 	bl	8004528 <__aeabi_d2uiz>
 800af08:	4603      	mov	r3, r0
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <convert_8Bit_Grayscale+0xe8>)
 800af0e:	551a      	strb	r2, [r3, r4]
		   	   buffer++;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3302      	adds	r3, #2
 800af14:	607b      	str	r3, [r7, #4]
	for(int16_t i=0; i< 19200; i++)
 800af16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	3301      	adds	r3, #1
 800af1e:	b29b      	uxth	r3, r3
 800af20:	81fb      	strh	r3, [r7, #14]
 800af22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800af26:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800af2a:	db98      	blt.n	800ae5e <convert_8Bit_Grayscale+0xe>
		      }
}
 800af2c:	bf00      	nop
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bdb0      	pop	{r4, r5, r7, pc}
 800af34:	f3af 8000 	nop.w
 800af38:	2000b8dc 	.word	0x2000b8dc
 800af3c:	0f9096bc 	.word	0x0f9096bc
 800af40:	3fcb367a 	.word	0x3fcb367a
 800af44:	1c432ca5 	.word	0x1c432ca5
 800af48:	3fe6e2eb 	.word	0x3fe6e2eb
 800af4c:	fec56d5d 	.word	0xfec56d5d
 800af50:	3fb27bb2 	.word	0x3fb27bb2

0800af54 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* write a character to the uart1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800af5c:	1d39      	adds	r1, r7, #4
 800af5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af62:	2201      	movs	r2, #1
 800af64:	4803      	ldr	r0, [pc, #12]	; (800af74 <__io_putchar+0x20>)
 800af66:	f7fd fa9a 	bl	800849e <HAL_UART_Transmit>

  return ch;
 800af6a:	687b      	ldr	r3, [r7, #4]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	2000b5c8 	.word	0x2000b5c8

0800af78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800af7c:	bf00      	nop
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
	...

0800af88 <DCMI_SingleRandomWrite>:
  * @param  Data: data to be written to the specific register 
  * @retval 0x00 if write operation is OK. 
  *         0xFF if timeout condition occured (device not connected or bus error).
  */
uint8_t DCMI_SingleRandomWrite(uint8_t DeviceAddr, uint16_t Reg, uint8_t Data)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af04      	add	r7, sp, #16
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]
 800af92:	460b      	mov	r3, r1
 800af94:	80bb      	strh	r3, [r7, #4]
 800af96:	4613      	mov	r3, r2
 800af98:	71bb      	strb	r3, [r7, #6]
  if(HAL_I2C_Mem_Write(&hi2c2, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &Data, 1, 100) != HAL_OK)
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	b299      	uxth	r1, r3
 800af9e:	88ba      	ldrh	r2, [r7, #4]
 800afa0:	2364      	movs	r3, #100	; 0x64
 800afa2:	9302      	str	r3, [sp, #8]
 800afa4:	2301      	movs	r3, #1
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	1dbb      	adds	r3, r7, #6
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	2301      	movs	r3, #1
 800afae:	4806      	ldr	r0, [pc, #24]	; (800afc8 <DCMI_SingleRandomWrite+0x40>)
 800afb0:	f7fc fa40 	bl	8007434 <HAL_I2C_Mem_Write>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <DCMI_SingleRandomWrite+0x36>
  {
    return 0xFF;
 800afba:	23ff      	movs	r3, #255	; 0xff
 800afbc:	e000      	b.n	800afc0 <DCMI_SingleRandomWrite+0x38>
  }
  return 0;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	2000b484 	.word	0x2000b484

0800afcc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800afd6:	4b16      	ldr	r3, [pc, #88]	; (800b030 <BSP_LCD_Init+0x64>)
 800afd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afdc:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 800afde:	4b14      	ldr	r3, [pc, #80]	; (800b030 <BSP_LCD_Init+0x64>)
 800afe0:	4a14      	ldr	r2, [pc, #80]	; (800b034 <BSP_LCD_Init+0x68>)
 800afe2:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800afe4:	4b12      	ldr	r3, [pc, #72]	; (800b030 <BSP_LCD_Init+0x64>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <BSP_LCD_Init+0x6c>)
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	4798      	blx	r3
 800aff0:	4603      	mov	r3, r0
 800aff2:	461a      	mov	r2, r3
 800aff4:	f249 3325 	movw	r3, #37669	; 0x9325
 800aff8:	429a      	cmp	r2, r3
 800affa:	d008      	beq.n	800b00e <BSP_LCD_Init+0x42>
 800affc:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <BSP_LCD_Init+0x6c>)
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	4798      	blx	r3
 800b002:	4603      	mov	r3, r0
 800b004:	461a      	mov	r2, r3
 800b006:	f249 3328 	movw	r3, #37672	; 0x9328
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d10b      	bne.n	800b026 <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 800b00e:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <BSP_LCD_Init+0x70>)
 800b010:	4a09      	ldr	r2, [pc, #36]	; (800b038 <BSP_LCD_Init+0x6c>)
 800b012:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 800b014:	4b09      	ldr	r3, [pc, #36]	; (800b03c <BSP_LCD_Init+0x70>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800b01c:	4805      	ldr	r0, [pc, #20]	; (800b034 <BSP_LCD_Init+0x68>)
 800b01e:	f000 f837 	bl	800b090 <BSP_LCD_SetFont>

    ret = LCD_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 800b026:	79fb      	ldrb	r3, [r7, #7]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	200103dc 	.word	0x200103dc
 800b034:	2000046c 	.word	0x2000046c
 800b038:	20000058 	.word	0x20000058
 800b03c:	200017e4 	.word	0x200017e4

0800b040 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 800b044:	4b03      	ldr	r3, [pc, #12]	; (800b054 <BSP_LCD_GetXSize+0x14>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	4798      	blx	r3
 800b04c:	4603      	mov	r3, r0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	200017e4 	.word	0x200017e4

0800b058 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800b05c:	4b03      	ldr	r3, [pc, #12]	; (800b06c <BSP_LCD_GetYSize+0x14>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	4798      	blx	r3
 800b064:	4603      	mov	r3, r0
}
 800b066:	4618      	mov	r0, r3
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	200017e4 	.word	0x200017e4

0800b070 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	4603      	mov	r3, r0
 800b078:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800b07a:	88fb      	ldrh	r3, [r7, #6]
 800b07c:	4a03      	ldr	r2, [pc, #12]	; (800b08c <BSP_LCD_SetTextColor+0x1c>)
 800b07e:	6013      	str	r3, [r2, #0]
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	200103dc 	.word	0x200103dc

0800b090 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 800b098:	4a04      	ldr	r2, [pc, #16]	; (800b0ac <BSP_LCD_SetFont+0x1c>)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6093      	str	r3, [r2, #8]
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	200103dc 	.word	0x200103dc

0800b0b0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 800b0b0:	b590      	push	{r4, r7, lr}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 800b0be:	4b15      	ldr	r3, [pc, #84]	; (800b114 <BSP_LCD_Clear+0x64>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 800b0c4:	88fb      	ldrh	r3, [r7, #6]
 800b0c6:	4a13      	ldr	r2, [pc, #76]	; (800b114 <BSP_LCD_Clear+0x64>)
 800b0c8:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	e00d      	b.n	800b0ec <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	b29c      	uxth	r4, r3
 800b0d4:	f7ff ffb4 	bl	800b040 <BSP_LCD_GetXSize>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4621      	mov	r1, r4
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	f000 f8cd 	bl	800b280 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	f7ff ffb4 	bl	800b058 <BSP_LCD_GetYSize>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d3eb      	bcc.n	800b0d0 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 800b0f8:	4a06      	ldr	r2, [pc, #24]	; (800b114 <BSP_LCD_Clear+0x64>)
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <BSP_LCD_Clear+0x64>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	b29b      	uxth	r3, r3
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff ffb3 	bl	800b070 <BSP_LCD_SetTextColor>
}
 800b10a:	bf00      	nop
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd90      	pop	{r4, r7, pc}
 800b112:	bf00      	nop
 800b114:	200103dc 	.word	0x200103dc

0800b118 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	80fb      	strh	r3, [r7, #6]
 800b122:	460b      	mov	r3, r1
 800b124:	80bb      	strh	r3, [r7, #4]
 800b126:	4613      	mov	r3, r2
 800b128:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800b12a:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <BSP_LCD_DisplayChar+0x50>)
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800b134:	490c      	ldr	r1, [pc, #48]	; (800b168 <BSP_LCD_DisplayChar+0x50>)
 800b136:	6889      	ldr	r1, [r1, #8]
 800b138:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800b13a:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800b13e:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <BSP_LCD_DisplayChar+0x50>)
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	889b      	ldrh	r3, [r3, #4]
 800b144:	3307      	adds	r3, #7
 800b146:	2b00      	cmp	r3, #0
 800b148:	da00      	bge.n	800b14c <BSP_LCD_DisplayChar+0x34>
 800b14a:	3307      	adds	r3, #7
 800b14c:	10db      	asrs	r3, r3, #3
 800b14e:	fb03 f301 	mul.w	r3, r3, r1
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800b152:	441a      	add	r2, r3
 800b154:	88b9      	ldrh	r1, [r7, #4]
 800b156:	88fb      	ldrh	r3, [r7, #6]
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 f933 	bl	800b3c4 <LCD_DrawChar>
}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	200103dc 	.word	0x200103dc

0800b16c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 800b16c:	b590      	push	{r4, r7, lr}
 800b16e:	b089      	sub	sp, #36	; 0x24
 800b170:	af00      	add	r7, sp, #0
 800b172:	60ba      	str	r2, [r7, #8]
 800b174:	461a      	mov	r2, r3
 800b176:	4603      	mov	r3, r0
 800b178:	81fb      	strh	r3, [r7, #14]
 800b17a:	460b      	mov	r3, r1
 800b17c:	81bb      	strh	r3, [r7, #12]
 800b17e:	4613      	mov	r3, r2
 800b180:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 800b182:	2301      	movs	r3, #1
 800b184:	83fb      	strh	r3, [r7, #30]
 800b186:	2300      	movs	r3, #0
 800b188:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800b18a:	2300      	movs	r3, #0
 800b18c:	61bb      	str	r3, [r7, #24]
 800b18e:	2300      	movs	r3, #0
 800b190:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800b196:	e002      	b.n	800b19e <BSP_LCD_DisplayStringAt+0x32>
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	3301      	adds	r3, #1
 800b19c:	61bb      	str	r3, [r7, #24]
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	617a      	str	r2, [r7, #20]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1f6      	bne.n	800b198 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800b1aa:	f7ff ff49 	bl	800b040 <BSP_LCD_GetXSize>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	4b32      	ldr	r3, [pc, #200]	; (800b27c <BSP_LCD_DisplayStringAt+0x110>)
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	889b      	ldrh	r3, [r3, #4]
 800b1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ba:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d014      	beq.n	800b1ec <BSP_LCD_DisplayStringAt+0x80>
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d00f      	beq.n	800b1e6 <BSP_LCD_DisplayStringAt+0x7a>
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d11e      	bne.n	800b208 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	4a2a      	ldr	r2, [pc, #168]	; (800b27c <BSP_LCD_DisplayStringAt+0x110>)
 800b1d2:	6892      	ldr	r2, [r2, #8]
 800b1d4:	8892      	ldrh	r2, [r2, #4]
 800b1d6:	fb02 f303 	mul.w	r3, r2, r3
 800b1da:	085b      	lsrs	r3, r3, #1
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	89fb      	ldrh	r3, [r7, #14]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	83fb      	strh	r3, [r7, #30]
      break;
 800b1e4:	e013      	b.n	800b20e <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800b1e6:	89fb      	ldrh	r3, [r7, #14]
 800b1e8:	83fb      	strh	r3, [r7, #30]
      break;
 800b1ea:	e010      	b.n	800b20e <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	4b21      	ldr	r3, [pc, #132]	; (800b27c <BSP_LCD_DisplayStringAt+0x110>)
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	889b      	ldrh	r3, [r3, #4]
 800b1fa:	fb12 f303 	smulbb	r3, r2, r3
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	89fb      	ldrh	r3, [r7, #14]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	83fb      	strh	r3, [r7, #30]
      break;
 800b206:	e002      	b.n	800b20e <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 800b208:	89fb      	ldrh	r3, [r7, #14]
 800b20a:	83fb      	strh	r3, [r7, #30]
      break;
 800b20c:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800b20e:	e012      	b.n	800b236 <BSP_LCD_DisplayStringAt+0xca>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	781a      	ldrb	r2, [r3, #0]
 800b214:	89b9      	ldrh	r1, [r7, #12]
 800b216:	8bfb      	ldrh	r3, [r7, #30]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff ff7d 	bl	800b118 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800b21e:	4b17      	ldr	r3, [pc, #92]	; (800b27c <BSP_LCD_DisplayStringAt+0x110>)
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	889a      	ldrh	r2, [r3, #4]
 800b224:	8bfb      	ldrh	r3, [r7, #30]
 800b226:	4413      	add	r3, r2
 800b228:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	3301      	adds	r3, #1
 800b22e:	60bb      	str	r3, [r7, #8]
    counter++;
 800b230:	8bbb      	ldrh	r3, [r7, #28]
 800b232:	3301      	adds	r3, #1
 800b234:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bf14      	ite	ne
 800b23e:	2301      	movne	r3, #1
 800b240:	2300      	moveq	r3, #0
 800b242:	b2dc      	uxtb	r4, r3
 800b244:	f7ff fefc 	bl	800b040 <BSP_LCD_GetXSize>
 800b248:	4601      	mov	r1, r0
 800b24a:	8bbb      	ldrh	r3, [r7, #28]
 800b24c:	4a0b      	ldr	r2, [pc, #44]	; (800b27c <BSP_LCD_DisplayStringAt+0x110>)
 800b24e:	6892      	ldr	r2, [r2, #8]
 800b250:	8892      	ldrh	r2, [r2, #4]
 800b252:	fb02 f303 	mul.w	r3, r2, r3
 800b256:	1acb      	subs	r3, r1, r3
 800b258:	b29b      	uxth	r3, r3
 800b25a:	4a08      	ldr	r2, [pc, #32]	; (800b27c <BSP_LCD_DisplayStringAt+0x110>)
 800b25c:	6892      	ldr	r2, [r2, #8]
 800b25e:	8892      	ldrh	r2, [r2, #4]
 800b260:	4293      	cmp	r3, r2
 800b262:	bf2c      	ite	cs
 800b264:	2301      	movcs	r3, #1
 800b266:	2300      	movcc	r3, #0
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	4023      	ands	r3, r4
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1ce      	bne.n	800b210 <BSP_LCD_DisplayStringAt+0xa4>
  }
}
 800b272:	bf00      	nop
 800b274:	3724      	adds	r7, #36	; 0x24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd90      	pop	{r4, r7, pc}
 800b27a:	bf00      	nop
 800b27c:	200103dc 	.word	0x200103dc

0800b280 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800b280:	b590      	push	{r4, r7, lr}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	80fb      	strh	r3, [r7, #6]
 800b28a:	460b      	mov	r3, r1
 800b28c:	80bb      	strh	r3, [r7, #4]
 800b28e:	4613      	mov	r3, r2
 800b290:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800b296:	4b15      	ldr	r3, [pc, #84]	; (800b2ec <BSP_LCD_DrawHLine+0x6c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00a      	beq.n	800b2b6 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800b2a0:	4b12      	ldr	r3, [pc, #72]	; (800b2ec <BSP_LCD_DrawHLine+0x6c>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	6a1c      	ldr	r4, [r3, #32]
 800b2a6:	4b12      	ldr	r3, [pc, #72]	; (800b2f0 <BSP_LCD_DrawHLine+0x70>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	b298      	uxth	r0, r3
 800b2ac:	887b      	ldrh	r3, [r7, #2]
 800b2ae:	88ba      	ldrh	r2, [r7, #4]
 800b2b0:	88f9      	ldrh	r1, [r7, #6]
 800b2b2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800b2b4:	e015      	b.n	800b2e2 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
 800b2ba:	e00e      	b.n	800b2da <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	b298      	uxth	r0, r3
 800b2c6:	4b0a      	ldr	r3, [pc, #40]	; (800b2f0 <BSP_LCD_DrawHLine+0x70>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	88bb      	ldrh	r3, [r7, #4]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	f000 f85c 	bl	800b38c <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	887b      	ldrh	r3, [r7, #2]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d3ec      	bcc.n	800b2bc <BSP_LCD_DrawHLine+0x3c>
}
 800b2e2:	bf00      	nop
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd90      	pop	{r4, r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	200017e4 	.word	0x200017e4
 800b2f0:	200103dc 	.word	0x200103dc

0800b2f4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800b2f4:	b590      	push	{r4, r7, lr}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	603a      	str	r2, [r7, #0]
 800b2fe:	80fb      	strh	r3, [r7, #6]
 800b300:	460b      	mov	r3, r1
 800b302:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	3312      	adds	r3, #18
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	3314      	adds	r3, #20
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	041b      	lsls	r3, r3, #16
 800b31c:	461a      	mov	r2, r3
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	4313      	orrs	r3, r2
 800b322:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	3316      	adds	r3, #22
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	3318      	adds	r3, #24
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	041b      	lsls	r3, r3, #16
 800b334:	461a      	mov	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	4313      	orrs	r3, r2
 800b33a:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	b29a      	uxth	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	b29b      	uxth	r3, r3
 800b344:	88b9      	ldrh	r1, [r7, #4]
 800b346:	88f8      	ldrh	r0, [r7, #6]
 800b348:	f000 f92e 	bl	800b5a8 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 800b34c:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <BSP_LCD_DrawBitmap+0x94>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b352:	2b00      	cmp	r3, #0
 800b354:	d006      	beq.n	800b364 <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <BSP_LCD_DrawBitmap+0x94>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35c:	88b9      	ldrh	r1, [r7, #4]
 800b35e:	88f8      	ldrh	r0, [r7, #6]
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800b364:	f7ff fe6c 	bl	800b040 <BSP_LCD_GetXSize>
 800b368:	4603      	mov	r3, r0
 800b36a:	b29c      	uxth	r4, r3
 800b36c:	f7ff fe74 	bl	800b058 <BSP_LCD_GetYSize>
 800b370:	4603      	mov	r3, r0
 800b372:	b29b      	uxth	r3, r3
 800b374:	4622      	mov	r2, r4
 800b376:	2100      	movs	r1, #0
 800b378:	2000      	movs	r0, #0
 800b37a:	f000 f915 	bl	800b5a8 <LCD_SetDisplayWindow>
}
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	bd90      	pop	{r4, r7, pc}
 800b386:	bf00      	nop
 800b388:	200017e4 	.word	0x200017e4

0800b38c <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	80fb      	strh	r3, [r7, #6]
 800b396:	460b      	mov	r3, r1
 800b398:	80bb      	strh	r3, [r7, #4]
 800b39a:	4613      	mov	r3, r2
 800b39c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800b39e:	4b08      	ldr	r3, [pc, #32]	; (800b3c0 <LCD_DrawPixel+0x34>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d006      	beq.n	800b3b6 <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 800b3a8:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <LCD_DrawPixel+0x34>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	887a      	ldrh	r2, [r7, #2]
 800b3b0:	88b9      	ldrh	r1, [r7, #4]
 800b3b2:	88f8      	ldrh	r0, [r7, #6]
 800b3b4:	4798      	blx	r3
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	200017e4 	.word	0x200017e4

0800b3c4 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08a      	sub	sp, #40	; 0x28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	603a      	str	r2, [r7, #0]
 800b3ce:	80fb      	strh	r3, [r7, #6]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b3d8:	2300      	movs	r3, #0
 800b3da:	623b      	str	r3, [r7, #32]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	82fb      	strh	r3, [r7, #22]
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 800b3f4:	4b63      	ldr	r3, [pc, #396]	; (800b584 <LCD_DrawChar+0x1c0>)
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	88db      	ldrh	r3, [r3, #6]
 800b3fa:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 800b3fc:	4b61      	ldr	r3, [pc, #388]	; (800b584 <LCD_DrawChar+0x1c0>)
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	889b      	ldrh	r3, [r3, #4]
 800b402:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 800b404:	8afa      	ldrh	r2, [r7, #22]
 800b406:	8abb      	ldrh	r3, [r7, #20]
 800b408:	fb12 f303 	smulbb	r3, r2, r3
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	331b      	adds	r3, #27
 800b410:	b29b      	uxth	r3, r3
 800b412:	4a5d      	ldr	r2, [pc, #372]	; (800b588 <LCD_DrawChar+0x1c4>)
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	b29b      	uxth	r3, r3
 800b418:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 800b41a:	8afb      	ldrh	r3, [r7, #22]
 800b41c:	8aba      	ldrh	r2, [r7, #20]
 800b41e:	fb02 f303 	mul.w	r3, r2, r3
 800b422:	331b      	adds	r3, #27
 800b424:	005b      	lsls	r3, r3, #1
 800b426:	141a      	asrs	r2, r3, #16
 800b428:	4b58      	ldr	r3, [pc, #352]	; (800b58c <LCD_DrawChar+0x1c8>)
 800b42a:	b292      	uxth	r2, r2
 800b42c:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 800b42e:	4b58      	ldr	r3, [pc, #352]	; (800b590 <LCD_DrawChar+0x1cc>)
 800b430:	2236      	movs	r2, #54	; 0x36
 800b432:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 800b434:	4a57      	ldr	r2, [pc, #348]	; (800b594 <LCD_DrawChar+0x1d0>)
 800b436:	8abb      	ldrh	r3, [r7, #20]
 800b438:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 800b43a:	8abb      	ldrh	r3, [r7, #20]
 800b43c:	141a      	asrs	r2, r3, #16
 800b43e:	4b56      	ldr	r3, [pc, #344]	; (800b598 <LCD_DrawChar+0x1d4>)
 800b440:	b292      	uxth	r2, r2
 800b442:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 800b444:	4a55      	ldr	r2, [pc, #340]	; (800b59c <LCD_DrawChar+0x1d8>)
 800b446:	8afb      	ldrh	r3, [r7, #22]
 800b448:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 800b44a:	8afb      	ldrh	r3, [r7, #22]
 800b44c:	141a      	asrs	r2, r3, #16
 800b44e:	4b54      	ldr	r3, [pc, #336]	; (800b5a0 <LCD_DrawChar+0x1dc>)
 800b450:	b292      	uxth	r2, r2
 800b452:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 800b454:	8abb      	ldrh	r3, [r7, #20]
 800b456:	3307      	adds	r3, #7
 800b458:	2b00      	cmp	r3, #0
 800b45a:	da00      	bge.n	800b45e <LCD_DrawChar+0x9a>
 800b45c:	3307      	adds	r3, #7
 800b45e:	10db      	asrs	r3, r3, #3
 800b460:	b2db      	uxtb	r3, r3
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	b2da      	uxtb	r2, r3
 800b466:	8abb      	ldrh	r3, [r7, #20]
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 800b46e:	2300      	movs	r3, #0
 800b470:	627b      	str	r3, [r7, #36]	; 0x24
 800b472:	e078      	b.n	800b566 <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 800b474:	8abb      	ldrh	r3, [r7, #20]
 800b476:	3307      	adds	r3, #7
 800b478:	2b00      	cmp	r3, #0
 800b47a:	da00      	bge.n	800b47e <LCD_DrawChar+0xba>
 800b47c:	3307      	adds	r3, #7
 800b47e:	10db      	asrs	r3, r3, #3
 800b480:	461a      	mov	r2, r3
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	fb03 f302 	mul.w	r3, r3, r2
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	4413      	add	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 800b48e:	8abb      	ldrh	r3, [r7, #20]
 800b490:	3b11      	subs	r3, #17
 800b492:	2b07      	cmp	r3, #7
 800b494:	d80c      	bhi.n	800b4b0 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	041a      	lsls	r2, r3, #16
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	021b      	lsls	r3, r3, #8
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	3202      	adds	r2, #2
 800b4aa:	7812      	ldrb	r2, [r2, #0]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 800b4b0:	8abb      	ldrh	r3, [r7, #20]
 800b4b2:	3b09      	subs	r3, #9
 800b4b4:	2b07      	cmp	r3, #7
 800b4b6:	d807      	bhi.n	800b4c8 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	021b      	lsls	r3, r3, #8
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	3201      	adds	r2, #1
 800b4c2:	7812      	ldrb	r2, [r2, #0]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 800b4c8:	8abb      	ldrh	r3, [r7, #20]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	2b07      	cmp	r3, #7
 800b4ce:	d802      	bhi.n	800b4d6 <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	623b      	str	r3, [r7, #32]
 800b4da:	e03d      	b.n	800b558 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 800b4dc:	8afa      	ldrh	r2, [r7, #22]
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	8aba      	ldrh	r2, [r7, #20]
 800b4e6:	fb02 f203 	mul.w	r2, r2, r3
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	331b      	adds	r3, #27
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 800b4f4:	8aba      	ldrh	r2, [r7, #20]
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	1ad2      	subs	r2, r2, r3
 800b4fa:	7cfb      	ldrb	r3, [r7, #19]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	3b01      	subs	r3, #1
 800b500:	2201      	movs	r2, #1
 800b502:	fa02 f303 	lsl.w	r3, r2, r3
 800b506:	461a      	mov	r2, r3
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	4013      	ands	r3, r2
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d010      	beq.n	800b532 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 800b510:	4b1c      	ldr	r3, [pc, #112]	; (800b584 <LCD_DrawChar+0x1c0>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	b2d9      	uxtb	r1, r3
 800b516:	4a23      	ldr	r2, [pc, #140]	; (800b5a4 <LCD_DrawChar+0x1e0>)
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	4413      	add	r3, r2
 800b51c:	460a      	mov	r2, r1
 800b51e:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 800b520:	4b18      	ldr	r3, [pc, #96]	; (800b584 <LCD_DrawChar+0x1c0>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	0a1a      	lsrs	r2, r3, #8
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	3301      	adds	r3, #1
 800b52a:	b2d1      	uxtb	r1, r2
 800b52c:	4a1d      	ldr	r2, [pc, #116]	; (800b5a4 <LCD_DrawChar+0x1e0>)
 800b52e:	54d1      	strb	r1, [r2, r3]
 800b530:	e00f      	b.n	800b552 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800b532:	4b14      	ldr	r3, [pc, #80]	; (800b584 <LCD_DrawChar+0x1c0>)
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	b2d9      	uxtb	r1, r3
 800b538:	4a1a      	ldr	r2, [pc, #104]	; (800b5a4 <LCD_DrawChar+0x1e0>)
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	4413      	add	r3, r2
 800b53e:	460a      	mov	r2, r1
 800b540:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800b542:	4b10      	ldr	r3, [pc, #64]	; (800b584 <LCD_DrawChar+0x1c0>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	0a1a      	lsrs	r2, r3, #8
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	3301      	adds	r3, #1
 800b54c:	b2d1      	uxtb	r1, r2
 800b54e:	4a15      	ldr	r2, [pc, #84]	; (800b5a4 <LCD_DrawChar+0x1e0>)
 800b550:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	3301      	adds	r3, #1
 800b556:	623b      	str	r3, [r7, #32]
 800b558:	8abb      	ldrh	r3, [r7, #20]
 800b55a:	6a3a      	ldr	r2, [r7, #32]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d3bd      	bcc.n	800b4dc <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	3301      	adds	r3, #1
 800b564:	627b      	str	r3, [r7, #36]	; 0x24
 800b566:	8afb      	ldrh	r3, [r7, #22]
 800b568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d382      	bcc.n	800b474 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 800b56e:	88b9      	ldrh	r1, [r7, #4]
 800b570:	88fb      	ldrh	r3, [r7, #6]
 800b572:	4a0c      	ldr	r2, [pc, #48]	; (800b5a4 <LCD_DrawChar+0x1e0>)
 800b574:	4618      	mov	r0, r3
 800b576:	f7ff febd 	bl	800b2f4 <BSP_LCD_DrawBitmap>
}
 800b57a:	bf00      	nop
 800b57c:	3728      	adds	r7, #40	; 0x28
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	200103dc 	.word	0x200103dc
 800b588:	200017ea 	.word	0x200017ea
 800b58c:	200017ec 	.word	0x200017ec
 800b590:	200017f2 	.word	0x200017f2
 800b594:	200017fa 	.word	0x200017fa
 800b598:	200017fc 	.word	0x200017fc
 800b59c:	200017fe 	.word	0x200017fe
 800b5a0:	20001800 	.word	0x20001800
 800b5a4:	200017e8 	.word	0x200017e8

0800b5a8 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800b5a8:	b590      	push	{r4, r7, lr}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	4623      	mov	r3, r4
 800b5b8:	80fb      	strh	r3, [r7, #6]
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	80bb      	strh	r3, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	807b      	strh	r3, [r7, #2]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800b5c6:	4b08      	ldr	r3, [pc, #32]	; (800b5e8 <LCD_SetDisplayWindow+0x40>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d007      	beq.n	800b5e0 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800b5d0:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <LCD_SetDisplayWindow+0x40>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	69dc      	ldr	r4, [r3, #28]
 800b5d6:	883b      	ldrh	r3, [r7, #0]
 800b5d8:	887a      	ldrh	r2, [r7, #2]
 800b5da:	88b9      	ldrh	r1, [r7, #4]
 800b5dc:	88f8      	ldrh	r0, [r7, #6]
 800b5de:	47a0      	blx	r4
  }  
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd90      	pop	{r4, r7, pc}
 800b5e8:	200017e4 	.word	0x200017e4

0800b5ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	607b      	str	r3, [r7, #4]
 800b5f6:	4b10      	ldr	r3, [pc, #64]	; (800b638 <HAL_MspInit+0x4c>)
 800b5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fa:	4a0f      	ldr	r2, [pc, #60]	; (800b638 <HAL_MspInit+0x4c>)
 800b5fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b600:	6453      	str	r3, [r2, #68]	; 0x44
 800b602:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <HAL_MspInit+0x4c>)
 800b604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b60a:	607b      	str	r3, [r7, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b60e:	2300      	movs	r3, #0
 800b610:	603b      	str	r3, [r7, #0]
 800b612:	4b09      	ldr	r3, [pc, #36]	; (800b638 <HAL_MspInit+0x4c>)
 800b614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b616:	4a08      	ldr	r2, [pc, #32]	; (800b638 <HAL_MspInit+0x4c>)
 800b618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b61c:	6413      	str	r3, [r2, #64]	; 0x40
 800b61e:	4b06      	ldr	r3, [pc, #24]	; (800b638 <HAL_MspInit+0x4c>)
 800b620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 800b62a:	bf00      	nop
 800b62c:	370c      	adds	r7, #12
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	40023800 	.word	0x40023800

0800b63c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a0b      	ldr	r2, [pc, #44]	; (800b678 <HAL_CRC_MspInit+0x3c>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d10d      	bne.n	800b66a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b64e:	2300      	movs	r3, #0
 800b650:	60fb      	str	r3, [r7, #12]
 800b652:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <HAL_CRC_MspInit+0x40>)
 800b654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b656:	4a09      	ldr	r2, [pc, #36]	; (800b67c <HAL_CRC_MspInit+0x40>)
 800b658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b65c:	6313      	str	r3, [r2, #48]	; 0x30
 800b65e:	4b07      	ldr	r3, [pc, #28]	; (800b67c <HAL_CRC_MspInit+0x40>)
 800b660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800b66a:	bf00      	nop
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	40023000 	.word	0x40023000
 800b67c:	40023800 	.word	0x40023800

0800b680 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	  if(hdcmi->Instance==DCMI)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a55      	ldr	r2, [pc, #340]	; (800b7e4 <HAL_DCMI_MspInit+0x164>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	f040 80a3 	bne.w	800b7da <HAL_DCMI_MspInit+0x15a>
	  {
	  /* USER CODE BEGIN DCMI_MspInit 0 */

	  /* USER CODE END DCMI_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_DCMI_CLK_ENABLE();
 800b694:	2300      	movs	r3, #0
 800b696:	60bb      	str	r3, [r7, #8]
 800b698:	4b53      	ldr	r3, [pc, #332]	; (800b7e8 <HAL_DCMI_MspInit+0x168>)
 800b69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69c:	4a52      	ldr	r2, [pc, #328]	; (800b7e8 <HAL_DCMI_MspInit+0x168>)
 800b69e:	f043 0301 	orr.w	r3, r3, #1
 800b6a2:	6353      	str	r3, [r2, #52]	; 0x34
 800b6a4:	4b50      	ldr	r3, [pc, #320]	; (800b7e8 <HAL_DCMI_MspInit+0x168>)
 800b6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	60bb      	str	r3, [r7, #8]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
	    PI4     ------> DCMI_D5
	    PI5     ------> DCMI_VSYNC
	    PI6     ------> DCMI_D6
	    PI7     ------> DCMI_D7
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b6b0:	2340      	movs	r3, #64	; 0x40
 800b6b2:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b6c0:	230d      	movs	r3, #13
 800b6c2:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6c4:	f107 030c 	add.w	r3, r7, #12
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4848      	ldr	r0, [pc, #288]	; (800b7ec <HAL_DCMI_MspInit+0x16c>)
 800b6cc:	f7fb fbbe 	bl	8006e4c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b6d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6d4:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b6e2:	230d      	movs	r3, #13
 800b6e4:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b6e6:	f107 030c 	add.w	r3, r7, #12
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4840      	ldr	r0, [pc, #256]	; (800b7f0 <HAL_DCMI_MspInit+0x170>)
 800b6ee:	f7fb fbad 	bl	8006e4c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800b6f2:	f44f 435f 	mov.w	r3, #57088	; 0xdf00
 800b6f6:	60fb      	str	r3, [r7, #12]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b700:	2300      	movs	r3, #0
 800b702:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b704:	230d      	movs	r3, #13
 800b706:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b708:	f107 030c 	add.w	r3, r7, #12
 800b70c:	4619      	mov	r1, r3
 800b70e:	4839      	ldr	r0, [pc, #228]	; (800b7f4 <HAL_DCMI_MspInit+0x174>)
 800b710:	f7fb fb9c 	bl	8006e4c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800b714:	23fe      	movs	r3, #254	; 0xfe
 800b716:	60fb      	str	r3, [r7, #12]
	                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b718:	2302      	movs	r3, #2
 800b71a:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b71c:	2300      	movs	r3, #0
 800b71e:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b720:	2300      	movs	r3, #0
 800b722:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b724:	230d      	movs	r3, #13
 800b726:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b728:	f107 030c 	add.w	r3, r7, #12
 800b72c:	4619      	mov	r1, r3
 800b72e:	4832      	ldr	r0, [pc, #200]	; (800b7f8 <HAL_DCMI_MspInit+0x178>)
 800b730:	f7fb fb8c 	bl	8006e4c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b738:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b73a:	2302      	movs	r3, #2
 800b73c:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b73e:	2300      	movs	r3, #0
 800b740:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b742:	2300      	movs	r3, #0
 800b744:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b746:	230d      	movs	r3, #13
 800b748:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b74a:	f107 030c 	add.w	r3, r7, #12
 800b74e:	4619      	mov	r1, r3
 800b750:	482a      	ldr	r0, [pc, #168]	; (800b7fc <HAL_DCMI_MspInit+0x17c>)
 800b752:	f7fb fb7b 	bl	8006e4c <HAL_GPIO_Init>

	    /* DCMI DMA Init */
	    /* DCMI Init */
	    hdma_dcmi.Instance = DMA2_Stream1;
 800b756:	4b2a      	ldr	r3, [pc, #168]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b758:	4a2a      	ldr	r2, [pc, #168]	; (800b804 <HAL_DCMI_MspInit+0x184>)
 800b75a:	601a      	str	r2, [r3, #0]
	    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800b75c:	4b28      	ldr	r3, [pc, #160]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b75e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b762:	605a      	str	r2, [r3, #4]
	    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b764:	4b26      	ldr	r3, [pc, #152]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b766:	2200      	movs	r2, #0
 800b768:	609a      	str	r2, [r3, #8]
	    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800b76a:	4b25      	ldr	r3, [pc, #148]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	60da      	str	r2, [r3, #12]
	    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800b770:	4b23      	ldr	r3, [pc, #140]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b776:	611a      	str	r2, [r3, #16]
	    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b778:	4b21      	ldr	r3, [pc, #132]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b77a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b77e:	615a      	str	r2, [r3, #20]
	    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b780:	4b1f      	ldr	r3, [pc, #124]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b786:	619a      	str	r2, [r3, #24]
	    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800b788:	4b1d      	ldr	r3, [pc, #116]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b78a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b78e:	61da      	str	r2, [r3, #28]
	    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800b790:	4b1b      	ldr	r3, [pc, #108]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b792:	2200      	movs	r2, #0
 800b794:	621a      	str	r2, [r3, #32]
	    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b796:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b798:	2204      	movs	r2, #4
 800b79a:	625a      	str	r2, [r3, #36]	; 0x24
	    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b79c:	4b18      	ldr	r3, [pc, #96]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b79e:	2203      	movs	r2, #3
 800b7a0:	629a      	str	r2, [r3, #40]	; 0x28
	    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800b7a2:	4b17      	ldr	r3, [pc, #92]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	62da      	str	r2, [r3, #44]	; 0x2c
	    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	631a      	str	r2, [r3, #48]	; 0x30
	    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800b7ae:	4814      	ldr	r0, [pc, #80]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b7b0:	f7f9 fdbc 	bl	800532c <HAL_DMA_Init>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <HAL_DCMI_MspInit+0x13e>
	    {
	    	Error_Handler();
 800b7ba:	f7ff fbdd 	bl	800af78 <Error_Handler>
	    }

	    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a0f      	ldr	r2, [pc, #60]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b7c2:	639a      	str	r2, [r3, #56]	; 0x38
 800b7c4:	4a0e      	ldr	r2, [pc, #56]	; (800b800 <HAL_DCMI_MspInit+0x180>)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6393      	str	r3, [r2, #56]	; 0x38

	    /* DCMI interrupt Init */
	    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	204e      	movs	r0, #78	; 0x4e
 800b7d0:	f7f9 faa3 	bl	8004d1a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800b7d4:	204e      	movs	r0, #78	; 0x4e
 800b7d6:	f7f9 fabc 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800b7da:	bf00      	nop
 800b7dc:	3720      	adds	r7, #32
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	50050000 	.word	0x50050000
 800b7e8:	40023800 	.word	0x40023800
 800b7ec:	40020000 	.word	0x40020000
 800b7f0:	40021400 	.word	0x40021400
 800b7f4:	40021c00 	.word	0x40021c00
 800b7f8:	40022000 	.word	0x40022000
 800b7fc:	40021800 	.word	0x40021800
 800b800:	2000b4d8 	.word	0x2000b4d8
 800b804:	40026428 	.word	0x40026428

0800b808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	  if(hi2c->Instance==I2C2)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a12      	ldr	r2, [pc, #72]	; (800b860 <HAL_I2C_MspInit+0x58>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d11e      	bne.n	800b858 <HAL_I2C_MspInit+0x50>

	    /**I2C2 GPIO Configuration
	    PB10     ------> I2C2_SCL
	    PB11     ------> I2C2_SDA
	    */
	    GPIO_InitStruct.Pin = I2C_SIOC_Pin|I2C_SIOD_Pin;
 800b81a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b81e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b820:	2312      	movs	r3, #18
 800b822:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b824:	2301      	movs	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b828:	2300      	movs	r3, #0
 800b82a:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b82c:	2304      	movs	r3, #4
 800b82e:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b830:	f107 030c 	add.w	r3, r7, #12
 800b834:	4619      	mov	r1, r3
 800b836:	480b      	ldr	r0, [pc, #44]	; (800b864 <HAL_I2C_MspInit+0x5c>)
 800b838:	f7fb fb08 	bl	8006e4c <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_I2C2_CLK_ENABLE();
 800b83c:	2300      	movs	r3, #0
 800b83e:	60bb      	str	r3, [r7, #8]
 800b840:	4b09      	ldr	r3, [pc, #36]	; (800b868 <HAL_I2C_MspInit+0x60>)
 800b842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b844:	4a08      	ldr	r2, [pc, #32]	; (800b868 <HAL_I2C_MspInit+0x60>)
 800b846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b84a:	6413      	str	r3, [r2, #64]	; 0x40
 800b84c:	4b06      	ldr	r3, [pc, #24]	; (800b868 <HAL_I2C_MspInit+0x60>)
 800b84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b854:	60bb      	str	r3, [r7, #8]
 800b856:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b858:	bf00      	nop
 800b85a:	3720      	adds	r7, #32
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	40005800 	.word	0x40005800
 800b864:	40020400 	.word	0x40020400
 800b868:	40023800 	.word	0x40023800

0800b86c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08a      	sub	sp, #40	; 0x28
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b874:	f107 0314 	add.w	r3, r7, #20
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	605a      	str	r2, [r3, #4]
 800b87e:	609a      	str	r2, [r3, #8]
 800b880:	60da      	str	r2, [r3, #12]
 800b882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a19      	ldr	r2, [pc, #100]	; (800b8f0 <HAL_UART_MspInit+0x84>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d12c      	bne.n	800b8e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b88e:	2300      	movs	r3, #0
 800b890:	613b      	str	r3, [r7, #16]
 800b892:	4b18      	ldr	r3, [pc, #96]	; (800b8f4 <HAL_UART_MspInit+0x88>)
 800b894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b896:	4a17      	ldr	r2, [pc, #92]	; (800b8f4 <HAL_UART_MspInit+0x88>)
 800b898:	f043 0310 	orr.w	r3, r3, #16
 800b89c:	6453      	str	r3, [r2, #68]	; 0x44
 800b89e:	4b15      	ldr	r3, [pc, #84]	; (800b8f4 <HAL_UART_MspInit+0x88>)
 800b8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a2:	f003 0310 	and.w	r3, r3, #16
 800b8a6:	613b      	str	r3, [r7, #16]
 800b8a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60fb      	str	r3, [r7, #12]
 800b8ae:	4b11      	ldr	r3, [pc, #68]	; (800b8f4 <HAL_UART_MspInit+0x88>)
 800b8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b2:	4a10      	ldr	r2, [pc, #64]	; (800b8f4 <HAL_UART_MspInit+0x88>)
 800b8b4:	f043 0301 	orr.w	r3, r3, #1
 800b8b8:	6313      	str	r3, [r2, #48]	; 0x30
 800b8ba:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <HAL_UART_MspInit+0x88>)
 800b8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b8c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b8ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b8d8:	2307      	movs	r3, #7
 800b8da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8dc:	f107 0314 	add.w	r3, r7, #20
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4805      	ldr	r0, [pc, #20]	; (800b8f8 <HAL_UART_MspInit+0x8c>)
 800b8e4:	f7fb fab2 	bl	8006e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b8e8:	bf00      	nop
 800b8ea:	3728      	adds	r7, #40	; 0x28
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	40011000 	.word	0x40011000
 800b8f4:	40023800 	.word	0x40023800
 800b8f8:	40020000 	.word	0x40020000

0800b8fc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b902:	1d3b      	adds	r3, r7, #4
 800b904:	2200      	movs	r2, #0
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	605a      	str	r2, [r3, #4]
 800b90a:	609a      	str	r2, [r3, #8]
 800b90c:	60da      	str	r2, [r3, #12]
 800b90e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800b910:	4b2c      	ldr	r3, [pc, #176]	; (800b9c4 <HAL_FSMC_MspInit+0xc8>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d151      	bne.n	800b9bc <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800b918:	4b2a      	ldr	r3, [pc, #168]	; (800b9c4 <HAL_FSMC_MspInit+0xc8>)
 800b91a:	2201      	movs	r2, #1
 800b91c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800b91e:	2300      	movs	r3, #0
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	4b29      	ldr	r3, [pc, #164]	; (800b9c8 <HAL_FSMC_MspInit+0xcc>)
 800b924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b926:	4a28      	ldr	r2, [pc, #160]	; (800b9c8 <HAL_FSMC_MspInit+0xcc>)
 800b928:	f043 0301 	orr.w	r3, r3, #1
 800b92c:	6393      	str	r3, [r2, #56]	; 0x38
 800b92e:	4b26      	ldr	r3, [pc, #152]	; (800b9c8 <HAL_FSMC_MspInit+0xcc>)
 800b930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	603b      	str	r3, [r7, #0]
 800b938:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b93a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800b93e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b940:	2302      	movs	r3, #2
 800b942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b944:	2300      	movs	r3, #0
 800b946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b948:	2303      	movs	r3, #3
 800b94a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800b94c:	230c      	movs	r3, #12
 800b94e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b950:	1d3b      	adds	r3, r7, #4
 800b952:	4619      	mov	r1, r3
 800b954:	481d      	ldr	r0, [pc, #116]	; (800b9cc <HAL_FSMC_MspInit+0xd0>)
 800b956:	f7fb fa79 	bl	8006e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b95a:	f240 433f 	movw	r3, #1087	; 0x43f
 800b95e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b960:	2302      	movs	r3, #2
 800b962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b964:	2300      	movs	r3, #0
 800b966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b968:	2303      	movs	r3, #3
 800b96a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800b96c:	230c      	movs	r3, #12
 800b96e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b970:	1d3b      	adds	r3, r7, #4
 800b972:	4619      	mov	r1, r3
 800b974:	4816      	ldr	r0, [pc, #88]	; (800b9d0 <HAL_FSMC_MspInit+0xd4>)
 800b976:	f7fb fa69 	bl	8006e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800b97a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b97e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b980:	2302      	movs	r3, #2
 800b982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b988:	2303      	movs	r3, #3
 800b98a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800b98c:	230c      	movs	r3, #12
 800b98e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b990:	1d3b      	adds	r3, r7, #4
 800b992:	4619      	mov	r1, r3
 800b994:	480f      	ldr	r0, [pc, #60]	; (800b9d4 <HAL_FSMC_MspInit+0xd8>)
 800b996:	f7fb fa59 	bl	8006e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b99a:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 800b99e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800b9ac:	230c      	movs	r3, #12
 800b9ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b9b0:	1d3b      	adds	r3, r7, #4
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4808      	ldr	r0, [pc, #32]	; (800b9d8 <HAL_FSMC_MspInit+0xdc>)
 800b9b6:	f7fb fa49 	bl	8006e4c <HAL_GPIO_Init>
 800b9ba:	e000      	b.n	800b9be <HAL_FSMC_MspInit+0xc2>
    return;
 800b9bc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20001b50 	.word	0x20001b50
 800b9c8:	40023800 	.word	0x40023800
 800b9cc:	40021400 	.word	0x40021400
 800b9d0:	40021800 	.word	0x40021800
 800b9d4:	40021000 	.word	0x40021000
 800b9d8:	40020c00 	.word	0x40020c00

0800b9dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800b9e4:	f7ff ff8a 	bl	800b8fc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b9f4:	bf00      	nop
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ba02:	e7fe      	b.n	800ba02 <HardFault_Handler+0x4>

0800ba04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ba04:	b480      	push	{r7}
 800ba06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ba08:	e7fe      	b.n	800ba08 <MemManage_Handler+0x4>

0800ba0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ba0e:	e7fe      	b.n	800ba0e <BusFault_Handler+0x4>

0800ba10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ba10:	b480      	push	{r7}
 800ba12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ba14:	e7fe      	b.n	800ba14 <UsageFault_Handler+0x4>

0800ba16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ba16:	b480      	push	{r7}
 800ba18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ba1a:	bf00      	nop
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ba24:	b480      	push	{r7}
 800ba26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ba28:	bf00      	nop
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ba32:	b480      	push	{r7}
 800ba34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ba36:	bf00      	nop
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ba44:	f7f9 f84c 	bl	8004ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ba48:	bf00      	nop
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800ba50:	4802      	ldr	r0, [pc, #8]	; (800ba5c <DMA2_Stream1_IRQHandler+0x10>)
 800ba52:	f7f9 fe0b 	bl	800566c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800ba56:	bf00      	nop
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	2000b4d8 	.word	0x2000b4d8

0800ba60 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800ba64:	4802      	ldr	r0, [pc, #8]	; (800ba70 <DCMI_IRQHandler+0x10>)
 800ba66:	f7f9 fac7 	bl	8004ff8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800ba6a:	bf00      	nop
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	2000b588 	.word	0x2000b588

0800ba74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba80:	2300      	movs	r3, #0
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e00a      	b.n	800ba9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ba86:	f3af 8000 	nop.w
 800ba8a:	4601      	mov	r1, r0
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	60ba      	str	r2, [r7, #8]
 800ba92:	b2ca      	uxtb	r2, r1
 800ba94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	697a      	ldr	r2, [r7, #20]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	dbf0      	blt.n	800ba86 <_read+0x12>
	}

return len;
 800baa4:	687b      	ldr	r3, [r7, #4]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b086      	sub	sp, #24
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800baba:	2300      	movs	r3, #0
 800babc:	617b      	str	r3, [r7, #20]
 800babe:	e009      	b.n	800bad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	60ba      	str	r2, [r7, #8]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff fa43 	bl	800af54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	3301      	adds	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	429a      	cmp	r2, r3
 800bada:	dbf1      	blt.n	800bac0 <_write+0x12>
	}
	return len;
 800badc:	687b      	ldr	r3, [r7, #4]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <_close>:

int _close(int file)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
	return -1;
 800baee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bb0e:	605a      	str	r2, [r3, #4]
	return 0;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <_isatty>:

int _isatty(int file)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
	return 1;
 800bb26:	2301      	movs	r3, #1
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
	return 0;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
	...

0800bb50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bb58:	4b11      	ldr	r3, [pc, #68]	; (800bba0 <_sbrk+0x50>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d102      	bne.n	800bb66 <_sbrk+0x16>
		heap_end = &end;
 800bb60:	4b0f      	ldr	r3, [pc, #60]	; (800bba0 <_sbrk+0x50>)
 800bb62:	4a10      	ldr	r2, [pc, #64]	; (800bba4 <_sbrk+0x54>)
 800bb64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800bb66:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <_sbrk+0x50>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800bb6c:	4b0c      	ldr	r3, [pc, #48]	; (800bba0 <_sbrk+0x50>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4413      	add	r3, r2
 800bb74:	466a      	mov	r2, sp
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d907      	bls.n	800bb8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800bb7a:	f000 f87d 	bl	800bc78 <__errno>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	230c      	movs	r3, #12
 800bb82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800bb84:	f04f 33ff 	mov.w	r3, #4294967295
 800bb88:	e006      	b.n	800bb98 <_sbrk+0x48>
	}

	heap_end += incr;
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <_sbrk+0x50>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	4a03      	ldr	r2, [pc, #12]	; (800bba0 <_sbrk+0x50>)
 800bb94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800bb96:	68fb      	ldr	r3, [r7, #12]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20001b54 	.word	0x20001b54
 800bba4:	200103f0 	.word	0x200103f0

0800bba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bbac:	4b18      	ldr	r3, [pc, #96]	; (800bc10 <SystemInit+0x68>)
 800bbae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbb2:	4a17      	ldr	r2, [pc, #92]	; (800bc10 <SystemInit+0x68>)
 800bbb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bbbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bbc0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800bbc4:	4b13      	ldr	r3, [pc, #76]	; (800bc14 <SystemInit+0x6c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a12      	ldr	r2, [pc, #72]	; (800bc14 <SystemInit+0x6c>)
 800bbca:	f043 0301 	orr.w	r3, r3, #1
 800bbce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bbd0:	4b10      	ldr	r3, [pc, #64]	; (800bc14 <SystemInit+0x6c>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bbd6:	4b0f      	ldr	r3, [pc, #60]	; (800bc14 <SystemInit+0x6c>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a0e      	ldr	r2, [pc, #56]	; (800bc14 <SystemInit+0x6c>)
 800bbdc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bbe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbe4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800bbe6:	4b0b      	ldr	r3, [pc, #44]	; (800bc14 <SystemInit+0x6c>)
 800bbe8:	4a0b      	ldr	r2, [pc, #44]	; (800bc18 <SystemInit+0x70>)
 800bbea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800bbec:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <SystemInit+0x6c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a08      	ldr	r2, [pc, #32]	; (800bc14 <SystemInit+0x6c>)
 800bbf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbf6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800bbf8:	4b06      	ldr	r3, [pc, #24]	; (800bc14 <SystemInit+0x6c>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bbfe:	4b04      	ldr	r3, [pc, #16]	; (800bc10 <SystemInit+0x68>)
 800bc00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bc04:	609a      	str	r2, [r3, #8]
#endif
}
 800bc06:	bf00      	nop
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	e000ed00 	.word	0xe000ed00
 800bc14:	40023800 	.word	0x40023800
 800bc18:	24003010 	.word	0x24003010

0800bc1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800bc1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bc54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bc20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bc22:	e003      	b.n	800bc2c <LoopCopyDataInit>

0800bc24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bc24:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bc26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bc28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bc2a:	3104      	adds	r1, #4

0800bc2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bc2c:	480b      	ldr	r0, [pc, #44]	; (800bc5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bc2e:	4b0c      	ldr	r3, [pc, #48]	; (800bc60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bc30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bc32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bc34:	d3f6      	bcc.n	800bc24 <CopyDataInit>
  ldr  r2, =_sbss
 800bc36:	4a0b      	ldr	r2, [pc, #44]	; (800bc64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bc38:	e002      	b.n	800bc40 <LoopFillZerobss>

0800bc3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bc3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bc3c:	f842 3b04 	str.w	r3, [r2], #4

0800bc40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bc40:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bc42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bc44:	d3f9      	bcc.n	800bc3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bc46:	f7ff ffaf 	bl	800bba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bc4a:	f000 f81b 	bl	800bc84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bc4e:	f7fe fb1b 	bl	800a288 <main>
  bx  lr    
 800bc52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bc54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bc58:	08076a88 	.word	0x08076a88
  ldr  r0, =_sdata
 800bc5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bc60:	2000064c 	.word	0x2000064c
  ldr  r2, =_sbss
 800bc64:	2000064c 	.word	0x2000064c
  ldr  r3, = _ebss
 800bc68:	200103ec 	.word	0x200103ec

0800bc6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bc6c:	e7fe      	b.n	800bc6c <ADC_IRQHandler>

0800bc6e <__aeabi_memclr>:
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f7f7 bf1e 	b.w	8003ab0 <__aeabi_memset>

0800bc74 <__aeabi_memcpy>:
 800bc74:	f000 b839 	b.w	800bcea <memcpy>

0800bc78 <__errno>:
 800bc78:	4b01      	ldr	r3, [pc, #4]	; (800bc80 <__errno+0x8>)
 800bc7a:	6818      	ldr	r0, [r3, #0]
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	20000478 	.word	0x20000478

0800bc84 <__libc_init_array>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	4e0d      	ldr	r6, [pc, #52]	; (800bcbc <__libc_init_array+0x38>)
 800bc88:	4c0d      	ldr	r4, [pc, #52]	; (800bcc0 <__libc_init_array+0x3c>)
 800bc8a:	1ba4      	subs	r4, r4, r6
 800bc8c:	10a4      	asrs	r4, r4, #2
 800bc8e:	2500      	movs	r5, #0
 800bc90:	42a5      	cmp	r5, r4
 800bc92:	d109      	bne.n	800bca8 <__libc_init_array+0x24>
 800bc94:	4e0b      	ldr	r6, [pc, #44]	; (800bcc4 <__libc_init_array+0x40>)
 800bc96:	4c0c      	ldr	r4, [pc, #48]	; (800bcc8 <__libc_init_array+0x44>)
 800bc98:	f005 fbf2 	bl	8011480 <_init>
 800bc9c:	1ba4      	subs	r4, r4, r6
 800bc9e:	10a4      	asrs	r4, r4, #2
 800bca0:	2500      	movs	r5, #0
 800bca2:	42a5      	cmp	r5, r4
 800bca4:	d105      	bne.n	800bcb2 <__libc_init_array+0x2e>
 800bca6:	bd70      	pop	{r4, r5, r6, pc}
 800bca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bcac:	4798      	blx	r3
 800bcae:	3501      	adds	r5, #1
 800bcb0:	e7ee      	b.n	800bc90 <__libc_init_array+0xc>
 800bcb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bcb6:	4798      	blx	r3
 800bcb8:	3501      	adds	r5, #1
 800bcba:	e7f2      	b.n	800bca2 <__libc_init_array+0x1e>
 800bcbc:	08076a80 	.word	0x08076a80
 800bcc0:	08076a80 	.word	0x08076a80
 800bcc4:	08076a80 	.word	0x08076a80
 800bcc8:	08076a84 	.word	0x08076a84

0800bccc <memcmp>:
 800bccc:	b530      	push	{r4, r5, lr}
 800bcce:	2400      	movs	r4, #0
 800bcd0:	42a2      	cmp	r2, r4
 800bcd2:	d101      	bne.n	800bcd8 <memcmp+0xc>
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	e007      	b.n	800bce8 <memcmp+0x1c>
 800bcd8:	5d03      	ldrb	r3, [r0, r4]
 800bcda:	3401      	adds	r4, #1
 800bcdc:	190d      	adds	r5, r1, r4
 800bcde:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	d0f4      	beq.n	800bcd0 <memcmp+0x4>
 800bce6:	1b58      	subs	r0, r3, r5
 800bce8:	bd30      	pop	{r4, r5, pc}

0800bcea <memcpy>:
 800bcea:	b510      	push	{r4, lr}
 800bcec:	1e43      	subs	r3, r0, #1
 800bcee:	440a      	add	r2, r1
 800bcf0:	4291      	cmp	r1, r2
 800bcf2:	d100      	bne.n	800bcf6 <memcpy+0xc>
 800bcf4:	bd10      	pop	{r4, pc}
 800bcf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcfe:	e7f7      	b.n	800bcf0 <memcpy+0x6>

0800bd00 <memset>:
 800bd00:	4402      	add	r2, r0
 800bd02:	4603      	mov	r3, r0
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d100      	bne.n	800bd0a <memset+0xa>
 800bd08:	4770      	bx	lr
 800bd0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd0e:	e7f9      	b.n	800bd04 <memset+0x4>

0800bd10 <__cvt>:
 800bd10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd14:	ec55 4b10 	vmov	r4, r5, d0
 800bd18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bd1a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd1e:	2d00      	cmp	r5, #0
 800bd20:	460e      	mov	r6, r1
 800bd22:	4691      	mov	r9, r2
 800bd24:	4619      	mov	r1, r3
 800bd26:	bfb8      	it	lt
 800bd28:	4622      	movlt	r2, r4
 800bd2a:	462b      	mov	r3, r5
 800bd2c:	f027 0720 	bic.w	r7, r7, #32
 800bd30:	bfbb      	ittet	lt
 800bd32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd36:	461d      	movlt	r5, r3
 800bd38:	2300      	movge	r3, #0
 800bd3a:	232d      	movlt	r3, #45	; 0x2d
 800bd3c:	bfb8      	it	lt
 800bd3e:	4614      	movlt	r4, r2
 800bd40:	2f46      	cmp	r7, #70	; 0x46
 800bd42:	700b      	strb	r3, [r1, #0]
 800bd44:	d004      	beq.n	800bd50 <__cvt+0x40>
 800bd46:	2f45      	cmp	r7, #69	; 0x45
 800bd48:	d100      	bne.n	800bd4c <__cvt+0x3c>
 800bd4a:	3601      	adds	r6, #1
 800bd4c:	2102      	movs	r1, #2
 800bd4e:	e000      	b.n	800bd52 <__cvt+0x42>
 800bd50:	2103      	movs	r1, #3
 800bd52:	ab03      	add	r3, sp, #12
 800bd54:	9301      	str	r3, [sp, #4]
 800bd56:	ab02      	add	r3, sp, #8
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	4632      	mov	r2, r6
 800bd5c:	4653      	mov	r3, sl
 800bd5e:	ec45 4b10 	vmov	d0, r4, r5
 800bd62:	f001 fec5 	bl	800daf0 <_dtoa_r>
 800bd66:	2f47      	cmp	r7, #71	; 0x47
 800bd68:	4680      	mov	r8, r0
 800bd6a:	d102      	bne.n	800bd72 <__cvt+0x62>
 800bd6c:	f019 0f01 	tst.w	r9, #1
 800bd70:	d026      	beq.n	800bdc0 <__cvt+0xb0>
 800bd72:	2f46      	cmp	r7, #70	; 0x46
 800bd74:	eb08 0906 	add.w	r9, r8, r6
 800bd78:	d111      	bne.n	800bd9e <__cvt+0x8e>
 800bd7a:	f898 3000 	ldrb.w	r3, [r8]
 800bd7e:	2b30      	cmp	r3, #48	; 0x30
 800bd80:	d10a      	bne.n	800bd98 <__cvt+0x88>
 800bd82:	2200      	movs	r2, #0
 800bd84:	2300      	movs	r3, #0
 800bd86:	4620      	mov	r0, r4
 800bd88:	4629      	mov	r1, r5
 800bd8a:	f7f8 fb5d 	bl	8004448 <__aeabi_dcmpeq>
 800bd8e:	b918      	cbnz	r0, 800bd98 <__cvt+0x88>
 800bd90:	f1c6 0601 	rsb	r6, r6, #1
 800bd94:	f8ca 6000 	str.w	r6, [sl]
 800bd98:	f8da 3000 	ldr.w	r3, [sl]
 800bd9c:	4499      	add	r9, r3
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2300      	movs	r3, #0
 800bda2:	4620      	mov	r0, r4
 800bda4:	4629      	mov	r1, r5
 800bda6:	f7f8 fb4f 	bl	8004448 <__aeabi_dcmpeq>
 800bdaa:	b938      	cbnz	r0, 800bdbc <__cvt+0xac>
 800bdac:	2230      	movs	r2, #48	; 0x30
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	454b      	cmp	r3, r9
 800bdb2:	d205      	bcs.n	800bdc0 <__cvt+0xb0>
 800bdb4:	1c59      	adds	r1, r3, #1
 800bdb6:	9103      	str	r1, [sp, #12]
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	e7f8      	b.n	800bdae <__cvt+0x9e>
 800bdbc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bdc0:	9b03      	ldr	r3, [sp, #12]
 800bdc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdc4:	eba3 0308 	sub.w	r3, r3, r8
 800bdc8:	4640      	mov	r0, r8
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	b004      	add	sp, #16
 800bdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bdd2 <__exponent>:
 800bdd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdd4:	2900      	cmp	r1, #0
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	bfba      	itte	lt
 800bdda:	4249      	neglt	r1, r1
 800bddc:	232d      	movlt	r3, #45	; 0x2d
 800bdde:	232b      	movge	r3, #43	; 0x2b
 800bde0:	2909      	cmp	r1, #9
 800bde2:	f804 2b02 	strb.w	r2, [r4], #2
 800bde6:	7043      	strb	r3, [r0, #1]
 800bde8:	dd20      	ble.n	800be2c <__exponent+0x5a>
 800bdea:	f10d 0307 	add.w	r3, sp, #7
 800bdee:	461f      	mov	r7, r3
 800bdf0:	260a      	movs	r6, #10
 800bdf2:	fb91 f5f6 	sdiv	r5, r1, r6
 800bdf6:	fb06 1115 	mls	r1, r6, r5, r1
 800bdfa:	3130      	adds	r1, #48	; 0x30
 800bdfc:	2d09      	cmp	r5, #9
 800bdfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be02:	f103 32ff 	add.w	r2, r3, #4294967295
 800be06:	4629      	mov	r1, r5
 800be08:	dc09      	bgt.n	800be1e <__exponent+0x4c>
 800be0a:	3130      	adds	r1, #48	; 0x30
 800be0c:	3b02      	subs	r3, #2
 800be0e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800be12:	42bb      	cmp	r3, r7
 800be14:	4622      	mov	r2, r4
 800be16:	d304      	bcc.n	800be22 <__exponent+0x50>
 800be18:	1a10      	subs	r0, r2, r0
 800be1a:	b003      	add	sp, #12
 800be1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be1e:	4613      	mov	r3, r2
 800be20:	e7e7      	b.n	800bdf2 <__exponent+0x20>
 800be22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be26:	f804 2b01 	strb.w	r2, [r4], #1
 800be2a:	e7f2      	b.n	800be12 <__exponent+0x40>
 800be2c:	2330      	movs	r3, #48	; 0x30
 800be2e:	4419      	add	r1, r3
 800be30:	7083      	strb	r3, [r0, #2]
 800be32:	1d02      	adds	r2, r0, #4
 800be34:	70c1      	strb	r1, [r0, #3]
 800be36:	e7ef      	b.n	800be18 <__exponent+0x46>

0800be38 <_printf_float>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	b08d      	sub	sp, #52	; 0x34
 800be3e:	460c      	mov	r4, r1
 800be40:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800be44:	4616      	mov	r6, r2
 800be46:	461f      	mov	r7, r3
 800be48:	4605      	mov	r5, r0
 800be4a:	f003 f8af 	bl	800efac <_localeconv_r>
 800be4e:	6803      	ldr	r3, [r0, #0]
 800be50:	9304      	str	r3, [sp, #16]
 800be52:	4618      	mov	r0, r3
 800be54:	f7f7 fe79 	bl	8003b4a <strlen>
 800be58:	2300      	movs	r3, #0
 800be5a:	930a      	str	r3, [sp, #40]	; 0x28
 800be5c:	f8d8 3000 	ldr.w	r3, [r8]
 800be60:	9005      	str	r0, [sp, #20]
 800be62:	3307      	adds	r3, #7
 800be64:	f023 0307 	bic.w	r3, r3, #7
 800be68:	f103 0208 	add.w	r2, r3, #8
 800be6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800be70:	f8d4 b000 	ldr.w	fp, [r4]
 800be74:	f8c8 2000 	str.w	r2, [r8]
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be80:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be88:	9307      	str	r3, [sp, #28]
 800be8a:	f8cd 8018 	str.w	r8, [sp, #24]
 800be8e:	f04f 32ff 	mov.w	r2, #4294967295
 800be92:	4ba7      	ldr	r3, [pc, #668]	; (800c130 <_printf_float+0x2f8>)
 800be94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be98:	f7f8 fb08 	bl	80044ac <__aeabi_dcmpun>
 800be9c:	bb70      	cbnz	r0, 800befc <_printf_float+0xc4>
 800be9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bea2:	4ba3      	ldr	r3, [pc, #652]	; (800c130 <_printf_float+0x2f8>)
 800bea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bea8:	f7f8 fae2 	bl	8004470 <__aeabi_dcmple>
 800beac:	bb30      	cbnz	r0, 800befc <_printf_float+0xc4>
 800beae:	2200      	movs	r2, #0
 800beb0:	2300      	movs	r3, #0
 800beb2:	4640      	mov	r0, r8
 800beb4:	4649      	mov	r1, r9
 800beb6:	f7f8 fad1 	bl	800445c <__aeabi_dcmplt>
 800beba:	b110      	cbz	r0, 800bec2 <_printf_float+0x8a>
 800bebc:	232d      	movs	r3, #45	; 0x2d
 800bebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec2:	4a9c      	ldr	r2, [pc, #624]	; (800c134 <_printf_float+0x2fc>)
 800bec4:	4b9c      	ldr	r3, [pc, #624]	; (800c138 <_printf_float+0x300>)
 800bec6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800beca:	bf8c      	ite	hi
 800becc:	4690      	movhi	r8, r2
 800bece:	4698      	movls	r8, r3
 800bed0:	2303      	movs	r3, #3
 800bed2:	f02b 0204 	bic.w	r2, fp, #4
 800bed6:	6123      	str	r3, [r4, #16]
 800bed8:	6022      	str	r2, [r4, #0]
 800beda:	f04f 0900 	mov.w	r9, #0
 800bede:	9700      	str	r7, [sp, #0]
 800bee0:	4633      	mov	r3, r6
 800bee2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bee4:	4621      	mov	r1, r4
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f9e6 	bl	800c2b8 <_printf_common>
 800beec:	3001      	adds	r0, #1
 800beee:	f040 808d 	bne.w	800c00c <_printf_float+0x1d4>
 800bef2:	f04f 30ff 	mov.w	r0, #4294967295
 800bef6:	b00d      	add	sp, #52	; 0x34
 800bef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befc:	4642      	mov	r2, r8
 800befe:	464b      	mov	r3, r9
 800bf00:	4640      	mov	r0, r8
 800bf02:	4649      	mov	r1, r9
 800bf04:	f7f8 fad2 	bl	80044ac <__aeabi_dcmpun>
 800bf08:	b110      	cbz	r0, 800bf10 <_printf_float+0xd8>
 800bf0a:	4a8c      	ldr	r2, [pc, #560]	; (800c13c <_printf_float+0x304>)
 800bf0c:	4b8c      	ldr	r3, [pc, #560]	; (800c140 <_printf_float+0x308>)
 800bf0e:	e7da      	b.n	800bec6 <_printf_float+0x8e>
 800bf10:	6861      	ldr	r1, [r4, #4]
 800bf12:	1c4b      	adds	r3, r1, #1
 800bf14:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bf18:	a80a      	add	r0, sp, #40	; 0x28
 800bf1a:	d13e      	bne.n	800bf9a <_printf_float+0x162>
 800bf1c:	2306      	movs	r3, #6
 800bf1e:	6063      	str	r3, [r4, #4]
 800bf20:	2300      	movs	r3, #0
 800bf22:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bf26:	ab09      	add	r3, sp, #36	; 0x24
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	ec49 8b10 	vmov	d0, r8, r9
 800bf2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf32:	6022      	str	r2, [r4, #0]
 800bf34:	f8cd a004 	str.w	sl, [sp, #4]
 800bf38:	6861      	ldr	r1, [r4, #4]
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f7ff fee8 	bl	800bd10 <__cvt>
 800bf40:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bf44:	2b47      	cmp	r3, #71	; 0x47
 800bf46:	4680      	mov	r8, r0
 800bf48:	d109      	bne.n	800bf5e <_printf_float+0x126>
 800bf4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf4c:	1cd8      	adds	r0, r3, #3
 800bf4e:	db02      	blt.n	800bf56 <_printf_float+0x11e>
 800bf50:	6862      	ldr	r2, [r4, #4]
 800bf52:	4293      	cmp	r3, r2
 800bf54:	dd47      	ble.n	800bfe6 <_printf_float+0x1ae>
 800bf56:	f1aa 0a02 	sub.w	sl, sl, #2
 800bf5a:	fa5f fa8a 	uxtb.w	sl, sl
 800bf5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bf62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf64:	d824      	bhi.n	800bfb0 <_printf_float+0x178>
 800bf66:	3901      	subs	r1, #1
 800bf68:	4652      	mov	r2, sl
 800bf6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf6e:	9109      	str	r1, [sp, #36]	; 0x24
 800bf70:	f7ff ff2f 	bl	800bdd2 <__exponent>
 800bf74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf76:	1813      	adds	r3, r2, r0
 800bf78:	2a01      	cmp	r2, #1
 800bf7a:	4681      	mov	r9, r0
 800bf7c:	6123      	str	r3, [r4, #16]
 800bf7e:	dc02      	bgt.n	800bf86 <_printf_float+0x14e>
 800bf80:	6822      	ldr	r2, [r4, #0]
 800bf82:	07d1      	lsls	r1, r2, #31
 800bf84:	d501      	bpl.n	800bf8a <_printf_float+0x152>
 800bf86:	3301      	adds	r3, #1
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0a5      	beq.n	800bede <_printf_float+0xa6>
 800bf92:	232d      	movs	r3, #45	; 0x2d
 800bf94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf98:	e7a1      	b.n	800bede <_printf_float+0xa6>
 800bf9a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bf9e:	f000 8177 	beq.w	800c290 <_printf_float+0x458>
 800bfa2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bfa6:	d1bb      	bne.n	800bf20 <_printf_float+0xe8>
 800bfa8:	2900      	cmp	r1, #0
 800bfaa:	d1b9      	bne.n	800bf20 <_printf_float+0xe8>
 800bfac:	2301      	movs	r3, #1
 800bfae:	e7b6      	b.n	800bf1e <_printf_float+0xe6>
 800bfb0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bfb4:	d119      	bne.n	800bfea <_printf_float+0x1b2>
 800bfb6:	2900      	cmp	r1, #0
 800bfb8:	6863      	ldr	r3, [r4, #4]
 800bfba:	dd0c      	ble.n	800bfd6 <_printf_float+0x19e>
 800bfbc:	6121      	str	r1, [r4, #16]
 800bfbe:	b913      	cbnz	r3, 800bfc6 <_printf_float+0x18e>
 800bfc0:	6822      	ldr	r2, [r4, #0]
 800bfc2:	07d2      	lsls	r2, r2, #31
 800bfc4:	d502      	bpl.n	800bfcc <_printf_float+0x194>
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	440b      	add	r3, r1
 800bfca:	6123      	str	r3, [r4, #16]
 800bfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfce:	65a3      	str	r3, [r4, #88]	; 0x58
 800bfd0:	f04f 0900 	mov.w	r9, #0
 800bfd4:	e7d9      	b.n	800bf8a <_printf_float+0x152>
 800bfd6:	b913      	cbnz	r3, 800bfde <_printf_float+0x1a6>
 800bfd8:	6822      	ldr	r2, [r4, #0]
 800bfda:	07d0      	lsls	r0, r2, #31
 800bfdc:	d501      	bpl.n	800bfe2 <_printf_float+0x1aa>
 800bfde:	3302      	adds	r3, #2
 800bfe0:	e7f3      	b.n	800bfca <_printf_float+0x192>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e7f1      	b.n	800bfca <_printf_float+0x192>
 800bfe6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bfea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bfee:	4293      	cmp	r3, r2
 800bff0:	db05      	blt.n	800bffe <_printf_float+0x1c6>
 800bff2:	6822      	ldr	r2, [r4, #0]
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	07d1      	lsls	r1, r2, #31
 800bff8:	d5e8      	bpl.n	800bfcc <_printf_float+0x194>
 800bffa:	3301      	adds	r3, #1
 800bffc:	e7e5      	b.n	800bfca <_printf_float+0x192>
 800bffe:	2b00      	cmp	r3, #0
 800c000:	bfd4      	ite	le
 800c002:	f1c3 0302 	rsble	r3, r3, #2
 800c006:	2301      	movgt	r3, #1
 800c008:	4413      	add	r3, r2
 800c00a:	e7de      	b.n	800bfca <_printf_float+0x192>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	055a      	lsls	r2, r3, #21
 800c010:	d407      	bmi.n	800c022 <_printf_float+0x1ea>
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	4642      	mov	r2, r8
 800c016:	4631      	mov	r1, r6
 800c018:	4628      	mov	r0, r5
 800c01a:	47b8      	blx	r7
 800c01c:	3001      	adds	r0, #1
 800c01e:	d12b      	bne.n	800c078 <_printf_float+0x240>
 800c020:	e767      	b.n	800bef2 <_printf_float+0xba>
 800c022:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c026:	f240 80dc 	bls.w	800c1e2 <_printf_float+0x3aa>
 800c02a:	2200      	movs	r2, #0
 800c02c:	2300      	movs	r3, #0
 800c02e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c032:	f7f8 fa09 	bl	8004448 <__aeabi_dcmpeq>
 800c036:	2800      	cmp	r0, #0
 800c038:	d033      	beq.n	800c0a2 <_printf_float+0x26a>
 800c03a:	2301      	movs	r3, #1
 800c03c:	4a41      	ldr	r2, [pc, #260]	; (800c144 <_printf_float+0x30c>)
 800c03e:	4631      	mov	r1, r6
 800c040:	4628      	mov	r0, r5
 800c042:	47b8      	blx	r7
 800c044:	3001      	adds	r0, #1
 800c046:	f43f af54 	beq.w	800bef2 <_printf_float+0xba>
 800c04a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c04e:	429a      	cmp	r2, r3
 800c050:	db02      	blt.n	800c058 <_printf_float+0x220>
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	07d8      	lsls	r0, r3, #31
 800c056:	d50f      	bpl.n	800c078 <_printf_float+0x240>
 800c058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	47b8      	blx	r7
 800c062:	3001      	adds	r0, #1
 800c064:	f43f af45 	beq.w	800bef2 <_printf_float+0xba>
 800c068:	f04f 0800 	mov.w	r8, #0
 800c06c:	f104 091a 	add.w	r9, r4, #26
 800c070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c072:	3b01      	subs	r3, #1
 800c074:	4543      	cmp	r3, r8
 800c076:	dc09      	bgt.n	800c08c <_printf_float+0x254>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	079b      	lsls	r3, r3, #30
 800c07c:	f100 8103 	bmi.w	800c286 <_printf_float+0x44e>
 800c080:	68e0      	ldr	r0, [r4, #12]
 800c082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c084:	4298      	cmp	r0, r3
 800c086:	bfb8      	it	lt
 800c088:	4618      	movlt	r0, r3
 800c08a:	e734      	b.n	800bef6 <_printf_float+0xbe>
 800c08c:	2301      	movs	r3, #1
 800c08e:	464a      	mov	r2, r9
 800c090:	4631      	mov	r1, r6
 800c092:	4628      	mov	r0, r5
 800c094:	47b8      	blx	r7
 800c096:	3001      	adds	r0, #1
 800c098:	f43f af2b 	beq.w	800bef2 <_printf_float+0xba>
 800c09c:	f108 0801 	add.w	r8, r8, #1
 800c0a0:	e7e6      	b.n	800c070 <_printf_float+0x238>
 800c0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	dc2b      	bgt.n	800c100 <_printf_float+0x2c8>
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	4a26      	ldr	r2, [pc, #152]	; (800c144 <_printf_float+0x30c>)
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	47b8      	blx	r7
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	f43f af1d 	beq.w	800bef2 <_printf_float+0xba>
 800c0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ba:	b923      	cbnz	r3, 800c0c6 <_printf_float+0x28e>
 800c0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0be:	b913      	cbnz	r3, 800c0c6 <_printf_float+0x28e>
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	07d9      	lsls	r1, r3, #31
 800c0c4:	d5d8      	bpl.n	800c078 <_printf_float+0x240>
 800c0c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	47b8      	blx	r7
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	f43f af0e 	beq.w	800bef2 <_printf_float+0xba>
 800c0d6:	f04f 0900 	mov.w	r9, #0
 800c0da:	f104 0a1a 	add.w	sl, r4, #26
 800c0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e0:	425b      	negs	r3, r3
 800c0e2:	454b      	cmp	r3, r9
 800c0e4:	dc01      	bgt.n	800c0ea <_printf_float+0x2b2>
 800c0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e8:	e794      	b.n	800c014 <_printf_float+0x1dc>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	4652      	mov	r2, sl
 800c0ee:	4631      	mov	r1, r6
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	47b8      	blx	r7
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	f43f aefc 	beq.w	800bef2 <_printf_float+0xba>
 800c0fa:	f109 0901 	add.w	r9, r9, #1
 800c0fe:	e7ee      	b.n	800c0de <_printf_float+0x2a6>
 800c100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c104:	429a      	cmp	r2, r3
 800c106:	bfa8      	it	ge
 800c108:	461a      	movge	r2, r3
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	4691      	mov	r9, r2
 800c10e:	dd07      	ble.n	800c120 <_printf_float+0x2e8>
 800c110:	4613      	mov	r3, r2
 800c112:	4631      	mov	r1, r6
 800c114:	4642      	mov	r2, r8
 800c116:	4628      	mov	r0, r5
 800c118:	47b8      	blx	r7
 800c11a:	3001      	adds	r0, #1
 800c11c:	f43f aee9 	beq.w	800bef2 <_printf_float+0xba>
 800c120:	f104 031a 	add.w	r3, r4, #26
 800c124:	f04f 0b00 	mov.w	fp, #0
 800c128:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c12c:	9306      	str	r3, [sp, #24]
 800c12e:	e015      	b.n	800c15c <_printf_float+0x324>
 800c130:	7fefffff 	.word	0x7fefffff
 800c134:	08076714 	.word	0x08076714
 800c138:	08076710 	.word	0x08076710
 800c13c:	0807671c 	.word	0x0807671c
 800c140:	08076718 	.word	0x08076718
 800c144:	08076720 	.word	0x08076720
 800c148:	2301      	movs	r3, #1
 800c14a:	9a06      	ldr	r2, [sp, #24]
 800c14c:	4631      	mov	r1, r6
 800c14e:	4628      	mov	r0, r5
 800c150:	47b8      	blx	r7
 800c152:	3001      	adds	r0, #1
 800c154:	f43f aecd 	beq.w	800bef2 <_printf_float+0xba>
 800c158:	f10b 0b01 	add.w	fp, fp, #1
 800c15c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c160:	ebaa 0309 	sub.w	r3, sl, r9
 800c164:	455b      	cmp	r3, fp
 800c166:	dcef      	bgt.n	800c148 <_printf_float+0x310>
 800c168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c16c:	429a      	cmp	r2, r3
 800c16e:	44d0      	add	r8, sl
 800c170:	db15      	blt.n	800c19e <_printf_float+0x366>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	07da      	lsls	r2, r3, #31
 800c176:	d412      	bmi.n	800c19e <_printf_float+0x366>
 800c178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c17a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c17c:	eba3 020a 	sub.w	r2, r3, sl
 800c180:	eba3 0a01 	sub.w	sl, r3, r1
 800c184:	4592      	cmp	sl, r2
 800c186:	bfa8      	it	ge
 800c188:	4692      	movge	sl, r2
 800c18a:	f1ba 0f00 	cmp.w	sl, #0
 800c18e:	dc0e      	bgt.n	800c1ae <_printf_float+0x376>
 800c190:	f04f 0800 	mov.w	r8, #0
 800c194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c198:	f104 091a 	add.w	r9, r4, #26
 800c19c:	e019      	b.n	800c1d2 <_printf_float+0x39a>
 800c19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	47b8      	blx	r7
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d1e5      	bne.n	800c178 <_printf_float+0x340>
 800c1ac:	e6a1      	b.n	800bef2 <_printf_float+0xba>
 800c1ae:	4653      	mov	r3, sl
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	47b8      	blx	r7
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d1e9      	bne.n	800c190 <_printf_float+0x358>
 800c1bc:	e699      	b.n	800bef2 <_printf_float+0xba>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	464a      	mov	r2, r9
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	47b8      	blx	r7
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	f43f ae92 	beq.w	800bef2 <_printf_float+0xba>
 800c1ce:	f108 0801 	add.w	r8, r8, #1
 800c1d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1d6:	1a9b      	subs	r3, r3, r2
 800c1d8:	eba3 030a 	sub.w	r3, r3, sl
 800c1dc:	4543      	cmp	r3, r8
 800c1de:	dcee      	bgt.n	800c1be <_printf_float+0x386>
 800c1e0:	e74a      	b.n	800c078 <_printf_float+0x240>
 800c1e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1e4:	2a01      	cmp	r2, #1
 800c1e6:	dc01      	bgt.n	800c1ec <_printf_float+0x3b4>
 800c1e8:	07db      	lsls	r3, r3, #31
 800c1ea:	d53a      	bpl.n	800c262 <_printf_float+0x42a>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	4642      	mov	r2, r8
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	47b8      	blx	r7
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	f43f ae7b 	beq.w	800bef2 <_printf_float+0xba>
 800c1fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c200:	4631      	mov	r1, r6
 800c202:	4628      	mov	r0, r5
 800c204:	47b8      	blx	r7
 800c206:	3001      	adds	r0, #1
 800c208:	f108 0801 	add.w	r8, r8, #1
 800c20c:	f43f ae71 	beq.w	800bef2 <_printf_float+0xba>
 800c210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c212:	2200      	movs	r2, #0
 800c214:	f103 3aff 	add.w	sl, r3, #4294967295
 800c218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c21c:	2300      	movs	r3, #0
 800c21e:	f7f8 f913 	bl	8004448 <__aeabi_dcmpeq>
 800c222:	b9c8      	cbnz	r0, 800c258 <_printf_float+0x420>
 800c224:	4653      	mov	r3, sl
 800c226:	4642      	mov	r2, r8
 800c228:	4631      	mov	r1, r6
 800c22a:	4628      	mov	r0, r5
 800c22c:	47b8      	blx	r7
 800c22e:	3001      	adds	r0, #1
 800c230:	d10e      	bne.n	800c250 <_printf_float+0x418>
 800c232:	e65e      	b.n	800bef2 <_printf_float+0xba>
 800c234:	2301      	movs	r3, #1
 800c236:	4652      	mov	r2, sl
 800c238:	4631      	mov	r1, r6
 800c23a:	4628      	mov	r0, r5
 800c23c:	47b8      	blx	r7
 800c23e:	3001      	adds	r0, #1
 800c240:	f43f ae57 	beq.w	800bef2 <_printf_float+0xba>
 800c244:	f108 0801 	add.w	r8, r8, #1
 800c248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c24a:	3b01      	subs	r3, #1
 800c24c:	4543      	cmp	r3, r8
 800c24e:	dcf1      	bgt.n	800c234 <_printf_float+0x3fc>
 800c250:	464b      	mov	r3, r9
 800c252:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c256:	e6de      	b.n	800c016 <_printf_float+0x1de>
 800c258:	f04f 0800 	mov.w	r8, #0
 800c25c:	f104 0a1a 	add.w	sl, r4, #26
 800c260:	e7f2      	b.n	800c248 <_printf_float+0x410>
 800c262:	2301      	movs	r3, #1
 800c264:	e7df      	b.n	800c226 <_printf_float+0x3ee>
 800c266:	2301      	movs	r3, #1
 800c268:	464a      	mov	r2, r9
 800c26a:	4631      	mov	r1, r6
 800c26c:	4628      	mov	r0, r5
 800c26e:	47b8      	blx	r7
 800c270:	3001      	adds	r0, #1
 800c272:	f43f ae3e 	beq.w	800bef2 <_printf_float+0xba>
 800c276:	f108 0801 	add.w	r8, r8, #1
 800c27a:	68e3      	ldr	r3, [r4, #12]
 800c27c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c27e:	1a9b      	subs	r3, r3, r2
 800c280:	4543      	cmp	r3, r8
 800c282:	dcf0      	bgt.n	800c266 <_printf_float+0x42e>
 800c284:	e6fc      	b.n	800c080 <_printf_float+0x248>
 800c286:	f04f 0800 	mov.w	r8, #0
 800c28a:	f104 0919 	add.w	r9, r4, #25
 800c28e:	e7f4      	b.n	800c27a <_printf_float+0x442>
 800c290:	2900      	cmp	r1, #0
 800c292:	f43f ae8b 	beq.w	800bfac <_printf_float+0x174>
 800c296:	2300      	movs	r3, #0
 800c298:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c29c:	ab09      	add	r3, sp, #36	; 0x24
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	ec49 8b10 	vmov	d0, r8, r9
 800c2a4:	6022      	str	r2, [r4, #0]
 800c2a6:	f8cd a004 	str.w	sl, [sp, #4]
 800c2aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f7ff fd2e 	bl	800bd10 <__cvt>
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	e648      	b.n	800bf4a <_printf_float+0x112>

0800c2b8 <_printf_common>:
 800c2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2bc:	4691      	mov	r9, r2
 800c2be:	461f      	mov	r7, r3
 800c2c0:	688a      	ldr	r2, [r1, #8]
 800c2c2:	690b      	ldr	r3, [r1, #16]
 800c2c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	bfb8      	it	lt
 800c2cc:	4613      	movlt	r3, r2
 800c2ce:	f8c9 3000 	str.w	r3, [r9]
 800c2d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	460c      	mov	r4, r1
 800c2da:	b112      	cbz	r2, 800c2e2 <_printf_common+0x2a>
 800c2dc:	3301      	adds	r3, #1
 800c2de:	f8c9 3000 	str.w	r3, [r9]
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	0699      	lsls	r1, r3, #26
 800c2e6:	bf42      	ittt	mi
 800c2e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c2ec:	3302      	addmi	r3, #2
 800c2ee:	f8c9 3000 	strmi.w	r3, [r9]
 800c2f2:	6825      	ldr	r5, [r4, #0]
 800c2f4:	f015 0506 	ands.w	r5, r5, #6
 800c2f8:	d107      	bne.n	800c30a <_printf_common+0x52>
 800c2fa:	f104 0a19 	add.w	sl, r4, #25
 800c2fe:	68e3      	ldr	r3, [r4, #12]
 800c300:	f8d9 2000 	ldr.w	r2, [r9]
 800c304:	1a9b      	subs	r3, r3, r2
 800c306:	42ab      	cmp	r3, r5
 800c308:	dc28      	bgt.n	800c35c <_printf_common+0xa4>
 800c30a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c30e:	6822      	ldr	r2, [r4, #0]
 800c310:	3300      	adds	r3, #0
 800c312:	bf18      	it	ne
 800c314:	2301      	movne	r3, #1
 800c316:	0692      	lsls	r2, r2, #26
 800c318:	d42d      	bmi.n	800c376 <_printf_common+0xbe>
 800c31a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c31e:	4639      	mov	r1, r7
 800c320:	4630      	mov	r0, r6
 800c322:	47c0      	blx	r8
 800c324:	3001      	adds	r0, #1
 800c326:	d020      	beq.n	800c36a <_printf_common+0xb2>
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	68e5      	ldr	r5, [r4, #12]
 800c32c:	f8d9 2000 	ldr.w	r2, [r9]
 800c330:	f003 0306 	and.w	r3, r3, #6
 800c334:	2b04      	cmp	r3, #4
 800c336:	bf08      	it	eq
 800c338:	1aad      	subeq	r5, r5, r2
 800c33a:	68a3      	ldr	r3, [r4, #8]
 800c33c:	6922      	ldr	r2, [r4, #16]
 800c33e:	bf0c      	ite	eq
 800c340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c344:	2500      	movne	r5, #0
 800c346:	4293      	cmp	r3, r2
 800c348:	bfc4      	itt	gt
 800c34a:	1a9b      	subgt	r3, r3, r2
 800c34c:	18ed      	addgt	r5, r5, r3
 800c34e:	f04f 0900 	mov.w	r9, #0
 800c352:	341a      	adds	r4, #26
 800c354:	454d      	cmp	r5, r9
 800c356:	d11a      	bne.n	800c38e <_printf_common+0xd6>
 800c358:	2000      	movs	r0, #0
 800c35a:	e008      	b.n	800c36e <_printf_common+0xb6>
 800c35c:	2301      	movs	r3, #1
 800c35e:	4652      	mov	r2, sl
 800c360:	4639      	mov	r1, r7
 800c362:	4630      	mov	r0, r6
 800c364:	47c0      	blx	r8
 800c366:	3001      	adds	r0, #1
 800c368:	d103      	bne.n	800c372 <_printf_common+0xba>
 800c36a:	f04f 30ff 	mov.w	r0, #4294967295
 800c36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c372:	3501      	adds	r5, #1
 800c374:	e7c3      	b.n	800c2fe <_printf_common+0x46>
 800c376:	18e1      	adds	r1, r4, r3
 800c378:	1c5a      	adds	r2, r3, #1
 800c37a:	2030      	movs	r0, #48	; 0x30
 800c37c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c380:	4422      	add	r2, r4
 800c382:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c386:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c38a:	3302      	adds	r3, #2
 800c38c:	e7c5      	b.n	800c31a <_printf_common+0x62>
 800c38e:	2301      	movs	r3, #1
 800c390:	4622      	mov	r2, r4
 800c392:	4639      	mov	r1, r7
 800c394:	4630      	mov	r0, r6
 800c396:	47c0      	blx	r8
 800c398:	3001      	adds	r0, #1
 800c39a:	d0e6      	beq.n	800c36a <_printf_common+0xb2>
 800c39c:	f109 0901 	add.w	r9, r9, #1
 800c3a0:	e7d8      	b.n	800c354 <_printf_common+0x9c>
	...

0800c3a4 <_printf_i>:
 800c3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	7e09      	ldrb	r1, [r1, #24]
 800c3b0:	b085      	sub	sp, #20
 800c3b2:	296e      	cmp	r1, #110	; 0x6e
 800c3b4:	4617      	mov	r7, r2
 800c3b6:	4606      	mov	r6, r0
 800c3b8:	4698      	mov	r8, r3
 800c3ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3bc:	f000 80b3 	beq.w	800c526 <_printf_i+0x182>
 800c3c0:	d822      	bhi.n	800c408 <_printf_i+0x64>
 800c3c2:	2963      	cmp	r1, #99	; 0x63
 800c3c4:	d036      	beq.n	800c434 <_printf_i+0x90>
 800c3c6:	d80a      	bhi.n	800c3de <_printf_i+0x3a>
 800c3c8:	2900      	cmp	r1, #0
 800c3ca:	f000 80b9 	beq.w	800c540 <_printf_i+0x19c>
 800c3ce:	2958      	cmp	r1, #88	; 0x58
 800c3d0:	f000 8083 	beq.w	800c4da <_printf_i+0x136>
 800c3d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c3dc:	e032      	b.n	800c444 <_printf_i+0xa0>
 800c3de:	2964      	cmp	r1, #100	; 0x64
 800c3e0:	d001      	beq.n	800c3e6 <_printf_i+0x42>
 800c3e2:	2969      	cmp	r1, #105	; 0x69
 800c3e4:	d1f6      	bne.n	800c3d4 <_printf_i+0x30>
 800c3e6:	6820      	ldr	r0, [r4, #0]
 800c3e8:	6813      	ldr	r3, [r2, #0]
 800c3ea:	0605      	lsls	r5, r0, #24
 800c3ec:	f103 0104 	add.w	r1, r3, #4
 800c3f0:	d52a      	bpl.n	800c448 <_printf_i+0xa4>
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6011      	str	r1, [r2, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	da03      	bge.n	800c402 <_printf_i+0x5e>
 800c3fa:	222d      	movs	r2, #45	; 0x2d
 800c3fc:	425b      	negs	r3, r3
 800c3fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c402:	486f      	ldr	r0, [pc, #444]	; (800c5c0 <_printf_i+0x21c>)
 800c404:	220a      	movs	r2, #10
 800c406:	e039      	b.n	800c47c <_printf_i+0xd8>
 800c408:	2973      	cmp	r1, #115	; 0x73
 800c40a:	f000 809d 	beq.w	800c548 <_printf_i+0x1a4>
 800c40e:	d808      	bhi.n	800c422 <_printf_i+0x7e>
 800c410:	296f      	cmp	r1, #111	; 0x6f
 800c412:	d020      	beq.n	800c456 <_printf_i+0xb2>
 800c414:	2970      	cmp	r1, #112	; 0x70
 800c416:	d1dd      	bne.n	800c3d4 <_printf_i+0x30>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	f043 0320 	orr.w	r3, r3, #32
 800c41e:	6023      	str	r3, [r4, #0]
 800c420:	e003      	b.n	800c42a <_printf_i+0x86>
 800c422:	2975      	cmp	r1, #117	; 0x75
 800c424:	d017      	beq.n	800c456 <_printf_i+0xb2>
 800c426:	2978      	cmp	r1, #120	; 0x78
 800c428:	d1d4      	bne.n	800c3d4 <_printf_i+0x30>
 800c42a:	2378      	movs	r3, #120	; 0x78
 800c42c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c430:	4864      	ldr	r0, [pc, #400]	; (800c5c4 <_printf_i+0x220>)
 800c432:	e055      	b.n	800c4e0 <_printf_i+0x13c>
 800c434:	6813      	ldr	r3, [r2, #0]
 800c436:	1d19      	adds	r1, r3, #4
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	6011      	str	r1, [r2, #0]
 800c43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c444:	2301      	movs	r3, #1
 800c446:	e08c      	b.n	800c562 <_printf_i+0x1be>
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	6011      	str	r1, [r2, #0]
 800c44c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c450:	bf18      	it	ne
 800c452:	b21b      	sxthne	r3, r3
 800c454:	e7cf      	b.n	800c3f6 <_printf_i+0x52>
 800c456:	6813      	ldr	r3, [r2, #0]
 800c458:	6825      	ldr	r5, [r4, #0]
 800c45a:	1d18      	adds	r0, r3, #4
 800c45c:	6010      	str	r0, [r2, #0]
 800c45e:	0628      	lsls	r0, r5, #24
 800c460:	d501      	bpl.n	800c466 <_printf_i+0xc2>
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	e002      	b.n	800c46c <_printf_i+0xc8>
 800c466:	0668      	lsls	r0, r5, #25
 800c468:	d5fb      	bpl.n	800c462 <_printf_i+0xbe>
 800c46a:	881b      	ldrh	r3, [r3, #0]
 800c46c:	4854      	ldr	r0, [pc, #336]	; (800c5c0 <_printf_i+0x21c>)
 800c46e:	296f      	cmp	r1, #111	; 0x6f
 800c470:	bf14      	ite	ne
 800c472:	220a      	movne	r2, #10
 800c474:	2208      	moveq	r2, #8
 800c476:	2100      	movs	r1, #0
 800c478:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c47c:	6865      	ldr	r5, [r4, #4]
 800c47e:	60a5      	str	r5, [r4, #8]
 800c480:	2d00      	cmp	r5, #0
 800c482:	f2c0 8095 	blt.w	800c5b0 <_printf_i+0x20c>
 800c486:	6821      	ldr	r1, [r4, #0]
 800c488:	f021 0104 	bic.w	r1, r1, #4
 800c48c:	6021      	str	r1, [r4, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d13d      	bne.n	800c50e <_printf_i+0x16a>
 800c492:	2d00      	cmp	r5, #0
 800c494:	f040 808e 	bne.w	800c5b4 <_printf_i+0x210>
 800c498:	4665      	mov	r5, ip
 800c49a:	2a08      	cmp	r2, #8
 800c49c:	d10b      	bne.n	800c4b6 <_printf_i+0x112>
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	07db      	lsls	r3, r3, #31
 800c4a2:	d508      	bpl.n	800c4b6 <_printf_i+0x112>
 800c4a4:	6923      	ldr	r3, [r4, #16]
 800c4a6:	6862      	ldr	r2, [r4, #4]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	bfde      	ittt	le
 800c4ac:	2330      	movle	r3, #48	; 0x30
 800c4ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4b6:	ebac 0305 	sub.w	r3, ip, r5
 800c4ba:	6123      	str	r3, [r4, #16]
 800c4bc:	f8cd 8000 	str.w	r8, [sp]
 800c4c0:	463b      	mov	r3, r7
 800c4c2:	aa03      	add	r2, sp, #12
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f7ff fef6 	bl	800c2b8 <_printf_common>
 800c4cc:	3001      	adds	r0, #1
 800c4ce:	d14d      	bne.n	800c56c <_printf_i+0x1c8>
 800c4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d4:	b005      	add	sp, #20
 800c4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4da:	4839      	ldr	r0, [pc, #228]	; (800c5c0 <_printf_i+0x21c>)
 800c4dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c4e0:	6813      	ldr	r3, [r2, #0]
 800c4e2:	6821      	ldr	r1, [r4, #0]
 800c4e4:	1d1d      	adds	r5, r3, #4
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6015      	str	r5, [r2, #0]
 800c4ea:	060a      	lsls	r2, r1, #24
 800c4ec:	d50b      	bpl.n	800c506 <_printf_i+0x162>
 800c4ee:	07ca      	lsls	r2, r1, #31
 800c4f0:	bf44      	itt	mi
 800c4f2:	f041 0120 	orrmi.w	r1, r1, #32
 800c4f6:	6021      	strmi	r1, [r4, #0]
 800c4f8:	b91b      	cbnz	r3, 800c502 <_printf_i+0x15e>
 800c4fa:	6822      	ldr	r2, [r4, #0]
 800c4fc:	f022 0220 	bic.w	r2, r2, #32
 800c500:	6022      	str	r2, [r4, #0]
 800c502:	2210      	movs	r2, #16
 800c504:	e7b7      	b.n	800c476 <_printf_i+0xd2>
 800c506:	064d      	lsls	r5, r1, #25
 800c508:	bf48      	it	mi
 800c50a:	b29b      	uxthmi	r3, r3
 800c50c:	e7ef      	b.n	800c4ee <_printf_i+0x14a>
 800c50e:	4665      	mov	r5, ip
 800c510:	fbb3 f1f2 	udiv	r1, r3, r2
 800c514:	fb02 3311 	mls	r3, r2, r1, r3
 800c518:	5cc3      	ldrb	r3, [r0, r3]
 800c51a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c51e:	460b      	mov	r3, r1
 800c520:	2900      	cmp	r1, #0
 800c522:	d1f5      	bne.n	800c510 <_printf_i+0x16c>
 800c524:	e7b9      	b.n	800c49a <_printf_i+0xf6>
 800c526:	6813      	ldr	r3, [r2, #0]
 800c528:	6825      	ldr	r5, [r4, #0]
 800c52a:	6961      	ldr	r1, [r4, #20]
 800c52c:	1d18      	adds	r0, r3, #4
 800c52e:	6010      	str	r0, [r2, #0]
 800c530:	0628      	lsls	r0, r5, #24
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	d501      	bpl.n	800c53a <_printf_i+0x196>
 800c536:	6019      	str	r1, [r3, #0]
 800c538:	e002      	b.n	800c540 <_printf_i+0x19c>
 800c53a:	066a      	lsls	r2, r5, #25
 800c53c:	d5fb      	bpl.n	800c536 <_printf_i+0x192>
 800c53e:	8019      	strh	r1, [r3, #0]
 800c540:	2300      	movs	r3, #0
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	4665      	mov	r5, ip
 800c546:	e7b9      	b.n	800c4bc <_printf_i+0x118>
 800c548:	6813      	ldr	r3, [r2, #0]
 800c54a:	1d19      	adds	r1, r3, #4
 800c54c:	6011      	str	r1, [r2, #0]
 800c54e:	681d      	ldr	r5, [r3, #0]
 800c550:	6862      	ldr	r2, [r4, #4]
 800c552:	2100      	movs	r1, #0
 800c554:	4628      	mov	r0, r5
 800c556:	f7f7 fb03 	bl	8003b60 <memchr>
 800c55a:	b108      	cbz	r0, 800c560 <_printf_i+0x1bc>
 800c55c:	1b40      	subs	r0, r0, r5
 800c55e:	6060      	str	r0, [r4, #4]
 800c560:	6863      	ldr	r3, [r4, #4]
 800c562:	6123      	str	r3, [r4, #16]
 800c564:	2300      	movs	r3, #0
 800c566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c56a:	e7a7      	b.n	800c4bc <_printf_i+0x118>
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	462a      	mov	r2, r5
 800c570:	4639      	mov	r1, r7
 800c572:	4630      	mov	r0, r6
 800c574:	47c0      	blx	r8
 800c576:	3001      	adds	r0, #1
 800c578:	d0aa      	beq.n	800c4d0 <_printf_i+0x12c>
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	079b      	lsls	r3, r3, #30
 800c57e:	d413      	bmi.n	800c5a8 <_printf_i+0x204>
 800c580:	68e0      	ldr	r0, [r4, #12]
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	4298      	cmp	r0, r3
 800c586:	bfb8      	it	lt
 800c588:	4618      	movlt	r0, r3
 800c58a:	e7a3      	b.n	800c4d4 <_printf_i+0x130>
 800c58c:	2301      	movs	r3, #1
 800c58e:	464a      	mov	r2, r9
 800c590:	4639      	mov	r1, r7
 800c592:	4630      	mov	r0, r6
 800c594:	47c0      	blx	r8
 800c596:	3001      	adds	r0, #1
 800c598:	d09a      	beq.n	800c4d0 <_printf_i+0x12c>
 800c59a:	3501      	adds	r5, #1
 800c59c:	68e3      	ldr	r3, [r4, #12]
 800c59e:	9a03      	ldr	r2, [sp, #12]
 800c5a0:	1a9b      	subs	r3, r3, r2
 800c5a2:	42ab      	cmp	r3, r5
 800c5a4:	dcf2      	bgt.n	800c58c <_printf_i+0x1e8>
 800c5a6:	e7eb      	b.n	800c580 <_printf_i+0x1dc>
 800c5a8:	2500      	movs	r5, #0
 800c5aa:	f104 0919 	add.w	r9, r4, #25
 800c5ae:	e7f5      	b.n	800c59c <_printf_i+0x1f8>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1ac      	bne.n	800c50e <_printf_i+0x16a>
 800c5b4:	7803      	ldrb	r3, [r0, #0]
 800c5b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5be:	e76c      	b.n	800c49a <_printf_i+0xf6>
 800c5c0:	08076722 	.word	0x08076722
 800c5c4:	08076733 	.word	0x08076733

0800c5c8 <_scanf_float>:
 800c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	469a      	mov	sl, r3
 800c5ce:	688b      	ldr	r3, [r1, #8]
 800c5d0:	4616      	mov	r6, r2
 800c5d2:	1e5a      	subs	r2, r3, #1
 800c5d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c5d8:	b087      	sub	sp, #28
 800c5da:	bf83      	ittte	hi
 800c5dc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c5e0:	189b      	addhi	r3, r3, r2
 800c5e2:	9301      	strhi	r3, [sp, #4]
 800c5e4:	2300      	movls	r3, #0
 800c5e6:	bf86      	itte	hi
 800c5e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c5ec:	608b      	strhi	r3, [r1, #8]
 800c5ee:	9301      	strls	r3, [sp, #4]
 800c5f0:	680b      	ldr	r3, [r1, #0]
 800c5f2:	4688      	mov	r8, r1
 800c5f4:	f04f 0b00 	mov.w	fp, #0
 800c5f8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c5fc:	f848 3b1c 	str.w	r3, [r8], #28
 800c600:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c604:	4607      	mov	r7, r0
 800c606:	460c      	mov	r4, r1
 800c608:	4645      	mov	r5, r8
 800c60a:	465a      	mov	r2, fp
 800c60c:	46d9      	mov	r9, fp
 800c60e:	f8cd b008 	str.w	fp, [sp, #8]
 800c612:	68a1      	ldr	r1, [r4, #8]
 800c614:	b181      	cbz	r1, 800c638 <_scanf_float+0x70>
 800c616:	6833      	ldr	r3, [r6, #0]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b49      	cmp	r3, #73	; 0x49
 800c61c:	d071      	beq.n	800c702 <_scanf_float+0x13a>
 800c61e:	d84d      	bhi.n	800c6bc <_scanf_float+0xf4>
 800c620:	2b39      	cmp	r3, #57	; 0x39
 800c622:	d840      	bhi.n	800c6a6 <_scanf_float+0xde>
 800c624:	2b31      	cmp	r3, #49	; 0x31
 800c626:	f080 8088 	bcs.w	800c73a <_scanf_float+0x172>
 800c62a:	2b2d      	cmp	r3, #45	; 0x2d
 800c62c:	f000 8090 	beq.w	800c750 <_scanf_float+0x188>
 800c630:	d815      	bhi.n	800c65e <_scanf_float+0x96>
 800c632:	2b2b      	cmp	r3, #43	; 0x2b
 800c634:	f000 808c 	beq.w	800c750 <_scanf_float+0x188>
 800c638:	f1b9 0f00 	cmp.w	r9, #0
 800c63c:	d003      	beq.n	800c646 <_scanf_float+0x7e>
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	3a01      	subs	r2, #1
 800c648:	2a01      	cmp	r2, #1
 800c64a:	f200 80ea 	bhi.w	800c822 <_scanf_float+0x25a>
 800c64e:	4545      	cmp	r5, r8
 800c650:	f200 80dc 	bhi.w	800c80c <_scanf_float+0x244>
 800c654:	2601      	movs	r6, #1
 800c656:	4630      	mov	r0, r6
 800c658:	b007      	add	sp, #28
 800c65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65e:	2b2e      	cmp	r3, #46	; 0x2e
 800c660:	f000 809f 	beq.w	800c7a2 <_scanf_float+0x1da>
 800c664:	2b30      	cmp	r3, #48	; 0x30
 800c666:	d1e7      	bne.n	800c638 <_scanf_float+0x70>
 800c668:	6820      	ldr	r0, [r4, #0]
 800c66a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c66e:	d064      	beq.n	800c73a <_scanf_float+0x172>
 800c670:	9b01      	ldr	r3, [sp, #4]
 800c672:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c676:	6020      	str	r0, [r4, #0]
 800c678:	f109 0901 	add.w	r9, r9, #1
 800c67c:	b11b      	cbz	r3, 800c686 <_scanf_float+0xbe>
 800c67e:	3b01      	subs	r3, #1
 800c680:	3101      	adds	r1, #1
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	60a1      	str	r1, [r4, #8]
 800c686:	68a3      	ldr	r3, [r4, #8]
 800c688:	3b01      	subs	r3, #1
 800c68a:	60a3      	str	r3, [r4, #8]
 800c68c:	6923      	ldr	r3, [r4, #16]
 800c68e:	3301      	adds	r3, #1
 800c690:	6123      	str	r3, [r4, #16]
 800c692:	6873      	ldr	r3, [r6, #4]
 800c694:	3b01      	subs	r3, #1
 800c696:	2b00      	cmp	r3, #0
 800c698:	6073      	str	r3, [r6, #4]
 800c69a:	f340 80ac 	ble.w	800c7f6 <_scanf_float+0x22e>
 800c69e:	6833      	ldr	r3, [r6, #0]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	6033      	str	r3, [r6, #0]
 800c6a4:	e7b5      	b.n	800c612 <_scanf_float+0x4a>
 800c6a6:	2b45      	cmp	r3, #69	; 0x45
 800c6a8:	f000 8085 	beq.w	800c7b6 <_scanf_float+0x1ee>
 800c6ac:	2b46      	cmp	r3, #70	; 0x46
 800c6ae:	d06a      	beq.n	800c786 <_scanf_float+0x1be>
 800c6b0:	2b41      	cmp	r3, #65	; 0x41
 800c6b2:	d1c1      	bne.n	800c638 <_scanf_float+0x70>
 800c6b4:	2a01      	cmp	r2, #1
 800c6b6:	d1bf      	bne.n	800c638 <_scanf_float+0x70>
 800c6b8:	2202      	movs	r2, #2
 800c6ba:	e046      	b.n	800c74a <_scanf_float+0x182>
 800c6bc:	2b65      	cmp	r3, #101	; 0x65
 800c6be:	d07a      	beq.n	800c7b6 <_scanf_float+0x1ee>
 800c6c0:	d818      	bhi.n	800c6f4 <_scanf_float+0x12c>
 800c6c2:	2b54      	cmp	r3, #84	; 0x54
 800c6c4:	d066      	beq.n	800c794 <_scanf_float+0x1cc>
 800c6c6:	d811      	bhi.n	800c6ec <_scanf_float+0x124>
 800c6c8:	2b4e      	cmp	r3, #78	; 0x4e
 800c6ca:	d1b5      	bne.n	800c638 <_scanf_float+0x70>
 800c6cc:	2a00      	cmp	r2, #0
 800c6ce:	d146      	bne.n	800c75e <_scanf_float+0x196>
 800c6d0:	f1b9 0f00 	cmp.w	r9, #0
 800c6d4:	d145      	bne.n	800c762 <_scanf_float+0x19a>
 800c6d6:	6821      	ldr	r1, [r4, #0]
 800c6d8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c6dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c6e0:	d13f      	bne.n	800c762 <_scanf_float+0x19a>
 800c6e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c6e6:	6021      	str	r1, [r4, #0]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	e02e      	b.n	800c74a <_scanf_float+0x182>
 800c6ec:	2b59      	cmp	r3, #89	; 0x59
 800c6ee:	d01e      	beq.n	800c72e <_scanf_float+0x166>
 800c6f0:	2b61      	cmp	r3, #97	; 0x61
 800c6f2:	e7de      	b.n	800c6b2 <_scanf_float+0xea>
 800c6f4:	2b6e      	cmp	r3, #110	; 0x6e
 800c6f6:	d0e9      	beq.n	800c6cc <_scanf_float+0x104>
 800c6f8:	d815      	bhi.n	800c726 <_scanf_float+0x15e>
 800c6fa:	2b66      	cmp	r3, #102	; 0x66
 800c6fc:	d043      	beq.n	800c786 <_scanf_float+0x1be>
 800c6fe:	2b69      	cmp	r3, #105	; 0x69
 800c700:	d19a      	bne.n	800c638 <_scanf_float+0x70>
 800c702:	f1bb 0f00 	cmp.w	fp, #0
 800c706:	d138      	bne.n	800c77a <_scanf_float+0x1b2>
 800c708:	f1b9 0f00 	cmp.w	r9, #0
 800c70c:	d197      	bne.n	800c63e <_scanf_float+0x76>
 800c70e:	6821      	ldr	r1, [r4, #0]
 800c710:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c714:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c718:	d195      	bne.n	800c646 <_scanf_float+0x7e>
 800c71a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c71e:	6021      	str	r1, [r4, #0]
 800c720:	f04f 0b01 	mov.w	fp, #1
 800c724:	e011      	b.n	800c74a <_scanf_float+0x182>
 800c726:	2b74      	cmp	r3, #116	; 0x74
 800c728:	d034      	beq.n	800c794 <_scanf_float+0x1cc>
 800c72a:	2b79      	cmp	r3, #121	; 0x79
 800c72c:	d184      	bne.n	800c638 <_scanf_float+0x70>
 800c72e:	f1bb 0f07 	cmp.w	fp, #7
 800c732:	d181      	bne.n	800c638 <_scanf_float+0x70>
 800c734:	f04f 0b08 	mov.w	fp, #8
 800c738:	e007      	b.n	800c74a <_scanf_float+0x182>
 800c73a:	eb12 0f0b 	cmn.w	r2, fp
 800c73e:	f47f af7b 	bne.w	800c638 <_scanf_float+0x70>
 800c742:	6821      	ldr	r1, [r4, #0]
 800c744:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c748:	6021      	str	r1, [r4, #0]
 800c74a:	702b      	strb	r3, [r5, #0]
 800c74c:	3501      	adds	r5, #1
 800c74e:	e79a      	b.n	800c686 <_scanf_float+0xbe>
 800c750:	6821      	ldr	r1, [r4, #0]
 800c752:	0608      	lsls	r0, r1, #24
 800c754:	f57f af70 	bpl.w	800c638 <_scanf_float+0x70>
 800c758:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c75c:	e7f4      	b.n	800c748 <_scanf_float+0x180>
 800c75e:	2a02      	cmp	r2, #2
 800c760:	d047      	beq.n	800c7f2 <_scanf_float+0x22a>
 800c762:	f1bb 0f01 	cmp.w	fp, #1
 800c766:	d003      	beq.n	800c770 <_scanf_float+0x1a8>
 800c768:	f1bb 0f04 	cmp.w	fp, #4
 800c76c:	f47f af64 	bne.w	800c638 <_scanf_float+0x70>
 800c770:	f10b 0b01 	add.w	fp, fp, #1
 800c774:	fa5f fb8b 	uxtb.w	fp, fp
 800c778:	e7e7      	b.n	800c74a <_scanf_float+0x182>
 800c77a:	f1bb 0f03 	cmp.w	fp, #3
 800c77e:	d0f7      	beq.n	800c770 <_scanf_float+0x1a8>
 800c780:	f1bb 0f05 	cmp.w	fp, #5
 800c784:	e7f2      	b.n	800c76c <_scanf_float+0x1a4>
 800c786:	f1bb 0f02 	cmp.w	fp, #2
 800c78a:	f47f af55 	bne.w	800c638 <_scanf_float+0x70>
 800c78e:	f04f 0b03 	mov.w	fp, #3
 800c792:	e7da      	b.n	800c74a <_scanf_float+0x182>
 800c794:	f1bb 0f06 	cmp.w	fp, #6
 800c798:	f47f af4e 	bne.w	800c638 <_scanf_float+0x70>
 800c79c:	f04f 0b07 	mov.w	fp, #7
 800c7a0:	e7d3      	b.n	800c74a <_scanf_float+0x182>
 800c7a2:	6821      	ldr	r1, [r4, #0]
 800c7a4:	0588      	lsls	r0, r1, #22
 800c7a6:	f57f af47 	bpl.w	800c638 <_scanf_float+0x70>
 800c7aa:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800c7ae:	6021      	str	r1, [r4, #0]
 800c7b0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c7b4:	e7c9      	b.n	800c74a <_scanf_float+0x182>
 800c7b6:	6821      	ldr	r1, [r4, #0]
 800c7b8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800c7bc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c7c0:	d006      	beq.n	800c7d0 <_scanf_float+0x208>
 800c7c2:	0548      	lsls	r0, r1, #21
 800c7c4:	f57f af38 	bpl.w	800c638 <_scanf_float+0x70>
 800c7c8:	f1b9 0f00 	cmp.w	r9, #0
 800c7cc:	f43f af3b 	beq.w	800c646 <_scanf_float+0x7e>
 800c7d0:	0588      	lsls	r0, r1, #22
 800c7d2:	bf58      	it	pl
 800c7d4:	9802      	ldrpl	r0, [sp, #8]
 800c7d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c7da:	bf58      	it	pl
 800c7dc:	eba9 0000 	subpl.w	r0, r9, r0
 800c7e0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800c7e4:	bf58      	it	pl
 800c7e6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800c7ea:	6021      	str	r1, [r4, #0]
 800c7ec:	f04f 0900 	mov.w	r9, #0
 800c7f0:	e7ab      	b.n	800c74a <_scanf_float+0x182>
 800c7f2:	2203      	movs	r2, #3
 800c7f4:	e7a9      	b.n	800c74a <_scanf_float+0x182>
 800c7f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c7fa:	9205      	str	r2, [sp, #20]
 800c7fc:	4631      	mov	r1, r6
 800c7fe:	4638      	mov	r0, r7
 800c800:	4798      	blx	r3
 800c802:	9a05      	ldr	r2, [sp, #20]
 800c804:	2800      	cmp	r0, #0
 800c806:	f43f af04 	beq.w	800c612 <_scanf_float+0x4a>
 800c80a:	e715      	b.n	800c638 <_scanf_float+0x70>
 800c80c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c810:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c814:	4632      	mov	r2, r6
 800c816:	4638      	mov	r0, r7
 800c818:	4798      	blx	r3
 800c81a:	6923      	ldr	r3, [r4, #16]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	6123      	str	r3, [r4, #16]
 800c820:	e715      	b.n	800c64e <_scanf_float+0x86>
 800c822:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c826:	2b06      	cmp	r3, #6
 800c828:	d80a      	bhi.n	800c840 <_scanf_float+0x278>
 800c82a:	f1bb 0f02 	cmp.w	fp, #2
 800c82e:	d968      	bls.n	800c902 <_scanf_float+0x33a>
 800c830:	f1ab 0b03 	sub.w	fp, fp, #3
 800c834:	fa5f fb8b 	uxtb.w	fp, fp
 800c838:	eba5 0b0b 	sub.w	fp, r5, fp
 800c83c:	455d      	cmp	r5, fp
 800c83e:	d14b      	bne.n	800c8d8 <_scanf_float+0x310>
 800c840:	6823      	ldr	r3, [r4, #0]
 800c842:	05da      	lsls	r2, r3, #23
 800c844:	d51f      	bpl.n	800c886 <_scanf_float+0x2be>
 800c846:	055b      	lsls	r3, r3, #21
 800c848:	d468      	bmi.n	800c91c <_scanf_float+0x354>
 800c84a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	2965      	cmp	r1, #101	; 0x65
 800c852:	f103 33ff 	add.w	r3, r3, #4294967295
 800c856:	f105 3bff 	add.w	fp, r5, #4294967295
 800c85a:	6123      	str	r3, [r4, #16]
 800c85c:	d00d      	beq.n	800c87a <_scanf_float+0x2b2>
 800c85e:	2945      	cmp	r1, #69	; 0x45
 800c860:	d00b      	beq.n	800c87a <_scanf_float+0x2b2>
 800c862:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c866:	4632      	mov	r2, r6
 800c868:	4638      	mov	r0, r7
 800c86a:	4798      	blx	r3
 800c86c:	6923      	ldr	r3, [r4, #16]
 800c86e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800c872:	3b01      	subs	r3, #1
 800c874:	f1a5 0b02 	sub.w	fp, r5, #2
 800c878:	6123      	str	r3, [r4, #16]
 800c87a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c87e:	4632      	mov	r2, r6
 800c880:	4638      	mov	r0, r7
 800c882:	4798      	blx	r3
 800c884:	465d      	mov	r5, fp
 800c886:	6826      	ldr	r6, [r4, #0]
 800c888:	f016 0610 	ands.w	r6, r6, #16
 800c88c:	d17a      	bne.n	800c984 <_scanf_float+0x3bc>
 800c88e:	702e      	strb	r6, [r5, #0]
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c89a:	d142      	bne.n	800c922 <_scanf_float+0x35a>
 800c89c:	9b02      	ldr	r3, [sp, #8]
 800c89e:	eba9 0303 	sub.w	r3, r9, r3
 800c8a2:	425a      	negs	r2, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d149      	bne.n	800c93c <_scanf_float+0x374>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4641      	mov	r1, r8
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	f000 ff33 	bl	800d718 <_strtod_r>
 800c8b2:	6825      	ldr	r5, [r4, #0]
 800c8b4:	f8da 3000 	ldr.w	r3, [sl]
 800c8b8:	f015 0f02 	tst.w	r5, #2
 800c8bc:	f103 0204 	add.w	r2, r3, #4
 800c8c0:	ec59 8b10 	vmov	r8, r9, d0
 800c8c4:	f8ca 2000 	str.w	r2, [sl]
 800c8c8:	d043      	beq.n	800c952 <_scanf_float+0x38a>
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	e9c3 8900 	strd	r8, r9, [r3]
 800c8d0:	68e3      	ldr	r3, [r4, #12]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	60e3      	str	r3, [r4, #12]
 800c8d6:	e6be      	b.n	800c656 <_scanf_float+0x8e>
 800c8d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c8e0:	4632      	mov	r2, r6
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	4798      	blx	r3
 800c8e6:	6923      	ldr	r3, [r4, #16]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	6123      	str	r3, [r4, #16]
 800c8ec:	e7a6      	b.n	800c83c <_scanf_float+0x274>
 800c8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8f2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c8f6:	4632      	mov	r2, r6
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	4798      	blx	r3
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	6123      	str	r3, [r4, #16]
 800c902:	4545      	cmp	r5, r8
 800c904:	d8f3      	bhi.n	800c8ee <_scanf_float+0x326>
 800c906:	e6a5      	b.n	800c654 <_scanf_float+0x8c>
 800c908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c90c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c910:	4632      	mov	r2, r6
 800c912:	4638      	mov	r0, r7
 800c914:	4798      	blx	r3
 800c916:	6923      	ldr	r3, [r4, #16]
 800c918:	3b01      	subs	r3, #1
 800c91a:	6123      	str	r3, [r4, #16]
 800c91c:	4545      	cmp	r5, r8
 800c91e:	d8f3      	bhi.n	800c908 <_scanf_float+0x340>
 800c920:	e698      	b.n	800c654 <_scanf_float+0x8c>
 800c922:	9b03      	ldr	r3, [sp, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d0bf      	beq.n	800c8a8 <_scanf_float+0x2e0>
 800c928:	9904      	ldr	r1, [sp, #16]
 800c92a:	230a      	movs	r3, #10
 800c92c:	4632      	mov	r2, r6
 800c92e:	3101      	adds	r1, #1
 800c930:	4638      	mov	r0, r7
 800c932:	f000 ff7d 	bl	800d830 <_strtol_r>
 800c936:	9b03      	ldr	r3, [sp, #12]
 800c938:	9d04      	ldr	r5, [sp, #16]
 800c93a:	1ac2      	subs	r2, r0, r3
 800c93c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c940:	429d      	cmp	r5, r3
 800c942:	bf28      	it	cs
 800c944:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c948:	490f      	ldr	r1, [pc, #60]	; (800c988 <_scanf_float+0x3c0>)
 800c94a:	4628      	mov	r0, r5
 800c94c:	f000 f8b4 	bl	800cab8 <siprintf>
 800c950:	e7aa      	b.n	800c8a8 <_scanf_float+0x2e0>
 800c952:	f015 0504 	ands.w	r5, r5, #4
 800c956:	d1b8      	bne.n	800c8ca <_scanf_float+0x302>
 800c958:	681f      	ldr	r7, [r3, #0]
 800c95a:	ee10 2a10 	vmov	r2, s0
 800c95e:	464b      	mov	r3, r9
 800c960:	ee10 0a10 	vmov	r0, s0
 800c964:	4649      	mov	r1, r9
 800c966:	f7f7 fda1 	bl	80044ac <__aeabi_dcmpun>
 800c96a:	b128      	cbz	r0, 800c978 <_scanf_float+0x3b0>
 800c96c:	4628      	mov	r0, r5
 800c96e:	f000 f89d 	bl	800caac <nanf>
 800c972:	ed87 0a00 	vstr	s0, [r7]
 800c976:	e7ab      	b.n	800c8d0 <_scanf_float+0x308>
 800c978:	4640      	mov	r0, r8
 800c97a:	4649      	mov	r1, r9
 800c97c:	f7f7 fdf4 	bl	8004568 <__aeabi_d2f>
 800c980:	6038      	str	r0, [r7, #0]
 800c982:	e7a5      	b.n	800c8d0 <_scanf_float+0x308>
 800c984:	2600      	movs	r6, #0
 800c986:	e666      	b.n	800c656 <_scanf_float+0x8e>
 800c988:	08076744 	.word	0x08076744

0800c98c <iprintf>:
 800c98c:	b40f      	push	{r0, r1, r2, r3}
 800c98e:	4b0a      	ldr	r3, [pc, #40]	; (800c9b8 <iprintf+0x2c>)
 800c990:	b513      	push	{r0, r1, r4, lr}
 800c992:	681c      	ldr	r4, [r3, #0]
 800c994:	b124      	cbz	r4, 800c9a0 <iprintf+0x14>
 800c996:	69a3      	ldr	r3, [r4, #24]
 800c998:	b913      	cbnz	r3, 800c9a0 <iprintf+0x14>
 800c99a:	4620      	mov	r0, r4
 800c99c:	f001 ff50 	bl	800e840 <__sinit>
 800c9a0:	ab05      	add	r3, sp, #20
 800c9a2:	9a04      	ldr	r2, [sp, #16]
 800c9a4:	68a1      	ldr	r1, [r4, #8]
 800c9a6:	9301      	str	r3, [sp, #4]
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f003 f9bd 	bl	800fd28 <_vfiprintf_r>
 800c9ae:	b002      	add	sp, #8
 800c9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b4:	b004      	add	sp, #16
 800c9b6:	4770      	bx	lr
 800c9b8:	20000478 	.word	0x20000478

0800c9bc <putchar>:
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	4b08      	ldr	r3, [pc, #32]	; (800c9e0 <putchar+0x24>)
 800c9c0:	681c      	ldr	r4, [r3, #0]
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	b124      	cbz	r4, 800c9d0 <putchar+0x14>
 800c9c6:	69a3      	ldr	r3, [r4, #24]
 800c9c8:	b913      	cbnz	r3, 800c9d0 <putchar+0x14>
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f001 ff38 	bl	800e840 <__sinit>
 800c9d0:	68a2      	ldr	r2, [r4, #8]
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9da:	f003 babb 	b.w	800ff54 <_putc_r>
 800c9de:	bf00      	nop
 800c9e0:	20000478 	.word	0x20000478

0800c9e4 <_puts_r>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	460e      	mov	r6, r1
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	b118      	cbz	r0, 800c9f4 <_puts_r+0x10>
 800c9ec:	6983      	ldr	r3, [r0, #24]
 800c9ee:	b90b      	cbnz	r3, 800c9f4 <_puts_r+0x10>
 800c9f0:	f001 ff26 	bl	800e840 <__sinit>
 800c9f4:	69ab      	ldr	r3, [r5, #24]
 800c9f6:	68ac      	ldr	r4, [r5, #8]
 800c9f8:	b913      	cbnz	r3, 800ca00 <_puts_r+0x1c>
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f001 ff20 	bl	800e840 <__sinit>
 800ca00:	4b23      	ldr	r3, [pc, #140]	; (800ca90 <_puts_r+0xac>)
 800ca02:	429c      	cmp	r4, r3
 800ca04:	d117      	bne.n	800ca36 <_puts_r+0x52>
 800ca06:	686c      	ldr	r4, [r5, #4]
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	071b      	lsls	r3, r3, #28
 800ca0c:	d51d      	bpl.n	800ca4a <_puts_r+0x66>
 800ca0e:	6923      	ldr	r3, [r4, #16]
 800ca10:	b1db      	cbz	r3, 800ca4a <_puts_r+0x66>
 800ca12:	3e01      	subs	r6, #1
 800ca14:	68a3      	ldr	r3, [r4, #8]
 800ca16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	60a3      	str	r3, [r4, #8]
 800ca1e:	b9e9      	cbnz	r1, 800ca5c <_puts_r+0x78>
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	da2e      	bge.n	800ca82 <_puts_r+0x9e>
 800ca24:	4622      	mov	r2, r4
 800ca26:	210a      	movs	r1, #10
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f000 ff13 	bl	800d854 <__swbuf_r>
 800ca2e:	3001      	adds	r0, #1
 800ca30:	d011      	beq.n	800ca56 <_puts_r+0x72>
 800ca32:	200a      	movs	r0, #10
 800ca34:	e011      	b.n	800ca5a <_puts_r+0x76>
 800ca36:	4b17      	ldr	r3, [pc, #92]	; (800ca94 <_puts_r+0xb0>)
 800ca38:	429c      	cmp	r4, r3
 800ca3a:	d101      	bne.n	800ca40 <_puts_r+0x5c>
 800ca3c:	68ac      	ldr	r4, [r5, #8]
 800ca3e:	e7e3      	b.n	800ca08 <_puts_r+0x24>
 800ca40:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <_puts_r+0xb4>)
 800ca42:	429c      	cmp	r4, r3
 800ca44:	bf08      	it	eq
 800ca46:	68ec      	ldreq	r4, [r5, #12]
 800ca48:	e7de      	b.n	800ca08 <_puts_r+0x24>
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f000 ff53 	bl	800d8f8 <__swsetup_r>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d0dd      	beq.n	800ca12 <_puts_r+0x2e>
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	da04      	bge.n	800ca6a <_puts_r+0x86>
 800ca60:	69a2      	ldr	r2, [r4, #24]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	dc06      	bgt.n	800ca74 <_puts_r+0x90>
 800ca66:	290a      	cmp	r1, #10
 800ca68:	d004      	beq.n	800ca74 <_puts_r+0x90>
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	6022      	str	r2, [r4, #0]
 800ca70:	7019      	strb	r1, [r3, #0]
 800ca72:	e7cf      	b.n	800ca14 <_puts_r+0x30>
 800ca74:	4622      	mov	r2, r4
 800ca76:	4628      	mov	r0, r5
 800ca78:	f000 feec 	bl	800d854 <__swbuf_r>
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d1c9      	bne.n	800ca14 <_puts_r+0x30>
 800ca80:	e7e9      	b.n	800ca56 <_puts_r+0x72>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	200a      	movs	r0, #10
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	6022      	str	r2, [r4, #0]
 800ca8a:	7018      	strb	r0, [r3, #0]
 800ca8c:	e7e5      	b.n	800ca5a <_puts_r+0x76>
 800ca8e:	bf00      	nop
 800ca90:	080767d0 	.word	0x080767d0
 800ca94:	080767f0 	.word	0x080767f0
 800ca98:	080767b0 	.word	0x080767b0

0800ca9c <puts>:
 800ca9c:	4b02      	ldr	r3, [pc, #8]	; (800caa8 <puts+0xc>)
 800ca9e:	4601      	mov	r1, r0
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	f7ff bf9f 	b.w	800c9e4 <_puts_r>
 800caa6:	bf00      	nop
 800caa8:	20000478 	.word	0x20000478

0800caac <nanf>:
 800caac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cab4 <nanf+0x8>
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	7fc00000 	.word	0x7fc00000

0800cab8 <siprintf>:
 800cab8:	b40e      	push	{r1, r2, r3}
 800caba:	b500      	push	{lr}
 800cabc:	b09c      	sub	sp, #112	; 0x70
 800cabe:	ab1d      	add	r3, sp, #116	; 0x74
 800cac0:	9002      	str	r0, [sp, #8]
 800cac2:	9006      	str	r0, [sp, #24]
 800cac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cac8:	4809      	ldr	r0, [pc, #36]	; (800caf0 <siprintf+0x38>)
 800caca:	9107      	str	r1, [sp, #28]
 800cacc:	9104      	str	r1, [sp, #16]
 800cace:	4909      	ldr	r1, [pc, #36]	; (800caf4 <siprintf+0x3c>)
 800cad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad4:	9105      	str	r1, [sp, #20]
 800cad6:	6800      	ldr	r0, [r0, #0]
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	a902      	add	r1, sp, #8
 800cadc:	f003 f802 	bl	800fae4 <_svfiprintf_r>
 800cae0:	9b02      	ldr	r3, [sp, #8]
 800cae2:	2200      	movs	r2, #0
 800cae4:	701a      	strb	r2, [r3, #0]
 800cae6:	b01c      	add	sp, #112	; 0x70
 800cae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800caec:	b003      	add	sp, #12
 800caee:	4770      	bx	lr
 800caf0:	20000478 	.word	0x20000478
 800caf4:	ffff0208 	.word	0xffff0208

0800caf8 <sulp>:
 800caf8:	b570      	push	{r4, r5, r6, lr}
 800cafa:	4604      	mov	r4, r0
 800cafc:	460d      	mov	r5, r1
 800cafe:	ec45 4b10 	vmov	d0, r4, r5
 800cb02:	4616      	mov	r6, r2
 800cb04:	f002 fdaa 	bl	800f65c <__ulp>
 800cb08:	ec51 0b10 	vmov	r0, r1, d0
 800cb0c:	b17e      	cbz	r6, 800cb2e <sulp+0x36>
 800cb0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cb12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dd09      	ble.n	800cb2e <sulp+0x36>
 800cb1a:	051b      	lsls	r3, r3, #20
 800cb1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cb20:	2400      	movs	r4, #0
 800cb22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cb26:	4622      	mov	r2, r4
 800cb28:	462b      	mov	r3, r5
 800cb2a:	f7f7 fa25 	bl	8003f78 <__aeabi_dmul>
 800cb2e:	bd70      	pop	{r4, r5, r6, pc}

0800cb30 <_strtod_l>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	461f      	mov	r7, r3
 800cb36:	b0a1      	sub	sp, #132	; 0x84
 800cb38:	2300      	movs	r3, #0
 800cb3a:	4681      	mov	r9, r0
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	460e      	mov	r6, r1
 800cb40:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb42:	931c      	str	r3, [sp, #112]	; 0x70
 800cb44:	f002 fa2f 	bl	800efa6 <__localeconv_l>
 800cb48:	4680      	mov	r8, r0
 800cb4a:	6800      	ldr	r0, [r0, #0]
 800cb4c:	f7f6 fffd 	bl	8003b4a <strlen>
 800cb50:	f04f 0a00 	mov.w	sl, #0
 800cb54:	4604      	mov	r4, r0
 800cb56:	f04f 0b00 	mov.w	fp, #0
 800cb5a:	961b      	str	r6, [sp, #108]	; 0x6c
 800cb5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb5e:	781a      	ldrb	r2, [r3, #0]
 800cb60:	2a0d      	cmp	r2, #13
 800cb62:	d832      	bhi.n	800cbca <_strtod_l+0x9a>
 800cb64:	2a09      	cmp	r2, #9
 800cb66:	d236      	bcs.n	800cbd6 <_strtod_l+0xa6>
 800cb68:	2a00      	cmp	r2, #0
 800cb6a:	d03e      	beq.n	800cbea <_strtod_l+0xba>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cb72:	782b      	ldrb	r3, [r5, #0]
 800cb74:	2b30      	cmp	r3, #48	; 0x30
 800cb76:	f040 80ac 	bne.w	800ccd2 <_strtod_l+0x1a2>
 800cb7a:	786b      	ldrb	r3, [r5, #1]
 800cb7c:	2b58      	cmp	r3, #88	; 0x58
 800cb7e:	d001      	beq.n	800cb84 <_strtod_l+0x54>
 800cb80:	2b78      	cmp	r3, #120	; 0x78
 800cb82:	d167      	bne.n	800cc54 <_strtod_l+0x124>
 800cb84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb86:	9301      	str	r3, [sp, #4]
 800cb88:	ab1c      	add	r3, sp, #112	; 0x70
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	9702      	str	r7, [sp, #8]
 800cb8e:	ab1d      	add	r3, sp, #116	; 0x74
 800cb90:	4a88      	ldr	r2, [pc, #544]	; (800cdb4 <_strtod_l+0x284>)
 800cb92:	a91b      	add	r1, sp, #108	; 0x6c
 800cb94:	4648      	mov	r0, r9
 800cb96:	f001 ff2c 	bl	800e9f2 <__gethex>
 800cb9a:	f010 0407 	ands.w	r4, r0, #7
 800cb9e:	4606      	mov	r6, r0
 800cba0:	d005      	beq.n	800cbae <_strtod_l+0x7e>
 800cba2:	2c06      	cmp	r4, #6
 800cba4:	d12b      	bne.n	800cbfe <_strtod_l+0xce>
 800cba6:	3501      	adds	r5, #1
 800cba8:	2300      	movs	r3, #0
 800cbaa:	951b      	str	r5, [sp, #108]	; 0x6c
 800cbac:	930d      	str	r3, [sp, #52]	; 0x34
 800cbae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f040 859a 	bne.w	800d6ea <_strtod_l+0xbba>
 800cbb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbb8:	b1e3      	cbz	r3, 800cbf4 <_strtod_l+0xc4>
 800cbba:	4652      	mov	r2, sl
 800cbbc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cbc0:	ec43 2b10 	vmov	d0, r2, r3
 800cbc4:	b021      	add	sp, #132	; 0x84
 800cbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbca:	2a2b      	cmp	r2, #43	; 0x2b
 800cbcc:	d015      	beq.n	800cbfa <_strtod_l+0xca>
 800cbce:	2a2d      	cmp	r2, #45	; 0x2d
 800cbd0:	d004      	beq.n	800cbdc <_strtod_l+0xac>
 800cbd2:	2a20      	cmp	r2, #32
 800cbd4:	d1ca      	bne.n	800cb6c <_strtod_l+0x3c>
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	931b      	str	r3, [sp, #108]	; 0x6c
 800cbda:	e7bf      	b.n	800cb5c <_strtod_l+0x2c>
 800cbdc:	2201      	movs	r2, #1
 800cbde:	920d      	str	r2, [sp, #52]	; 0x34
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	921b      	str	r2, [sp, #108]	; 0x6c
 800cbe4:	785b      	ldrb	r3, [r3, #1]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1c2      	bne.n	800cb70 <_strtod_l+0x40>
 800cbea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbec:	961b      	str	r6, [sp, #108]	; 0x6c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f040 8579 	bne.w	800d6e6 <_strtod_l+0xbb6>
 800cbf4:	4652      	mov	r2, sl
 800cbf6:	465b      	mov	r3, fp
 800cbf8:	e7e2      	b.n	800cbc0 <_strtod_l+0x90>
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	e7ef      	b.n	800cbde <_strtod_l+0xae>
 800cbfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cc00:	b13a      	cbz	r2, 800cc12 <_strtod_l+0xe2>
 800cc02:	2135      	movs	r1, #53	; 0x35
 800cc04:	a81e      	add	r0, sp, #120	; 0x78
 800cc06:	f002 fe21 	bl	800f84c <__copybits>
 800cc0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc0c:	4648      	mov	r0, r9
 800cc0e:	f002 fa8d 	bl	800f12c <_Bfree>
 800cc12:	3c01      	subs	r4, #1
 800cc14:	2c04      	cmp	r4, #4
 800cc16:	d806      	bhi.n	800cc26 <_strtod_l+0xf6>
 800cc18:	e8df f004 	tbb	[pc, r4]
 800cc1c:	1714030a 	.word	0x1714030a
 800cc20:	0a          	.byte	0x0a
 800cc21:	00          	.byte	0x00
 800cc22:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800cc26:	0730      	lsls	r0, r6, #28
 800cc28:	d5c1      	bpl.n	800cbae <_strtod_l+0x7e>
 800cc2a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cc2e:	e7be      	b.n	800cbae <_strtod_l+0x7e>
 800cc30:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800cc34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cc36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cc3a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cc3e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc42:	e7f0      	b.n	800cc26 <_strtod_l+0xf6>
 800cc44:	f8df b170 	ldr.w	fp, [pc, #368]	; 800cdb8 <_strtod_l+0x288>
 800cc48:	e7ed      	b.n	800cc26 <_strtod_l+0xf6>
 800cc4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cc4e:	f04f 3aff 	mov.w	sl, #4294967295
 800cc52:	e7e8      	b.n	800cc26 <_strtod_l+0xf6>
 800cc54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	921b      	str	r2, [sp, #108]	; 0x6c
 800cc5a:	785b      	ldrb	r3, [r3, #1]
 800cc5c:	2b30      	cmp	r3, #48	; 0x30
 800cc5e:	d0f9      	beq.n	800cc54 <_strtod_l+0x124>
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d0a4      	beq.n	800cbae <_strtod_l+0x7e>
 800cc64:	2301      	movs	r3, #1
 800cc66:	2500      	movs	r5, #0
 800cc68:	9306      	str	r3, [sp, #24]
 800cc6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc6c:	9308      	str	r3, [sp, #32]
 800cc6e:	9507      	str	r5, [sp, #28]
 800cc70:	9505      	str	r5, [sp, #20]
 800cc72:	220a      	movs	r2, #10
 800cc74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cc76:	7807      	ldrb	r7, [r0, #0]
 800cc78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800cc7c:	b2d9      	uxtb	r1, r3
 800cc7e:	2909      	cmp	r1, #9
 800cc80:	d929      	bls.n	800ccd6 <_strtod_l+0x1a6>
 800cc82:	4622      	mov	r2, r4
 800cc84:	f8d8 1000 	ldr.w	r1, [r8]
 800cc88:	f003 f9ed 	bl	8010066 <strncmp>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d031      	beq.n	800ccf4 <_strtod_l+0x1c4>
 800cc90:	2000      	movs	r0, #0
 800cc92:	9c05      	ldr	r4, [sp, #20]
 800cc94:	9004      	str	r0, [sp, #16]
 800cc96:	463b      	mov	r3, r7
 800cc98:	4602      	mov	r2, r0
 800cc9a:	2b65      	cmp	r3, #101	; 0x65
 800cc9c:	d001      	beq.n	800cca2 <_strtod_l+0x172>
 800cc9e:	2b45      	cmp	r3, #69	; 0x45
 800cca0:	d114      	bne.n	800cccc <_strtod_l+0x19c>
 800cca2:	b924      	cbnz	r4, 800ccae <_strtod_l+0x17e>
 800cca4:	b910      	cbnz	r0, 800ccac <_strtod_l+0x17c>
 800cca6:	9b06      	ldr	r3, [sp, #24]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d09e      	beq.n	800cbea <_strtod_l+0xba>
 800ccac:	2400      	movs	r4, #0
 800ccae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ccb0:	1c73      	adds	r3, r6, #1
 800ccb2:	931b      	str	r3, [sp, #108]	; 0x6c
 800ccb4:	7873      	ldrb	r3, [r6, #1]
 800ccb6:	2b2b      	cmp	r3, #43	; 0x2b
 800ccb8:	d078      	beq.n	800cdac <_strtod_l+0x27c>
 800ccba:	2b2d      	cmp	r3, #45	; 0x2d
 800ccbc:	d070      	beq.n	800cda0 <_strtod_l+0x270>
 800ccbe:	f04f 0c00 	mov.w	ip, #0
 800ccc2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800ccc6:	2f09      	cmp	r7, #9
 800ccc8:	d97c      	bls.n	800cdc4 <_strtod_l+0x294>
 800ccca:	961b      	str	r6, [sp, #108]	; 0x6c
 800cccc:	f04f 0e00 	mov.w	lr, #0
 800ccd0:	e09a      	b.n	800ce08 <_strtod_l+0x2d8>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	e7c7      	b.n	800cc66 <_strtod_l+0x136>
 800ccd6:	9905      	ldr	r1, [sp, #20]
 800ccd8:	2908      	cmp	r1, #8
 800ccda:	bfdd      	ittte	le
 800ccdc:	9907      	ldrle	r1, [sp, #28]
 800ccde:	fb02 3301 	mlale	r3, r2, r1, r3
 800cce2:	9307      	strle	r3, [sp, #28]
 800cce4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800cce8:	9b05      	ldr	r3, [sp, #20]
 800ccea:	3001      	adds	r0, #1
 800ccec:	3301      	adds	r3, #1
 800ccee:	9305      	str	r3, [sp, #20]
 800ccf0:	901b      	str	r0, [sp, #108]	; 0x6c
 800ccf2:	e7bf      	b.n	800cc74 <_strtod_l+0x144>
 800ccf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ccf6:	191a      	adds	r2, r3, r4
 800ccf8:	921b      	str	r2, [sp, #108]	; 0x6c
 800ccfa:	9a05      	ldr	r2, [sp, #20]
 800ccfc:	5d1b      	ldrb	r3, [r3, r4]
 800ccfe:	2a00      	cmp	r2, #0
 800cd00:	d037      	beq.n	800cd72 <_strtod_l+0x242>
 800cd02:	9c05      	ldr	r4, [sp, #20]
 800cd04:	4602      	mov	r2, r0
 800cd06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cd0a:	2909      	cmp	r1, #9
 800cd0c:	d913      	bls.n	800cd36 <_strtod_l+0x206>
 800cd0e:	2101      	movs	r1, #1
 800cd10:	9104      	str	r1, [sp, #16]
 800cd12:	e7c2      	b.n	800cc9a <_strtod_l+0x16a>
 800cd14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd16:	1c5a      	adds	r2, r3, #1
 800cd18:	921b      	str	r2, [sp, #108]	; 0x6c
 800cd1a:	785b      	ldrb	r3, [r3, #1]
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	2b30      	cmp	r3, #48	; 0x30
 800cd20:	d0f8      	beq.n	800cd14 <_strtod_l+0x1e4>
 800cd22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cd26:	2a08      	cmp	r2, #8
 800cd28:	f200 84e4 	bhi.w	800d6f4 <_strtod_l+0xbc4>
 800cd2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cd2e:	9208      	str	r2, [sp, #32]
 800cd30:	4602      	mov	r2, r0
 800cd32:	2000      	movs	r0, #0
 800cd34:	4604      	mov	r4, r0
 800cd36:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800cd3a:	f100 0101 	add.w	r1, r0, #1
 800cd3e:	d012      	beq.n	800cd66 <_strtod_l+0x236>
 800cd40:	440a      	add	r2, r1
 800cd42:	eb00 0c04 	add.w	ip, r0, r4
 800cd46:	4621      	mov	r1, r4
 800cd48:	270a      	movs	r7, #10
 800cd4a:	458c      	cmp	ip, r1
 800cd4c:	d113      	bne.n	800cd76 <_strtod_l+0x246>
 800cd4e:	1821      	adds	r1, r4, r0
 800cd50:	2908      	cmp	r1, #8
 800cd52:	f104 0401 	add.w	r4, r4, #1
 800cd56:	4404      	add	r4, r0
 800cd58:	dc19      	bgt.n	800cd8e <_strtod_l+0x25e>
 800cd5a:	9b07      	ldr	r3, [sp, #28]
 800cd5c:	210a      	movs	r1, #10
 800cd5e:	fb01 e303 	mla	r3, r1, r3, lr
 800cd62:	9307      	str	r3, [sp, #28]
 800cd64:	2100      	movs	r1, #0
 800cd66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd68:	1c58      	adds	r0, r3, #1
 800cd6a:	901b      	str	r0, [sp, #108]	; 0x6c
 800cd6c:	785b      	ldrb	r3, [r3, #1]
 800cd6e:	4608      	mov	r0, r1
 800cd70:	e7c9      	b.n	800cd06 <_strtod_l+0x1d6>
 800cd72:	9805      	ldr	r0, [sp, #20]
 800cd74:	e7d3      	b.n	800cd1e <_strtod_l+0x1ee>
 800cd76:	2908      	cmp	r1, #8
 800cd78:	f101 0101 	add.w	r1, r1, #1
 800cd7c:	dc03      	bgt.n	800cd86 <_strtod_l+0x256>
 800cd7e:	9b07      	ldr	r3, [sp, #28]
 800cd80:	437b      	muls	r3, r7
 800cd82:	9307      	str	r3, [sp, #28]
 800cd84:	e7e1      	b.n	800cd4a <_strtod_l+0x21a>
 800cd86:	2910      	cmp	r1, #16
 800cd88:	bfd8      	it	le
 800cd8a:	437d      	mulle	r5, r7
 800cd8c:	e7dd      	b.n	800cd4a <_strtod_l+0x21a>
 800cd8e:	2c10      	cmp	r4, #16
 800cd90:	bfdc      	itt	le
 800cd92:	210a      	movle	r1, #10
 800cd94:	fb01 e505 	mlale	r5, r1, r5, lr
 800cd98:	e7e4      	b.n	800cd64 <_strtod_l+0x234>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	9304      	str	r3, [sp, #16]
 800cd9e:	e781      	b.n	800cca4 <_strtod_l+0x174>
 800cda0:	f04f 0c01 	mov.w	ip, #1
 800cda4:	1cb3      	adds	r3, r6, #2
 800cda6:	931b      	str	r3, [sp, #108]	; 0x6c
 800cda8:	78b3      	ldrb	r3, [r6, #2]
 800cdaa:	e78a      	b.n	800ccc2 <_strtod_l+0x192>
 800cdac:	f04f 0c00 	mov.w	ip, #0
 800cdb0:	e7f8      	b.n	800cda4 <_strtod_l+0x274>
 800cdb2:	bf00      	nop
 800cdb4:	0807674c 	.word	0x0807674c
 800cdb8:	7ff00000 	.word	0x7ff00000
 800cdbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdbe:	1c5f      	adds	r7, r3, #1
 800cdc0:	971b      	str	r7, [sp, #108]	; 0x6c
 800cdc2:	785b      	ldrb	r3, [r3, #1]
 800cdc4:	2b30      	cmp	r3, #48	; 0x30
 800cdc6:	d0f9      	beq.n	800cdbc <_strtod_l+0x28c>
 800cdc8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800cdcc:	2f08      	cmp	r7, #8
 800cdce:	f63f af7d 	bhi.w	800cccc <_strtod_l+0x19c>
 800cdd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800cdd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdd8:	930a      	str	r3, [sp, #40]	; 0x28
 800cdda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cddc:	1c5f      	adds	r7, r3, #1
 800cdde:	971b      	str	r7, [sp, #108]	; 0x6c
 800cde0:	785b      	ldrb	r3, [r3, #1]
 800cde2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800cde6:	f1b8 0f09 	cmp.w	r8, #9
 800cdea:	d937      	bls.n	800ce5c <_strtod_l+0x32c>
 800cdec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cdee:	1a7f      	subs	r7, r7, r1
 800cdf0:	2f08      	cmp	r7, #8
 800cdf2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cdf6:	dc37      	bgt.n	800ce68 <_strtod_l+0x338>
 800cdf8:	45be      	cmp	lr, r7
 800cdfa:	bfa8      	it	ge
 800cdfc:	46be      	movge	lr, r7
 800cdfe:	f1bc 0f00 	cmp.w	ip, #0
 800ce02:	d001      	beq.n	800ce08 <_strtod_l+0x2d8>
 800ce04:	f1ce 0e00 	rsb	lr, lr, #0
 800ce08:	2c00      	cmp	r4, #0
 800ce0a:	d151      	bne.n	800ceb0 <_strtod_l+0x380>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f47f aece 	bne.w	800cbae <_strtod_l+0x7e>
 800ce12:	9a06      	ldr	r2, [sp, #24]
 800ce14:	2a00      	cmp	r2, #0
 800ce16:	f47f aeca 	bne.w	800cbae <_strtod_l+0x7e>
 800ce1a:	9a04      	ldr	r2, [sp, #16]
 800ce1c:	2a00      	cmp	r2, #0
 800ce1e:	f47f aee4 	bne.w	800cbea <_strtod_l+0xba>
 800ce22:	2b4e      	cmp	r3, #78	; 0x4e
 800ce24:	d027      	beq.n	800ce76 <_strtod_l+0x346>
 800ce26:	dc21      	bgt.n	800ce6c <_strtod_l+0x33c>
 800ce28:	2b49      	cmp	r3, #73	; 0x49
 800ce2a:	f47f aede 	bne.w	800cbea <_strtod_l+0xba>
 800ce2e:	49a0      	ldr	r1, [pc, #640]	; (800d0b0 <_strtod_l+0x580>)
 800ce30:	a81b      	add	r0, sp, #108	; 0x6c
 800ce32:	f002 f811 	bl	800ee58 <__match>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	f43f aed7 	beq.w	800cbea <_strtod_l+0xba>
 800ce3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce3e:	499d      	ldr	r1, [pc, #628]	; (800d0b4 <_strtod_l+0x584>)
 800ce40:	3b01      	subs	r3, #1
 800ce42:	a81b      	add	r0, sp, #108	; 0x6c
 800ce44:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce46:	f002 f807 	bl	800ee58 <__match>
 800ce4a:	b910      	cbnz	r0, 800ce52 <_strtod_l+0x322>
 800ce4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce4e:	3301      	adds	r3, #1
 800ce50:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce52:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d0c8 <_strtod_l+0x598>
 800ce56:	f04f 0a00 	mov.w	sl, #0
 800ce5a:	e6a8      	b.n	800cbae <_strtod_l+0x7e>
 800ce5c:	210a      	movs	r1, #10
 800ce5e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ce62:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ce66:	e7b8      	b.n	800cdda <_strtod_l+0x2aa>
 800ce68:	46be      	mov	lr, r7
 800ce6a:	e7c8      	b.n	800cdfe <_strtod_l+0x2ce>
 800ce6c:	2b69      	cmp	r3, #105	; 0x69
 800ce6e:	d0de      	beq.n	800ce2e <_strtod_l+0x2fe>
 800ce70:	2b6e      	cmp	r3, #110	; 0x6e
 800ce72:	f47f aeba 	bne.w	800cbea <_strtod_l+0xba>
 800ce76:	4990      	ldr	r1, [pc, #576]	; (800d0b8 <_strtod_l+0x588>)
 800ce78:	a81b      	add	r0, sp, #108	; 0x6c
 800ce7a:	f001 ffed 	bl	800ee58 <__match>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	f43f aeb3 	beq.w	800cbea <_strtod_l+0xba>
 800ce84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	2b28      	cmp	r3, #40	; 0x28
 800ce8a:	d10e      	bne.n	800ceaa <_strtod_l+0x37a>
 800ce8c:	aa1e      	add	r2, sp, #120	; 0x78
 800ce8e:	498b      	ldr	r1, [pc, #556]	; (800d0bc <_strtod_l+0x58c>)
 800ce90:	a81b      	add	r0, sp, #108	; 0x6c
 800ce92:	f001 fff5 	bl	800ee80 <__hexnan>
 800ce96:	2805      	cmp	r0, #5
 800ce98:	d107      	bne.n	800ceaa <_strtod_l+0x37a>
 800ce9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ce9c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800cea0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cea4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cea8:	e681      	b.n	800cbae <_strtod_l+0x7e>
 800ceaa:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d0d0 <_strtod_l+0x5a0>
 800ceae:	e7d2      	b.n	800ce56 <_strtod_l+0x326>
 800ceb0:	ebae 0302 	sub.w	r3, lr, r2
 800ceb4:	9306      	str	r3, [sp, #24]
 800ceb6:	9b05      	ldr	r3, [sp, #20]
 800ceb8:	9807      	ldr	r0, [sp, #28]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	bf08      	it	eq
 800cebe:	4623      	moveq	r3, r4
 800cec0:	2c10      	cmp	r4, #16
 800cec2:	9305      	str	r3, [sp, #20]
 800cec4:	46a0      	mov	r8, r4
 800cec6:	bfa8      	it	ge
 800cec8:	f04f 0810 	movge.w	r8, #16
 800cecc:	f7f6 ffda 	bl	8003e84 <__aeabi_ui2d>
 800ced0:	2c09      	cmp	r4, #9
 800ced2:	4682      	mov	sl, r0
 800ced4:	468b      	mov	fp, r1
 800ced6:	dc13      	bgt.n	800cf00 <_strtod_l+0x3d0>
 800ced8:	9b06      	ldr	r3, [sp, #24]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f43f ae67 	beq.w	800cbae <_strtod_l+0x7e>
 800cee0:	9b06      	ldr	r3, [sp, #24]
 800cee2:	dd7a      	ble.n	800cfda <_strtod_l+0x4aa>
 800cee4:	2b16      	cmp	r3, #22
 800cee6:	dc61      	bgt.n	800cfac <_strtod_l+0x47c>
 800cee8:	4a75      	ldr	r2, [pc, #468]	; (800d0c0 <_strtod_l+0x590>)
 800ceea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ceee:	e9de 0100 	ldrd	r0, r1, [lr]
 800cef2:	4652      	mov	r2, sl
 800cef4:	465b      	mov	r3, fp
 800cef6:	f7f7 f83f 	bl	8003f78 <__aeabi_dmul>
 800cefa:	4682      	mov	sl, r0
 800cefc:	468b      	mov	fp, r1
 800cefe:	e656      	b.n	800cbae <_strtod_l+0x7e>
 800cf00:	4b6f      	ldr	r3, [pc, #444]	; (800d0c0 <_strtod_l+0x590>)
 800cf02:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cf06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cf0a:	f7f7 f835 	bl	8003f78 <__aeabi_dmul>
 800cf0e:	4606      	mov	r6, r0
 800cf10:	4628      	mov	r0, r5
 800cf12:	460f      	mov	r7, r1
 800cf14:	f7f6 ffb6 	bl	8003e84 <__aeabi_ui2d>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	4639      	mov	r1, r7
 800cf20:	f7f6 fe74 	bl	8003c0c <__adddf3>
 800cf24:	2c0f      	cmp	r4, #15
 800cf26:	4682      	mov	sl, r0
 800cf28:	468b      	mov	fp, r1
 800cf2a:	ddd5      	ble.n	800ced8 <_strtod_l+0x3a8>
 800cf2c:	9b06      	ldr	r3, [sp, #24]
 800cf2e:	eba4 0808 	sub.w	r8, r4, r8
 800cf32:	4498      	add	r8, r3
 800cf34:	f1b8 0f00 	cmp.w	r8, #0
 800cf38:	f340 8096 	ble.w	800d068 <_strtod_l+0x538>
 800cf3c:	f018 030f 	ands.w	r3, r8, #15
 800cf40:	d00a      	beq.n	800cf58 <_strtod_l+0x428>
 800cf42:	495f      	ldr	r1, [pc, #380]	; (800d0c0 <_strtod_l+0x590>)
 800cf44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf48:	4652      	mov	r2, sl
 800cf4a:	465b      	mov	r3, fp
 800cf4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf50:	f7f7 f812 	bl	8003f78 <__aeabi_dmul>
 800cf54:	4682      	mov	sl, r0
 800cf56:	468b      	mov	fp, r1
 800cf58:	f038 080f 	bics.w	r8, r8, #15
 800cf5c:	d073      	beq.n	800d046 <_strtod_l+0x516>
 800cf5e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cf62:	dd47      	ble.n	800cff4 <_strtod_l+0x4c4>
 800cf64:	2400      	movs	r4, #0
 800cf66:	46a0      	mov	r8, r4
 800cf68:	9407      	str	r4, [sp, #28]
 800cf6a:	9405      	str	r4, [sp, #20]
 800cf6c:	2322      	movs	r3, #34	; 0x22
 800cf6e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d0c8 <_strtod_l+0x598>
 800cf72:	f8c9 3000 	str.w	r3, [r9]
 800cf76:	f04f 0a00 	mov.w	sl, #0
 800cf7a:	9b07      	ldr	r3, [sp, #28]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f43f ae16 	beq.w	800cbae <_strtod_l+0x7e>
 800cf82:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf84:	4648      	mov	r0, r9
 800cf86:	f002 f8d1 	bl	800f12c <_Bfree>
 800cf8a:	9905      	ldr	r1, [sp, #20]
 800cf8c:	4648      	mov	r0, r9
 800cf8e:	f002 f8cd 	bl	800f12c <_Bfree>
 800cf92:	4641      	mov	r1, r8
 800cf94:	4648      	mov	r0, r9
 800cf96:	f002 f8c9 	bl	800f12c <_Bfree>
 800cf9a:	9907      	ldr	r1, [sp, #28]
 800cf9c:	4648      	mov	r0, r9
 800cf9e:	f002 f8c5 	bl	800f12c <_Bfree>
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	4648      	mov	r0, r9
 800cfa6:	f002 f8c1 	bl	800f12c <_Bfree>
 800cfaa:	e600      	b.n	800cbae <_strtod_l+0x7e>
 800cfac:	9a06      	ldr	r2, [sp, #24]
 800cfae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	dbba      	blt.n	800cf2c <_strtod_l+0x3fc>
 800cfb6:	4d42      	ldr	r5, [pc, #264]	; (800d0c0 <_strtod_l+0x590>)
 800cfb8:	f1c4 040f 	rsb	r4, r4, #15
 800cfbc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800cfc0:	4652      	mov	r2, sl
 800cfc2:	465b      	mov	r3, fp
 800cfc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc8:	f7f6 ffd6 	bl	8003f78 <__aeabi_dmul>
 800cfcc:	9b06      	ldr	r3, [sp, #24]
 800cfce:	1b1c      	subs	r4, r3, r4
 800cfd0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800cfd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfd8:	e78d      	b.n	800cef6 <_strtod_l+0x3c6>
 800cfda:	f113 0f16 	cmn.w	r3, #22
 800cfde:	dba5      	blt.n	800cf2c <_strtod_l+0x3fc>
 800cfe0:	4a37      	ldr	r2, [pc, #220]	; (800d0c0 <_strtod_l+0x590>)
 800cfe2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800cfe6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cfea:	4650      	mov	r0, sl
 800cfec:	4659      	mov	r1, fp
 800cfee:	f7f7 f8ed 	bl	80041cc <__aeabi_ddiv>
 800cff2:	e782      	b.n	800cefa <_strtod_l+0x3ca>
 800cff4:	2300      	movs	r3, #0
 800cff6:	4e33      	ldr	r6, [pc, #204]	; (800d0c4 <_strtod_l+0x594>)
 800cff8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cffc:	4650      	mov	r0, sl
 800cffe:	4659      	mov	r1, fp
 800d000:	461d      	mov	r5, r3
 800d002:	f1b8 0f01 	cmp.w	r8, #1
 800d006:	dc21      	bgt.n	800d04c <_strtod_l+0x51c>
 800d008:	b10b      	cbz	r3, 800d00e <_strtod_l+0x4de>
 800d00a:	4682      	mov	sl, r0
 800d00c:	468b      	mov	fp, r1
 800d00e:	4b2d      	ldr	r3, [pc, #180]	; (800d0c4 <_strtod_l+0x594>)
 800d010:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d014:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d018:	4652      	mov	r2, sl
 800d01a:	465b      	mov	r3, fp
 800d01c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d020:	f7f6 ffaa 	bl	8003f78 <__aeabi_dmul>
 800d024:	4b28      	ldr	r3, [pc, #160]	; (800d0c8 <_strtod_l+0x598>)
 800d026:	460a      	mov	r2, r1
 800d028:	400b      	ands	r3, r1
 800d02a:	4928      	ldr	r1, [pc, #160]	; (800d0cc <_strtod_l+0x59c>)
 800d02c:	428b      	cmp	r3, r1
 800d02e:	4682      	mov	sl, r0
 800d030:	d898      	bhi.n	800cf64 <_strtod_l+0x434>
 800d032:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d036:	428b      	cmp	r3, r1
 800d038:	bf86      	itte	hi
 800d03a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d0d4 <_strtod_l+0x5a4>
 800d03e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d042:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d046:	2300      	movs	r3, #0
 800d048:	9304      	str	r3, [sp, #16]
 800d04a:	e077      	b.n	800d13c <_strtod_l+0x60c>
 800d04c:	f018 0f01 	tst.w	r8, #1
 800d050:	d006      	beq.n	800d060 <_strtod_l+0x530>
 800d052:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05a:	f7f6 ff8d 	bl	8003f78 <__aeabi_dmul>
 800d05e:	2301      	movs	r3, #1
 800d060:	3501      	adds	r5, #1
 800d062:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d066:	e7cc      	b.n	800d002 <_strtod_l+0x4d2>
 800d068:	d0ed      	beq.n	800d046 <_strtod_l+0x516>
 800d06a:	f1c8 0800 	rsb	r8, r8, #0
 800d06e:	f018 020f 	ands.w	r2, r8, #15
 800d072:	d00a      	beq.n	800d08a <_strtod_l+0x55a>
 800d074:	4b12      	ldr	r3, [pc, #72]	; (800d0c0 <_strtod_l+0x590>)
 800d076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d07a:	4650      	mov	r0, sl
 800d07c:	4659      	mov	r1, fp
 800d07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d082:	f7f7 f8a3 	bl	80041cc <__aeabi_ddiv>
 800d086:	4682      	mov	sl, r0
 800d088:	468b      	mov	fp, r1
 800d08a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d08e:	d0da      	beq.n	800d046 <_strtod_l+0x516>
 800d090:	f1b8 0f1f 	cmp.w	r8, #31
 800d094:	dd20      	ble.n	800d0d8 <_strtod_l+0x5a8>
 800d096:	2400      	movs	r4, #0
 800d098:	46a0      	mov	r8, r4
 800d09a:	9407      	str	r4, [sp, #28]
 800d09c:	9405      	str	r4, [sp, #20]
 800d09e:	2322      	movs	r3, #34	; 0x22
 800d0a0:	f04f 0a00 	mov.w	sl, #0
 800d0a4:	f04f 0b00 	mov.w	fp, #0
 800d0a8:	f8c9 3000 	str.w	r3, [r9]
 800d0ac:	e765      	b.n	800cf7a <_strtod_l+0x44a>
 800d0ae:	bf00      	nop
 800d0b0:	08076715 	.word	0x08076715
 800d0b4:	080767a3 	.word	0x080767a3
 800d0b8:	0807671d 	.word	0x0807671d
 800d0bc:	08076760 	.word	0x08076760
 800d0c0:	08076848 	.word	0x08076848
 800d0c4:	08076820 	.word	0x08076820
 800d0c8:	7ff00000 	.word	0x7ff00000
 800d0cc:	7ca00000 	.word	0x7ca00000
 800d0d0:	fff80000 	.word	0xfff80000
 800d0d4:	7fefffff 	.word	0x7fefffff
 800d0d8:	f018 0310 	ands.w	r3, r8, #16
 800d0dc:	bf18      	it	ne
 800d0de:	236a      	movne	r3, #106	; 0x6a
 800d0e0:	4da0      	ldr	r5, [pc, #640]	; (800d364 <_strtod_l+0x834>)
 800d0e2:	9304      	str	r3, [sp, #16]
 800d0e4:	4650      	mov	r0, sl
 800d0e6:	4659      	mov	r1, fp
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f1b8 0f00 	cmp.w	r8, #0
 800d0ee:	f300 810a 	bgt.w	800d306 <_strtod_l+0x7d6>
 800d0f2:	b10b      	cbz	r3, 800d0f8 <_strtod_l+0x5c8>
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	468b      	mov	fp, r1
 800d0f8:	9b04      	ldr	r3, [sp, #16]
 800d0fa:	b1bb      	cbz	r3, 800d12c <_strtod_l+0x5fc>
 800d0fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d100:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d104:	2b00      	cmp	r3, #0
 800d106:	4659      	mov	r1, fp
 800d108:	dd10      	ble.n	800d12c <_strtod_l+0x5fc>
 800d10a:	2b1f      	cmp	r3, #31
 800d10c:	f340 8107 	ble.w	800d31e <_strtod_l+0x7ee>
 800d110:	2b34      	cmp	r3, #52	; 0x34
 800d112:	bfde      	ittt	le
 800d114:	3b20      	suble	r3, #32
 800d116:	f04f 32ff 	movle.w	r2, #4294967295
 800d11a:	fa02 f303 	lslle.w	r3, r2, r3
 800d11e:	f04f 0a00 	mov.w	sl, #0
 800d122:	bfcc      	ite	gt
 800d124:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d128:	ea03 0b01 	andle.w	fp, r3, r1
 800d12c:	2200      	movs	r2, #0
 800d12e:	2300      	movs	r3, #0
 800d130:	4650      	mov	r0, sl
 800d132:	4659      	mov	r1, fp
 800d134:	f7f7 f988 	bl	8004448 <__aeabi_dcmpeq>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d1ac      	bne.n	800d096 <_strtod_l+0x566>
 800d13c:	9b07      	ldr	r3, [sp, #28]
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	9a05      	ldr	r2, [sp, #20]
 800d142:	9908      	ldr	r1, [sp, #32]
 800d144:	4623      	mov	r3, r4
 800d146:	4648      	mov	r0, r9
 800d148:	f002 f842 	bl	800f1d0 <__s2b>
 800d14c:	9007      	str	r0, [sp, #28]
 800d14e:	2800      	cmp	r0, #0
 800d150:	f43f af08 	beq.w	800cf64 <_strtod_l+0x434>
 800d154:	9a06      	ldr	r2, [sp, #24]
 800d156:	9b06      	ldr	r3, [sp, #24]
 800d158:	2a00      	cmp	r2, #0
 800d15a:	f1c3 0300 	rsb	r3, r3, #0
 800d15e:	bfa8      	it	ge
 800d160:	2300      	movge	r3, #0
 800d162:	930e      	str	r3, [sp, #56]	; 0x38
 800d164:	2400      	movs	r4, #0
 800d166:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d16a:	9316      	str	r3, [sp, #88]	; 0x58
 800d16c:	46a0      	mov	r8, r4
 800d16e:	9b07      	ldr	r3, [sp, #28]
 800d170:	4648      	mov	r0, r9
 800d172:	6859      	ldr	r1, [r3, #4]
 800d174:	f001 ffa6 	bl	800f0c4 <_Balloc>
 800d178:	9005      	str	r0, [sp, #20]
 800d17a:	2800      	cmp	r0, #0
 800d17c:	f43f aef6 	beq.w	800cf6c <_strtod_l+0x43c>
 800d180:	9b07      	ldr	r3, [sp, #28]
 800d182:	691a      	ldr	r2, [r3, #16]
 800d184:	3202      	adds	r2, #2
 800d186:	f103 010c 	add.w	r1, r3, #12
 800d18a:	0092      	lsls	r2, r2, #2
 800d18c:	300c      	adds	r0, #12
 800d18e:	f7fe fdac 	bl	800bcea <memcpy>
 800d192:	aa1e      	add	r2, sp, #120	; 0x78
 800d194:	a91d      	add	r1, sp, #116	; 0x74
 800d196:	ec4b ab10 	vmov	d0, sl, fp
 800d19a:	4648      	mov	r0, r9
 800d19c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d1a0:	f002 fad2 	bl	800f748 <__d2b>
 800d1a4:	901c      	str	r0, [sp, #112]	; 0x70
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	f43f aee0 	beq.w	800cf6c <_strtod_l+0x43c>
 800d1ac:	2101      	movs	r1, #1
 800d1ae:	4648      	mov	r0, r9
 800d1b0:	f002 f89a 	bl	800f2e8 <__i2b>
 800d1b4:	4680      	mov	r8, r0
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	f43f aed8 	beq.w	800cf6c <_strtod_l+0x43c>
 800d1bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d1be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d1c0:	2e00      	cmp	r6, #0
 800d1c2:	bfab      	itete	ge
 800d1c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d1c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d1c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d1ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d1cc:	bfac      	ite	ge
 800d1ce:	18f7      	addge	r7, r6, r3
 800d1d0:	1b9d      	sublt	r5, r3, r6
 800d1d2:	9b04      	ldr	r3, [sp, #16]
 800d1d4:	1af6      	subs	r6, r6, r3
 800d1d6:	4416      	add	r6, r2
 800d1d8:	4b63      	ldr	r3, [pc, #396]	; (800d368 <_strtod_l+0x838>)
 800d1da:	3e01      	subs	r6, #1
 800d1dc:	429e      	cmp	r6, r3
 800d1de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d1e2:	f280 80af 	bge.w	800d344 <_strtod_l+0x814>
 800d1e6:	1b9b      	subs	r3, r3, r6
 800d1e8:	2b1f      	cmp	r3, #31
 800d1ea:	eba2 0203 	sub.w	r2, r2, r3
 800d1ee:	f04f 0101 	mov.w	r1, #1
 800d1f2:	f300 809b 	bgt.w	800d32c <_strtod_l+0x7fc>
 800d1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d1fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d200:	18be      	adds	r6, r7, r2
 800d202:	9b04      	ldr	r3, [sp, #16]
 800d204:	42b7      	cmp	r7, r6
 800d206:	4415      	add	r5, r2
 800d208:	441d      	add	r5, r3
 800d20a:	463b      	mov	r3, r7
 800d20c:	bfa8      	it	ge
 800d20e:	4633      	movge	r3, r6
 800d210:	42ab      	cmp	r3, r5
 800d212:	bfa8      	it	ge
 800d214:	462b      	movge	r3, r5
 800d216:	2b00      	cmp	r3, #0
 800d218:	bfc2      	ittt	gt
 800d21a:	1af6      	subgt	r6, r6, r3
 800d21c:	1aed      	subgt	r5, r5, r3
 800d21e:	1aff      	subgt	r7, r7, r3
 800d220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d222:	b1bb      	cbz	r3, 800d254 <_strtod_l+0x724>
 800d224:	4641      	mov	r1, r8
 800d226:	461a      	mov	r2, r3
 800d228:	4648      	mov	r0, r9
 800d22a:	f002 f8fd 	bl	800f428 <__pow5mult>
 800d22e:	4680      	mov	r8, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	f43f ae9b 	beq.w	800cf6c <_strtod_l+0x43c>
 800d236:	4601      	mov	r1, r0
 800d238:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d23a:	4648      	mov	r0, r9
 800d23c:	f002 f85d 	bl	800f2fa <__multiply>
 800d240:	900c      	str	r0, [sp, #48]	; 0x30
 800d242:	2800      	cmp	r0, #0
 800d244:	f43f ae92 	beq.w	800cf6c <_strtod_l+0x43c>
 800d248:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d24a:	4648      	mov	r0, r9
 800d24c:	f001 ff6e 	bl	800f12c <_Bfree>
 800d250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d252:	931c      	str	r3, [sp, #112]	; 0x70
 800d254:	2e00      	cmp	r6, #0
 800d256:	dc7a      	bgt.n	800d34e <_strtod_l+0x81e>
 800d258:	9b06      	ldr	r3, [sp, #24]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	dd08      	ble.n	800d270 <_strtod_l+0x740>
 800d25e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d260:	9905      	ldr	r1, [sp, #20]
 800d262:	4648      	mov	r0, r9
 800d264:	f002 f8e0 	bl	800f428 <__pow5mult>
 800d268:	9005      	str	r0, [sp, #20]
 800d26a:	2800      	cmp	r0, #0
 800d26c:	f43f ae7e 	beq.w	800cf6c <_strtod_l+0x43c>
 800d270:	2d00      	cmp	r5, #0
 800d272:	dd08      	ble.n	800d286 <_strtod_l+0x756>
 800d274:	462a      	mov	r2, r5
 800d276:	9905      	ldr	r1, [sp, #20]
 800d278:	4648      	mov	r0, r9
 800d27a:	f002 f923 	bl	800f4c4 <__lshift>
 800d27e:	9005      	str	r0, [sp, #20]
 800d280:	2800      	cmp	r0, #0
 800d282:	f43f ae73 	beq.w	800cf6c <_strtod_l+0x43c>
 800d286:	2f00      	cmp	r7, #0
 800d288:	dd08      	ble.n	800d29c <_strtod_l+0x76c>
 800d28a:	4641      	mov	r1, r8
 800d28c:	463a      	mov	r2, r7
 800d28e:	4648      	mov	r0, r9
 800d290:	f002 f918 	bl	800f4c4 <__lshift>
 800d294:	4680      	mov	r8, r0
 800d296:	2800      	cmp	r0, #0
 800d298:	f43f ae68 	beq.w	800cf6c <_strtod_l+0x43c>
 800d29c:	9a05      	ldr	r2, [sp, #20]
 800d29e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d2a0:	4648      	mov	r0, r9
 800d2a2:	f002 f97d 	bl	800f5a0 <__mdiff>
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	f43f ae5f 	beq.w	800cf6c <_strtod_l+0x43c>
 800d2ae:	68c3      	ldr	r3, [r0, #12]
 800d2b0:	930c      	str	r3, [sp, #48]	; 0x30
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	60c3      	str	r3, [r0, #12]
 800d2b6:	4641      	mov	r1, r8
 800d2b8:	f002 f958 	bl	800f56c <__mcmp>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	da55      	bge.n	800d36c <_strtod_l+0x83c>
 800d2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2c2:	b9e3      	cbnz	r3, 800d2fe <_strtod_l+0x7ce>
 800d2c4:	f1ba 0f00 	cmp.w	sl, #0
 800d2c8:	d119      	bne.n	800d2fe <_strtod_l+0x7ce>
 800d2ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2ce:	b9b3      	cbnz	r3, 800d2fe <_strtod_l+0x7ce>
 800d2d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d2d4:	0d1b      	lsrs	r3, r3, #20
 800d2d6:	051b      	lsls	r3, r3, #20
 800d2d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d2dc:	d90f      	bls.n	800d2fe <_strtod_l+0x7ce>
 800d2de:	6963      	ldr	r3, [r4, #20]
 800d2e0:	b913      	cbnz	r3, 800d2e8 <_strtod_l+0x7b8>
 800d2e2:	6923      	ldr	r3, [r4, #16]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	dd0a      	ble.n	800d2fe <_strtod_l+0x7ce>
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	4648      	mov	r0, r9
 800d2ee:	f002 f8e9 	bl	800f4c4 <__lshift>
 800d2f2:	4641      	mov	r1, r8
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	f002 f939 	bl	800f56c <__mcmp>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	dc67      	bgt.n	800d3ce <_strtod_l+0x89e>
 800d2fe:	9b04      	ldr	r3, [sp, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d171      	bne.n	800d3e8 <_strtod_l+0x8b8>
 800d304:	e63d      	b.n	800cf82 <_strtod_l+0x452>
 800d306:	f018 0f01 	tst.w	r8, #1
 800d30a:	d004      	beq.n	800d316 <_strtod_l+0x7e6>
 800d30c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d310:	f7f6 fe32 	bl	8003f78 <__aeabi_dmul>
 800d314:	2301      	movs	r3, #1
 800d316:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d31a:	3508      	adds	r5, #8
 800d31c:	e6e5      	b.n	800d0ea <_strtod_l+0x5ba>
 800d31e:	f04f 32ff 	mov.w	r2, #4294967295
 800d322:	fa02 f303 	lsl.w	r3, r2, r3
 800d326:	ea03 0a0a 	and.w	sl, r3, sl
 800d32a:	e6ff      	b.n	800d12c <_strtod_l+0x5fc>
 800d32c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d330:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d334:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d338:	36e2      	adds	r6, #226	; 0xe2
 800d33a:	fa01 f306 	lsl.w	r3, r1, r6
 800d33e:	930a      	str	r3, [sp, #40]	; 0x28
 800d340:	910f      	str	r1, [sp, #60]	; 0x3c
 800d342:	e75d      	b.n	800d200 <_strtod_l+0x6d0>
 800d344:	2300      	movs	r3, #0
 800d346:	930a      	str	r3, [sp, #40]	; 0x28
 800d348:	2301      	movs	r3, #1
 800d34a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d34c:	e758      	b.n	800d200 <_strtod_l+0x6d0>
 800d34e:	4632      	mov	r2, r6
 800d350:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d352:	4648      	mov	r0, r9
 800d354:	f002 f8b6 	bl	800f4c4 <__lshift>
 800d358:	901c      	str	r0, [sp, #112]	; 0x70
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f47f af7c 	bne.w	800d258 <_strtod_l+0x728>
 800d360:	e604      	b.n	800cf6c <_strtod_l+0x43c>
 800d362:	bf00      	nop
 800d364:	08076778 	.word	0x08076778
 800d368:	fffffc02 	.word	0xfffffc02
 800d36c:	465d      	mov	r5, fp
 800d36e:	f040 8086 	bne.w	800d47e <_strtod_l+0x94e>
 800d372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d378:	b32a      	cbz	r2, 800d3c6 <_strtod_l+0x896>
 800d37a:	4aaf      	ldr	r2, [pc, #700]	; (800d638 <_strtod_l+0xb08>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d153      	bne.n	800d428 <_strtod_l+0x8f8>
 800d380:	9b04      	ldr	r3, [sp, #16]
 800d382:	4650      	mov	r0, sl
 800d384:	b1d3      	cbz	r3, 800d3bc <_strtod_l+0x88c>
 800d386:	4aad      	ldr	r2, [pc, #692]	; (800d63c <_strtod_l+0xb0c>)
 800d388:	402a      	ands	r2, r5
 800d38a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d38e:	f04f 31ff 	mov.w	r1, #4294967295
 800d392:	d816      	bhi.n	800d3c2 <_strtod_l+0x892>
 800d394:	0d12      	lsrs	r2, r2, #20
 800d396:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d39a:	fa01 f303 	lsl.w	r3, r1, r3
 800d39e:	4298      	cmp	r0, r3
 800d3a0:	d142      	bne.n	800d428 <_strtod_l+0x8f8>
 800d3a2:	4ba7      	ldr	r3, [pc, #668]	; (800d640 <_strtod_l+0xb10>)
 800d3a4:	429d      	cmp	r5, r3
 800d3a6:	d102      	bne.n	800d3ae <_strtod_l+0x87e>
 800d3a8:	3001      	adds	r0, #1
 800d3aa:	f43f addf 	beq.w	800cf6c <_strtod_l+0x43c>
 800d3ae:	4ba3      	ldr	r3, [pc, #652]	; (800d63c <_strtod_l+0xb0c>)
 800d3b0:	402b      	ands	r3, r5
 800d3b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d3b6:	f04f 0a00 	mov.w	sl, #0
 800d3ba:	e7a0      	b.n	800d2fe <_strtod_l+0x7ce>
 800d3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c0:	e7ed      	b.n	800d39e <_strtod_l+0x86e>
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	e7eb      	b.n	800d39e <_strtod_l+0x86e>
 800d3c6:	bb7b      	cbnz	r3, 800d428 <_strtod_l+0x8f8>
 800d3c8:	f1ba 0f00 	cmp.w	sl, #0
 800d3cc:	d12c      	bne.n	800d428 <_strtod_l+0x8f8>
 800d3ce:	9904      	ldr	r1, [sp, #16]
 800d3d0:	4a9a      	ldr	r2, [pc, #616]	; (800d63c <_strtod_l+0xb0c>)
 800d3d2:	465b      	mov	r3, fp
 800d3d4:	b1f1      	cbz	r1, 800d414 <_strtod_l+0x8e4>
 800d3d6:	ea02 010b 	and.w	r1, r2, fp
 800d3da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d3de:	dc19      	bgt.n	800d414 <_strtod_l+0x8e4>
 800d3e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d3e4:	f77f ae5b 	ble.w	800d09e <_strtod_l+0x56e>
 800d3e8:	4a96      	ldr	r2, [pc, #600]	; (800d644 <_strtod_l+0xb14>)
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d3f0:	4650      	mov	r0, sl
 800d3f2:	4659      	mov	r1, fp
 800d3f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d3f8:	f7f6 fdbe 	bl	8003f78 <__aeabi_dmul>
 800d3fc:	4682      	mov	sl, r0
 800d3fe:	468b      	mov	fp, r1
 800d400:	2900      	cmp	r1, #0
 800d402:	f47f adbe 	bne.w	800cf82 <_strtod_l+0x452>
 800d406:	2800      	cmp	r0, #0
 800d408:	f47f adbb 	bne.w	800cf82 <_strtod_l+0x452>
 800d40c:	2322      	movs	r3, #34	; 0x22
 800d40e:	f8c9 3000 	str.w	r3, [r9]
 800d412:	e5b6      	b.n	800cf82 <_strtod_l+0x452>
 800d414:	4013      	ands	r3, r2
 800d416:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d41a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d41e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d422:	f04f 3aff 	mov.w	sl, #4294967295
 800d426:	e76a      	b.n	800d2fe <_strtod_l+0x7ce>
 800d428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d42a:	b193      	cbz	r3, 800d452 <_strtod_l+0x922>
 800d42c:	422b      	tst	r3, r5
 800d42e:	f43f af66 	beq.w	800d2fe <_strtod_l+0x7ce>
 800d432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d434:	9a04      	ldr	r2, [sp, #16]
 800d436:	4650      	mov	r0, sl
 800d438:	4659      	mov	r1, fp
 800d43a:	b173      	cbz	r3, 800d45a <_strtod_l+0x92a>
 800d43c:	f7ff fb5c 	bl	800caf8 <sulp>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d448:	f7f6 fbe0 	bl	8003c0c <__adddf3>
 800d44c:	4682      	mov	sl, r0
 800d44e:	468b      	mov	fp, r1
 800d450:	e755      	b.n	800d2fe <_strtod_l+0x7ce>
 800d452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d454:	ea13 0f0a 	tst.w	r3, sl
 800d458:	e7e9      	b.n	800d42e <_strtod_l+0x8fe>
 800d45a:	f7ff fb4d 	bl	800caf8 <sulp>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d466:	f7f6 fbcf 	bl	8003c08 <__aeabi_dsub>
 800d46a:	2200      	movs	r2, #0
 800d46c:	2300      	movs	r3, #0
 800d46e:	4682      	mov	sl, r0
 800d470:	468b      	mov	fp, r1
 800d472:	f7f6 ffe9 	bl	8004448 <__aeabi_dcmpeq>
 800d476:	2800      	cmp	r0, #0
 800d478:	f47f ae11 	bne.w	800d09e <_strtod_l+0x56e>
 800d47c:	e73f      	b.n	800d2fe <_strtod_l+0x7ce>
 800d47e:	4641      	mov	r1, r8
 800d480:	4620      	mov	r0, r4
 800d482:	f002 f9b0 	bl	800f7e6 <__ratio>
 800d486:	ec57 6b10 	vmov	r6, r7, d0
 800d48a:	2200      	movs	r2, #0
 800d48c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d490:	ee10 0a10 	vmov	r0, s0
 800d494:	4639      	mov	r1, r7
 800d496:	f7f6 ffeb 	bl	8004470 <__aeabi_dcmple>
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d077      	beq.n	800d58e <_strtod_l+0xa5e>
 800d49e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d04a      	beq.n	800d53a <_strtod_l+0xa0a>
 800d4a4:	4b68      	ldr	r3, [pc, #416]	; (800d648 <_strtod_l+0xb18>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d4ac:	4f66      	ldr	r7, [pc, #408]	; (800d648 <_strtod_l+0xb18>)
 800d4ae:	2600      	movs	r6, #0
 800d4b0:	4b62      	ldr	r3, [pc, #392]	; (800d63c <_strtod_l+0xb0c>)
 800d4b2:	402b      	ands	r3, r5
 800d4b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d4b8:	4b64      	ldr	r3, [pc, #400]	; (800d64c <_strtod_l+0xb1c>)
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	f040 80ce 	bne.w	800d65c <_strtod_l+0xb2c>
 800d4c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d4c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d4c8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d4cc:	ec4b ab10 	vmov	d0, sl, fp
 800d4d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d4d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d4d8:	f002 f8c0 	bl	800f65c <__ulp>
 800d4dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d4e0:	ec53 2b10 	vmov	r2, r3, d0
 800d4e4:	f7f6 fd48 	bl	8003f78 <__aeabi_dmul>
 800d4e8:	4652      	mov	r2, sl
 800d4ea:	465b      	mov	r3, fp
 800d4ec:	f7f6 fb8e 	bl	8003c0c <__adddf3>
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4952      	ldr	r1, [pc, #328]	; (800d63c <_strtod_l+0xb0c>)
 800d4f4:	4a56      	ldr	r2, [pc, #344]	; (800d650 <_strtod_l+0xb20>)
 800d4f6:	4019      	ands	r1, r3
 800d4f8:	4291      	cmp	r1, r2
 800d4fa:	4682      	mov	sl, r0
 800d4fc:	d95b      	bls.n	800d5b6 <_strtod_l+0xa86>
 800d4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d500:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d504:	4293      	cmp	r3, r2
 800d506:	d103      	bne.n	800d510 <_strtod_l+0x9e0>
 800d508:	9b08      	ldr	r3, [sp, #32]
 800d50a:	3301      	adds	r3, #1
 800d50c:	f43f ad2e 	beq.w	800cf6c <_strtod_l+0x43c>
 800d510:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d640 <_strtod_l+0xb10>
 800d514:	f04f 3aff 	mov.w	sl, #4294967295
 800d518:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d51a:	4648      	mov	r0, r9
 800d51c:	f001 fe06 	bl	800f12c <_Bfree>
 800d520:	9905      	ldr	r1, [sp, #20]
 800d522:	4648      	mov	r0, r9
 800d524:	f001 fe02 	bl	800f12c <_Bfree>
 800d528:	4641      	mov	r1, r8
 800d52a:	4648      	mov	r0, r9
 800d52c:	f001 fdfe 	bl	800f12c <_Bfree>
 800d530:	4621      	mov	r1, r4
 800d532:	4648      	mov	r0, r9
 800d534:	f001 fdfa 	bl	800f12c <_Bfree>
 800d538:	e619      	b.n	800d16e <_strtod_l+0x63e>
 800d53a:	f1ba 0f00 	cmp.w	sl, #0
 800d53e:	d11a      	bne.n	800d576 <_strtod_l+0xa46>
 800d540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d544:	b9eb      	cbnz	r3, 800d582 <_strtod_l+0xa52>
 800d546:	2200      	movs	r2, #0
 800d548:	4b3f      	ldr	r3, [pc, #252]	; (800d648 <_strtod_l+0xb18>)
 800d54a:	4630      	mov	r0, r6
 800d54c:	4639      	mov	r1, r7
 800d54e:	f7f6 ff85 	bl	800445c <__aeabi_dcmplt>
 800d552:	b9c8      	cbnz	r0, 800d588 <_strtod_l+0xa58>
 800d554:	4630      	mov	r0, r6
 800d556:	4639      	mov	r1, r7
 800d558:	2200      	movs	r2, #0
 800d55a:	4b3e      	ldr	r3, [pc, #248]	; (800d654 <_strtod_l+0xb24>)
 800d55c:	f7f6 fd0c 	bl	8003f78 <__aeabi_dmul>
 800d560:	4606      	mov	r6, r0
 800d562:	460f      	mov	r7, r1
 800d564:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d568:	9618      	str	r6, [sp, #96]	; 0x60
 800d56a:	9319      	str	r3, [sp, #100]	; 0x64
 800d56c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d570:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d574:	e79c      	b.n	800d4b0 <_strtod_l+0x980>
 800d576:	f1ba 0f01 	cmp.w	sl, #1
 800d57a:	d102      	bne.n	800d582 <_strtod_l+0xa52>
 800d57c:	2d00      	cmp	r5, #0
 800d57e:	f43f ad8e 	beq.w	800d09e <_strtod_l+0x56e>
 800d582:	2200      	movs	r2, #0
 800d584:	4b34      	ldr	r3, [pc, #208]	; (800d658 <_strtod_l+0xb28>)
 800d586:	e78f      	b.n	800d4a8 <_strtod_l+0x978>
 800d588:	2600      	movs	r6, #0
 800d58a:	4f32      	ldr	r7, [pc, #200]	; (800d654 <_strtod_l+0xb24>)
 800d58c:	e7ea      	b.n	800d564 <_strtod_l+0xa34>
 800d58e:	4b31      	ldr	r3, [pc, #196]	; (800d654 <_strtod_l+0xb24>)
 800d590:	4630      	mov	r0, r6
 800d592:	4639      	mov	r1, r7
 800d594:	2200      	movs	r2, #0
 800d596:	f7f6 fcef 	bl	8003f78 <__aeabi_dmul>
 800d59a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d59c:	4606      	mov	r6, r0
 800d59e:	460f      	mov	r7, r1
 800d5a0:	b933      	cbnz	r3, 800d5b0 <_strtod_l+0xa80>
 800d5a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5a6:	9010      	str	r0, [sp, #64]	; 0x40
 800d5a8:	9311      	str	r3, [sp, #68]	; 0x44
 800d5aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d5ae:	e7df      	b.n	800d570 <_strtod_l+0xa40>
 800d5b0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d5b4:	e7f9      	b.n	800d5aa <_strtod_l+0xa7a>
 800d5b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d5ba:	9b04      	ldr	r3, [sp, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1ab      	bne.n	800d518 <_strtod_l+0x9e8>
 800d5c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5c4:	0d1b      	lsrs	r3, r3, #20
 800d5c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d5c8:	051b      	lsls	r3, r3, #20
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	465d      	mov	r5, fp
 800d5ce:	d1a3      	bne.n	800d518 <_strtod_l+0x9e8>
 800d5d0:	4639      	mov	r1, r7
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f7f6 ff80 	bl	80044d8 <__aeabi_d2iz>
 800d5d8:	f7f6 fc64 	bl	8003ea4 <__aeabi_i2d>
 800d5dc:	460b      	mov	r3, r1
 800d5de:	4602      	mov	r2, r0
 800d5e0:	4639      	mov	r1, r7
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f7f6 fb10 	bl	8003c08 <__aeabi_dsub>
 800d5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	b933      	cbnz	r3, 800d5fe <_strtod_l+0xace>
 800d5f0:	f1ba 0f00 	cmp.w	sl, #0
 800d5f4:	d103      	bne.n	800d5fe <_strtod_l+0xace>
 800d5f6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	d06d      	beq.n	800d6da <_strtod_l+0xbaa>
 800d5fe:	a30a      	add	r3, pc, #40	; (adr r3, 800d628 <_strtod_l+0xaf8>)
 800d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d604:	4630      	mov	r0, r6
 800d606:	4639      	mov	r1, r7
 800d608:	f7f6 ff28 	bl	800445c <__aeabi_dcmplt>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	f47f acb8 	bne.w	800cf82 <_strtod_l+0x452>
 800d612:	a307      	add	r3, pc, #28	; (adr r3, 800d630 <_strtod_l+0xb00>)
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	4630      	mov	r0, r6
 800d61a:	4639      	mov	r1, r7
 800d61c:	f7f6 ff3c 	bl	8004498 <__aeabi_dcmpgt>
 800d620:	2800      	cmp	r0, #0
 800d622:	f43f af79 	beq.w	800d518 <_strtod_l+0x9e8>
 800d626:	e4ac      	b.n	800cf82 <_strtod_l+0x452>
 800d628:	94a03595 	.word	0x94a03595
 800d62c:	3fdfffff 	.word	0x3fdfffff
 800d630:	35afe535 	.word	0x35afe535
 800d634:	3fe00000 	.word	0x3fe00000
 800d638:	000fffff 	.word	0x000fffff
 800d63c:	7ff00000 	.word	0x7ff00000
 800d640:	7fefffff 	.word	0x7fefffff
 800d644:	39500000 	.word	0x39500000
 800d648:	3ff00000 	.word	0x3ff00000
 800d64c:	7fe00000 	.word	0x7fe00000
 800d650:	7c9fffff 	.word	0x7c9fffff
 800d654:	3fe00000 	.word	0x3fe00000
 800d658:	bff00000 	.word	0xbff00000
 800d65c:	9b04      	ldr	r3, [sp, #16]
 800d65e:	b333      	cbz	r3, 800d6ae <_strtod_l+0xb7e>
 800d660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d662:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d666:	d822      	bhi.n	800d6ae <_strtod_l+0xb7e>
 800d668:	a327      	add	r3, pc, #156	; (adr r3, 800d708 <_strtod_l+0xbd8>)
 800d66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66e:	4630      	mov	r0, r6
 800d670:	4639      	mov	r1, r7
 800d672:	f7f6 fefd 	bl	8004470 <__aeabi_dcmple>
 800d676:	b1a0      	cbz	r0, 800d6a2 <_strtod_l+0xb72>
 800d678:	4639      	mov	r1, r7
 800d67a:	4630      	mov	r0, r6
 800d67c:	f7f6 ff54 	bl	8004528 <__aeabi_d2uiz>
 800d680:	2800      	cmp	r0, #0
 800d682:	bf08      	it	eq
 800d684:	2001      	moveq	r0, #1
 800d686:	f7f6 fbfd 	bl	8003e84 <__aeabi_ui2d>
 800d68a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d68c:	4606      	mov	r6, r0
 800d68e:	460f      	mov	r7, r1
 800d690:	bb03      	cbnz	r3, 800d6d4 <_strtod_l+0xba4>
 800d692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d696:	9012      	str	r0, [sp, #72]	; 0x48
 800d698:	9313      	str	r3, [sp, #76]	; 0x4c
 800d69a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d69e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d6a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d6aa:	1a9b      	subs	r3, r3, r2
 800d6ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d6b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d6b6:	f001 ffd1 	bl	800f65c <__ulp>
 800d6ba:	4650      	mov	r0, sl
 800d6bc:	ec53 2b10 	vmov	r2, r3, d0
 800d6c0:	4659      	mov	r1, fp
 800d6c2:	f7f6 fc59 	bl	8003f78 <__aeabi_dmul>
 800d6c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d6ca:	f7f6 fa9f 	bl	8003c0c <__adddf3>
 800d6ce:	4682      	mov	sl, r0
 800d6d0:	468b      	mov	fp, r1
 800d6d2:	e772      	b.n	800d5ba <_strtod_l+0xa8a>
 800d6d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800d6d8:	e7df      	b.n	800d69a <_strtod_l+0xb6a>
 800d6da:	a30d      	add	r3, pc, #52	; (adr r3, 800d710 <_strtod_l+0xbe0>)
 800d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e0:	f7f6 febc 	bl	800445c <__aeabi_dcmplt>
 800d6e4:	e79c      	b.n	800d620 <_strtod_l+0xaf0>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	930d      	str	r3, [sp, #52]	; 0x34
 800d6ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	f7ff ba61 	b.w	800cbb6 <_strtod_l+0x86>
 800d6f4:	2b65      	cmp	r3, #101	; 0x65
 800d6f6:	f04f 0200 	mov.w	r2, #0
 800d6fa:	f43f ab4e 	beq.w	800cd9a <_strtod_l+0x26a>
 800d6fe:	2101      	movs	r1, #1
 800d700:	4614      	mov	r4, r2
 800d702:	9104      	str	r1, [sp, #16]
 800d704:	f7ff bacb 	b.w	800cc9e <_strtod_l+0x16e>
 800d708:	ffc00000 	.word	0xffc00000
 800d70c:	41dfffff 	.word	0x41dfffff
 800d710:	94a03595 	.word	0x94a03595
 800d714:	3fcfffff 	.word	0x3fcfffff

0800d718 <_strtod_r>:
 800d718:	4b05      	ldr	r3, [pc, #20]	; (800d730 <_strtod_r+0x18>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	b410      	push	{r4}
 800d71e:	6a1b      	ldr	r3, [r3, #32]
 800d720:	4c04      	ldr	r4, [pc, #16]	; (800d734 <_strtod_r+0x1c>)
 800d722:	2b00      	cmp	r3, #0
 800d724:	bf08      	it	eq
 800d726:	4623      	moveq	r3, r4
 800d728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d72c:	f7ff ba00 	b.w	800cb30 <_strtod_l>
 800d730:	20000478 	.word	0x20000478
 800d734:	200004dc 	.word	0x200004dc

0800d738 <_strtol_l.isra.0>:
 800d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d73c:	4680      	mov	r8, r0
 800d73e:	4689      	mov	r9, r1
 800d740:	4692      	mov	sl, r2
 800d742:	461e      	mov	r6, r3
 800d744:	460f      	mov	r7, r1
 800d746:	463d      	mov	r5, r7
 800d748:	9808      	ldr	r0, [sp, #32]
 800d74a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d74e:	f001 fc27 	bl	800efa0 <__locale_ctype_ptr_l>
 800d752:	4420      	add	r0, r4
 800d754:	7843      	ldrb	r3, [r0, #1]
 800d756:	f013 0308 	ands.w	r3, r3, #8
 800d75a:	d132      	bne.n	800d7c2 <_strtol_l.isra.0+0x8a>
 800d75c:	2c2d      	cmp	r4, #45	; 0x2d
 800d75e:	d132      	bne.n	800d7c6 <_strtol_l.isra.0+0x8e>
 800d760:	787c      	ldrb	r4, [r7, #1]
 800d762:	1cbd      	adds	r5, r7, #2
 800d764:	2201      	movs	r2, #1
 800d766:	2e00      	cmp	r6, #0
 800d768:	d05d      	beq.n	800d826 <_strtol_l.isra.0+0xee>
 800d76a:	2e10      	cmp	r6, #16
 800d76c:	d109      	bne.n	800d782 <_strtol_l.isra.0+0x4a>
 800d76e:	2c30      	cmp	r4, #48	; 0x30
 800d770:	d107      	bne.n	800d782 <_strtol_l.isra.0+0x4a>
 800d772:	782b      	ldrb	r3, [r5, #0]
 800d774:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d778:	2b58      	cmp	r3, #88	; 0x58
 800d77a:	d14f      	bne.n	800d81c <_strtol_l.isra.0+0xe4>
 800d77c:	786c      	ldrb	r4, [r5, #1]
 800d77e:	2610      	movs	r6, #16
 800d780:	3502      	adds	r5, #2
 800d782:	2a00      	cmp	r2, #0
 800d784:	bf14      	ite	ne
 800d786:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d78a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d78e:	2700      	movs	r7, #0
 800d790:	fbb1 fcf6 	udiv	ip, r1, r6
 800d794:	4638      	mov	r0, r7
 800d796:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d79a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d79e:	2b09      	cmp	r3, #9
 800d7a0:	d817      	bhi.n	800d7d2 <_strtol_l.isra.0+0x9a>
 800d7a2:	461c      	mov	r4, r3
 800d7a4:	42a6      	cmp	r6, r4
 800d7a6:	dd23      	ble.n	800d7f0 <_strtol_l.isra.0+0xb8>
 800d7a8:	1c7b      	adds	r3, r7, #1
 800d7aa:	d007      	beq.n	800d7bc <_strtol_l.isra.0+0x84>
 800d7ac:	4584      	cmp	ip, r0
 800d7ae:	d31c      	bcc.n	800d7ea <_strtol_l.isra.0+0xb2>
 800d7b0:	d101      	bne.n	800d7b6 <_strtol_l.isra.0+0x7e>
 800d7b2:	45a6      	cmp	lr, r4
 800d7b4:	db19      	blt.n	800d7ea <_strtol_l.isra.0+0xb2>
 800d7b6:	fb00 4006 	mla	r0, r0, r6, r4
 800d7ba:	2701      	movs	r7, #1
 800d7bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7c0:	e7eb      	b.n	800d79a <_strtol_l.isra.0+0x62>
 800d7c2:	462f      	mov	r7, r5
 800d7c4:	e7bf      	b.n	800d746 <_strtol_l.isra.0+0xe>
 800d7c6:	2c2b      	cmp	r4, #43	; 0x2b
 800d7c8:	bf04      	itt	eq
 800d7ca:	1cbd      	addeq	r5, r7, #2
 800d7cc:	787c      	ldrbeq	r4, [r7, #1]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	e7c9      	b.n	800d766 <_strtol_l.isra.0+0x2e>
 800d7d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d7d6:	2b19      	cmp	r3, #25
 800d7d8:	d801      	bhi.n	800d7de <_strtol_l.isra.0+0xa6>
 800d7da:	3c37      	subs	r4, #55	; 0x37
 800d7dc:	e7e2      	b.n	800d7a4 <_strtol_l.isra.0+0x6c>
 800d7de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d7e2:	2b19      	cmp	r3, #25
 800d7e4:	d804      	bhi.n	800d7f0 <_strtol_l.isra.0+0xb8>
 800d7e6:	3c57      	subs	r4, #87	; 0x57
 800d7e8:	e7dc      	b.n	800d7a4 <_strtol_l.isra.0+0x6c>
 800d7ea:	f04f 37ff 	mov.w	r7, #4294967295
 800d7ee:	e7e5      	b.n	800d7bc <_strtol_l.isra.0+0x84>
 800d7f0:	1c7b      	adds	r3, r7, #1
 800d7f2:	d108      	bne.n	800d806 <_strtol_l.isra.0+0xce>
 800d7f4:	2322      	movs	r3, #34	; 0x22
 800d7f6:	f8c8 3000 	str.w	r3, [r8]
 800d7fa:	4608      	mov	r0, r1
 800d7fc:	f1ba 0f00 	cmp.w	sl, #0
 800d800:	d107      	bne.n	800d812 <_strtol_l.isra.0+0xda>
 800d802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d806:	b102      	cbz	r2, 800d80a <_strtol_l.isra.0+0xd2>
 800d808:	4240      	negs	r0, r0
 800d80a:	f1ba 0f00 	cmp.w	sl, #0
 800d80e:	d0f8      	beq.n	800d802 <_strtol_l.isra.0+0xca>
 800d810:	b10f      	cbz	r7, 800d816 <_strtol_l.isra.0+0xde>
 800d812:	f105 39ff 	add.w	r9, r5, #4294967295
 800d816:	f8ca 9000 	str.w	r9, [sl]
 800d81a:	e7f2      	b.n	800d802 <_strtol_l.isra.0+0xca>
 800d81c:	2430      	movs	r4, #48	; 0x30
 800d81e:	2e00      	cmp	r6, #0
 800d820:	d1af      	bne.n	800d782 <_strtol_l.isra.0+0x4a>
 800d822:	2608      	movs	r6, #8
 800d824:	e7ad      	b.n	800d782 <_strtol_l.isra.0+0x4a>
 800d826:	2c30      	cmp	r4, #48	; 0x30
 800d828:	d0a3      	beq.n	800d772 <_strtol_l.isra.0+0x3a>
 800d82a:	260a      	movs	r6, #10
 800d82c:	e7a9      	b.n	800d782 <_strtol_l.isra.0+0x4a>
	...

0800d830 <_strtol_r>:
 800d830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d832:	4c06      	ldr	r4, [pc, #24]	; (800d84c <_strtol_r+0x1c>)
 800d834:	4d06      	ldr	r5, [pc, #24]	; (800d850 <_strtol_r+0x20>)
 800d836:	6824      	ldr	r4, [r4, #0]
 800d838:	6a24      	ldr	r4, [r4, #32]
 800d83a:	2c00      	cmp	r4, #0
 800d83c:	bf08      	it	eq
 800d83e:	462c      	moveq	r4, r5
 800d840:	9400      	str	r4, [sp, #0]
 800d842:	f7ff ff79 	bl	800d738 <_strtol_l.isra.0>
 800d846:	b003      	add	sp, #12
 800d848:	bd30      	pop	{r4, r5, pc}
 800d84a:	bf00      	nop
 800d84c:	20000478 	.word	0x20000478
 800d850:	200004dc 	.word	0x200004dc

0800d854 <__swbuf_r>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	460e      	mov	r6, r1
 800d858:	4614      	mov	r4, r2
 800d85a:	4605      	mov	r5, r0
 800d85c:	b118      	cbz	r0, 800d866 <__swbuf_r+0x12>
 800d85e:	6983      	ldr	r3, [r0, #24]
 800d860:	b90b      	cbnz	r3, 800d866 <__swbuf_r+0x12>
 800d862:	f000 ffed 	bl	800e840 <__sinit>
 800d866:	4b21      	ldr	r3, [pc, #132]	; (800d8ec <__swbuf_r+0x98>)
 800d868:	429c      	cmp	r4, r3
 800d86a:	d12a      	bne.n	800d8c2 <__swbuf_r+0x6e>
 800d86c:	686c      	ldr	r4, [r5, #4]
 800d86e:	69a3      	ldr	r3, [r4, #24]
 800d870:	60a3      	str	r3, [r4, #8]
 800d872:	89a3      	ldrh	r3, [r4, #12]
 800d874:	071a      	lsls	r2, r3, #28
 800d876:	d52e      	bpl.n	800d8d6 <__swbuf_r+0x82>
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	b363      	cbz	r3, 800d8d6 <__swbuf_r+0x82>
 800d87c:	6923      	ldr	r3, [r4, #16]
 800d87e:	6820      	ldr	r0, [r4, #0]
 800d880:	1ac0      	subs	r0, r0, r3
 800d882:	6963      	ldr	r3, [r4, #20]
 800d884:	b2f6      	uxtb	r6, r6
 800d886:	4283      	cmp	r3, r0
 800d888:	4637      	mov	r7, r6
 800d88a:	dc04      	bgt.n	800d896 <__swbuf_r+0x42>
 800d88c:	4621      	mov	r1, r4
 800d88e:	4628      	mov	r0, r5
 800d890:	f000 ff6c 	bl	800e76c <_fflush_r>
 800d894:	bb28      	cbnz	r0, 800d8e2 <__swbuf_r+0x8e>
 800d896:	68a3      	ldr	r3, [r4, #8]
 800d898:	3b01      	subs	r3, #1
 800d89a:	60a3      	str	r3, [r4, #8]
 800d89c:	6823      	ldr	r3, [r4, #0]
 800d89e:	1c5a      	adds	r2, r3, #1
 800d8a0:	6022      	str	r2, [r4, #0]
 800d8a2:	701e      	strb	r6, [r3, #0]
 800d8a4:	6963      	ldr	r3, [r4, #20]
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	4283      	cmp	r3, r0
 800d8aa:	d004      	beq.n	800d8b6 <__swbuf_r+0x62>
 800d8ac:	89a3      	ldrh	r3, [r4, #12]
 800d8ae:	07db      	lsls	r3, r3, #31
 800d8b0:	d519      	bpl.n	800d8e6 <__swbuf_r+0x92>
 800d8b2:	2e0a      	cmp	r6, #10
 800d8b4:	d117      	bne.n	800d8e6 <__swbuf_r+0x92>
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f000 ff57 	bl	800e76c <_fflush_r>
 800d8be:	b190      	cbz	r0, 800d8e6 <__swbuf_r+0x92>
 800d8c0:	e00f      	b.n	800d8e2 <__swbuf_r+0x8e>
 800d8c2:	4b0b      	ldr	r3, [pc, #44]	; (800d8f0 <__swbuf_r+0x9c>)
 800d8c4:	429c      	cmp	r4, r3
 800d8c6:	d101      	bne.n	800d8cc <__swbuf_r+0x78>
 800d8c8:	68ac      	ldr	r4, [r5, #8]
 800d8ca:	e7d0      	b.n	800d86e <__swbuf_r+0x1a>
 800d8cc:	4b09      	ldr	r3, [pc, #36]	; (800d8f4 <__swbuf_r+0xa0>)
 800d8ce:	429c      	cmp	r4, r3
 800d8d0:	bf08      	it	eq
 800d8d2:	68ec      	ldreq	r4, [r5, #12]
 800d8d4:	e7cb      	b.n	800d86e <__swbuf_r+0x1a>
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	4628      	mov	r0, r5
 800d8da:	f000 f80d 	bl	800d8f8 <__swsetup_r>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d0cc      	beq.n	800d87c <__swbuf_r+0x28>
 800d8e2:	f04f 37ff 	mov.w	r7, #4294967295
 800d8e6:	4638      	mov	r0, r7
 800d8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	080767d0 	.word	0x080767d0
 800d8f0:	080767f0 	.word	0x080767f0
 800d8f4:	080767b0 	.word	0x080767b0

0800d8f8 <__swsetup_r>:
 800d8f8:	4b32      	ldr	r3, [pc, #200]	; (800d9c4 <__swsetup_r+0xcc>)
 800d8fa:	b570      	push	{r4, r5, r6, lr}
 800d8fc:	681d      	ldr	r5, [r3, #0]
 800d8fe:	4606      	mov	r6, r0
 800d900:	460c      	mov	r4, r1
 800d902:	b125      	cbz	r5, 800d90e <__swsetup_r+0x16>
 800d904:	69ab      	ldr	r3, [r5, #24]
 800d906:	b913      	cbnz	r3, 800d90e <__swsetup_r+0x16>
 800d908:	4628      	mov	r0, r5
 800d90a:	f000 ff99 	bl	800e840 <__sinit>
 800d90e:	4b2e      	ldr	r3, [pc, #184]	; (800d9c8 <__swsetup_r+0xd0>)
 800d910:	429c      	cmp	r4, r3
 800d912:	d10f      	bne.n	800d934 <__swsetup_r+0x3c>
 800d914:	686c      	ldr	r4, [r5, #4]
 800d916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	0715      	lsls	r5, r2, #28
 800d91e:	d42c      	bmi.n	800d97a <__swsetup_r+0x82>
 800d920:	06d0      	lsls	r0, r2, #27
 800d922:	d411      	bmi.n	800d948 <__swsetup_r+0x50>
 800d924:	2209      	movs	r2, #9
 800d926:	6032      	str	r2, [r6, #0]
 800d928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d92c:	81a3      	strh	r3, [r4, #12]
 800d92e:	f04f 30ff 	mov.w	r0, #4294967295
 800d932:	e03e      	b.n	800d9b2 <__swsetup_r+0xba>
 800d934:	4b25      	ldr	r3, [pc, #148]	; (800d9cc <__swsetup_r+0xd4>)
 800d936:	429c      	cmp	r4, r3
 800d938:	d101      	bne.n	800d93e <__swsetup_r+0x46>
 800d93a:	68ac      	ldr	r4, [r5, #8]
 800d93c:	e7eb      	b.n	800d916 <__swsetup_r+0x1e>
 800d93e:	4b24      	ldr	r3, [pc, #144]	; (800d9d0 <__swsetup_r+0xd8>)
 800d940:	429c      	cmp	r4, r3
 800d942:	bf08      	it	eq
 800d944:	68ec      	ldreq	r4, [r5, #12]
 800d946:	e7e6      	b.n	800d916 <__swsetup_r+0x1e>
 800d948:	0751      	lsls	r1, r2, #29
 800d94a:	d512      	bpl.n	800d972 <__swsetup_r+0x7a>
 800d94c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d94e:	b141      	cbz	r1, 800d962 <__swsetup_r+0x6a>
 800d950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d954:	4299      	cmp	r1, r3
 800d956:	d002      	beq.n	800d95e <__swsetup_r+0x66>
 800d958:	4630      	mov	r0, r6
 800d95a:	f001 ffc1 	bl	800f8e0 <_free_r>
 800d95e:	2300      	movs	r3, #0
 800d960:	6363      	str	r3, [r4, #52]	; 0x34
 800d962:	89a3      	ldrh	r3, [r4, #12]
 800d964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d968:	81a3      	strh	r3, [r4, #12]
 800d96a:	2300      	movs	r3, #0
 800d96c:	6063      	str	r3, [r4, #4]
 800d96e:	6923      	ldr	r3, [r4, #16]
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	89a3      	ldrh	r3, [r4, #12]
 800d974:	f043 0308 	orr.w	r3, r3, #8
 800d978:	81a3      	strh	r3, [r4, #12]
 800d97a:	6923      	ldr	r3, [r4, #16]
 800d97c:	b94b      	cbnz	r3, 800d992 <__swsetup_r+0x9a>
 800d97e:	89a3      	ldrh	r3, [r4, #12]
 800d980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d988:	d003      	beq.n	800d992 <__swsetup_r+0x9a>
 800d98a:	4621      	mov	r1, r4
 800d98c:	4630      	mov	r0, r6
 800d98e:	f001 fb3f 	bl	800f010 <__smakebuf_r>
 800d992:	89a2      	ldrh	r2, [r4, #12]
 800d994:	f012 0301 	ands.w	r3, r2, #1
 800d998:	d00c      	beq.n	800d9b4 <__swsetup_r+0xbc>
 800d99a:	2300      	movs	r3, #0
 800d99c:	60a3      	str	r3, [r4, #8]
 800d99e:	6963      	ldr	r3, [r4, #20]
 800d9a0:	425b      	negs	r3, r3
 800d9a2:	61a3      	str	r3, [r4, #24]
 800d9a4:	6923      	ldr	r3, [r4, #16]
 800d9a6:	b953      	cbnz	r3, 800d9be <__swsetup_r+0xc6>
 800d9a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d9b0:	d1ba      	bne.n	800d928 <__swsetup_r+0x30>
 800d9b2:	bd70      	pop	{r4, r5, r6, pc}
 800d9b4:	0792      	lsls	r2, r2, #30
 800d9b6:	bf58      	it	pl
 800d9b8:	6963      	ldrpl	r3, [r4, #20]
 800d9ba:	60a3      	str	r3, [r4, #8]
 800d9bc:	e7f2      	b.n	800d9a4 <__swsetup_r+0xac>
 800d9be:	2000      	movs	r0, #0
 800d9c0:	e7f7      	b.n	800d9b2 <__swsetup_r+0xba>
 800d9c2:	bf00      	nop
 800d9c4:	20000478 	.word	0x20000478
 800d9c8:	080767d0 	.word	0x080767d0
 800d9cc:	080767f0 	.word	0x080767f0
 800d9d0:	080767b0 	.word	0x080767b0

0800d9d4 <quorem>:
 800d9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d8:	6903      	ldr	r3, [r0, #16]
 800d9da:	690c      	ldr	r4, [r1, #16]
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	4680      	mov	r8, r0
 800d9e0:	f2c0 8082 	blt.w	800dae8 <quorem+0x114>
 800d9e4:	3c01      	subs	r4, #1
 800d9e6:	f101 0714 	add.w	r7, r1, #20
 800d9ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d9ee:	f100 0614 	add.w	r6, r0, #20
 800d9f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d9f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d9fa:	eb06 030c 	add.w	r3, r6, ip
 800d9fe:	3501      	adds	r5, #1
 800da00:	eb07 090c 	add.w	r9, r7, ip
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	fbb0 f5f5 	udiv	r5, r0, r5
 800da0a:	b395      	cbz	r5, 800da72 <quorem+0x9e>
 800da0c:	f04f 0a00 	mov.w	sl, #0
 800da10:	4638      	mov	r0, r7
 800da12:	46b6      	mov	lr, r6
 800da14:	46d3      	mov	fp, sl
 800da16:	f850 2b04 	ldr.w	r2, [r0], #4
 800da1a:	b293      	uxth	r3, r2
 800da1c:	fb05 a303 	mla	r3, r5, r3, sl
 800da20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da24:	b29b      	uxth	r3, r3
 800da26:	ebab 0303 	sub.w	r3, fp, r3
 800da2a:	0c12      	lsrs	r2, r2, #16
 800da2c:	f8de b000 	ldr.w	fp, [lr]
 800da30:	fb05 a202 	mla	r2, r5, r2, sl
 800da34:	fa13 f38b 	uxtah	r3, r3, fp
 800da38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800da3c:	fa1f fb82 	uxth.w	fp, r2
 800da40:	f8de 2000 	ldr.w	r2, [lr]
 800da44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800da48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da52:	4581      	cmp	r9, r0
 800da54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800da58:	f84e 3b04 	str.w	r3, [lr], #4
 800da5c:	d2db      	bcs.n	800da16 <quorem+0x42>
 800da5e:	f856 300c 	ldr.w	r3, [r6, ip]
 800da62:	b933      	cbnz	r3, 800da72 <quorem+0x9e>
 800da64:	9b01      	ldr	r3, [sp, #4]
 800da66:	3b04      	subs	r3, #4
 800da68:	429e      	cmp	r6, r3
 800da6a:	461a      	mov	r2, r3
 800da6c:	d330      	bcc.n	800dad0 <quorem+0xfc>
 800da6e:	f8c8 4010 	str.w	r4, [r8, #16]
 800da72:	4640      	mov	r0, r8
 800da74:	f001 fd7a 	bl	800f56c <__mcmp>
 800da78:	2800      	cmp	r0, #0
 800da7a:	db25      	blt.n	800dac8 <quorem+0xf4>
 800da7c:	3501      	adds	r5, #1
 800da7e:	4630      	mov	r0, r6
 800da80:	f04f 0c00 	mov.w	ip, #0
 800da84:	f857 2b04 	ldr.w	r2, [r7], #4
 800da88:	f8d0 e000 	ldr.w	lr, [r0]
 800da8c:	b293      	uxth	r3, r2
 800da8e:	ebac 0303 	sub.w	r3, ip, r3
 800da92:	0c12      	lsrs	r2, r2, #16
 800da94:	fa13 f38e 	uxtah	r3, r3, lr
 800da98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800daa6:	45b9      	cmp	r9, r7
 800daa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800daac:	f840 3b04 	str.w	r3, [r0], #4
 800dab0:	d2e8      	bcs.n	800da84 <quorem+0xb0>
 800dab2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dab6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800daba:	b92a      	cbnz	r2, 800dac8 <quorem+0xf4>
 800dabc:	3b04      	subs	r3, #4
 800dabe:	429e      	cmp	r6, r3
 800dac0:	461a      	mov	r2, r3
 800dac2:	d30b      	bcc.n	800dadc <quorem+0x108>
 800dac4:	f8c8 4010 	str.w	r4, [r8, #16]
 800dac8:	4628      	mov	r0, r5
 800daca:	b003      	add	sp, #12
 800dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad0:	6812      	ldr	r2, [r2, #0]
 800dad2:	3b04      	subs	r3, #4
 800dad4:	2a00      	cmp	r2, #0
 800dad6:	d1ca      	bne.n	800da6e <quorem+0x9a>
 800dad8:	3c01      	subs	r4, #1
 800dada:	e7c5      	b.n	800da68 <quorem+0x94>
 800dadc:	6812      	ldr	r2, [r2, #0]
 800dade:	3b04      	subs	r3, #4
 800dae0:	2a00      	cmp	r2, #0
 800dae2:	d1ef      	bne.n	800dac4 <quorem+0xf0>
 800dae4:	3c01      	subs	r4, #1
 800dae6:	e7ea      	b.n	800dabe <quorem+0xea>
 800dae8:	2000      	movs	r0, #0
 800daea:	e7ee      	b.n	800daca <quorem+0xf6>
 800daec:	0000      	movs	r0, r0
	...

0800daf0 <_dtoa_r>:
 800daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	ec57 6b10 	vmov	r6, r7, d0
 800daf8:	b097      	sub	sp, #92	; 0x5c
 800dafa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dafc:	9106      	str	r1, [sp, #24]
 800dafe:	4604      	mov	r4, r0
 800db00:	920b      	str	r2, [sp, #44]	; 0x2c
 800db02:	9312      	str	r3, [sp, #72]	; 0x48
 800db04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800db08:	e9cd 6700 	strd	r6, r7, [sp]
 800db0c:	b93d      	cbnz	r5, 800db1e <_dtoa_r+0x2e>
 800db0e:	2010      	movs	r0, #16
 800db10:	f001 fabe 	bl	800f090 <malloc>
 800db14:	6260      	str	r0, [r4, #36]	; 0x24
 800db16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db1a:	6005      	str	r5, [r0, #0]
 800db1c:	60c5      	str	r5, [r0, #12]
 800db1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db20:	6819      	ldr	r1, [r3, #0]
 800db22:	b151      	cbz	r1, 800db3a <_dtoa_r+0x4a>
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	604a      	str	r2, [r1, #4]
 800db28:	2301      	movs	r3, #1
 800db2a:	4093      	lsls	r3, r2
 800db2c:	608b      	str	r3, [r1, #8]
 800db2e:	4620      	mov	r0, r4
 800db30:	f001 fafc 	bl	800f12c <_Bfree>
 800db34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db36:	2200      	movs	r2, #0
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	1e3b      	subs	r3, r7, #0
 800db3c:	bfbb      	ittet	lt
 800db3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800db42:	9301      	strlt	r3, [sp, #4]
 800db44:	2300      	movge	r3, #0
 800db46:	2201      	movlt	r2, #1
 800db48:	bfac      	ite	ge
 800db4a:	f8c8 3000 	strge.w	r3, [r8]
 800db4e:	f8c8 2000 	strlt.w	r2, [r8]
 800db52:	4baf      	ldr	r3, [pc, #700]	; (800de10 <_dtoa_r+0x320>)
 800db54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800db58:	ea33 0308 	bics.w	r3, r3, r8
 800db5c:	d114      	bne.n	800db88 <_dtoa_r+0x98>
 800db5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db60:	f242 730f 	movw	r3, #9999	; 0x270f
 800db64:	6013      	str	r3, [r2, #0]
 800db66:	9b00      	ldr	r3, [sp, #0]
 800db68:	b923      	cbnz	r3, 800db74 <_dtoa_r+0x84>
 800db6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800db6e:	2800      	cmp	r0, #0
 800db70:	f000 8542 	beq.w	800e5f8 <_dtoa_r+0xb08>
 800db74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800de24 <_dtoa_r+0x334>
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f000 8544 	beq.w	800e608 <_dtoa_r+0xb18>
 800db80:	f10b 0303 	add.w	r3, fp, #3
 800db84:	f000 bd3e 	b.w	800e604 <_dtoa_r+0xb14>
 800db88:	e9dd 6700 	ldrd	r6, r7, [sp]
 800db8c:	2200      	movs	r2, #0
 800db8e:	2300      	movs	r3, #0
 800db90:	4630      	mov	r0, r6
 800db92:	4639      	mov	r1, r7
 800db94:	f7f6 fc58 	bl	8004448 <__aeabi_dcmpeq>
 800db98:	4681      	mov	r9, r0
 800db9a:	b168      	cbz	r0, 800dbb8 <_dtoa_r+0xc8>
 800db9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db9e:	2301      	movs	r3, #1
 800dba0:	6013      	str	r3, [r2, #0]
 800dba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f000 8524 	beq.w	800e5f2 <_dtoa_r+0xb02>
 800dbaa:	4b9a      	ldr	r3, [pc, #616]	; (800de14 <_dtoa_r+0x324>)
 800dbac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dbae:	f103 3bff 	add.w	fp, r3, #4294967295
 800dbb2:	6013      	str	r3, [r2, #0]
 800dbb4:	f000 bd28 	b.w	800e608 <_dtoa_r+0xb18>
 800dbb8:	aa14      	add	r2, sp, #80	; 0x50
 800dbba:	a915      	add	r1, sp, #84	; 0x54
 800dbbc:	ec47 6b10 	vmov	d0, r6, r7
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f001 fdc1 	bl	800f748 <__d2b>
 800dbc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dbca:	9004      	str	r0, [sp, #16]
 800dbcc:	2d00      	cmp	r5, #0
 800dbce:	d07c      	beq.n	800dcca <_dtoa_r+0x1da>
 800dbd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dbd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800dbd8:	46b2      	mov	sl, r6
 800dbda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800dbde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dbe2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	4b8b      	ldr	r3, [pc, #556]	; (800de18 <_dtoa_r+0x328>)
 800dbea:	4650      	mov	r0, sl
 800dbec:	4659      	mov	r1, fp
 800dbee:	f7f6 f80b 	bl	8003c08 <__aeabi_dsub>
 800dbf2:	a381      	add	r3, pc, #516	; (adr r3, 800ddf8 <_dtoa_r+0x308>)
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	f7f6 f9be 	bl	8003f78 <__aeabi_dmul>
 800dbfc:	a380      	add	r3, pc, #512	; (adr r3, 800de00 <_dtoa_r+0x310>)
 800dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc02:	f7f6 f803 	bl	8003c0c <__adddf3>
 800dc06:	4606      	mov	r6, r0
 800dc08:	4628      	mov	r0, r5
 800dc0a:	460f      	mov	r7, r1
 800dc0c:	f7f6 f94a 	bl	8003ea4 <__aeabi_i2d>
 800dc10:	a37d      	add	r3, pc, #500	; (adr r3, 800de08 <_dtoa_r+0x318>)
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	f7f6 f9af 	bl	8003f78 <__aeabi_dmul>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	4630      	mov	r0, r6
 800dc20:	4639      	mov	r1, r7
 800dc22:	f7f5 fff3 	bl	8003c0c <__adddf3>
 800dc26:	4606      	mov	r6, r0
 800dc28:	460f      	mov	r7, r1
 800dc2a:	f7f6 fc55 	bl	80044d8 <__aeabi_d2iz>
 800dc2e:	2200      	movs	r2, #0
 800dc30:	4682      	mov	sl, r0
 800dc32:	2300      	movs	r3, #0
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7f6 fc10 	bl	800445c <__aeabi_dcmplt>
 800dc3c:	b148      	cbz	r0, 800dc52 <_dtoa_r+0x162>
 800dc3e:	4650      	mov	r0, sl
 800dc40:	f7f6 f930 	bl	8003ea4 <__aeabi_i2d>
 800dc44:	4632      	mov	r2, r6
 800dc46:	463b      	mov	r3, r7
 800dc48:	f7f6 fbfe 	bl	8004448 <__aeabi_dcmpeq>
 800dc4c:	b908      	cbnz	r0, 800dc52 <_dtoa_r+0x162>
 800dc4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc52:	f1ba 0f16 	cmp.w	sl, #22
 800dc56:	d859      	bhi.n	800dd0c <_dtoa_r+0x21c>
 800dc58:	4970      	ldr	r1, [pc, #448]	; (800de1c <_dtoa_r+0x32c>)
 800dc5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800dc5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc66:	f7f6 fc17 	bl	8004498 <__aeabi_dcmpgt>
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d050      	beq.n	800dd10 <_dtoa_r+0x220>
 800dc6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc72:	2300      	movs	r3, #0
 800dc74:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc78:	1b5d      	subs	r5, r3, r5
 800dc7a:	f1b5 0801 	subs.w	r8, r5, #1
 800dc7e:	bf49      	itett	mi
 800dc80:	f1c5 0301 	rsbmi	r3, r5, #1
 800dc84:	2300      	movpl	r3, #0
 800dc86:	9305      	strmi	r3, [sp, #20]
 800dc88:	f04f 0800 	movmi.w	r8, #0
 800dc8c:	bf58      	it	pl
 800dc8e:	9305      	strpl	r3, [sp, #20]
 800dc90:	f1ba 0f00 	cmp.w	sl, #0
 800dc94:	db3e      	blt.n	800dd14 <_dtoa_r+0x224>
 800dc96:	2300      	movs	r3, #0
 800dc98:	44d0      	add	r8, sl
 800dc9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800dc9e:	9307      	str	r3, [sp, #28]
 800dca0:	9b06      	ldr	r3, [sp, #24]
 800dca2:	2b09      	cmp	r3, #9
 800dca4:	f200 8090 	bhi.w	800ddc8 <_dtoa_r+0x2d8>
 800dca8:	2b05      	cmp	r3, #5
 800dcaa:	bfc4      	itt	gt
 800dcac:	3b04      	subgt	r3, #4
 800dcae:	9306      	strgt	r3, [sp, #24]
 800dcb0:	9b06      	ldr	r3, [sp, #24]
 800dcb2:	f1a3 0302 	sub.w	r3, r3, #2
 800dcb6:	bfcc      	ite	gt
 800dcb8:	2500      	movgt	r5, #0
 800dcba:	2501      	movle	r5, #1
 800dcbc:	2b03      	cmp	r3, #3
 800dcbe:	f200 808f 	bhi.w	800dde0 <_dtoa_r+0x2f0>
 800dcc2:	e8df f003 	tbb	[pc, r3]
 800dcc6:	7f7d      	.short	0x7f7d
 800dcc8:	7131      	.short	0x7131
 800dcca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800dcce:	441d      	add	r5, r3
 800dcd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dcd4:	2820      	cmp	r0, #32
 800dcd6:	dd13      	ble.n	800dd00 <_dtoa_r+0x210>
 800dcd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800dcdc:	9b00      	ldr	r3, [sp, #0]
 800dcde:	fa08 f800 	lsl.w	r8, r8, r0
 800dce2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800dce6:	fa23 f000 	lsr.w	r0, r3, r0
 800dcea:	ea48 0000 	orr.w	r0, r8, r0
 800dcee:	f7f6 f8c9 	bl	8003e84 <__aeabi_ui2d>
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	4682      	mov	sl, r0
 800dcf6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800dcfa:	3d01      	subs	r5, #1
 800dcfc:	9313      	str	r3, [sp, #76]	; 0x4c
 800dcfe:	e772      	b.n	800dbe6 <_dtoa_r+0xf6>
 800dd00:	9b00      	ldr	r3, [sp, #0]
 800dd02:	f1c0 0020 	rsb	r0, r0, #32
 800dd06:	fa03 f000 	lsl.w	r0, r3, r0
 800dd0a:	e7f0      	b.n	800dcee <_dtoa_r+0x1fe>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	e7b1      	b.n	800dc74 <_dtoa_r+0x184>
 800dd10:	900f      	str	r0, [sp, #60]	; 0x3c
 800dd12:	e7b0      	b.n	800dc76 <_dtoa_r+0x186>
 800dd14:	9b05      	ldr	r3, [sp, #20]
 800dd16:	eba3 030a 	sub.w	r3, r3, sl
 800dd1a:	9305      	str	r3, [sp, #20]
 800dd1c:	f1ca 0300 	rsb	r3, sl, #0
 800dd20:	9307      	str	r3, [sp, #28]
 800dd22:	2300      	movs	r3, #0
 800dd24:	930e      	str	r3, [sp, #56]	; 0x38
 800dd26:	e7bb      	b.n	800dca0 <_dtoa_r+0x1b0>
 800dd28:	2301      	movs	r3, #1
 800dd2a:	930a      	str	r3, [sp, #40]	; 0x28
 800dd2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	dd59      	ble.n	800dde6 <_dtoa_r+0x2f6>
 800dd32:	9302      	str	r3, [sp, #8]
 800dd34:	4699      	mov	r9, r3
 800dd36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dd38:	2200      	movs	r2, #0
 800dd3a:	6072      	str	r2, [r6, #4]
 800dd3c:	2204      	movs	r2, #4
 800dd3e:	f102 0014 	add.w	r0, r2, #20
 800dd42:	4298      	cmp	r0, r3
 800dd44:	6871      	ldr	r1, [r6, #4]
 800dd46:	d953      	bls.n	800ddf0 <_dtoa_r+0x300>
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f001 f9bb 	bl	800f0c4 <_Balloc>
 800dd4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd50:	6030      	str	r0, [r6, #0]
 800dd52:	f1b9 0f0e 	cmp.w	r9, #14
 800dd56:	f8d3 b000 	ldr.w	fp, [r3]
 800dd5a:	f200 80e6 	bhi.w	800df2a <_dtoa_r+0x43a>
 800dd5e:	2d00      	cmp	r5, #0
 800dd60:	f000 80e3 	beq.w	800df2a <_dtoa_r+0x43a>
 800dd64:	ed9d 7b00 	vldr	d7, [sp]
 800dd68:	f1ba 0f00 	cmp.w	sl, #0
 800dd6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800dd70:	dd74      	ble.n	800de5c <_dtoa_r+0x36c>
 800dd72:	4a2a      	ldr	r2, [pc, #168]	; (800de1c <_dtoa_r+0x32c>)
 800dd74:	f00a 030f 	and.w	r3, sl, #15
 800dd78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd7c:	ed93 7b00 	vldr	d7, [r3]
 800dd80:	ea4f 162a 	mov.w	r6, sl, asr #4
 800dd84:	06f0      	lsls	r0, r6, #27
 800dd86:	ed8d 7b08 	vstr	d7, [sp, #32]
 800dd8a:	d565      	bpl.n	800de58 <_dtoa_r+0x368>
 800dd8c:	4b24      	ldr	r3, [pc, #144]	; (800de20 <_dtoa_r+0x330>)
 800dd8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dd92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd96:	f7f6 fa19 	bl	80041cc <__aeabi_ddiv>
 800dd9a:	e9cd 0100 	strd	r0, r1, [sp]
 800dd9e:	f006 060f 	and.w	r6, r6, #15
 800dda2:	2503      	movs	r5, #3
 800dda4:	4f1e      	ldr	r7, [pc, #120]	; (800de20 <_dtoa_r+0x330>)
 800dda6:	e04c      	b.n	800de42 <_dtoa_r+0x352>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	930a      	str	r3, [sp, #40]	; 0x28
 800ddac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddae:	4453      	add	r3, sl
 800ddb0:	f103 0901 	add.w	r9, r3, #1
 800ddb4:	9302      	str	r3, [sp, #8]
 800ddb6:	464b      	mov	r3, r9
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	bfb8      	it	lt
 800ddbc:	2301      	movlt	r3, #1
 800ddbe:	e7ba      	b.n	800dd36 <_dtoa_r+0x246>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	e7b2      	b.n	800dd2a <_dtoa_r+0x23a>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	e7f0      	b.n	800ddaa <_dtoa_r+0x2ba>
 800ddc8:	2501      	movs	r5, #1
 800ddca:	2300      	movs	r3, #0
 800ddcc:	9306      	str	r3, [sp, #24]
 800ddce:	950a      	str	r5, [sp, #40]	; 0x28
 800ddd0:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	4699      	mov	r9, r3
 800ddd8:	2200      	movs	r2, #0
 800ddda:	2312      	movs	r3, #18
 800dddc:	920b      	str	r2, [sp, #44]	; 0x2c
 800ddde:	e7aa      	b.n	800dd36 <_dtoa_r+0x246>
 800dde0:	2301      	movs	r3, #1
 800dde2:	930a      	str	r3, [sp, #40]	; 0x28
 800dde4:	e7f4      	b.n	800ddd0 <_dtoa_r+0x2e0>
 800dde6:	2301      	movs	r3, #1
 800dde8:	9302      	str	r3, [sp, #8]
 800ddea:	4699      	mov	r9, r3
 800ddec:	461a      	mov	r2, r3
 800ddee:	e7f5      	b.n	800dddc <_dtoa_r+0x2ec>
 800ddf0:	3101      	adds	r1, #1
 800ddf2:	6071      	str	r1, [r6, #4]
 800ddf4:	0052      	lsls	r2, r2, #1
 800ddf6:	e7a2      	b.n	800dd3e <_dtoa_r+0x24e>
 800ddf8:	636f4361 	.word	0x636f4361
 800ddfc:	3fd287a7 	.word	0x3fd287a7
 800de00:	8b60c8b3 	.word	0x8b60c8b3
 800de04:	3fc68a28 	.word	0x3fc68a28
 800de08:	509f79fb 	.word	0x509f79fb
 800de0c:	3fd34413 	.word	0x3fd34413
 800de10:	7ff00000 	.word	0x7ff00000
 800de14:	08076721 	.word	0x08076721
 800de18:	3ff80000 	.word	0x3ff80000
 800de1c:	08076848 	.word	0x08076848
 800de20:	08076820 	.word	0x08076820
 800de24:	080767a9 	.word	0x080767a9
 800de28:	07f1      	lsls	r1, r6, #31
 800de2a:	d508      	bpl.n	800de3e <_dtoa_r+0x34e>
 800de2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de34:	f7f6 f8a0 	bl	8003f78 <__aeabi_dmul>
 800de38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de3c:	3501      	adds	r5, #1
 800de3e:	1076      	asrs	r6, r6, #1
 800de40:	3708      	adds	r7, #8
 800de42:	2e00      	cmp	r6, #0
 800de44:	d1f0      	bne.n	800de28 <_dtoa_r+0x338>
 800de46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800de4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de4e:	f7f6 f9bd 	bl	80041cc <__aeabi_ddiv>
 800de52:	e9cd 0100 	strd	r0, r1, [sp]
 800de56:	e01a      	b.n	800de8e <_dtoa_r+0x39e>
 800de58:	2502      	movs	r5, #2
 800de5a:	e7a3      	b.n	800dda4 <_dtoa_r+0x2b4>
 800de5c:	f000 80a0 	beq.w	800dfa0 <_dtoa_r+0x4b0>
 800de60:	f1ca 0600 	rsb	r6, sl, #0
 800de64:	4b9f      	ldr	r3, [pc, #636]	; (800e0e4 <_dtoa_r+0x5f4>)
 800de66:	4fa0      	ldr	r7, [pc, #640]	; (800e0e8 <_dtoa_r+0x5f8>)
 800de68:	f006 020f 	and.w	r2, r6, #15
 800de6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de78:	f7f6 f87e 	bl	8003f78 <__aeabi_dmul>
 800de7c:	e9cd 0100 	strd	r0, r1, [sp]
 800de80:	1136      	asrs	r6, r6, #4
 800de82:	2300      	movs	r3, #0
 800de84:	2502      	movs	r5, #2
 800de86:	2e00      	cmp	r6, #0
 800de88:	d17f      	bne.n	800df8a <_dtoa_r+0x49a>
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d1e1      	bne.n	800de52 <_dtoa_r+0x362>
 800de8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de90:	2b00      	cmp	r3, #0
 800de92:	f000 8087 	beq.w	800dfa4 <_dtoa_r+0x4b4>
 800de96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800de9a:	2200      	movs	r2, #0
 800de9c:	4b93      	ldr	r3, [pc, #588]	; (800e0ec <_dtoa_r+0x5fc>)
 800de9e:	4630      	mov	r0, r6
 800dea0:	4639      	mov	r1, r7
 800dea2:	f7f6 fadb 	bl	800445c <__aeabi_dcmplt>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d07c      	beq.n	800dfa4 <_dtoa_r+0x4b4>
 800deaa:	f1b9 0f00 	cmp.w	r9, #0
 800deae:	d079      	beq.n	800dfa4 <_dtoa_r+0x4b4>
 800deb0:	9b02      	ldr	r3, [sp, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	dd35      	ble.n	800df22 <_dtoa_r+0x432>
 800deb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800deba:	9308      	str	r3, [sp, #32]
 800debc:	4639      	mov	r1, r7
 800debe:	2200      	movs	r2, #0
 800dec0:	4b8b      	ldr	r3, [pc, #556]	; (800e0f0 <_dtoa_r+0x600>)
 800dec2:	4630      	mov	r0, r6
 800dec4:	f7f6 f858 	bl	8003f78 <__aeabi_dmul>
 800dec8:	e9cd 0100 	strd	r0, r1, [sp]
 800decc:	9f02      	ldr	r7, [sp, #8]
 800dece:	3501      	adds	r5, #1
 800ded0:	4628      	mov	r0, r5
 800ded2:	f7f5 ffe7 	bl	8003ea4 <__aeabi_i2d>
 800ded6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800deda:	f7f6 f84d 	bl	8003f78 <__aeabi_dmul>
 800dede:	2200      	movs	r2, #0
 800dee0:	4b84      	ldr	r3, [pc, #528]	; (800e0f4 <_dtoa_r+0x604>)
 800dee2:	f7f5 fe93 	bl	8003c0c <__adddf3>
 800dee6:	4605      	mov	r5, r0
 800dee8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800deec:	2f00      	cmp	r7, #0
 800deee:	d15d      	bne.n	800dfac <_dtoa_r+0x4bc>
 800def0:	2200      	movs	r2, #0
 800def2:	4b81      	ldr	r3, [pc, #516]	; (800e0f8 <_dtoa_r+0x608>)
 800def4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800def8:	f7f5 fe86 	bl	8003c08 <__aeabi_dsub>
 800defc:	462a      	mov	r2, r5
 800defe:	4633      	mov	r3, r6
 800df00:	e9cd 0100 	strd	r0, r1, [sp]
 800df04:	f7f6 fac8 	bl	8004498 <__aeabi_dcmpgt>
 800df08:	2800      	cmp	r0, #0
 800df0a:	f040 8288 	bne.w	800e41e <_dtoa_r+0x92e>
 800df0e:	462a      	mov	r2, r5
 800df10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800df14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df18:	f7f6 faa0 	bl	800445c <__aeabi_dcmplt>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	f040 827c 	bne.w	800e41a <_dtoa_r+0x92a>
 800df22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df26:	e9cd 2300 	strd	r2, r3, [sp]
 800df2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f2c0 8150 	blt.w	800e1d2 <_dtoa_r+0x6e2>
 800df32:	f1ba 0f0e 	cmp.w	sl, #14
 800df36:	f300 814c 	bgt.w	800e1d2 <_dtoa_r+0x6e2>
 800df3a:	4b6a      	ldr	r3, [pc, #424]	; (800e0e4 <_dtoa_r+0x5f4>)
 800df3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df40:	ed93 7b00 	vldr	d7, [r3]
 800df44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df46:	2b00      	cmp	r3, #0
 800df48:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df4c:	f280 80d8 	bge.w	800e100 <_dtoa_r+0x610>
 800df50:	f1b9 0f00 	cmp.w	r9, #0
 800df54:	f300 80d4 	bgt.w	800e100 <_dtoa_r+0x610>
 800df58:	f040 825e 	bne.w	800e418 <_dtoa_r+0x928>
 800df5c:	2200      	movs	r2, #0
 800df5e:	4b66      	ldr	r3, [pc, #408]	; (800e0f8 <_dtoa_r+0x608>)
 800df60:	ec51 0b17 	vmov	r0, r1, d7
 800df64:	f7f6 f808 	bl	8003f78 <__aeabi_dmul>
 800df68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df6c:	f7f6 fa8a 	bl	8004484 <__aeabi_dcmpge>
 800df70:	464f      	mov	r7, r9
 800df72:	464e      	mov	r6, r9
 800df74:	2800      	cmp	r0, #0
 800df76:	f040 8234 	bne.w	800e3e2 <_dtoa_r+0x8f2>
 800df7a:	2331      	movs	r3, #49	; 0x31
 800df7c:	f10b 0501 	add.w	r5, fp, #1
 800df80:	f88b 3000 	strb.w	r3, [fp]
 800df84:	f10a 0a01 	add.w	sl, sl, #1
 800df88:	e22f      	b.n	800e3ea <_dtoa_r+0x8fa>
 800df8a:	07f2      	lsls	r2, r6, #31
 800df8c:	d505      	bpl.n	800df9a <_dtoa_r+0x4aa>
 800df8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df92:	f7f5 fff1 	bl	8003f78 <__aeabi_dmul>
 800df96:	3501      	adds	r5, #1
 800df98:	2301      	movs	r3, #1
 800df9a:	1076      	asrs	r6, r6, #1
 800df9c:	3708      	adds	r7, #8
 800df9e:	e772      	b.n	800de86 <_dtoa_r+0x396>
 800dfa0:	2502      	movs	r5, #2
 800dfa2:	e774      	b.n	800de8e <_dtoa_r+0x39e>
 800dfa4:	f8cd a020 	str.w	sl, [sp, #32]
 800dfa8:	464f      	mov	r7, r9
 800dfaa:	e791      	b.n	800ded0 <_dtoa_r+0x3e0>
 800dfac:	4b4d      	ldr	r3, [pc, #308]	; (800e0e4 <_dtoa_r+0x5f4>)
 800dfae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dfb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800dfb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d047      	beq.n	800e04c <_dtoa_r+0x55c>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	494e      	ldr	r1, [pc, #312]	; (800e0fc <_dtoa_r+0x60c>)
 800dfc4:	f7f6 f902 	bl	80041cc <__aeabi_ddiv>
 800dfc8:	462a      	mov	r2, r5
 800dfca:	4633      	mov	r3, r6
 800dfcc:	f7f5 fe1c 	bl	8003c08 <__aeabi_dsub>
 800dfd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dfd4:	465d      	mov	r5, fp
 800dfd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfda:	f7f6 fa7d 	bl	80044d8 <__aeabi_d2iz>
 800dfde:	4606      	mov	r6, r0
 800dfe0:	f7f5 ff60 	bl	8003ea4 <__aeabi_i2d>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfec:	f7f5 fe0c 	bl	8003c08 <__aeabi_dsub>
 800dff0:	3630      	adds	r6, #48	; 0x30
 800dff2:	f805 6b01 	strb.w	r6, [r5], #1
 800dff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dffa:	e9cd 0100 	strd	r0, r1, [sp]
 800dffe:	f7f6 fa2d 	bl	800445c <__aeabi_dcmplt>
 800e002:	2800      	cmp	r0, #0
 800e004:	d163      	bne.n	800e0ce <_dtoa_r+0x5de>
 800e006:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e00a:	2000      	movs	r0, #0
 800e00c:	4937      	ldr	r1, [pc, #220]	; (800e0ec <_dtoa_r+0x5fc>)
 800e00e:	f7f5 fdfb 	bl	8003c08 <__aeabi_dsub>
 800e012:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e016:	f7f6 fa21 	bl	800445c <__aeabi_dcmplt>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	f040 80b7 	bne.w	800e18e <_dtoa_r+0x69e>
 800e020:	eba5 030b 	sub.w	r3, r5, fp
 800e024:	429f      	cmp	r7, r3
 800e026:	f77f af7c 	ble.w	800df22 <_dtoa_r+0x432>
 800e02a:	2200      	movs	r2, #0
 800e02c:	4b30      	ldr	r3, [pc, #192]	; (800e0f0 <_dtoa_r+0x600>)
 800e02e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e032:	f7f5 ffa1 	bl	8003f78 <__aeabi_dmul>
 800e036:	2200      	movs	r2, #0
 800e038:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e03c:	4b2c      	ldr	r3, [pc, #176]	; (800e0f0 <_dtoa_r+0x600>)
 800e03e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e042:	f7f5 ff99 	bl	8003f78 <__aeabi_dmul>
 800e046:	e9cd 0100 	strd	r0, r1, [sp]
 800e04a:	e7c4      	b.n	800dfd6 <_dtoa_r+0x4e6>
 800e04c:	462a      	mov	r2, r5
 800e04e:	4633      	mov	r3, r6
 800e050:	f7f5 ff92 	bl	8003f78 <__aeabi_dmul>
 800e054:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e058:	eb0b 0507 	add.w	r5, fp, r7
 800e05c:	465e      	mov	r6, fp
 800e05e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e062:	f7f6 fa39 	bl	80044d8 <__aeabi_d2iz>
 800e066:	4607      	mov	r7, r0
 800e068:	f7f5 ff1c 	bl	8003ea4 <__aeabi_i2d>
 800e06c:	3730      	adds	r7, #48	; 0x30
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e076:	f7f5 fdc7 	bl	8003c08 <__aeabi_dsub>
 800e07a:	f806 7b01 	strb.w	r7, [r6], #1
 800e07e:	42ae      	cmp	r6, r5
 800e080:	e9cd 0100 	strd	r0, r1, [sp]
 800e084:	f04f 0200 	mov.w	r2, #0
 800e088:	d126      	bne.n	800e0d8 <_dtoa_r+0x5e8>
 800e08a:	4b1c      	ldr	r3, [pc, #112]	; (800e0fc <_dtoa_r+0x60c>)
 800e08c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e090:	f7f5 fdbc 	bl	8003c0c <__adddf3>
 800e094:	4602      	mov	r2, r0
 800e096:	460b      	mov	r3, r1
 800e098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e09c:	f7f6 f9fc 	bl	8004498 <__aeabi_dcmpgt>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d174      	bne.n	800e18e <_dtoa_r+0x69e>
 800e0a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	4914      	ldr	r1, [pc, #80]	; (800e0fc <_dtoa_r+0x60c>)
 800e0ac:	f7f5 fdac 	bl	8003c08 <__aeabi_dsub>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0b8:	f7f6 f9d0 	bl	800445c <__aeabi_dcmplt>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	f43f af30 	beq.w	800df22 <_dtoa_r+0x432>
 800e0c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e0c6:	2b30      	cmp	r3, #48	; 0x30
 800e0c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800e0cc:	d002      	beq.n	800e0d4 <_dtoa_r+0x5e4>
 800e0ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e0d2:	e04a      	b.n	800e16a <_dtoa_r+0x67a>
 800e0d4:	4615      	mov	r5, r2
 800e0d6:	e7f4      	b.n	800e0c2 <_dtoa_r+0x5d2>
 800e0d8:	4b05      	ldr	r3, [pc, #20]	; (800e0f0 <_dtoa_r+0x600>)
 800e0da:	f7f5 ff4d 	bl	8003f78 <__aeabi_dmul>
 800e0de:	e9cd 0100 	strd	r0, r1, [sp]
 800e0e2:	e7bc      	b.n	800e05e <_dtoa_r+0x56e>
 800e0e4:	08076848 	.word	0x08076848
 800e0e8:	08076820 	.word	0x08076820
 800e0ec:	3ff00000 	.word	0x3ff00000
 800e0f0:	40240000 	.word	0x40240000
 800e0f4:	401c0000 	.word	0x401c0000
 800e0f8:	40140000 	.word	0x40140000
 800e0fc:	3fe00000 	.word	0x3fe00000
 800e100:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e104:	465d      	mov	r5, fp
 800e106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e10a:	4630      	mov	r0, r6
 800e10c:	4639      	mov	r1, r7
 800e10e:	f7f6 f85d 	bl	80041cc <__aeabi_ddiv>
 800e112:	f7f6 f9e1 	bl	80044d8 <__aeabi_d2iz>
 800e116:	4680      	mov	r8, r0
 800e118:	f7f5 fec4 	bl	8003ea4 <__aeabi_i2d>
 800e11c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e120:	f7f5 ff2a 	bl	8003f78 <__aeabi_dmul>
 800e124:	4602      	mov	r2, r0
 800e126:	460b      	mov	r3, r1
 800e128:	4630      	mov	r0, r6
 800e12a:	4639      	mov	r1, r7
 800e12c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e130:	f7f5 fd6a 	bl	8003c08 <__aeabi_dsub>
 800e134:	f805 6b01 	strb.w	r6, [r5], #1
 800e138:	eba5 060b 	sub.w	r6, r5, fp
 800e13c:	45b1      	cmp	r9, r6
 800e13e:	4602      	mov	r2, r0
 800e140:	460b      	mov	r3, r1
 800e142:	d139      	bne.n	800e1b8 <_dtoa_r+0x6c8>
 800e144:	f7f5 fd62 	bl	8003c0c <__adddf3>
 800e148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e14c:	4606      	mov	r6, r0
 800e14e:	460f      	mov	r7, r1
 800e150:	f7f6 f9a2 	bl	8004498 <__aeabi_dcmpgt>
 800e154:	b9c8      	cbnz	r0, 800e18a <_dtoa_r+0x69a>
 800e156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e15a:	4630      	mov	r0, r6
 800e15c:	4639      	mov	r1, r7
 800e15e:	f7f6 f973 	bl	8004448 <__aeabi_dcmpeq>
 800e162:	b110      	cbz	r0, 800e16a <_dtoa_r+0x67a>
 800e164:	f018 0f01 	tst.w	r8, #1
 800e168:	d10f      	bne.n	800e18a <_dtoa_r+0x69a>
 800e16a:	9904      	ldr	r1, [sp, #16]
 800e16c:	4620      	mov	r0, r4
 800e16e:	f000 ffdd 	bl	800f12c <_Bfree>
 800e172:	2300      	movs	r3, #0
 800e174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e176:	702b      	strb	r3, [r5, #0]
 800e178:	f10a 0301 	add.w	r3, sl, #1
 800e17c:	6013      	str	r3, [r2, #0]
 800e17e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e180:	2b00      	cmp	r3, #0
 800e182:	f000 8241 	beq.w	800e608 <_dtoa_r+0xb18>
 800e186:	601d      	str	r5, [r3, #0]
 800e188:	e23e      	b.n	800e608 <_dtoa_r+0xb18>
 800e18a:	f8cd a020 	str.w	sl, [sp, #32]
 800e18e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e192:	2a39      	cmp	r2, #57	; 0x39
 800e194:	f105 33ff 	add.w	r3, r5, #4294967295
 800e198:	d108      	bne.n	800e1ac <_dtoa_r+0x6bc>
 800e19a:	459b      	cmp	fp, r3
 800e19c:	d10a      	bne.n	800e1b4 <_dtoa_r+0x6c4>
 800e19e:	9b08      	ldr	r3, [sp, #32]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	9308      	str	r3, [sp, #32]
 800e1a4:	2330      	movs	r3, #48	; 0x30
 800e1a6:	f88b 3000 	strb.w	r3, [fp]
 800e1aa:	465b      	mov	r3, fp
 800e1ac:	781a      	ldrb	r2, [r3, #0]
 800e1ae:	3201      	adds	r2, #1
 800e1b0:	701a      	strb	r2, [r3, #0]
 800e1b2:	e78c      	b.n	800e0ce <_dtoa_r+0x5de>
 800e1b4:	461d      	mov	r5, r3
 800e1b6:	e7ea      	b.n	800e18e <_dtoa_r+0x69e>
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	4b9b      	ldr	r3, [pc, #620]	; (800e428 <_dtoa_r+0x938>)
 800e1bc:	f7f5 fedc 	bl	8003f78 <__aeabi_dmul>
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	460f      	mov	r7, r1
 800e1c8:	f7f6 f93e 	bl	8004448 <__aeabi_dcmpeq>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d09a      	beq.n	800e106 <_dtoa_r+0x616>
 800e1d0:	e7cb      	b.n	800e16a <_dtoa_r+0x67a>
 800e1d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1d4:	2a00      	cmp	r2, #0
 800e1d6:	f000 808b 	beq.w	800e2f0 <_dtoa_r+0x800>
 800e1da:	9a06      	ldr	r2, [sp, #24]
 800e1dc:	2a01      	cmp	r2, #1
 800e1de:	dc6e      	bgt.n	800e2be <_dtoa_r+0x7ce>
 800e1e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e1e2:	2a00      	cmp	r2, #0
 800e1e4:	d067      	beq.n	800e2b6 <_dtoa_r+0x7c6>
 800e1e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1ea:	9f07      	ldr	r7, [sp, #28]
 800e1ec:	9d05      	ldr	r5, [sp, #20]
 800e1ee:	9a05      	ldr	r2, [sp, #20]
 800e1f0:	2101      	movs	r1, #1
 800e1f2:	441a      	add	r2, r3
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	9205      	str	r2, [sp, #20]
 800e1f8:	4498      	add	r8, r3
 800e1fa:	f001 f875 	bl	800f2e8 <__i2b>
 800e1fe:	4606      	mov	r6, r0
 800e200:	2d00      	cmp	r5, #0
 800e202:	dd0c      	ble.n	800e21e <_dtoa_r+0x72e>
 800e204:	f1b8 0f00 	cmp.w	r8, #0
 800e208:	dd09      	ble.n	800e21e <_dtoa_r+0x72e>
 800e20a:	4545      	cmp	r5, r8
 800e20c:	9a05      	ldr	r2, [sp, #20]
 800e20e:	462b      	mov	r3, r5
 800e210:	bfa8      	it	ge
 800e212:	4643      	movge	r3, r8
 800e214:	1ad2      	subs	r2, r2, r3
 800e216:	9205      	str	r2, [sp, #20]
 800e218:	1aed      	subs	r5, r5, r3
 800e21a:	eba8 0803 	sub.w	r8, r8, r3
 800e21e:	9b07      	ldr	r3, [sp, #28]
 800e220:	b1eb      	cbz	r3, 800e25e <_dtoa_r+0x76e>
 800e222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e224:	2b00      	cmp	r3, #0
 800e226:	d067      	beq.n	800e2f8 <_dtoa_r+0x808>
 800e228:	b18f      	cbz	r7, 800e24e <_dtoa_r+0x75e>
 800e22a:	4631      	mov	r1, r6
 800e22c:	463a      	mov	r2, r7
 800e22e:	4620      	mov	r0, r4
 800e230:	f001 f8fa 	bl	800f428 <__pow5mult>
 800e234:	9a04      	ldr	r2, [sp, #16]
 800e236:	4601      	mov	r1, r0
 800e238:	4606      	mov	r6, r0
 800e23a:	4620      	mov	r0, r4
 800e23c:	f001 f85d 	bl	800f2fa <__multiply>
 800e240:	9904      	ldr	r1, [sp, #16]
 800e242:	9008      	str	r0, [sp, #32]
 800e244:	4620      	mov	r0, r4
 800e246:	f000 ff71 	bl	800f12c <_Bfree>
 800e24a:	9b08      	ldr	r3, [sp, #32]
 800e24c:	9304      	str	r3, [sp, #16]
 800e24e:	9b07      	ldr	r3, [sp, #28]
 800e250:	1bda      	subs	r2, r3, r7
 800e252:	d004      	beq.n	800e25e <_dtoa_r+0x76e>
 800e254:	9904      	ldr	r1, [sp, #16]
 800e256:	4620      	mov	r0, r4
 800e258:	f001 f8e6 	bl	800f428 <__pow5mult>
 800e25c:	9004      	str	r0, [sp, #16]
 800e25e:	2101      	movs	r1, #1
 800e260:	4620      	mov	r0, r4
 800e262:	f001 f841 	bl	800f2e8 <__i2b>
 800e266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e268:	4607      	mov	r7, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f000 81d0 	beq.w	800e610 <_dtoa_r+0xb20>
 800e270:	461a      	mov	r2, r3
 800e272:	4601      	mov	r1, r0
 800e274:	4620      	mov	r0, r4
 800e276:	f001 f8d7 	bl	800f428 <__pow5mult>
 800e27a:	9b06      	ldr	r3, [sp, #24]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	4607      	mov	r7, r0
 800e280:	dc40      	bgt.n	800e304 <_dtoa_r+0x814>
 800e282:	9b00      	ldr	r3, [sp, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d139      	bne.n	800e2fc <_dtoa_r+0x80c>
 800e288:	9b01      	ldr	r3, [sp, #4]
 800e28a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d136      	bne.n	800e300 <_dtoa_r+0x810>
 800e292:	9b01      	ldr	r3, [sp, #4]
 800e294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e298:	0d1b      	lsrs	r3, r3, #20
 800e29a:	051b      	lsls	r3, r3, #20
 800e29c:	b12b      	cbz	r3, 800e2aa <_dtoa_r+0x7ba>
 800e29e:	9b05      	ldr	r3, [sp, #20]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	9305      	str	r3, [sp, #20]
 800e2a4:	f108 0801 	add.w	r8, r8, #1
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	9307      	str	r3, [sp, #28]
 800e2ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d12a      	bne.n	800e308 <_dtoa_r+0x818>
 800e2b2:	2001      	movs	r0, #1
 800e2b4:	e030      	b.n	800e318 <_dtoa_r+0x828>
 800e2b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e2b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2bc:	e795      	b.n	800e1ea <_dtoa_r+0x6fa>
 800e2be:	9b07      	ldr	r3, [sp, #28]
 800e2c0:	f109 37ff 	add.w	r7, r9, #4294967295
 800e2c4:	42bb      	cmp	r3, r7
 800e2c6:	bfbf      	itttt	lt
 800e2c8:	9b07      	ldrlt	r3, [sp, #28]
 800e2ca:	9707      	strlt	r7, [sp, #28]
 800e2cc:	1afa      	sublt	r2, r7, r3
 800e2ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e2d0:	bfbb      	ittet	lt
 800e2d2:	189b      	addlt	r3, r3, r2
 800e2d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e2d6:	1bdf      	subge	r7, r3, r7
 800e2d8:	2700      	movlt	r7, #0
 800e2da:	f1b9 0f00 	cmp.w	r9, #0
 800e2de:	bfb5      	itete	lt
 800e2e0:	9b05      	ldrlt	r3, [sp, #20]
 800e2e2:	9d05      	ldrge	r5, [sp, #20]
 800e2e4:	eba3 0509 	sublt.w	r5, r3, r9
 800e2e8:	464b      	movge	r3, r9
 800e2ea:	bfb8      	it	lt
 800e2ec:	2300      	movlt	r3, #0
 800e2ee:	e77e      	b.n	800e1ee <_dtoa_r+0x6fe>
 800e2f0:	9f07      	ldr	r7, [sp, #28]
 800e2f2:	9d05      	ldr	r5, [sp, #20]
 800e2f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e2f6:	e783      	b.n	800e200 <_dtoa_r+0x710>
 800e2f8:	9a07      	ldr	r2, [sp, #28]
 800e2fa:	e7ab      	b.n	800e254 <_dtoa_r+0x764>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	e7d4      	b.n	800e2aa <_dtoa_r+0x7ba>
 800e300:	9b00      	ldr	r3, [sp, #0]
 800e302:	e7d2      	b.n	800e2aa <_dtoa_r+0x7ba>
 800e304:	2300      	movs	r3, #0
 800e306:	9307      	str	r3, [sp, #28]
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e30e:	6918      	ldr	r0, [r3, #16]
 800e310:	f000 ff9c 	bl	800f24c <__hi0bits>
 800e314:	f1c0 0020 	rsb	r0, r0, #32
 800e318:	4440      	add	r0, r8
 800e31a:	f010 001f 	ands.w	r0, r0, #31
 800e31e:	d047      	beq.n	800e3b0 <_dtoa_r+0x8c0>
 800e320:	f1c0 0320 	rsb	r3, r0, #32
 800e324:	2b04      	cmp	r3, #4
 800e326:	dd3b      	ble.n	800e3a0 <_dtoa_r+0x8b0>
 800e328:	9b05      	ldr	r3, [sp, #20]
 800e32a:	f1c0 001c 	rsb	r0, r0, #28
 800e32e:	4403      	add	r3, r0
 800e330:	9305      	str	r3, [sp, #20]
 800e332:	4405      	add	r5, r0
 800e334:	4480      	add	r8, r0
 800e336:	9b05      	ldr	r3, [sp, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	dd05      	ble.n	800e348 <_dtoa_r+0x858>
 800e33c:	461a      	mov	r2, r3
 800e33e:	9904      	ldr	r1, [sp, #16]
 800e340:	4620      	mov	r0, r4
 800e342:	f001 f8bf 	bl	800f4c4 <__lshift>
 800e346:	9004      	str	r0, [sp, #16]
 800e348:	f1b8 0f00 	cmp.w	r8, #0
 800e34c:	dd05      	ble.n	800e35a <_dtoa_r+0x86a>
 800e34e:	4639      	mov	r1, r7
 800e350:	4642      	mov	r2, r8
 800e352:	4620      	mov	r0, r4
 800e354:	f001 f8b6 	bl	800f4c4 <__lshift>
 800e358:	4607      	mov	r7, r0
 800e35a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e35c:	b353      	cbz	r3, 800e3b4 <_dtoa_r+0x8c4>
 800e35e:	4639      	mov	r1, r7
 800e360:	9804      	ldr	r0, [sp, #16]
 800e362:	f001 f903 	bl	800f56c <__mcmp>
 800e366:	2800      	cmp	r0, #0
 800e368:	da24      	bge.n	800e3b4 <_dtoa_r+0x8c4>
 800e36a:	2300      	movs	r3, #0
 800e36c:	220a      	movs	r2, #10
 800e36e:	9904      	ldr	r1, [sp, #16]
 800e370:	4620      	mov	r0, r4
 800e372:	f000 fef2 	bl	800f15a <__multadd>
 800e376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e378:	9004      	str	r0, [sp, #16]
 800e37a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 814d 	beq.w	800e61e <_dtoa_r+0xb2e>
 800e384:	2300      	movs	r3, #0
 800e386:	4631      	mov	r1, r6
 800e388:	220a      	movs	r2, #10
 800e38a:	4620      	mov	r0, r4
 800e38c:	f000 fee5 	bl	800f15a <__multadd>
 800e390:	9b02      	ldr	r3, [sp, #8]
 800e392:	2b00      	cmp	r3, #0
 800e394:	4606      	mov	r6, r0
 800e396:	dc4f      	bgt.n	800e438 <_dtoa_r+0x948>
 800e398:	9b06      	ldr	r3, [sp, #24]
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	dd4c      	ble.n	800e438 <_dtoa_r+0x948>
 800e39e:	e011      	b.n	800e3c4 <_dtoa_r+0x8d4>
 800e3a0:	d0c9      	beq.n	800e336 <_dtoa_r+0x846>
 800e3a2:	9a05      	ldr	r2, [sp, #20]
 800e3a4:	331c      	adds	r3, #28
 800e3a6:	441a      	add	r2, r3
 800e3a8:	9205      	str	r2, [sp, #20]
 800e3aa:	441d      	add	r5, r3
 800e3ac:	4498      	add	r8, r3
 800e3ae:	e7c2      	b.n	800e336 <_dtoa_r+0x846>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	e7f6      	b.n	800e3a2 <_dtoa_r+0x8b2>
 800e3b4:	f1b9 0f00 	cmp.w	r9, #0
 800e3b8:	dc38      	bgt.n	800e42c <_dtoa_r+0x93c>
 800e3ba:	9b06      	ldr	r3, [sp, #24]
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	dd35      	ble.n	800e42c <_dtoa_r+0x93c>
 800e3c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800e3c4:	9b02      	ldr	r3, [sp, #8]
 800e3c6:	b963      	cbnz	r3, 800e3e2 <_dtoa_r+0x8f2>
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	2205      	movs	r2, #5
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 fec4 	bl	800f15a <__multadd>
 800e3d2:	4601      	mov	r1, r0
 800e3d4:	4607      	mov	r7, r0
 800e3d6:	9804      	ldr	r0, [sp, #16]
 800e3d8:	f001 f8c8 	bl	800f56c <__mcmp>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	f73f adcc 	bgt.w	800df7a <_dtoa_r+0x48a>
 800e3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3e4:	465d      	mov	r5, fp
 800e3e6:	ea6f 0a03 	mvn.w	sl, r3
 800e3ea:	f04f 0900 	mov.w	r9, #0
 800e3ee:	4639      	mov	r1, r7
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 fe9b 	bl	800f12c <_Bfree>
 800e3f6:	2e00      	cmp	r6, #0
 800e3f8:	f43f aeb7 	beq.w	800e16a <_dtoa_r+0x67a>
 800e3fc:	f1b9 0f00 	cmp.w	r9, #0
 800e400:	d005      	beq.n	800e40e <_dtoa_r+0x91e>
 800e402:	45b1      	cmp	r9, r6
 800e404:	d003      	beq.n	800e40e <_dtoa_r+0x91e>
 800e406:	4649      	mov	r1, r9
 800e408:	4620      	mov	r0, r4
 800e40a:	f000 fe8f 	bl	800f12c <_Bfree>
 800e40e:	4631      	mov	r1, r6
 800e410:	4620      	mov	r0, r4
 800e412:	f000 fe8b 	bl	800f12c <_Bfree>
 800e416:	e6a8      	b.n	800e16a <_dtoa_r+0x67a>
 800e418:	2700      	movs	r7, #0
 800e41a:	463e      	mov	r6, r7
 800e41c:	e7e1      	b.n	800e3e2 <_dtoa_r+0x8f2>
 800e41e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e422:	463e      	mov	r6, r7
 800e424:	e5a9      	b.n	800df7a <_dtoa_r+0x48a>
 800e426:	bf00      	nop
 800e428:	40240000 	.word	0x40240000
 800e42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e42e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e432:	2b00      	cmp	r3, #0
 800e434:	f000 80fa 	beq.w	800e62c <_dtoa_r+0xb3c>
 800e438:	2d00      	cmp	r5, #0
 800e43a:	dd05      	ble.n	800e448 <_dtoa_r+0x958>
 800e43c:	4631      	mov	r1, r6
 800e43e:	462a      	mov	r2, r5
 800e440:	4620      	mov	r0, r4
 800e442:	f001 f83f 	bl	800f4c4 <__lshift>
 800e446:	4606      	mov	r6, r0
 800e448:	9b07      	ldr	r3, [sp, #28]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d04c      	beq.n	800e4e8 <_dtoa_r+0x9f8>
 800e44e:	6871      	ldr	r1, [r6, #4]
 800e450:	4620      	mov	r0, r4
 800e452:	f000 fe37 	bl	800f0c4 <_Balloc>
 800e456:	6932      	ldr	r2, [r6, #16]
 800e458:	3202      	adds	r2, #2
 800e45a:	4605      	mov	r5, r0
 800e45c:	0092      	lsls	r2, r2, #2
 800e45e:	f106 010c 	add.w	r1, r6, #12
 800e462:	300c      	adds	r0, #12
 800e464:	f7fd fc41 	bl	800bcea <memcpy>
 800e468:	2201      	movs	r2, #1
 800e46a:	4629      	mov	r1, r5
 800e46c:	4620      	mov	r0, r4
 800e46e:	f001 f829 	bl	800f4c4 <__lshift>
 800e472:	9b00      	ldr	r3, [sp, #0]
 800e474:	f8cd b014 	str.w	fp, [sp, #20]
 800e478:	f003 0301 	and.w	r3, r3, #1
 800e47c:	46b1      	mov	r9, r6
 800e47e:	9307      	str	r3, [sp, #28]
 800e480:	4606      	mov	r6, r0
 800e482:	4639      	mov	r1, r7
 800e484:	9804      	ldr	r0, [sp, #16]
 800e486:	f7ff faa5 	bl	800d9d4 <quorem>
 800e48a:	4649      	mov	r1, r9
 800e48c:	4605      	mov	r5, r0
 800e48e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e492:	9804      	ldr	r0, [sp, #16]
 800e494:	f001 f86a 	bl	800f56c <__mcmp>
 800e498:	4632      	mov	r2, r6
 800e49a:	9000      	str	r0, [sp, #0]
 800e49c:	4639      	mov	r1, r7
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f001 f87e 	bl	800f5a0 <__mdiff>
 800e4a4:	68c3      	ldr	r3, [r0, #12]
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	bb03      	cbnz	r3, 800e4ec <_dtoa_r+0x9fc>
 800e4aa:	4601      	mov	r1, r0
 800e4ac:	9008      	str	r0, [sp, #32]
 800e4ae:	9804      	ldr	r0, [sp, #16]
 800e4b0:	f001 f85c 	bl	800f56c <__mcmp>
 800e4b4:	9a08      	ldr	r2, [sp, #32]
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	9308      	str	r3, [sp, #32]
 800e4be:	f000 fe35 	bl	800f12c <_Bfree>
 800e4c2:	9b08      	ldr	r3, [sp, #32]
 800e4c4:	b9a3      	cbnz	r3, 800e4f0 <_dtoa_r+0xa00>
 800e4c6:	9a06      	ldr	r2, [sp, #24]
 800e4c8:	b992      	cbnz	r2, 800e4f0 <_dtoa_r+0xa00>
 800e4ca:	9a07      	ldr	r2, [sp, #28]
 800e4cc:	b982      	cbnz	r2, 800e4f0 <_dtoa_r+0xa00>
 800e4ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e4d2:	d029      	beq.n	800e528 <_dtoa_r+0xa38>
 800e4d4:	9b00      	ldr	r3, [sp, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	dd01      	ble.n	800e4de <_dtoa_r+0x9ee>
 800e4da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e4de:	9b05      	ldr	r3, [sp, #20]
 800e4e0:	1c5d      	adds	r5, r3, #1
 800e4e2:	f883 8000 	strb.w	r8, [r3]
 800e4e6:	e782      	b.n	800e3ee <_dtoa_r+0x8fe>
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	e7c2      	b.n	800e472 <_dtoa_r+0x982>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e7e3      	b.n	800e4b8 <_dtoa_r+0x9c8>
 800e4f0:	9a00      	ldr	r2, [sp, #0]
 800e4f2:	2a00      	cmp	r2, #0
 800e4f4:	db04      	blt.n	800e500 <_dtoa_r+0xa10>
 800e4f6:	d125      	bne.n	800e544 <_dtoa_r+0xa54>
 800e4f8:	9a06      	ldr	r2, [sp, #24]
 800e4fa:	bb1a      	cbnz	r2, 800e544 <_dtoa_r+0xa54>
 800e4fc:	9a07      	ldr	r2, [sp, #28]
 800e4fe:	bb0a      	cbnz	r2, 800e544 <_dtoa_r+0xa54>
 800e500:	2b00      	cmp	r3, #0
 800e502:	ddec      	ble.n	800e4de <_dtoa_r+0x9ee>
 800e504:	2201      	movs	r2, #1
 800e506:	9904      	ldr	r1, [sp, #16]
 800e508:	4620      	mov	r0, r4
 800e50a:	f000 ffdb 	bl	800f4c4 <__lshift>
 800e50e:	4639      	mov	r1, r7
 800e510:	9004      	str	r0, [sp, #16]
 800e512:	f001 f82b 	bl	800f56c <__mcmp>
 800e516:	2800      	cmp	r0, #0
 800e518:	dc03      	bgt.n	800e522 <_dtoa_r+0xa32>
 800e51a:	d1e0      	bne.n	800e4de <_dtoa_r+0x9ee>
 800e51c:	f018 0f01 	tst.w	r8, #1
 800e520:	d0dd      	beq.n	800e4de <_dtoa_r+0x9ee>
 800e522:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e526:	d1d8      	bne.n	800e4da <_dtoa_r+0x9ea>
 800e528:	9b05      	ldr	r3, [sp, #20]
 800e52a:	9a05      	ldr	r2, [sp, #20]
 800e52c:	1c5d      	adds	r5, r3, #1
 800e52e:	2339      	movs	r3, #57	; 0x39
 800e530:	7013      	strb	r3, [r2, #0]
 800e532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e536:	2b39      	cmp	r3, #57	; 0x39
 800e538:	f105 32ff 	add.w	r2, r5, #4294967295
 800e53c:	d04f      	beq.n	800e5de <_dtoa_r+0xaee>
 800e53e:	3301      	adds	r3, #1
 800e540:	7013      	strb	r3, [r2, #0]
 800e542:	e754      	b.n	800e3ee <_dtoa_r+0x8fe>
 800e544:	9a05      	ldr	r2, [sp, #20]
 800e546:	2b00      	cmp	r3, #0
 800e548:	f102 0501 	add.w	r5, r2, #1
 800e54c:	dd06      	ble.n	800e55c <_dtoa_r+0xa6c>
 800e54e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e552:	d0e9      	beq.n	800e528 <_dtoa_r+0xa38>
 800e554:	f108 0801 	add.w	r8, r8, #1
 800e558:	9b05      	ldr	r3, [sp, #20]
 800e55a:	e7c2      	b.n	800e4e2 <_dtoa_r+0x9f2>
 800e55c:	9a02      	ldr	r2, [sp, #8]
 800e55e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e562:	eba5 030b 	sub.w	r3, r5, fp
 800e566:	4293      	cmp	r3, r2
 800e568:	d021      	beq.n	800e5ae <_dtoa_r+0xabe>
 800e56a:	2300      	movs	r3, #0
 800e56c:	220a      	movs	r2, #10
 800e56e:	9904      	ldr	r1, [sp, #16]
 800e570:	4620      	mov	r0, r4
 800e572:	f000 fdf2 	bl	800f15a <__multadd>
 800e576:	45b1      	cmp	r9, r6
 800e578:	9004      	str	r0, [sp, #16]
 800e57a:	f04f 0300 	mov.w	r3, #0
 800e57e:	f04f 020a 	mov.w	r2, #10
 800e582:	4649      	mov	r1, r9
 800e584:	4620      	mov	r0, r4
 800e586:	d105      	bne.n	800e594 <_dtoa_r+0xaa4>
 800e588:	f000 fde7 	bl	800f15a <__multadd>
 800e58c:	4681      	mov	r9, r0
 800e58e:	4606      	mov	r6, r0
 800e590:	9505      	str	r5, [sp, #20]
 800e592:	e776      	b.n	800e482 <_dtoa_r+0x992>
 800e594:	f000 fde1 	bl	800f15a <__multadd>
 800e598:	4631      	mov	r1, r6
 800e59a:	4681      	mov	r9, r0
 800e59c:	2300      	movs	r3, #0
 800e59e:	220a      	movs	r2, #10
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f000 fdda 	bl	800f15a <__multadd>
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	e7f2      	b.n	800e590 <_dtoa_r+0xaa0>
 800e5aa:	f04f 0900 	mov.w	r9, #0
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	9904      	ldr	r1, [sp, #16]
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f000 ff86 	bl	800f4c4 <__lshift>
 800e5b8:	4639      	mov	r1, r7
 800e5ba:	9004      	str	r0, [sp, #16]
 800e5bc:	f000 ffd6 	bl	800f56c <__mcmp>
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	dcb6      	bgt.n	800e532 <_dtoa_r+0xa42>
 800e5c4:	d102      	bne.n	800e5cc <_dtoa_r+0xadc>
 800e5c6:	f018 0f01 	tst.w	r8, #1
 800e5ca:	d1b2      	bne.n	800e532 <_dtoa_r+0xa42>
 800e5cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e5d0:	2b30      	cmp	r3, #48	; 0x30
 800e5d2:	f105 32ff 	add.w	r2, r5, #4294967295
 800e5d6:	f47f af0a 	bne.w	800e3ee <_dtoa_r+0x8fe>
 800e5da:	4615      	mov	r5, r2
 800e5dc:	e7f6      	b.n	800e5cc <_dtoa_r+0xadc>
 800e5de:	4593      	cmp	fp, r2
 800e5e0:	d105      	bne.n	800e5ee <_dtoa_r+0xafe>
 800e5e2:	2331      	movs	r3, #49	; 0x31
 800e5e4:	f10a 0a01 	add.w	sl, sl, #1
 800e5e8:	f88b 3000 	strb.w	r3, [fp]
 800e5ec:	e6ff      	b.n	800e3ee <_dtoa_r+0x8fe>
 800e5ee:	4615      	mov	r5, r2
 800e5f0:	e79f      	b.n	800e532 <_dtoa_r+0xa42>
 800e5f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e658 <_dtoa_r+0xb68>
 800e5f6:	e007      	b.n	800e608 <_dtoa_r+0xb18>
 800e5f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e65c <_dtoa_r+0xb6c>
 800e5fe:	b11b      	cbz	r3, 800e608 <_dtoa_r+0xb18>
 800e600:	f10b 0308 	add.w	r3, fp, #8
 800e604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e606:	6013      	str	r3, [r2, #0]
 800e608:	4658      	mov	r0, fp
 800e60a:	b017      	add	sp, #92	; 0x5c
 800e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e610:	9b06      	ldr	r3, [sp, #24]
 800e612:	2b01      	cmp	r3, #1
 800e614:	f77f ae35 	ble.w	800e282 <_dtoa_r+0x792>
 800e618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e61a:	9307      	str	r3, [sp, #28]
 800e61c:	e649      	b.n	800e2b2 <_dtoa_r+0x7c2>
 800e61e:	9b02      	ldr	r3, [sp, #8]
 800e620:	2b00      	cmp	r3, #0
 800e622:	dc03      	bgt.n	800e62c <_dtoa_r+0xb3c>
 800e624:	9b06      	ldr	r3, [sp, #24]
 800e626:	2b02      	cmp	r3, #2
 800e628:	f73f aecc 	bgt.w	800e3c4 <_dtoa_r+0x8d4>
 800e62c:	465d      	mov	r5, fp
 800e62e:	4639      	mov	r1, r7
 800e630:	9804      	ldr	r0, [sp, #16]
 800e632:	f7ff f9cf 	bl	800d9d4 <quorem>
 800e636:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e63a:	f805 8b01 	strb.w	r8, [r5], #1
 800e63e:	9a02      	ldr	r2, [sp, #8]
 800e640:	eba5 030b 	sub.w	r3, r5, fp
 800e644:	429a      	cmp	r2, r3
 800e646:	ddb0      	ble.n	800e5aa <_dtoa_r+0xaba>
 800e648:	2300      	movs	r3, #0
 800e64a:	220a      	movs	r2, #10
 800e64c:	9904      	ldr	r1, [sp, #16]
 800e64e:	4620      	mov	r0, r4
 800e650:	f000 fd83 	bl	800f15a <__multadd>
 800e654:	9004      	str	r0, [sp, #16]
 800e656:	e7ea      	b.n	800e62e <_dtoa_r+0xb3e>
 800e658:	08076720 	.word	0x08076720
 800e65c:	080767a0 	.word	0x080767a0

0800e660 <__sflush_r>:
 800e660:	898a      	ldrh	r2, [r1, #12]
 800e662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e666:	4605      	mov	r5, r0
 800e668:	0710      	lsls	r0, r2, #28
 800e66a:	460c      	mov	r4, r1
 800e66c:	d458      	bmi.n	800e720 <__sflush_r+0xc0>
 800e66e:	684b      	ldr	r3, [r1, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	dc05      	bgt.n	800e680 <__sflush_r+0x20>
 800e674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e676:	2b00      	cmp	r3, #0
 800e678:	dc02      	bgt.n	800e680 <__sflush_r+0x20>
 800e67a:	2000      	movs	r0, #0
 800e67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e682:	2e00      	cmp	r6, #0
 800e684:	d0f9      	beq.n	800e67a <__sflush_r+0x1a>
 800e686:	2300      	movs	r3, #0
 800e688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e68c:	682f      	ldr	r7, [r5, #0]
 800e68e:	6a21      	ldr	r1, [r4, #32]
 800e690:	602b      	str	r3, [r5, #0]
 800e692:	d032      	beq.n	800e6fa <__sflush_r+0x9a>
 800e694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e696:	89a3      	ldrh	r3, [r4, #12]
 800e698:	075a      	lsls	r2, r3, #29
 800e69a:	d505      	bpl.n	800e6a8 <__sflush_r+0x48>
 800e69c:	6863      	ldr	r3, [r4, #4]
 800e69e:	1ac0      	subs	r0, r0, r3
 800e6a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6a2:	b10b      	cbz	r3, 800e6a8 <__sflush_r+0x48>
 800e6a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6a6:	1ac0      	subs	r0, r0, r3
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6ae:	6a21      	ldr	r1, [r4, #32]
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	47b0      	blx	r6
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	d106      	bne.n	800e6c8 <__sflush_r+0x68>
 800e6ba:	6829      	ldr	r1, [r5, #0]
 800e6bc:	291d      	cmp	r1, #29
 800e6be:	d848      	bhi.n	800e752 <__sflush_r+0xf2>
 800e6c0:	4a29      	ldr	r2, [pc, #164]	; (800e768 <__sflush_r+0x108>)
 800e6c2:	40ca      	lsrs	r2, r1
 800e6c4:	07d6      	lsls	r6, r2, #31
 800e6c6:	d544      	bpl.n	800e752 <__sflush_r+0xf2>
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	6062      	str	r2, [r4, #4]
 800e6cc:	04d9      	lsls	r1, r3, #19
 800e6ce:	6922      	ldr	r2, [r4, #16]
 800e6d0:	6022      	str	r2, [r4, #0]
 800e6d2:	d504      	bpl.n	800e6de <__sflush_r+0x7e>
 800e6d4:	1c42      	adds	r2, r0, #1
 800e6d6:	d101      	bne.n	800e6dc <__sflush_r+0x7c>
 800e6d8:	682b      	ldr	r3, [r5, #0]
 800e6da:	b903      	cbnz	r3, 800e6de <__sflush_r+0x7e>
 800e6dc:	6560      	str	r0, [r4, #84]	; 0x54
 800e6de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6e0:	602f      	str	r7, [r5, #0]
 800e6e2:	2900      	cmp	r1, #0
 800e6e4:	d0c9      	beq.n	800e67a <__sflush_r+0x1a>
 800e6e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6ea:	4299      	cmp	r1, r3
 800e6ec:	d002      	beq.n	800e6f4 <__sflush_r+0x94>
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f001 f8f6 	bl	800f8e0 <_free_r>
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	6360      	str	r0, [r4, #52]	; 0x34
 800e6f8:	e7c0      	b.n	800e67c <__sflush_r+0x1c>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	47b0      	blx	r6
 800e700:	1c41      	adds	r1, r0, #1
 800e702:	d1c8      	bne.n	800e696 <__sflush_r+0x36>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0c5      	beq.n	800e696 <__sflush_r+0x36>
 800e70a:	2b1d      	cmp	r3, #29
 800e70c:	d001      	beq.n	800e712 <__sflush_r+0xb2>
 800e70e:	2b16      	cmp	r3, #22
 800e710:	d101      	bne.n	800e716 <__sflush_r+0xb6>
 800e712:	602f      	str	r7, [r5, #0]
 800e714:	e7b1      	b.n	800e67a <__sflush_r+0x1a>
 800e716:	89a3      	ldrh	r3, [r4, #12]
 800e718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	e7ad      	b.n	800e67c <__sflush_r+0x1c>
 800e720:	690f      	ldr	r7, [r1, #16]
 800e722:	2f00      	cmp	r7, #0
 800e724:	d0a9      	beq.n	800e67a <__sflush_r+0x1a>
 800e726:	0793      	lsls	r3, r2, #30
 800e728:	680e      	ldr	r6, [r1, #0]
 800e72a:	bf08      	it	eq
 800e72c:	694b      	ldreq	r3, [r1, #20]
 800e72e:	600f      	str	r7, [r1, #0]
 800e730:	bf18      	it	ne
 800e732:	2300      	movne	r3, #0
 800e734:	eba6 0807 	sub.w	r8, r6, r7
 800e738:	608b      	str	r3, [r1, #8]
 800e73a:	f1b8 0f00 	cmp.w	r8, #0
 800e73e:	dd9c      	ble.n	800e67a <__sflush_r+0x1a>
 800e740:	4643      	mov	r3, r8
 800e742:	463a      	mov	r2, r7
 800e744:	6a21      	ldr	r1, [r4, #32]
 800e746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e748:	4628      	mov	r0, r5
 800e74a:	47b0      	blx	r6
 800e74c:	2800      	cmp	r0, #0
 800e74e:	dc06      	bgt.n	800e75e <__sflush_r+0xfe>
 800e750:	89a3      	ldrh	r3, [r4, #12]
 800e752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e756:	81a3      	strh	r3, [r4, #12]
 800e758:	f04f 30ff 	mov.w	r0, #4294967295
 800e75c:	e78e      	b.n	800e67c <__sflush_r+0x1c>
 800e75e:	4407      	add	r7, r0
 800e760:	eba8 0800 	sub.w	r8, r8, r0
 800e764:	e7e9      	b.n	800e73a <__sflush_r+0xda>
 800e766:	bf00      	nop
 800e768:	20400001 	.word	0x20400001

0800e76c <_fflush_r>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	690b      	ldr	r3, [r1, #16]
 800e770:	4605      	mov	r5, r0
 800e772:	460c      	mov	r4, r1
 800e774:	b1db      	cbz	r3, 800e7ae <_fflush_r+0x42>
 800e776:	b118      	cbz	r0, 800e780 <_fflush_r+0x14>
 800e778:	6983      	ldr	r3, [r0, #24]
 800e77a:	b90b      	cbnz	r3, 800e780 <_fflush_r+0x14>
 800e77c:	f000 f860 	bl	800e840 <__sinit>
 800e780:	4b0c      	ldr	r3, [pc, #48]	; (800e7b4 <_fflush_r+0x48>)
 800e782:	429c      	cmp	r4, r3
 800e784:	d109      	bne.n	800e79a <_fflush_r+0x2e>
 800e786:	686c      	ldr	r4, [r5, #4]
 800e788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e78c:	b17b      	cbz	r3, 800e7ae <_fflush_r+0x42>
 800e78e:	4621      	mov	r1, r4
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e796:	f7ff bf63 	b.w	800e660 <__sflush_r>
 800e79a:	4b07      	ldr	r3, [pc, #28]	; (800e7b8 <_fflush_r+0x4c>)
 800e79c:	429c      	cmp	r4, r3
 800e79e:	d101      	bne.n	800e7a4 <_fflush_r+0x38>
 800e7a0:	68ac      	ldr	r4, [r5, #8]
 800e7a2:	e7f1      	b.n	800e788 <_fflush_r+0x1c>
 800e7a4:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <_fflush_r+0x50>)
 800e7a6:	429c      	cmp	r4, r3
 800e7a8:	bf08      	it	eq
 800e7aa:	68ec      	ldreq	r4, [r5, #12]
 800e7ac:	e7ec      	b.n	800e788 <_fflush_r+0x1c>
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	bd38      	pop	{r3, r4, r5, pc}
 800e7b2:	bf00      	nop
 800e7b4:	080767d0 	.word	0x080767d0
 800e7b8:	080767f0 	.word	0x080767f0
 800e7bc:	080767b0 	.word	0x080767b0

0800e7c0 <std>:
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	b510      	push	{r4, lr}
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e7ca:	6083      	str	r3, [r0, #8]
 800e7cc:	8181      	strh	r1, [r0, #12]
 800e7ce:	6643      	str	r3, [r0, #100]	; 0x64
 800e7d0:	81c2      	strh	r2, [r0, #14]
 800e7d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7d6:	6183      	str	r3, [r0, #24]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	2208      	movs	r2, #8
 800e7dc:	305c      	adds	r0, #92	; 0x5c
 800e7de:	f7fd fa8f 	bl	800bd00 <memset>
 800e7e2:	4b05      	ldr	r3, [pc, #20]	; (800e7f8 <std+0x38>)
 800e7e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e7e6:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <std+0x3c>)
 800e7e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7ea:	4b05      	ldr	r3, [pc, #20]	; (800e800 <std+0x40>)
 800e7ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7ee:	4b05      	ldr	r3, [pc, #20]	; (800e804 <std+0x44>)
 800e7f0:	6224      	str	r4, [r4, #32]
 800e7f2:	6323      	str	r3, [r4, #48]	; 0x30
 800e7f4:	bd10      	pop	{r4, pc}
 800e7f6:	bf00      	nop
 800e7f8:	0800ffe1 	.word	0x0800ffe1
 800e7fc:	08010003 	.word	0x08010003
 800e800:	0801003b 	.word	0x0801003b
 800e804:	0801005f 	.word	0x0801005f

0800e808 <_cleanup_r>:
 800e808:	4901      	ldr	r1, [pc, #4]	; (800e810 <_cleanup_r+0x8>)
 800e80a:	f000 b885 	b.w	800e918 <_fwalk_reent>
 800e80e:	bf00      	nop
 800e810:	0800e76d 	.word	0x0800e76d

0800e814 <__sfmoreglue>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	1e4a      	subs	r2, r1, #1
 800e818:	2568      	movs	r5, #104	; 0x68
 800e81a:	4355      	muls	r5, r2
 800e81c:	460e      	mov	r6, r1
 800e81e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e822:	f001 f8ab 	bl	800f97c <_malloc_r>
 800e826:	4604      	mov	r4, r0
 800e828:	b140      	cbz	r0, 800e83c <__sfmoreglue+0x28>
 800e82a:	2100      	movs	r1, #0
 800e82c:	e9c0 1600 	strd	r1, r6, [r0]
 800e830:	300c      	adds	r0, #12
 800e832:	60a0      	str	r0, [r4, #8]
 800e834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e838:	f7fd fa62 	bl	800bd00 <memset>
 800e83c:	4620      	mov	r0, r4
 800e83e:	bd70      	pop	{r4, r5, r6, pc}

0800e840 <__sinit>:
 800e840:	6983      	ldr	r3, [r0, #24]
 800e842:	b510      	push	{r4, lr}
 800e844:	4604      	mov	r4, r0
 800e846:	bb33      	cbnz	r3, 800e896 <__sinit+0x56>
 800e848:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e84c:	6503      	str	r3, [r0, #80]	; 0x50
 800e84e:	4b12      	ldr	r3, [pc, #72]	; (800e898 <__sinit+0x58>)
 800e850:	4a12      	ldr	r2, [pc, #72]	; (800e89c <__sinit+0x5c>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	6282      	str	r2, [r0, #40]	; 0x28
 800e856:	4298      	cmp	r0, r3
 800e858:	bf04      	itt	eq
 800e85a:	2301      	moveq	r3, #1
 800e85c:	6183      	streq	r3, [r0, #24]
 800e85e:	f000 f81f 	bl	800e8a0 <__sfp>
 800e862:	6060      	str	r0, [r4, #4]
 800e864:	4620      	mov	r0, r4
 800e866:	f000 f81b 	bl	800e8a0 <__sfp>
 800e86a:	60a0      	str	r0, [r4, #8]
 800e86c:	4620      	mov	r0, r4
 800e86e:	f000 f817 	bl	800e8a0 <__sfp>
 800e872:	2200      	movs	r2, #0
 800e874:	60e0      	str	r0, [r4, #12]
 800e876:	2104      	movs	r1, #4
 800e878:	6860      	ldr	r0, [r4, #4]
 800e87a:	f7ff ffa1 	bl	800e7c0 <std>
 800e87e:	2201      	movs	r2, #1
 800e880:	2109      	movs	r1, #9
 800e882:	68a0      	ldr	r0, [r4, #8]
 800e884:	f7ff ff9c 	bl	800e7c0 <std>
 800e888:	2202      	movs	r2, #2
 800e88a:	2112      	movs	r1, #18
 800e88c:	68e0      	ldr	r0, [r4, #12]
 800e88e:	f7ff ff97 	bl	800e7c0 <std>
 800e892:	2301      	movs	r3, #1
 800e894:	61a3      	str	r3, [r4, #24]
 800e896:	bd10      	pop	{r4, pc}
 800e898:	0807670c 	.word	0x0807670c
 800e89c:	0800e809 	.word	0x0800e809

0800e8a0 <__sfp>:
 800e8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a2:	4b1b      	ldr	r3, [pc, #108]	; (800e910 <__sfp+0x70>)
 800e8a4:	681e      	ldr	r6, [r3, #0]
 800e8a6:	69b3      	ldr	r3, [r6, #24]
 800e8a8:	4607      	mov	r7, r0
 800e8aa:	b913      	cbnz	r3, 800e8b2 <__sfp+0x12>
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f7ff ffc7 	bl	800e840 <__sinit>
 800e8b2:	3648      	adds	r6, #72	; 0x48
 800e8b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	d503      	bpl.n	800e8c4 <__sfp+0x24>
 800e8bc:	6833      	ldr	r3, [r6, #0]
 800e8be:	b133      	cbz	r3, 800e8ce <__sfp+0x2e>
 800e8c0:	6836      	ldr	r6, [r6, #0]
 800e8c2:	e7f7      	b.n	800e8b4 <__sfp+0x14>
 800e8c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8c8:	b16d      	cbz	r5, 800e8e6 <__sfp+0x46>
 800e8ca:	3468      	adds	r4, #104	; 0x68
 800e8cc:	e7f4      	b.n	800e8b8 <__sfp+0x18>
 800e8ce:	2104      	movs	r1, #4
 800e8d0:	4638      	mov	r0, r7
 800e8d2:	f7ff ff9f 	bl	800e814 <__sfmoreglue>
 800e8d6:	6030      	str	r0, [r6, #0]
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	d1f1      	bne.n	800e8c0 <__sfp+0x20>
 800e8dc:	230c      	movs	r3, #12
 800e8de:	603b      	str	r3, [r7, #0]
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8e6:	4b0b      	ldr	r3, [pc, #44]	; (800e914 <__sfp+0x74>)
 800e8e8:	6665      	str	r5, [r4, #100]	; 0x64
 800e8ea:	e9c4 5500 	strd	r5, r5, [r4]
 800e8ee:	60a5      	str	r5, [r4, #8]
 800e8f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e8f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e8f8:	2208      	movs	r2, #8
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e900:	f7fd f9fe 	bl	800bd00 <memset>
 800e904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e90c:	e7e9      	b.n	800e8e2 <__sfp+0x42>
 800e90e:	bf00      	nop
 800e910:	0807670c 	.word	0x0807670c
 800e914:	ffff0001 	.word	0xffff0001

0800e918 <_fwalk_reent>:
 800e918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e91c:	4680      	mov	r8, r0
 800e91e:	4689      	mov	r9, r1
 800e920:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e924:	2600      	movs	r6, #0
 800e926:	b914      	cbnz	r4, 800e92e <_fwalk_reent+0x16>
 800e928:	4630      	mov	r0, r6
 800e92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e92e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e932:	3f01      	subs	r7, #1
 800e934:	d501      	bpl.n	800e93a <_fwalk_reent+0x22>
 800e936:	6824      	ldr	r4, [r4, #0]
 800e938:	e7f5      	b.n	800e926 <_fwalk_reent+0xe>
 800e93a:	89ab      	ldrh	r3, [r5, #12]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d907      	bls.n	800e950 <_fwalk_reent+0x38>
 800e940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e944:	3301      	adds	r3, #1
 800e946:	d003      	beq.n	800e950 <_fwalk_reent+0x38>
 800e948:	4629      	mov	r1, r5
 800e94a:	4640      	mov	r0, r8
 800e94c:	47c8      	blx	r9
 800e94e:	4306      	orrs	r6, r0
 800e950:	3568      	adds	r5, #104	; 0x68
 800e952:	e7ee      	b.n	800e932 <_fwalk_reent+0x1a>

0800e954 <rshift>:
 800e954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e956:	6906      	ldr	r6, [r0, #16]
 800e958:	114b      	asrs	r3, r1, #5
 800e95a:	429e      	cmp	r6, r3
 800e95c:	f100 0414 	add.w	r4, r0, #20
 800e960:	dd30      	ble.n	800e9c4 <rshift+0x70>
 800e962:	f011 011f 	ands.w	r1, r1, #31
 800e966:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e96a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e96e:	d108      	bne.n	800e982 <rshift+0x2e>
 800e970:	4621      	mov	r1, r4
 800e972:	42b2      	cmp	r2, r6
 800e974:	460b      	mov	r3, r1
 800e976:	d211      	bcs.n	800e99c <rshift+0x48>
 800e978:	f852 3b04 	ldr.w	r3, [r2], #4
 800e97c:	f841 3b04 	str.w	r3, [r1], #4
 800e980:	e7f7      	b.n	800e972 <rshift+0x1e>
 800e982:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e986:	f1c1 0c20 	rsb	ip, r1, #32
 800e98a:	40cd      	lsrs	r5, r1
 800e98c:	3204      	adds	r2, #4
 800e98e:	4623      	mov	r3, r4
 800e990:	42b2      	cmp	r2, r6
 800e992:	4617      	mov	r7, r2
 800e994:	d30c      	bcc.n	800e9b0 <rshift+0x5c>
 800e996:	601d      	str	r5, [r3, #0]
 800e998:	b105      	cbz	r5, 800e99c <rshift+0x48>
 800e99a:	3304      	adds	r3, #4
 800e99c:	1b1a      	subs	r2, r3, r4
 800e99e:	42a3      	cmp	r3, r4
 800e9a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e9a4:	bf08      	it	eq
 800e9a6:	2300      	moveq	r3, #0
 800e9a8:	6102      	str	r2, [r0, #16]
 800e9aa:	bf08      	it	eq
 800e9ac:	6143      	streq	r3, [r0, #20]
 800e9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b0:	683f      	ldr	r7, [r7, #0]
 800e9b2:	fa07 f70c 	lsl.w	r7, r7, ip
 800e9b6:	433d      	orrs	r5, r7
 800e9b8:	f843 5b04 	str.w	r5, [r3], #4
 800e9bc:	f852 5b04 	ldr.w	r5, [r2], #4
 800e9c0:	40cd      	lsrs	r5, r1
 800e9c2:	e7e5      	b.n	800e990 <rshift+0x3c>
 800e9c4:	4623      	mov	r3, r4
 800e9c6:	e7e9      	b.n	800e99c <rshift+0x48>

0800e9c8 <__hexdig_fun>:
 800e9c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e9cc:	2b09      	cmp	r3, #9
 800e9ce:	d802      	bhi.n	800e9d6 <__hexdig_fun+0xe>
 800e9d0:	3820      	subs	r0, #32
 800e9d2:	b2c0      	uxtb	r0, r0
 800e9d4:	4770      	bx	lr
 800e9d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e9da:	2b05      	cmp	r3, #5
 800e9dc:	d801      	bhi.n	800e9e2 <__hexdig_fun+0x1a>
 800e9de:	3847      	subs	r0, #71	; 0x47
 800e9e0:	e7f7      	b.n	800e9d2 <__hexdig_fun+0xa>
 800e9e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e9e6:	2b05      	cmp	r3, #5
 800e9e8:	d801      	bhi.n	800e9ee <__hexdig_fun+0x26>
 800e9ea:	3827      	subs	r0, #39	; 0x27
 800e9ec:	e7f1      	b.n	800e9d2 <__hexdig_fun+0xa>
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	4770      	bx	lr

0800e9f2 <__gethex>:
 800e9f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f6:	b08b      	sub	sp, #44	; 0x2c
 800e9f8:	468a      	mov	sl, r1
 800e9fa:	9002      	str	r0, [sp, #8]
 800e9fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e9fe:	9306      	str	r3, [sp, #24]
 800ea00:	4690      	mov	r8, r2
 800ea02:	f000 fad0 	bl	800efa6 <__localeconv_l>
 800ea06:	6803      	ldr	r3, [r0, #0]
 800ea08:	9303      	str	r3, [sp, #12]
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7f5 f89d 	bl	8003b4a <strlen>
 800ea10:	9b03      	ldr	r3, [sp, #12]
 800ea12:	9001      	str	r0, [sp, #4]
 800ea14:	4403      	add	r3, r0
 800ea16:	f04f 0b00 	mov.w	fp, #0
 800ea1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ea1e:	9307      	str	r3, [sp, #28]
 800ea20:	f8da 3000 	ldr.w	r3, [sl]
 800ea24:	3302      	adds	r3, #2
 800ea26:	461f      	mov	r7, r3
 800ea28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea2c:	2830      	cmp	r0, #48	; 0x30
 800ea2e:	d06c      	beq.n	800eb0a <__gethex+0x118>
 800ea30:	f7ff ffca 	bl	800e9c8 <__hexdig_fun>
 800ea34:	4604      	mov	r4, r0
 800ea36:	2800      	cmp	r0, #0
 800ea38:	d16a      	bne.n	800eb10 <__gethex+0x11e>
 800ea3a:	9a01      	ldr	r2, [sp, #4]
 800ea3c:	9903      	ldr	r1, [sp, #12]
 800ea3e:	4638      	mov	r0, r7
 800ea40:	f001 fb11 	bl	8010066 <strncmp>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d166      	bne.n	800eb16 <__gethex+0x124>
 800ea48:	9b01      	ldr	r3, [sp, #4]
 800ea4a:	5cf8      	ldrb	r0, [r7, r3]
 800ea4c:	18fe      	adds	r6, r7, r3
 800ea4e:	f7ff ffbb 	bl	800e9c8 <__hexdig_fun>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d062      	beq.n	800eb1c <__gethex+0x12a>
 800ea56:	4633      	mov	r3, r6
 800ea58:	7818      	ldrb	r0, [r3, #0]
 800ea5a:	2830      	cmp	r0, #48	; 0x30
 800ea5c:	461f      	mov	r7, r3
 800ea5e:	f103 0301 	add.w	r3, r3, #1
 800ea62:	d0f9      	beq.n	800ea58 <__gethex+0x66>
 800ea64:	f7ff ffb0 	bl	800e9c8 <__hexdig_fun>
 800ea68:	fab0 f580 	clz	r5, r0
 800ea6c:	096d      	lsrs	r5, r5, #5
 800ea6e:	4634      	mov	r4, r6
 800ea70:	f04f 0b01 	mov.w	fp, #1
 800ea74:	463a      	mov	r2, r7
 800ea76:	4616      	mov	r6, r2
 800ea78:	3201      	adds	r2, #1
 800ea7a:	7830      	ldrb	r0, [r6, #0]
 800ea7c:	f7ff ffa4 	bl	800e9c8 <__hexdig_fun>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d1f8      	bne.n	800ea76 <__gethex+0x84>
 800ea84:	9a01      	ldr	r2, [sp, #4]
 800ea86:	9903      	ldr	r1, [sp, #12]
 800ea88:	4630      	mov	r0, r6
 800ea8a:	f001 faec 	bl	8010066 <strncmp>
 800ea8e:	b950      	cbnz	r0, 800eaa6 <__gethex+0xb4>
 800ea90:	b954      	cbnz	r4, 800eaa8 <__gethex+0xb6>
 800ea92:	9b01      	ldr	r3, [sp, #4]
 800ea94:	18f4      	adds	r4, r6, r3
 800ea96:	4622      	mov	r2, r4
 800ea98:	4616      	mov	r6, r2
 800ea9a:	3201      	adds	r2, #1
 800ea9c:	7830      	ldrb	r0, [r6, #0]
 800ea9e:	f7ff ff93 	bl	800e9c8 <__hexdig_fun>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	d1f8      	bne.n	800ea98 <__gethex+0xa6>
 800eaa6:	b10c      	cbz	r4, 800eaac <__gethex+0xba>
 800eaa8:	1ba4      	subs	r4, r4, r6
 800eaaa:	00a4      	lsls	r4, r4, #2
 800eaac:	7833      	ldrb	r3, [r6, #0]
 800eaae:	2b50      	cmp	r3, #80	; 0x50
 800eab0:	d001      	beq.n	800eab6 <__gethex+0xc4>
 800eab2:	2b70      	cmp	r3, #112	; 0x70
 800eab4:	d140      	bne.n	800eb38 <__gethex+0x146>
 800eab6:	7873      	ldrb	r3, [r6, #1]
 800eab8:	2b2b      	cmp	r3, #43	; 0x2b
 800eaba:	d031      	beq.n	800eb20 <__gethex+0x12e>
 800eabc:	2b2d      	cmp	r3, #45	; 0x2d
 800eabe:	d033      	beq.n	800eb28 <__gethex+0x136>
 800eac0:	1c71      	adds	r1, r6, #1
 800eac2:	f04f 0900 	mov.w	r9, #0
 800eac6:	7808      	ldrb	r0, [r1, #0]
 800eac8:	f7ff ff7e 	bl	800e9c8 <__hexdig_fun>
 800eacc:	1e43      	subs	r3, r0, #1
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	2b18      	cmp	r3, #24
 800ead2:	d831      	bhi.n	800eb38 <__gethex+0x146>
 800ead4:	f1a0 0210 	sub.w	r2, r0, #16
 800ead8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eadc:	f7ff ff74 	bl	800e9c8 <__hexdig_fun>
 800eae0:	1e43      	subs	r3, r0, #1
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b18      	cmp	r3, #24
 800eae6:	d922      	bls.n	800eb2e <__gethex+0x13c>
 800eae8:	f1b9 0f00 	cmp.w	r9, #0
 800eaec:	d000      	beq.n	800eaf0 <__gethex+0xfe>
 800eaee:	4252      	negs	r2, r2
 800eaf0:	4414      	add	r4, r2
 800eaf2:	f8ca 1000 	str.w	r1, [sl]
 800eaf6:	b30d      	cbz	r5, 800eb3c <__gethex+0x14a>
 800eaf8:	f1bb 0f00 	cmp.w	fp, #0
 800eafc:	bf0c      	ite	eq
 800eafe:	2706      	moveq	r7, #6
 800eb00:	2700      	movne	r7, #0
 800eb02:	4638      	mov	r0, r7
 800eb04:	b00b      	add	sp, #44	; 0x2c
 800eb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0a:	f10b 0b01 	add.w	fp, fp, #1
 800eb0e:	e78a      	b.n	800ea26 <__gethex+0x34>
 800eb10:	2500      	movs	r5, #0
 800eb12:	462c      	mov	r4, r5
 800eb14:	e7ae      	b.n	800ea74 <__gethex+0x82>
 800eb16:	463e      	mov	r6, r7
 800eb18:	2501      	movs	r5, #1
 800eb1a:	e7c7      	b.n	800eaac <__gethex+0xba>
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	e7fb      	b.n	800eb18 <__gethex+0x126>
 800eb20:	f04f 0900 	mov.w	r9, #0
 800eb24:	1cb1      	adds	r1, r6, #2
 800eb26:	e7ce      	b.n	800eac6 <__gethex+0xd4>
 800eb28:	f04f 0901 	mov.w	r9, #1
 800eb2c:	e7fa      	b.n	800eb24 <__gethex+0x132>
 800eb2e:	230a      	movs	r3, #10
 800eb30:	fb03 0202 	mla	r2, r3, r2, r0
 800eb34:	3a10      	subs	r2, #16
 800eb36:	e7cf      	b.n	800ead8 <__gethex+0xe6>
 800eb38:	4631      	mov	r1, r6
 800eb3a:	e7da      	b.n	800eaf2 <__gethex+0x100>
 800eb3c:	1bf3      	subs	r3, r6, r7
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	4629      	mov	r1, r5
 800eb42:	2b07      	cmp	r3, #7
 800eb44:	dc49      	bgt.n	800ebda <__gethex+0x1e8>
 800eb46:	9802      	ldr	r0, [sp, #8]
 800eb48:	f000 fabc 	bl	800f0c4 <_Balloc>
 800eb4c:	9b01      	ldr	r3, [sp, #4]
 800eb4e:	f100 0914 	add.w	r9, r0, #20
 800eb52:	f04f 0b00 	mov.w	fp, #0
 800eb56:	f1c3 0301 	rsb	r3, r3, #1
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	f8cd 9010 	str.w	r9, [sp, #16]
 800eb60:	46da      	mov	sl, fp
 800eb62:	9308      	str	r3, [sp, #32]
 800eb64:	42b7      	cmp	r7, r6
 800eb66:	d33b      	bcc.n	800ebe0 <__gethex+0x1ee>
 800eb68:	9804      	ldr	r0, [sp, #16]
 800eb6a:	f840 ab04 	str.w	sl, [r0], #4
 800eb6e:	eba0 0009 	sub.w	r0, r0, r9
 800eb72:	1080      	asrs	r0, r0, #2
 800eb74:	6128      	str	r0, [r5, #16]
 800eb76:	0147      	lsls	r7, r0, #5
 800eb78:	4650      	mov	r0, sl
 800eb7a:	f000 fb67 	bl	800f24c <__hi0bits>
 800eb7e:	f8d8 6000 	ldr.w	r6, [r8]
 800eb82:	1a3f      	subs	r7, r7, r0
 800eb84:	42b7      	cmp	r7, r6
 800eb86:	dd64      	ble.n	800ec52 <__gethex+0x260>
 800eb88:	1bbf      	subs	r7, r7, r6
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f000 fe77 	bl	800f880 <__any_on>
 800eb92:	4682      	mov	sl, r0
 800eb94:	b178      	cbz	r0, 800ebb6 <__gethex+0x1c4>
 800eb96:	1e7b      	subs	r3, r7, #1
 800eb98:	1159      	asrs	r1, r3, #5
 800eb9a:	f003 021f 	and.w	r2, r3, #31
 800eb9e:	f04f 0a01 	mov.w	sl, #1
 800eba2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eba6:	fa0a f202 	lsl.w	r2, sl, r2
 800ebaa:	420a      	tst	r2, r1
 800ebac:	d003      	beq.n	800ebb6 <__gethex+0x1c4>
 800ebae:	4553      	cmp	r3, sl
 800ebb0:	dc46      	bgt.n	800ec40 <__gethex+0x24e>
 800ebb2:	f04f 0a02 	mov.w	sl, #2
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	4628      	mov	r0, r5
 800ebba:	f7ff fecb 	bl	800e954 <rshift>
 800ebbe:	443c      	add	r4, r7
 800ebc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebc4:	42a3      	cmp	r3, r4
 800ebc6:	da52      	bge.n	800ec6e <__gethex+0x27c>
 800ebc8:	4629      	mov	r1, r5
 800ebca:	9802      	ldr	r0, [sp, #8]
 800ebcc:	f000 faae 	bl	800f12c <_Bfree>
 800ebd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	6013      	str	r3, [r2, #0]
 800ebd6:	27a3      	movs	r7, #163	; 0xa3
 800ebd8:	e793      	b.n	800eb02 <__gethex+0x110>
 800ebda:	3101      	adds	r1, #1
 800ebdc:	105b      	asrs	r3, r3, #1
 800ebde:	e7b0      	b.n	800eb42 <__gethex+0x150>
 800ebe0:	1e73      	subs	r3, r6, #1
 800ebe2:	9305      	str	r3, [sp, #20]
 800ebe4:	9a07      	ldr	r2, [sp, #28]
 800ebe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d018      	beq.n	800ec20 <__gethex+0x22e>
 800ebee:	f1bb 0f20 	cmp.w	fp, #32
 800ebf2:	d107      	bne.n	800ec04 <__gethex+0x212>
 800ebf4:	9b04      	ldr	r3, [sp, #16]
 800ebf6:	f8c3 a000 	str.w	sl, [r3]
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	f04f 0a00 	mov.w	sl, #0
 800ec00:	9304      	str	r3, [sp, #16]
 800ec02:	46d3      	mov	fp, sl
 800ec04:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ec08:	f7ff fede 	bl	800e9c8 <__hexdig_fun>
 800ec0c:	f000 000f 	and.w	r0, r0, #15
 800ec10:	fa00 f00b 	lsl.w	r0, r0, fp
 800ec14:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec18:	f10b 0b04 	add.w	fp, fp, #4
 800ec1c:	9b05      	ldr	r3, [sp, #20]
 800ec1e:	e00d      	b.n	800ec3c <__gethex+0x24a>
 800ec20:	9b05      	ldr	r3, [sp, #20]
 800ec22:	9a08      	ldr	r2, [sp, #32]
 800ec24:	4413      	add	r3, r2
 800ec26:	42bb      	cmp	r3, r7
 800ec28:	d3e1      	bcc.n	800ebee <__gethex+0x1fc>
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	9a01      	ldr	r2, [sp, #4]
 800ec2e:	9903      	ldr	r1, [sp, #12]
 800ec30:	9309      	str	r3, [sp, #36]	; 0x24
 800ec32:	f001 fa18 	bl	8010066 <strncmp>
 800ec36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d1d8      	bne.n	800ebee <__gethex+0x1fc>
 800ec3c:	461e      	mov	r6, r3
 800ec3e:	e791      	b.n	800eb64 <__gethex+0x172>
 800ec40:	1eb9      	subs	r1, r7, #2
 800ec42:	4628      	mov	r0, r5
 800ec44:	f000 fe1c 	bl	800f880 <__any_on>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	d0b2      	beq.n	800ebb2 <__gethex+0x1c0>
 800ec4c:	f04f 0a03 	mov.w	sl, #3
 800ec50:	e7b1      	b.n	800ebb6 <__gethex+0x1c4>
 800ec52:	da09      	bge.n	800ec68 <__gethex+0x276>
 800ec54:	1bf7      	subs	r7, r6, r7
 800ec56:	4629      	mov	r1, r5
 800ec58:	463a      	mov	r2, r7
 800ec5a:	9802      	ldr	r0, [sp, #8]
 800ec5c:	f000 fc32 	bl	800f4c4 <__lshift>
 800ec60:	1be4      	subs	r4, r4, r7
 800ec62:	4605      	mov	r5, r0
 800ec64:	f100 0914 	add.w	r9, r0, #20
 800ec68:	f04f 0a00 	mov.w	sl, #0
 800ec6c:	e7a8      	b.n	800ebc0 <__gethex+0x1ce>
 800ec6e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ec72:	42a0      	cmp	r0, r4
 800ec74:	dd6a      	ble.n	800ed4c <__gethex+0x35a>
 800ec76:	1b04      	subs	r4, r0, r4
 800ec78:	42a6      	cmp	r6, r4
 800ec7a:	dc2e      	bgt.n	800ecda <__gethex+0x2e8>
 800ec7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d022      	beq.n	800ecca <__gethex+0x2d8>
 800ec84:	2b03      	cmp	r3, #3
 800ec86:	d024      	beq.n	800ecd2 <__gethex+0x2e0>
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d115      	bne.n	800ecb8 <__gethex+0x2c6>
 800ec8c:	42a6      	cmp	r6, r4
 800ec8e:	d113      	bne.n	800ecb8 <__gethex+0x2c6>
 800ec90:	2e01      	cmp	r6, #1
 800ec92:	dc0b      	bgt.n	800ecac <__gethex+0x2ba>
 800ec94:	9a06      	ldr	r2, [sp, #24]
 800ec96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec9a:	6013      	str	r3, [r2, #0]
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	612b      	str	r3, [r5, #16]
 800eca0:	f8c9 3000 	str.w	r3, [r9]
 800eca4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eca6:	2762      	movs	r7, #98	; 0x62
 800eca8:	601d      	str	r5, [r3, #0]
 800ecaa:	e72a      	b.n	800eb02 <__gethex+0x110>
 800ecac:	1e71      	subs	r1, r6, #1
 800ecae:	4628      	mov	r0, r5
 800ecb0:	f000 fde6 	bl	800f880 <__any_on>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d1ed      	bne.n	800ec94 <__gethex+0x2a2>
 800ecb8:	4629      	mov	r1, r5
 800ecba:	9802      	ldr	r0, [sp, #8]
 800ecbc:	f000 fa36 	bl	800f12c <_Bfree>
 800ecc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	6013      	str	r3, [r2, #0]
 800ecc6:	2750      	movs	r7, #80	; 0x50
 800ecc8:	e71b      	b.n	800eb02 <__gethex+0x110>
 800ecca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d0e1      	beq.n	800ec94 <__gethex+0x2a2>
 800ecd0:	e7f2      	b.n	800ecb8 <__gethex+0x2c6>
 800ecd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1dd      	bne.n	800ec94 <__gethex+0x2a2>
 800ecd8:	e7ee      	b.n	800ecb8 <__gethex+0x2c6>
 800ecda:	1e67      	subs	r7, r4, #1
 800ecdc:	f1ba 0f00 	cmp.w	sl, #0
 800ece0:	d131      	bne.n	800ed46 <__gethex+0x354>
 800ece2:	b127      	cbz	r7, 800ecee <__gethex+0x2fc>
 800ece4:	4639      	mov	r1, r7
 800ece6:	4628      	mov	r0, r5
 800ece8:	f000 fdca 	bl	800f880 <__any_on>
 800ecec:	4682      	mov	sl, r0
 800ecee:	117a      	asrs	r2, r7, #5
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	f007 071f 	and.w	r7, r7, #31
 800ecf6:	fa03 f707 	lsl.w	r7, r3, r7
 800ecfa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ecfe:	4621      	mov	r1, r4
 800ed00:	421f      	tst	r7, r3
 800ed02:	4628      	mov	r0, r5
 800ed04:	bf18      	it	ne
 800ed06:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed0a:	1b36      	subs	r6, r6, r4
 800ed0c:	f7ff fe22 	bl	800e954 <rshift>
 800ed10:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ed14:	2702      	movs	r7, #2
 800ed16:	f1ba 0f00 	cmp.w	sl, #0
 800ed1a:	d048      	beq.n	800edae <__gethex+0x3bc>
 800ed1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d015      	beq.n	800ed50 <__gethex+0x35e>
 800ed24:	2b03      	cmp	r3, #3
 800ed26:	d017      	beq.n	800ed58 <__gethex+0x366>
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d109      	bne.n	800ed40 <__gethex+0x34e>
 800ed2c:	f01a 0f02 	tst.w	sl, #2
 800ed30:	d006      	beq.n	800ed40 <__gethex+0x34e>
 800ed32:	f8d9 3000 	ldr.w	r3, [r9]
 800ed36:	ea4a 0a03 	orr.w	sl, sl, r3
 800ed3a:	f01a 0f01 	tst.w	sl, #1
 800ed3e:	d10e      	bne.n	800ed5e <__gethex+0x36c>
 800ed40:	f047 0710 	orr.w	r7, r7, #16
 800ed44:	e033      	b.n	800edae <__gethex+0x3bc>
 800ed46:	f04f 0a01 	mov.w	sl, #1
 800ed4a:	e7d0      	b.n	800ecee <__gethex+0x2fc>
 800ed4c:	2701      	movs	r7, #1
 800ed4e:	e7e2      	b.n	800ed16 <__gethex+0x324>
 800ed50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed52:	f1c3 0301 	rsb	r3, r3, #1
 800ed56:	9315      	str	r3, [sp, #84]	; 0x54
 800ed58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d0f0      	beq.n	800ed40 <__gethex+0x34e>
 800ed5e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ed62:	f105 0314 	add.w	r3, r5, #20
 800ed66:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ed6a:	eb03 010a 	add.w	r1, r3, sl
 800ed6e:	f04f 0c00 	mov.w	ip, #0
 800ed72:	4618      	mov	r0, r3
 800ed74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed78:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ed7c:	d01c      	beq.n	800edb8 <__gethex+0x3c6>
 800ed7e:	3201      	adds	r2, #1
 800ed80:	6002      	str	r2, [r0, #0]
 800ed82:	2f02      	cmp	r7, #2
 800ed84:	f105 0314 	add.w	r3, r5, #20
 800ed88:	d138      	bne.n	800edfc <__gethex+0x40a>
 800ed8a:	f8d8 2000 	ldr.w	r2, [r8]
 800ed8e:	3a01      	subs	r2, #1
 800ed90:	42b2      	cmp	r2, r6
 800ed92:	d10a      	bne.n	800edaa <__gethex+0x3b8>
 800ed94:	1171      	asrs	r1, r6, #5
 800ed96:	2201      	movs	r2, #1
 800ed98:	f006 061f 	and.w	r6, r6, #31
 800ed9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eda0:	fa02 f606 	lsl.w	r6, r2, r6
 800eda4:	421e      	tst	r6, r3
 800eda6:	bf18      	it	ne
 800eda8:	4617      	movne	r7, r2
 800edaa:	f047 0720 	orr.w	r7, r7, #32
 800edae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800edb0:	601d      	str	r5, [r3, #0]
 800edb2:	9b06      	ldr	r3, [sp, #24]
 800edb4:	601c      	str	r4, [r3, #0]
 800edb6:	e6a4      	b.n	800eb02 <__gethex+0x110>
 800edb8:	4299      	cmp	r1, r3
 800edba:	f843 cc04 	str.w	ip, [r3, #-4]
 800edbe:	d8d8      	bhi.n	800ed72 <__gethex+0x380>
 800edc0:	68ab      	ldr	r3, [r5, #8]
 800edc2:	4599      	cmp	r9, r3
 800edc4:	db12      	blt.n	800edec <__gethex+0x3fa>
 800edc6:	6869      	ldr	r1, [r5, #4]
 800edc8:	9802      	ldr	r0, [sp, #8]
 800edca:	3101      	adds	r1, #1
 800edcc:	f000 f97a 	bl	800f0c4 <_Balloc>
 800edd0:	692a      	ldr	r2, [r5, #16]
 800edd2:	3202      	adds	r2, #2
 800edd4:	f105 010c 	add.w	r1, r5, #12
 800edd8:	4683      	mov	fp, r0
 800edda:	0092      	lsls	r2, r2, #2
 800eddc:	300c      	adds	r0, #12
 800edde:	f7fc ff84 	bl	800bcea <memcpy>
 800ede2:	4629      	mov	r1, r5
 800ede4:	9802      	ldr	r0, [sp, #8]
 800ede6:	f000 f9a1 	bl	800f12c <_Bfree>
 800edea:	465d      	mov	r5, fp
 800edec:	692b      	ldr	r3, [r5, #16]
 800edee:	1c5a      	adds	r2, r3, #1
 800edf0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800edf4:	612a      	str	r2, [r5, #16]
 800edf6:	2201      	movs	r2, #1
 800edf8:	615a      	str	r2, [r3, #20]
 800edfa:	e7c2      	b.n	800ed82 <__gethex+0x390>
 800edfc:	692a      	ldr	r2, [r5, #16]
 800edfe:	454a      	cmp	r2, r9
 800ee00:	dd0b      	ble.n	800ee1a <__gethex+0x428>
 800ee02:	2101      	movs	r1, #1
 800ee04:	4628      	mov	r0, r5
 800ee06:	f7ff fda5 	bl	800e954 <rshift>
 800ee0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee0e:	3401      	adds	r4, #1
 800ee10:	42a3      	cmp	r3, r4
 800ee12:	f6ff aed9 	blt.w	800ebc8 <__gethex+0x1d6>
 800ee16:	2701      	movs	r7, #1
 800ee18:	e7c7      	b.n	800edaa <__gethex+0x3b8>
 800ee1a:	f016 061f 	ands.w	r6, r6, #31
 800ee1e:	d0fa      	beq.n	800ee16 <__gethex+0x424>
 800ee20:	449a      	add	sl, r3
 800ee22:	f1c6 0620 	rsb	r6, r6, #32
 800ee26:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ee2a:	f000 fa0f 	bl	800f24c <__hi0bits>
 800ee2e:	42b0      	cmp	r0, r6
 800ee30:	dbe7      	blt.n	800ee02 <__gethex+0x410>
 800ee32:	e7f0      	b.n	800ee16 <__gethex+0x424>

0800ee34 <L_shift>:
 800ee34:	f1c2 0208 	rsb	r2, r2, #8
 800ee38:	0092      	lsls	r2, r2, #2
 800ee3a:	b570      	push	{r4, r5, r6, lr}
 800ee3c:	f1c2 0620 	rsb	r6, r2, #32
 800ee40:	6843      	ldr	r3, [r0, #4]
 800ee42:	6804      	ldr	r4, [r0, #0]
 800ee44:	fa03 f506 	lsl.w	r5, r3, r6
 800ee48:	432c      	orrs	r4, r5
 800ee4a:	40d3      	lsrs	r3, r2
 800ee4c:	6004      	str	r4, [r0, #0]
 800ee4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee52:	4288      	cmp	r0, r1
 800ee54:	d3f4      	bcc.n	800ee40 <L_shift+0xc>
 800ee56:	bd70      	pop	{r4, r5, r6, pc}

0800ee58 <__match>:
 800ee58:	b530      	push	{r4, r5, lr}
 800ee5a:	6803      	ldr	r3, [r0, #0]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee62:	b914      	cbnz	r4, 800ee6a <__match+0x12>
 800ee64:	6003      	str	r3, [r0, #0]
 800ee66:	2001      	movs	r0, #1
 800ee68:	bd30      	pop	{r4, r5, pc}
 800ee6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ee72:	2d19      	cmp	r5, #25
 800ee74:	bf98      	it	ls
 800ee76:	3220      	addls	r2, #32
 800ee78:	42a2      	cmp	r2, r4
 800ee7a:	d0f0      	beq.n	800ee5e <__match+0x6>
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	e7f3      	b.n	800ee68 <__match+0x10>

0800ee80 <__hexnan>:
 800ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	680b      	ldr	r3, [r1, #0]
 800ee86:	6801      	ldr	r1, [r0, #0]
 800ee88:	115f      	asrs	r7, r3, #5
 800ee8a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ee8e:	f013 031f 	ands.w	r3, r3, #31
 800ee92:	b087      	sub	sp, #28
 800ee94:	bf18      	it	ne
 800ee96:	3704      	addne	r7, #4
 800ee98:	2500      	movs	r5, #0
 800ee9a:	1f3e      	subs	r6, r7, #4
 800ee9c:	4682      	mov	sl, r0
 800ee9e:	4690      	mov	r8, r2
 800eea0:	9301      	str	r3, [sp, #4]
 800eea2:	f847 5c04 	str.w	r5, [r7, #-4]
 800eea6:	46b1      	mov	r9, r6
 800eea8:	4634      	mov	r4, r6
 800eeaa:	9502      	str	r5, [sp, #8]
 800eeac:	46ab      	mov	fp, r5
 800eeae:	784a      	ldrb	r2, [r1, #1]
 800eeb0:	1c4b      	adds	r3, r1, #1
 800eeb2:	9303      	str	r3, [sp, #12]
 800eeb4:	b342      	cbz	r2, 800ef08 <__hexnan+0x88>
 800eeb6:	4610      	mov	r0, r2
 800eeb8:	9105      	str	r1, [sp, #20]
 800eeba:	9204      	str	r2, [sp, #16]
 800eebc:	f7ff fd84 	bl	800e9c8 <__hexdig_fun>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	d143      	bne.n	800ef4c <__hexnan+0xcc>
 800eec4:	9a04      	ldr	r2, [sp, #16]
 800eec6:	9905      	ldr	r1, [sp, #20]
 800eec8:	2a20      	cmp	r2, #32
 800eeca:	d818      	bhi.n	800eefe <__hexnan+0x7e>
 800eecc:	9b02      	ldr	r3, [sp, #8]
 800eece:	459b      	cmp	fp, r3
 800eed0:	dd13      	ble.n	800eefa <__hexnan+0x7a>
 800eed2:	454c      	cmp	r4, r9
 800eed4:	d206      	bcs.n	800eee4 <__hexnan+0x64>
 800eed6:	2d07      	cmp	r5, #7
 800eed8:	dc04      	bgt.n	800eee4 <__hexnan+0x64>
 800eeda:	462a      	mov	r2, r5
 800eedc:	4649      	mov	r1, r9
 800eede:	4620      	mov	r0, r4
 800eee0:	f7ff ffa8 	bl	800ee34 <L_shift>
 800eee4:	4544      	cmp	r4, r8
 800eee6:	d944      	bls.n	800ef72 <__hexnan+0xf2>
 800eee8:	2300      	movs	r3, #0
 800eeea:	f1a4 0904 	sub.w	r9, r4, #4
 800eeee:	f844 3c04 	str.w	r3, [r4, #-4]
 800eef2:	f8cd b008 	str.w	fp, [sp, #8]
 800eef6:	464c      	mov	r4, r9
 800eef8:	461d      	mov	r5, r3
 800eefa:	9903      	ldr	r1, [sp, #12]
 800eefc:	e7d7      	b.n	800eeae <__hexnan+0x2e>
 800eefe:	2a29      	cmp	r2, #41	; 0x29
 800ef00:	d14a      	bne.n	800ef98 <__hexnan+0x118>
 800ef02:	3102      	adds	r1, #2
 800ef04:	f8ca 1000 	str.w	r1, [sl]
 800ef08:	f1bb 0f00 	cmp.w	fp, #0
 800ef0c:	d044      	beq.n	800ef98 <__hexnan+0x118>
 800ef0e:	454c      	cmp	r4, r9
 800ef10:	d206      	bcs.n	800ef20 <__hexnan+0xa0>
 800ef12:	2d07      	cmp	r5, #7
 800ef14:	dc04      	bgt.n	800ef20 <__hexnan+0xa0>
 800ef16:	462a      	mov	r2, r5
 800ef18:	4649      	mov	r1, r9
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f7ff ff8a 	bl	800ee34 <L_shift>
 800ef20:	4544      	cmp	r4, r8
 800ef22:	d928      	bls.n	800ef76 <__hexnan+0xf6>
 800ef24:	4643      	mov	r3, r8
 800ef26:	f854 2b04 	ldr.w	r2, [r4], #4
 800ef2a:	f843 2b04 	str.w	r2, [r3], #4
 800ef2e:	42a6      	cmp	r6, r4
 800ef30:	d2f9      	bcs.n	800ef26 <__hexnan+0xa6>
 800ef32:	2200      	movs	r2, #0
 800ef34:	f843 2b04 	str.w	r2, [r3], #4
 800ef38:	429e      	cmp	r6, r3
 800ef3a:	d2fb      	bcs.n	800ef34 <__hexnan+0xb4>
 800ef3c:	6833      	ldr	r3, [r6, #0]
 800ef3e:	b91b      	cbnz	r3, 800ef48 <__hexnan+0xc8>
 800ef40:	4546      	cmp	r6, r8
 800ef42:	d127      	bne.n	800ef94 <__hexnan+0x114>
 800ef44:	2301      	movs	r3, #1
 800ef46:	6033      	str	r3, [r6, #0]
 800ef48:	2005      	movs	r0, #5
 800ef4a:	e026      	b.n	800ef9a <__hexnan+0x11a>
 800ef4c:	3501      	adds	r5, #1
 800ef4e:	2d08      	cmp	r5, #8
 800ef50:	f10b 0b01 	add.w	fp, fp, #1
 800ef54:	dd06      	ble.n	800ef64 <__hexnan+0xe4>
 800ef56:	4544      	cmp	r4, r8
 800ef58:	d9cf      	bls.n	800eefa <__hexnan+0x7a>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef60:	2501      	movs	r5, #1
 800ef62:	3c04      	subs	r4, #4
 800ef64:	6822      	ldr	r2, [r4, #0]
 800ef66:	f000 000f 	and.w	r0, r0, #15
 800ef6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef6e:	6020      	str	r0, [r4, #0]
 800ef70:	e7c3      	b.n	800eefa <__hexnan+0x7a>
 800ef72:	2508      	movs	r5, #8
 800ef74:	e7c1      	b.n	800eefa <__hexnan+0x7a>
 800ef76:	9b01      	ldr	r3, [sp, #4]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d0df      	beq.n	800ef3c <__hexnan+0xbc>
 800ef7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef80:	f1c3 0320 	rsb	r3, r3, #32
 800ef84:	fa22 f303 	lsr.w	r3, r2, r3
 800ef88:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ef8c:	401a      	ands	r2, r3
 800ef8e:	f847 2c04 	str.w	r2, [r7, #-4]
 800ef92:	e7d3      	b.n	800ef3c <__hexnan+0xbc>
 800ef94:	3e04      	subs	r6, #4
 800ef96:	e7d1      	b.n	800ef3c <__hexnan+0xbc>
 800ef98:	2004      	movs	r0, #4
 800ef9a:	b007      	add	sp, #28
 800ef9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800efa0 <__locale_ctype_ptr_l>:
 800efa0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800efa4:	4770      	bx	lr

0800efa6 <__localeconv_l>:
 800efa6:	30f0      	adds	r0, #240	; 0xf0
 800efa8:	4770      	bx	lr
	...

0800efac <_localeconv_r>:
 800efac:	4b04      	ldr	r3, [pc, #16]	; (800efc0 <_localeconv_r+0x14>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	6a18      	ldr	r0, [r3, #32]
 800efb2:	4b04      	ldr	r3, [pc, #16]	; (800efc4 <_localeconv_r+0x18>)
 800efb4:	2800      	cmp	r0, #0
 800efb6:	bf08      	it	eq
 800efb8:	4618      	moveq	r0, r3
 800efba:	30f0      	adds	r0, #240	; 0xf0
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	20000478 	.word	0x20000478
 800efc4:	200004dc 	.word	0x200004dc

0800efc8 <__swhatbuf_r>:
 800efc8:	b570      	push	{r4, r5, r6, lr}
 800efca:	460e      	mov	r6, r1
 800efcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd0:	2900      	cmp	r1, #0
 800efd2:	b096      	sub	sp, #88	; 0x58
 800efd4:	4614      	mov	r4, r2
 800efd6:	461d      	mov	r5, r3
 800efd8:	da07      	bge.n	800efea <__swhatbuf_r+0x22>
 800efda:	2300      	movs	r3, #0
 800efdc:	602b      	str	r3, [r5, #0]
 800efde:	89b3      	ldrh	r3, [r6, #12]
 800efe0:	061a      	lsls	r2, r3, #24
 800efe2:	d410      	bmi.n	800f006 <__swhatbuf_r+0x3e>
 800efe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efe8:	e00e      	b.n	800f008 <__swhatbuf_r+0x40>
 800efea:	466a      	mov	r2, sp
 800efec:	f001 f87c 	bl	80100e8 <_fstat_r>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	dbf2      	blt.n	800efda <__swhatbuf_r+0x12>
 800eff4:	9a01      	ldr	r2, [sp, #4]
 800eff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800effa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800effe:	425a      	negs	r2, r3
 800f000:	415a      	adcs	r2, r3
 800f002:	602a      	str	r2, [r5, #0]
 800f004:	e7ee      	b.n	800efe4 <__swhatbuf_r+0x1c>
 800f006:	2340      	movs	r3, #64	; 0x40
 800f008:	2000      	movs	r0, #0
 800f00a:	6023      	str	r3, [r4, #0]
 800f00c:	b016      	add	sp, #88	; 0x58
 800f00e:	bd70      	pop	{r4, r5, r6, pc}

0800f010 <__smakebuf_r>:
 800f010:	898b      	ldrh	r3, [r1, #12]
 800f012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f014:	079d      	lsls	r5, r3, #30
 800f016:	4606      	mov	r6, r0
 800f018:	460c      	mov	r4, r1
 800f01a:	d507      	bpl.n	800f02c <__smakebuf_r+0x1c>
 800f01c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	6123      	str	r3, [r4, #16]
 800f024:	2301      	movs	r3, #1
 800f026:	6163      	str	r3, [r4, #20]
 800f028:	b002      	add	sp, #8
 800f02a:	bd70      	pop	{r4, r5, r6, pc}
 800f02c:	ab01      	add	r3, sp, #4
 800f02e:	466a      	mov	r2, sp
 800f030:	f7ff ffca 	bl	800efc8 <__swhatbuf_r>
 800f034:	9900      	ldr	r1, [sp, #0]
 800f036:	4605      	mov	r5, r0
 800f038:	4630      	mov	r0, r6
 800f03a:	f000 fc9f 	bl	800f97c <_malloc_r>
 800f03e:	b948      	cbnz	r0, 800f054 <__smakebuf_r+0x44>
 800f040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f044:	059a      	lsls	r2, r3, #22
 800f046:	d4ef      	bmi.n	800f028 <__smakebuf_r+0x18>
 800f048:	f023 0303 	bic.w	r3, r3, #3
 800f04c:	f043 0302 	orr.w	r3, r3, #2
 800f050:	81a3      	strh	r3, [r4, #12]
 800f052:	e7e3      	b.n	800f01c <__smakebuf_r+0xc>
 800f054:	4b0d      	ldr	r3, [pc, #52]	; (800f08c <__smakebuf_r+0x7c>)
 800f056:	62b3      	str	r3, [r6, #40]	; 0x28
 800f058:	89a3      	ldrh	r3, [r4, #12]
 800f05a:	6020      	str	r0, [r4, #0]
 800f05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	9b00      	ldr	r3, [sp, #0]
 800f064:	6163      	str	r3, [r4, #20]
 800f066:	9b01      	ldr	r3, [sp, #4]
 800f068:	6120      	str	r0, [r4, #16]
 800f06a:	b15b      	cbz	r3, 800f084 <__smakebuf_r+0x74>
 800f06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f070:	4630      	mov	r0, r6
 800f072:	f001 f84b 	bl	801010c <_isatty_r>
 800f076:	b128      	cbz	r0, 800f084 <__smakebuf_r+0x74>
 800f078:	89a3      	ldrh	r3, [r4, #12]
 800f07a:	f023 0303 	bic.w	r3, r3, #3
 800f07e:	f043 0301 	orr.w	r3, r3, #1
 800f082:	81a3      	strh	r3, [r4, #12]
 800f084:	89a3      	ldrh	r3, [r4, #12]
 800f086:	431d      	orrs	r5, r3
 800f088:	81a5      	strh	r5, [r4, #12]
 800f08a:	e7cd      	b.n	800f028 <__smakebuf_r+0x18>
 800f08c:	0800e809 	.word	0x0800e809

0800f090 <malloc>:
 800f090:	4b02      	ldr	r3, [pc, #8]	; (800f09c <malloc+0xc>)
 800f092:	4601      	mov	r1, r0
 800f094:	6818      	ldr	r0, [r3, #0]
 800f096:	f000 bc71 	b.w	800f97c <_malloc_r>
 800f09a:	bf00      	nop
 800f09c:	20000478 	.word	0x20000478

0800f0a0 <__ascii_mbtowc>:
 800f0a0:	b082      	sub	sp, #8
 800f0a2:	b901      	cbnz	r1, 800f0a6 <__ascii_mbtowc+0x6>
 800f0a4:	a901      	add	r1, sp, #4
 800f0a6:	b142      	cbz	r2, 800f0ba <__ascii_mbtowc+0x1a>
 800f0a8:	b14b      	cbz	r3, 800f0be <__ascii_mbtowc+0x1e>
 800f0aa:	7813      	ldrb	r3, [r2, #0]
 800f0ac:	600b      	str	r3, [r1, #0]
 800f0ae:	7812      	ldrb	r2, [r2, #0]
 800f0b0:	1c10      	adds	r0, r2, #0
 800f0b2:	bf18      	it	ne
 800f0b4:	2001      	movne	r0, #1
 800f0b6:	b002      	add	sp, #8
 800f0b8:	4770      	bx	lr
 800f0ba:	4610      	mov	r0, r2
 800f0bc:	e7fb      	b.n	800f0b6 <__ascii_mbtowc+0x16>
 800f0be:	f06f 0001 	mvn.w	r0, #1
 800f0c2:	e7f8      	b.n	800f0b6 <__ascii_mbtowc+0x16>

0800f0c4 <_Balloc>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	460e      	mov	r6, r1
 800f0cc:	b93d      	cbnz	r5, 800f0de <_Balloc+0x1a>
 800f0ce:	2010      	movs	r0, #16
 800f0d0:	f7ff ffde 	bl	800f090 <malloc>
 800f0d4:	6260      	str	r0, [r4, #36]	; 0x24
 800f0d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f0da:	6005      	str	r5, [r0, #0]
 800f0dc:	60c5      	str	r5, [r0, #12]
 800f0de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f0e0:	68eb      	ldr	r3, [r5, #12]
 800f0e2:	b183      	cbz	r3, 800f106 <_Balloc+0x42>
 800f0e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f0ec:	b9b8      	cbnz	r0, 800f11e <_Balloc+0x5a>
 800f0ee:	2101      	movs	r1, #1
 800f0f0:	fa01 f506 	lsl.w	r5, r1, r6
 800f0f4:	1d6a      	adds	r2, r5, #5
 800f0f6:	0092      	lsls	r2, r2, #2
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f000 fbe2 	bl	800f8c2 <_calloc_r>
 800f0fe:	b160      	cbz	r0, 800f11a <_Balloc+0x56>
 800f100:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f104:	e00e      	b.n	800f124 <_Balloc+0x60>
 800f106:	2221      	movs	r2, #33	; 0x21
 800f108:	2104      	movs	r1, #4
 800f10a:	4620      	mov	r0, r4
 800f10c:	f000 fbd9 	bl	800f8c2 <_calloc_r>
 800f110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f112:	60e8      	str	r0, [r5, #12]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1e4      	bne.n	800f0e4 <_Balloc+0x20>
 800f11a:	2000      	movs	r0, #0
 800f11c:	bd70      	pop	{r4, r5, r6, pc}
 800f11e:	6802      	ldr	r2, [r0, #0]
 800f120:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f124:	2300      	movs	r3, #0
 800f126:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f12a:	e7f7      	b.n	800f11c <_Balloc+0x58>

0800f12c <_Bfree>:
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f130:	4606      	mov	r6, r0
 800f132:	460d      	mov	r5, r1
 800f134:	b93c      	cbnz	r4, 800f146 <_Bfree+0x1a>
 800f136:	2010      	movs	r0, #16
 800f138:	f7ff ffaa 	bl	800f090 <malloc>
 800f13c:	6270      	str	r0, [r6, #36]	; 0x24
 800f13e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f142:	6004      	str	r4, [r0, #0]
 800f144:	60c4      	str	r4, [r0, #12]
 800f146:	b13d      	cbz	r5, 800f158 <_Bfree+0x2c>
 800f148:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f14a:	686a      	ldr	r2, [r5, #4]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f152:	6029      	str	r1, [r5, #0]
 800f154:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f158:	bd70      	pop	{r4, r5, r6, pc}

0800f15a <__multadd>:
 800f15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15e:	690d      	ldr	r5, [r1, #16]
 800f160:	461f      	mov	r7, r3
 800f162:	4606      	mov	r6, r0
 800f164:	460c      	mov	r4, r1
 800f166:	f101 0c14 	add.w	ip, r1, #20
 800f16a:	2300      	movs	r3, #0
 800f16c:	f8dc 0000 	ldr.w	r0, [ip]
 800f170:	b281      	uxth	r1, r0
 800f172:	fb02 7101 	mla	r1, r2, r1, r7
 800f176:	0c0f      	lsrs	r7, r1, #16
 800f178:	0c00      	lsrs	r0, r0, #16
 800f17a:	fb02 7000 	mla	r0, r2, r0, r7
 800f17e:	b289      	uxth	r1, r1
 800f180:	3301      	adds	r3, #1
 800f182:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f186:	429d      	cmp	r5, r3
 800f188:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f18c:	f84c 1b04 	str.w	r1, [ip], #4
 800f190:	dcec      	bgt.n	800f16c <__multadd+0x12>
 800f192:	b1d7      	cbz	r7, 800f1ca <__multadd+0x70>
 800f194:	68a3      	ldr	r3, [r4, #8]
 800f196:	42ab      	cmp	r3, r5
 800f198:	dc12      	bgt.n	800f1c0 <__multadd+0x66>
 800f19a:	6861      	ldr	r1, [r4, #4]
 800f19c:	4630      	mov	r0, r6
 800f19e:	3101      	adds	r1, #1
 800f1a0:	f7ff ff90 	bl	800f0c4 <_Balloc>
 800f1a4:	6922      	ldr	r2, [r4, #16]
 800f1a6:	3202      	adds	r2, #2
 800f1a8:	f104 010c 	add.w	r1, r4, #12
 800f1ac:	4680      	mov	r8, r0
 800f1ae:	0092      	lsls	r2, r2, #2
 800f1b0:	300c      	adds	r0, #12
 800f1b2:	f7fc fd9a 	bl	800bcea <memcpy>
 800f1b6:	4621      	mov	r1, r4
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	f7ff ffb7 	bl	800f12c <_Bfree>
 800f1be:	4644      	mov	r4, r8
 800f1c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f1c4:	3501      	adds	r5, #1
 800f1c6:	615f      	str	r7, [r3, #20]
 800f1c8:	6125      	str	r5, [r4, #16]
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1d0 <__s2b>:
 800f1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d4:	460c      	mov	r4, r1
 800f1d6:	4615      	mov	r5, r2
 800f1d8:	461f      	mov	r7, r3
 800f1da:	2209      	movs	r2, #9
 800f1dc:	3308      	adds	r3, #8
 800f1de:	4606      	mov	r6, r0
 800f1e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	db20      	blt.n	800f22e <__s2b+0x5e>
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	f7ff ff69 	bl	800f0c4 <_Balloc>
 800f1f2:	9b08      	ldr	r3, [sp, #32]
 800f1f4:	6143      	str	r3, [r0, #20]
 800f1f6:	2d09      	cmp	r5, #9
 800f1f8:	f04f 0301 	mov.w	r3, #1
 800f1fc:	6103      	str	r3, [r0, #16]
 800f1fe:	dd19      	ble.n	800f234 <__s2b+0x64>
 800f200:	f104 0809 	add.w	r8, r4, #9
 800f204:	46c1      	mov	r9, r8
 800f206:	442c      	add	r4, r5
 800f208:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f20c:	4601      	mov	r1, r0
 800f20e:	3b30      	subs	r3, #48	; 0x30
 800f210:	220a      	movs	r2, #10
 800f212:	4630      	mov	r0, r6
 800f214:	f7ff ffa1 	bl	800f15a <__multadd>
 800f218:	45a1      	cmp	r9, r4
 800f21a:	d1f5      	bne.n	800f208 <__s2b+0x38>
 800f21c:	eb08 0405 	add.w	r4, r8, r5
 800f220:	3c08      	subs	r4, #8
 800f222:	1b2d      	subs	r5, r5, r4
 800f224:	1963      	adds	r3, r4, r5
 800f226:	42bb      	cmp	r3, r7
 800f228:	db07      	blt.n	800f23a <__s2b+0x6a>
 800f22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f22e:	0052      	lsls	r2, r2, #1
 800f230:	3101      	adds	r1, #1
 800f232:	e7d9      	b.n	800f1e8 <__s2b+0x18>
 800f234:	340a      	adds	r4, #10
 800f236:	2509      	movs	r5, #9
 800f238:	e7f3      	b.n	800f222 <__s2b+0x52>
 800f23a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f23e:	4601      	mov	r1, r0
 800f240:	3b30      	subs	r3, #48	; 0x30
 800f242:	220a      	movs	r2, #10
 800f244:	4630      	mov	r0, r6
 800f246:	f7ff ff88 	bl	800f15a <__multadd>
 800f24a:	e7eb      	b.n	800f224 <__s2b+0x54>

0800f24c <__hi0bits>:
 800f24c:	0c02      	lsrs	r2, r0, #16
 800f24e:	0412      	lsls	r2, r2, #16
 800f250:	4603      	mov	r3, r0
 800f252:	b9b2      	cbnz	r2, 800f282 <__hi0bits+0x36>
 800f254:	0403      	lsls	r3, r0, #16
 800f256:	2010      	movs	r0, #16
 800f258:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f25c:	bf04      	itt	eq
 800f25e:	021b      	lsleq	r3, r3, #8
 800f260:	3008      	addeq	r0, #8
 800f262:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f266:	bf04      	itt	eq
 800f268:	011b      	lsleq	r3, r3, #4
 800f26a:	3004      	addeq	r0, #4
 800f26c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f270:	bf04      	itt	eq
 800f272:	009b      	lsleq	r3, r3, #2
 800f274:	3002      	addeq	r0, #2
 800f276:	2b00      	cmp	r3, #0
 800f278:	db06      	blt.n	800f288 <__hi0bits+0x3c>
 800f27a:	005b      	lsls	r3, r3, #1
 800f27c:	d503      	bpl.n	800f286 <__hi0bits+0x3a>
 800f27e:	3001      	adds	r0, #1
 800f280:	4770      	bx	lr
 800f282:	2000      	movs	r0, #0
 800f284:	e7e8      	b.n	800f258 <__hi0bits+0xc>
 800f286:	2020      	movs	r0, #32
 800f288:	4770      	bx	lr

0800f28a <__lo0bits>:
 800f28a:	6803      	ldr	r3, [r0, #0]
 800f28c:	f013 0207 	ands.w	r2, r3, #7
 800f290:	4601      	mov	r1, r0
 800f292:	d00b      	beq.n	800f2ac <__lo0bits+0x22>
 800f294:	07da      	lsls	r2, r3, #31
 800f296:	d423      	bmi.n	800f2e0 <__lo0bits+0x56>
 800f298:	0798      	lsls	r0, r3, #30
 800f29a:	bf49      	itett	mi
 800f29c:	085b      	lsrmi	r3, r3, #1
 800f29e:	089b      	lsrpl	r3, r3, #2
 800f2a0:	2001      	movmi	r0, #1
 800f2a2:	600b      	strmi	r3, [r1, #0]
 800f2a4:	bf5c      	itt	pl
 800f2a6:	600b      	strpl	r3, [r1, #0]
 800f2a8:	2002      	movpl	r0, #2
 800f2aa:	4770      	bx	lr
 800f2ac:	b298      	uxth	r0, r3
 800f2ae:	b9a8      	cbnz	r0, 800f2dc <__lo0bits+0x52>
 800f2b0:	0c1b      	lsrs	r3, r3, #16
 800f2b2:	2010      	movs	r0, #16
 800f2b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f2b8:	bf04      	itt	eq
 800f2ba:	0a1b      	lsreq	r3, r3, #8
 800f2bc:	3008      	addeq	r0, #8
 800f2be:	071a      	lsls	r2, r3, #28
 800f2c0:	bf04      	itt	eq
 800f2c2:	091b      	lsreq	r3, r3, #4
 800f2c4:	3004      	addeq	r0, #4
 800f2c6:	079a      	lsls	r2, r3, #30
 800f2c8:	bf04      	itt	eq
 800f2ca:	089b      	lsreq	r3, r3, #2
 800f2cc:	3002      	addeq	r0, #2
 800f2ce:	07da      	lsls	r2, r3, #31
 800f2d0:	d402      	bmi.n	800f2d8 <__lo0bits+0x4e>
 800f2d2:	085b      	lsrs	r3, r3, #1
 800f2d4:	d006      	beq.n	800f2e4 <__lo0bits+0x5a>
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	600b      	str	r3, [r1, #0]
 800f2da:	4770      	bx	lr
 800f2dc:	4610      	mov	r0, r2
 800f2de:	e7e9      	b.n	800f2b4 <__lo0bits+0x2a>
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	4770      	bx	lr
 800f2e4:	2020      	movs	r0, #32
 800f2e6:	4770      	bx	lr

0800f2e8 <__i2b>:
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	2101      	movs	r1, #1
 800f2ee:	f7ff fee9 	bl	800f0c4 <_Balloc>
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	6144      	str	r4, [r0, #20]
 800f2f6:	6102      	str	r2, [r0, #16]
 800f2f8:	bd10      	pop	{r4, pc}

0800f2fa <__multiply>:
 800f2fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2fe:	4614      	mov	r4, r2
 800f300:	690a      	ldr	r2, [r1, #16]
 800f302:	6923      	ldr	r3, [r4, #16]
 800f304:	429a      	cmp	r2, r3
 800f306:	bfb8      	it	lt
 800f308:	460b      	movlt	r3, r1
 800f30a:	4688      	mov	r8, r1
 800f30c:	bfbc      	itt	lt
 800f30e:	46a0      	movlt	r8, r4
 800f310:	461c      	movlt	r4, r3
 800f312:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f316:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f31a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f31e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f322:	eb07 0609 	add.w	r6, r7, r9
 800f326:	42b3      	cmp	r3, r6
 800f328:	bfb8      	it	lt
 800f32a:	3101      	addlt	r1, #1
 800f32c:	f7ff feca 	bl	800f0c4 <_Balloc>
 800f330:	f100 0514 	add.w	r5, r0, #20
 800f334:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f338:	462b      	mov	r3, r5
 800f33a:	2200      	movs	r2, #0
 800f33c:	4573      	cmp	r3, lr
 800f33e:	d316      	bcc.n	800f36e <__multiply+0x74>
 800f340:	f104 0214 	add.w	r2, r4, #20
 800f344:	f108 0114 	add.w	r1, r8, #20
 800f348:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f34c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	9b00      	ldr	r3, [sp, #0]
 800f354:	9201      	str	r2, [sp, #4]
 800f356:	4293      	cmp	r3, r2
 800f358:	d80c      	bhi.n	800f374 <__multiply+0x7a>
 800f35a:	2e00      	cmp	r6, #0
 800f35c:	dd03      	ble.n	800f366 <__multiply+0x6c>
 800f35e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f362:	2b00      	cmp	r3, #0
 800f364:	d05d      	beq.n	800f422 <__multiply+0x128>
 800f366:	6106      	str	r6, [r0, #16]
 800f368:	b003      	add	sp, #12
 800f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36e:	f843 2b04 	str.w	r2, [r3], #4
 800f372:	e7e3      	b.n	800f33c <__multiply+0x42>
 800f374:	f8b2 b000 	ldrh.w	fp, [r2]
 800f378:	f1bb 0f00 	cmp.w	fp, #0
 800f37c:	d023      	beq.n	800f3c6 <__multiply+0xcc>
 800f37e:	4689      	mov	r9, r1
 800f380:	46ac      	mov	ip, r5
 800f382:	f04f 0800 	mov.w	r8, #0
 800f386:	f859 4b04 	ldr.w	r4, [r9], #4
 800f38a:	f8dc a000 	ldr.w	sl, [ip]
 800f38e:	b2a3      	uxth	r3, r4
 800f390:	fa1f fa8a 	uxth.w	sl, sl
 800f394:	fb0b a303 	mla	r3, fp, r3, sl
 800f398:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f39c:	f8dc 4000 	ldr.w	r4, [ip]
 800f3a0:	4443      	add	r3, r8
 800f3a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f3a6:	fb0b 840a 	mla	r4, fp, sl, r8
 800f3aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f3ae:	46e2      	mov	sl, ip
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f3b6:	454f      	cmp	r7, r9
 800f3b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f3bc:	f84a 3b04 	str.w	r3, [sl], #4
 800f3c0:	d82b      	bhi.n	800f41a <__multiply+0x120>
 800f3c2:	f8cc 8004 	str.w	r8, [ip, #4]
 800f3c6:	9b01      	ldr	r3, [sp, #4]
 800f3c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f3cc:	3204      	adds	r2, #4
 800f3ce:	f1ba 0f00 	cmp.w	sl, #0
 800f3d2:	d020      	beq.n	800f416 <__multiply+0x11c>
 800f3d4:	682b      	ldr	r3, [r5, #0]
 800f3d6:	4689      	mov	r9, r1
 800f3d8:	46a8      	mov	r8, r5
 800f3da:	f04f 0b00 	mov.w	fp, #0
 800f3de:	f8b9 c000 	ldrh.w	ip, [r9]
 800f3e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f3e6:	fb0a 440c 	mla	r4, sl, ip, r4
 800f3ea:	445c      	add	r4, fp
 800f3ec:	46c4      	mov	ip, r8
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f3f4:	f84c 3b04 	str.w	r3, [ip], #4
 800f3f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f3fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f400:	0c1b      	lsrs	r3, r3, #16
 800f402:	fb0a b303 	mla	r3, sl, r3, fp
 800f406:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f40a:	454f      	cmp	r7, r9
 800f40c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f410:	d805      	bhi.n	800f41e <__multiply+0x124>
 800f412:	f8c8 3004 	str.w	r3, [r8, #4]
 800f416:	3504      	adds	r5, #4
 800f418:	e79b      	b.n	800f352 <__multiply+0x58>
 800f41a:	46d4      	mov	ip, sl
 800f41c:	e7b3      	b.n	800f386 <__multiply+0x8c>
 800f41e:	46e0      	mov	r8, ip
 800f420:	e7dd      	b.n	800f3de <__multiply+0xe4>
 800f422:	3e01      	subs	r6, #1
 800f424:	e799      	b.n	800f35a <__multiply+0x60>
	...

0800f428 <__pow5mult>:
 800f428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f42c:	4615      	mov	r5, r2
 800f42e:	f012 0203 	ands.w	r2, r2, #3
 800f432:	4606      	mov	r6, r0
 800f434:	460f      	mov	r7, r1
 800f436:	d007      	beq.n	800f448 <__pow5mult+0x20>
 800f438:	3a01      	subs	r2, #1
 800f43a:	4c21      	ldr	r4, [pc, #132]	; (800f4c0 <__pow5mult+0x98>)
 800f43c:	2300      	movs	r3, #0
 800f43e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f442:	f7ff fe8a 	bl	800f15a <__multadd>
 800f446:	4607      	mov	r7, r0
 800f448:	10ad      	asrs	r5, r5, #2
 800f44a:	d035      	beq.n	800f4b8 <__pow5mult+0x90>
 800f44c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f44e:	b93c      	cbnz	r4, 800f460 <__pow5mult+0x38>
 800f450:	2010      	movs	r0, #16
 800f452:	f7ff fe1d 	bl	800f090 <malloc>
 800f456:	6270      	str	r0, [r6, #36]	; 0x24
 800f458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f45c:	6004      	str	r4, [r0, #0]
 800f45e:	60c4      	str	r4, [r0, #12]
 800f460:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f468:	b94c      	cbnz	r4, 800f47e <__pow5mult+0x56>
 800f46a:	f240 2171 	movw	r1, #625	; 0x271
 800f46e:	4630      	mov	r0, r6
 800f470:	f7ff ff3a 	bl	800f2e8 <__i2b>
 800f474:	2300      	movs	r3, #0
 800f476:	f8c8 0008 	str.w	r0, [r8, #8]
 800f47a:	4604      	mov	r4, r0
 800f47c:	6003      	str	r3, [r0, #0]
 800f47e:	f04f 0800 	mov.w	r8, #0
 800f482:	07eb      	lsls	r3, r5, #31
 800f484:	d50a      	bpl.n	800f49c <__pow5mult+0x74>
 800f486:	4639      	mov	r1, r7
 800f488:	4622      	mov	r2, r4
 800f48a:	4630      	mov	r0, r6
 800f48c:	f7ff ff35 	bl	800f2fa <__multiply>
 800f490:	4639      	mov	r1, r7
 800f492:	4681      	mov	r9, r0
 800f494:	4630      	mov	r0, r6
 800f496:	f7ff fe49 	bl	800f12c <_Bfree>
 800f49a:	464f      	mov	r7, r9
 800f49c:	106d      	asrs	r5, r5, #1
 800f49e:	d00b      	beq.n	800f4b8 <__pow5mult+0x90>
 800f4a0:	6820      	ldr	r0, [r4, #0]
 800f4a2:	b938      	cbnz	r0, 800f4b4 <__pow5mult+0x8c>
 800f4a4:	4622      	mov	r2, r4
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7ff ff26 	bl	800f2fa <__multiply>
 800f4ae:	6020      	str	r0, [r4, #0]
 800f4b0:	f8c0 8000 	str.w	r8, [r0]
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	e7e4      	b.n	800f482 <__pow5mult+0x5a>
 800f4b8:	4638      	mov	r0, r7
 800f4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4be:	bf00      	nop
 800f4c0:	08076910 	.word	0x08076910

0800f4c4 <__lshift>:
 800f4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4ce:	6923      	ldr	r3, [r4, #16]
 800f4d0:	6849      	ldr	r1, [r1, #4]
 800f4d2:	eb0a 0903 	add.w	r9, sl, r3
 800f4d6:	68a3      	ldr	r3, [r4, #8]
 800f4d8:	4607      	mov	r7, r0
 800f4da:	4616      	mov	r6, r2
 800f4dc:	f109 0501 	add.w	r5, r9, #1
 800f4e0:	42ab      	cmp	r3, r5
 800f4e2:	db32      	blt.n	800f54a <__lshift+0x86>
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f7ff fded 	bl	800f0c4 <_Balloc>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	4680      	mov	r8, r0
 800f4ee:	f100 0114 	add.w	r1, r0, #20
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	4553      	cmp	r3, sl
 800f4f6:	db2b      	blt.n	800f550 <__lshift+0x8c>
 800f4f8:	6920      	ldr	r0, [r4, #16]
 800f4fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4fe:	f104 0314 	add.w	r3, r4, #20
 800f502:	f016 021f 	ands.w	r2, r6, #31
 800f506:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f50a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f50e:	d025      	beq.n	800f55c <__lshift+0x98>
 800f510:	f1c2 0e20 	rsb	lr, r2, #32
 800f514:	2000      	movs	r0, #0
 800f516:	681e      	ldr	r6, [r3, #0]
 800f518:	468a      	mov	sl, r1
 800f51a:	4096      	lsls	r6, r2
 800f51c:	4330      	orrs	r0, r6
 800f51e:	f84a 0b04 	str.w	r0, [sl], #4
 800f522:	f853 0b04 	ldr.w	r0, [r3], #4
 800f526:	459c      	cmp	ip, r3
 800f528:	fa20 f00e 	lsr.w	r0, r0, lr
 800f52c:	d814      	bhi.n	800f558 <__lshift+0x94>
 800f52e:	6048      	str	r0, [r1, #4]
 800f530:	b108      	cbz	r0, 800f536 <__lshift+0x72>
 800f532:	f109 0502 	add.w	r5, r9, #2
 800f536:	3d01      	subs	r5, #1
 800f538:	4638      	mov	r0, r7
 800f53a:	f8c8 5010 	str.w	r5, [r8, #16]
 800f53e:	4621      	mov	r1, r4
 800f540:	f7ff fdf4 	bl	800f12c <_Bfree>
 800f544:	4640      	mov	r0, r8
 800f546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f54a:	3101      	adds	r1, #1
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	e7c7      	b.n	800f4e0 <__lshift+0x1c>
 800f550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f554:	3301      	adds	r3, #1
 800f556:	e7cd      	b.n	800f4f4 <__lshift+0x30>
 800f558:	4651      	mov	r1, sl
 800f55a:	e7dc      	b.n	800f516 <__lshift+0x52>
 800f55c:	3904      	subs	r1, #4
 800f55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f562:	f841 2f04 	str.w	r2, [r1, #4]!
 800f566:	459c      	cmp	ip, r3
 800f568:	d8f9      	bhi.n	800f55e <__lshift+0x9a>
 800f56a:	e7e4      	b.n	800f536 <__lshift+0x72>

0800f56c <__mcmp>:
 800f56c:	6903      	ldr	r3, [r0, #16]
 800f56e:	690a      	ldr	r2, [r1, #16]
 800f570:	1a9b      	subs	r3, r3, r2
 800f572:	b530      	push	{r4, r5, lr}
 800f574:	d10c      	bne.n	800f590 <__mcmp+0x24>
 800f576:	0092      	lsls	r2, r2, #2
 800f578:	3014      	adds	r0, #20
 800f57a:	3114      	adds	r1, #20
 800f57c:	1884      	adds	r4, r0, r2
 800f57e:	4411      	add	r1, r2
 800f580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f588:	4295      	cmp	r5, r2
 800f58a:	d003      	beq.n	800f594 <__mcmp+0x28>
 800f58c:	d305      	bcc.n	800f59a <__mcmp+0x2e>
 800f58e:	2301      	movs	r3, #1
 800f590:	4618      	mov	r0, r3
 800f592:	bd30      	pop	{r4, r5, pc}
 800f594:	42a0      	cmp	r0, r4
 800f596:	d3f3      	bcc.n	800f580 <__mcmp+0x14>
 800f598:	e7fa      	b.n	800f590 <__mcmp+0x24>
 800f59a:	f04f 33ff 	mov.w	r3, #4294967295
 800f59e:	e7f7      	b.n	800f590 <__mcmp+0x24>

0800f5a0 <__mdiff>:
 800f5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a4:	460d      	mov	r5, r1
 800f5a6:	4607      	mov	r7, r0
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	4614      	mov	r4, r2
 800f5ae:	f7ff ffdd 	bl	800f56c <__mcmp>
 800f5b2:	1e06      	subs	r6, r0, #0
 800f5b4:	d108      	bne.n	800f5c8 <__mdiff+0x28>
 800f5b6:	4631      	mov	r1, r6
 800f5b8:	4638      	mov	r0, r7
 800f5ba:	f7ff fd83 	bl	800f0c4 <_Balloc>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5c8:	bfa4      	itt	ge
 800f5ca:	4623      	movge	r3, r4
 800f5cc:	462c      	movge	r4, r5
 800f5ce:	4638      	mov	r0, r7
 800f5d0:	6861      	ldr	r1, [r4, #4]
 800f5d2:	bfa6      	itte	ge
 800f5d4:	461d      	movge	r5, r3
 800f5d6:	2600      	movge	r6, #0
 800f5d8:	2601      	movlt	r6, #1
 800f5da:	f7ff fd73 	bl	800f0c4 <_Balloc>
 800f5de:	692b      	ldr	r3, [r5, #16]
 800f5e0:	60c6      	str	r6, [r0, #12]
 800f5e2:	6926      	ldr	r6, [r4, #16]
 800f5e4:	f105 0914 	add.w	r9, r5, #20
 800f5e8:	f104 0214 	add.w	r2, r4, #20
 800f5ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f5f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f5f4:	f100 0514 	add.w	r5, r0, #20
 800f5f8:	f04f 0e00 	mov.w	lr, #0
 800f5fc:	f852 ab04 	ldr.w	sl, [r2], #4
 800f600:	f859 4b04 	ldr.w	r4, [r9], #4
 800f604:	fa1e f18a 	uxtah	r1, lr, sl
 800f608:	b2a3      	uxth	r3, r4
 800f60a:	1ac9      	subs	r1, r1, r3
 800f60c:	0c23      	lsrs	r3, r4, #16
 800f60e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f612:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f616:	b289      	uxth	r1, r1
 800f618:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f61c:	45c8      	cmp	r8, r9
 800f61e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f622:	4694      	mov	ip, r2
 800f624:	f845 3b04 	str.w	r3, [r5], #4
 800f628:	d8e8      	bhi.n	800f5fc <__mdiff+0x5c>
 800f62a:	45bc      	cmp	ip, r7
 800f62c:	d304      	bcc.n	800f638 <__mdiff+0x98>
 800f62e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f632:	b183      	cbz	r3, 800f656 <__mdiff+0xb6>
 800f634:	6106      	str	r6, [r0, #16]
 800f636:	e7c5      	b.n	800f5c4 <__mdiff+0x24>
 800f638:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f63c:	fa1e f381 	uxtah	r3, lr, r1
 800f640:	141a      	asrs	r2, r3, #16
 800f642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f646:	b29b      	uxth	r3, r3
 800f648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f64c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f650:	f845 3b04 	str.w	r3, [r5], #4
 800f654:	e7e9      	b.n	800f62a <__mdiff+0x8a>
 800f656:	3e01      	subs	r6, #1
 800f658:	e7e9      	b.n	800f62e <__mdiff+0x8e>
	...

0800f65c <__ulp>:
 800f65c:	4b12      	ldr	r3, [pc, #72]	; (800f6a8 <__ulp+0x4c>)
 800f65e:	ee10 2a90 	vmov	r2, s1
 800f662:	401a      	ands	r2, r3
 800f664:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f668:	2b00      	cmp	r3, #0
 800f66a:	dd04      	ble.n	800f676 <__ulp+0x1a>
 800f66c:	2000      	movs	r0, #0
 800f66e:	4619      	mov	r1, r3
 800f670:	ec41 0b10 	vmov	d0, r0, r1
 800f674:	4770      	bx	lr
 800f676:	425b      	negs	r3, r3
 800f678:	151b      	asrs	r3, r3, #20
 800f67a:	2b13      	cmp	r3, #19
 800f67c:	f04f 0000 	mov.w	r0, #0
 800f680:	f04f 0100 	mov.w	r1, #0
 800f684:	dc04      	bgt.n	800f690 <__ulp+0x34>
 800f686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f68a:	fa42 f103 	asr.w	r1, r2, r3
 800f68e:	e7ef      	b.n	800f670 <__ulp+0x14>
 800f690:	3b14      	subs	r3, #20
 800f692:	2b1e      	cmp	r3, #30
 800f694:	f04f 0201 	mov.w	r2, #1
 800f698:	bfda      	itte	le
 800f69a:	f1c3 031f 	rsble	r3, r3, #31
 800f69e:	fa02 f303 	lslle.w	r3, r2, r3
 800f6a2:	4613      	movgt	r3, r2
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	e7e3      	b.n	800f670 <__ulp+0x14>
 800f6a8:	7ff00000 	.word	0x7ff00000

0800f6ac <__b2d>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	6905      	ldr	r5, [r0, #16]
 800f6b0:	f100 0714 	add.w	r7, r0, #20
 800f6b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f6b8:	1f2e      	subs	r6, r5, #4
 800f6ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7ff fdc4 	bl	800f24c <__hi0bits>
 800f6c4:	f1c0 0320 	rsb	r3, r0, #32
 800f6c8:	280a      	cmp	r0, #10
 800f6ca:	600b      	str	r3, [r1, #0]
 800f6cc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f744 <__b2d+0x98>
 800f6d0:	dc14      	bgt.n	800f6fc <__b2d+0x50>
 800f6d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f6d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f6da:	42b7      	cmp	r7, r6
 800f6dc:	ea41 030c 	orr.w	r3, r1, ip
 800f6e0:	bf34      	ite	cc
 800f6e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f6e6:	2100      	movcs	r1, #0
 800f6e8:	3015      	adds	r0, #21
 800f6ea:	fa04 f000 	lsl.w	r0, r4, r0
 800f6ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800f6f2:	ea40 0201 	orr.w	r2, r0, r1
 800f6f6:	ec43 2b10 	vmov	d0, r2, r3
 800f6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6fc:	42b7      	cmp	r7, r6
 800f6fe:	bf3a      	itte	cc
 800f700:	f1a5 0608 	subcc.w	r6, r5, #8
 800f704:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f708:	2100      	movcs	r1, #0
 800f70a:	380b      	subs	r0, #11
 800f70c:	d015      	beq.n	800f73a <__b2d+0x8e>
 800f70e:	4084      	lsls	r4, r0
 800f710:	f1c0 0520 	rsb	r5, r0, #32
 800f714:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f718:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f71c:	42be      	cmp	r6, r7
 800f71e:	fa21 fc05 	lsr.w	ip, r1, r5
 800f722:	ea44 030c 	orr.w	r3, r4, ip
 800f726:	bf8c      	ite	hi
 800f728:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f72c:	2400      	movls	r4, #0
 800f72e:	fa01 f000 	lsl.w	r0, r1, r0
 800f732:	40ec      	lsrs	r4, r5
 800f734:	ea40 0204 	orr.w	r2, r0, r4
 800f738:	e7dd      	b.n	800f6f6 <__b2d+0x4a>
 800f73a:	ea44 030c 	orr.w	r3, r4, ip
 800f73e:	460a      	mov	r2, r1
 800f740:	e7d9      	b.n	800f6f6 <__b2d+0x4a>
 800f742:	bf00      	nop
 800f744:	3ff00000 	.word	0x3ff00000

0800f748 <__d2b>:
 800f748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f74c:	460e      	mov	r6, r1
 800f74e:	2101      	movs	r1, #1
 800f750:	ec59 8b10 	vmov	r8, r9, d0
 800f754:	4615      	mov	r5, r2
 800f756:	f7ff fcb5 	bl	800f0c4 <_Balloc>
 800f75a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f75e:	4607      	mov	r7, r0
 800f760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f764:	bb34      	cbnz	r4, 800f7b4 <__d2b+0x6c>
 800f766:	9301      	str	r3, [sp, #4]
 800f768:	f1b8 0300 	subs.w	r3, r8, #0
 800f76c:	d027      	beq.n	800f7be <__d2b+0x76>
 800f76e:	a802      	add	r0, sp, #8
 800f770:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f774:	f7ff fd89 	bl	800f28a <__lo0bits>
 800f778:	9900      	ldr	r1, [sp, #0]
 800f77a:	b1f0      	cbz	r0, 800f7ba <__d2b+0x72>
 800f77c:	9a01      	ldr	r2, [sp, #4]
 800f77e:	f1c0 0320 	rsb	r3, r0, #32
 800f782:	fa02 f303 	lsl.w	r3, r2, r3
 800f786:	430b      	orrs	r3, r1
 800f788:	40c2      	lsrs	r2, r0
 800f78a:	617b      	str	r3, [r7, #20]
 800f78c:	9201      	str	r2, [sp, #4]
 800f78e:	9b01      	ldr	r3, [sp, #4]
 800f790:	61bb      	str	r3, [r7, #24]
 800f792:	2b00      	cmp	r3, #0
 800f794:	bf14      	ite	ne
 800f796:	2102      	movne	r1, #2
 800f798:	2101      	moveq	r1, #1
 800f79a:	6139      	str	r1, [r7, #16]
 800f79c:	b1c4      	cbz	r4, 800f7d0 <__d2b+0x88>
 800f79e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f7a2:	4404      	add	r4, r0
 800f7a4:	6034      	str	r4, [r6, #0]
 800f7a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f7aa:	6028      	str	r0, [r5, #0]
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	b003      	add	sp, #12
 800f7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f7b8:	e7d5      	b.n	800f766 <__d2b+0x1e>
 800f7ba:	6179      	str	r1, [r7, #20]
 800f7bc:	e7e7      	b.n	800f78e <__d2b+0x46>
 800f7be:	a801      	add	r0, sp, #4
 800f7c0:	f7ff fd63 	bl	800f28a <__lo0bits>
 800f7c4:	9b01      	ldr	r3, [sp, #4]
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	2101      	movs	r1, #1
 800f7ca:	6139      	str	r1, [r7, #16]
 800f7cc:	3020      	adds	r0, #32
 800f7ce:	e7e5      	b.n	800f79c <__d2b+0x54>
 800f7d0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f7d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f7d8:	6030      	str	r0, [r6, #0]
 800f7da:	6918      	ldr	r0, [r3, #16]
 800f7dc:	f7ff fd36 	bl	800f24c <__hi0bits>
 800f7e0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f7e4:	e7e1      	b.n	800f7aa <__d2b+0x62>

0800f7e6 <__ratio>:
 800f7e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ea:	4688      	mov	r8, r1
 800f7ec:	4669      	mov	r1, sp
 800f7ee:	4681      	mov	r9, r0
 800f7f0:	f7ff ff5c 	bl	800f6ac <__b2d>
 800f7f4:	a901      	add	r1, sp, #4
 800f7f6:	4640      	mov	r0, r8
 800f7f8:	ec57 6b10 	vmov	r6, r7, d0
 800f7fc:	f7ff ff56 	bl	800f6ac <__b2d>
 800f800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f804:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f808:	eba3 0c02 	sub.w	ip, r3, r2
 800f80c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f810:	1a9b      	subs	r3, r3, r2
 800f812:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f816:	ec5b ab10 	vmov	sl, fp, d0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	bfce      	itee	gt
 800f81e:	463a      	movgt	r2, r7
 800f820:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f824:	465a      	movle	r2, fp
 800f826:	4659      	mov	r1, fp
 800f828:	463d      	mov	r5, r7
 800f82a:	bfd4      	ite	le
 800f82c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f830:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f834:	4630      	mov	r0, r6
 800f836:	ee10 2a10 	vmov	r2, s0
 800f83a:	460b      	mov	r3, r1
 800f83c:	4629      	mov	r1, r5
 800f83e:	f7f4 fcc5 	bl	80041cc <__aeabi_ddiv>
 800f842:	ec41 0b10 	vmov	d0, r0, r1
 800f846:	b003      	add	sp, #12
 800f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f84c <__copybits>:
 800f84c:	3901      	subs	r1, #1
 800f84e:	b510      	push	{r4, lr}
 800f850:	1149      	asrs	r1, r1, #5
 800f852:	6914      	ldr	r4, [r2, #16]
 800f854:	3101      	adds	r1, #1
 800f856:	f102 0314 	add.w	r3, r2, #20
 800f85a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f85e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f862:	42a3      	cmp	r3, r4
 800f864:	4602      	mov	r2, r0
 800f866:	d303      	bcc.n	800f870 <__copybits+0x24>
 800f868:	2300      	movs	r3, #0
 800f86a:	428a      	cmp	r2, r1
 800f86c:	d305      	bcc.n	800f87a <__copybits+0x2e>
 800f86e:	bd10      	pop	{r4, pc}
 800f870:	f853 2b04 	ldr.w	r2, [r3], #4
 800f874:	f840 2b04 	str.w	r2, [r0], #4
 800f878:	e7f3      	b.n	800f862 <__copybits+0x16>
 800f87a:	f842 3b04 	str.w	r3, [r2], #4
 800f87e:	e7f4      	b.n	800f86a <__copybits+0x1e>

0800f880 <__any_on>:
 800f880:	f100 0214 	add.w	r2, r0, #20
 800f884:	6900      	ldr	r0, [r0, #16]
 800f886:	114b      	asrs	r3, r1, #5
 800f888:	4298      	cmp	r0, r3
 800f88a:	b510      	push	{r4, lr}
 800f88c:	db11      	blt.n	800f8b2 <__any_on+0x32>
 800f88e:	dd0a      	ble.n	800f8a6 <__any_on+0x26>
 800f890:	f011 011f 	ands.w	r1, r1, #31
 800f894:	d007      	beq.n	800f8a6 <__any_on+0x26>
 800f896:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f89a:	fa24 f001 	lsr.w	r0, r4, r1
 800f89e:	fa00 f101 	lsl.w	r1, r0, r1
 800f8a2:	428c      	cmp	r4, r1
 800f8a4:	d10b      	bne.n	800f8be <__any_on+0x3e>
 800f8a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d803      	bhi.n	800f8b6 <__any_on+0x36>
 800f8ae:	2000      	movs	r0, #0
 800f8b0:	bd10      	pop	{r4, pc}
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	e7f7      	b.n	800f8a6 <__any_on+0x26>
 800f8b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8ba:	2900      	cmp	r1, #0
 800f8bc:	d0f5      	beq.n	800f8aa <__any_on+0x2a>
 800f8be:	2001      	movs	r0, #1
 800f8c0:	e7f6      	b.n	800f8b0 <__any_on+0x30>

0800f8c2 <_calloc_r>:
 800f8c2:	b538      	push	{r3, r4, r5, lr}
 800f8c4:	fb02 f401 	mul.w	r4, r2, r1
 800f8c8:	4621      	mov	r1, r4
 800f8ca:	f000 f857 	bl	800f97c <_malloc_r>
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	b118      	cbz	r0, 800f8da <_calloc_r+0x18>
 800f8d2:	4622      	mov	r2, r4
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	f7fc fa13 	bl	800bd00 <memset>
 800f8da:	4628      	mov	r0, r5
 800f8dc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f8e0 <_free_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	2900      	cmp	r1, #0
 800f8e6:	d045      	beq.n	800f974 <_free_r+0x94>
 800f8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8ec:	1f0c      	subs	r4, r1, #4
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	bfb8      	it	lt
 800f8f2:	18e4      	addlt	r4, r4, r3
 800f8f4:	f000 fc45 	bl	8010182 <__malloc_lock>
 800f8f8:	4a1f      	ldr	r2, [pc, #124]	; (800f978 <_free_r+0x98>)
 800f8fa:	6813      	ldr	r3, [r2, #0]
 800f8fc:	4610      	mov	r0, r2
 800f8fe:	b933      	cbnz	r3, 800f90e <_free_r+0x2e>
 800f900:	6063      	str	r3, [r4, #4]
 800f902:	6014      	str	r4, [r2, #0]
 800f904:	4628      	mov	r0, r5
 800f906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f90a:	f000 bc3b 	b.w	8010184 <__malloc_unlock>
 800f90e:	42a3      	cmp	r3, r4
 800f910:	d90c      	bls.n	800f92c <_free_r+0x4c>
 800f912:	6821      	ldr	r1, [r4, #0]
 800f914:	1862      	adds	r2, r4, r1
 800f916:	4293      	cmp	r3, r2
 800f918:	bf04      	itt	eq
 800f91a:	681a      	ldreq	r2, [r3, #0]
 800f91c:	685b      	ldreq	r3, [r3, #4]
 800f91e:	6063      	str	r3, [r4, #4]
 800f920:	bf04      	itt	eq
 800f922:	1852      	addeq	r2, r2, r1
 800f924:	6022      	streq	r2, [r4, #0]
 800f926:	6004      	str	r4, [r0, #0]
 800f928:	e7ec      	b.n	800f904 <_free_r+0x24>
 800f92a:	4613      	mov	r3, r2
 800f92c:	685a      	ldr	r2, [r3, #4]
 800f92e:	b10a      	cbz	r2, 800f934 <_free_r+0x54>
 800f930:	42a2      	cmp	r2, r4
 800f932:	d9fa      	bls.n	800f92a <_free_r+0x4a>
 800f934:	6819      	ldr	r1, [r3, #0]
 800f936:	1858      	adds	r0, r3, r1
 800f938:	42a0      	cmp	r0, r4
 800f93a:	d10b      	bne.n	800f954 <_free_r+0x74>
 800f93c:	6820      	ldr	r0, [r4, #0]
 800f93e:	4401      	add	r1, r0
 800f940:	1858      	adds	r0, r3, r1
 800f942:	4282      	cmp	r2, r0
 800f944:	6019      	str	r1, [r3, #0]
 800f946:	d1dd      	bne.n	800f904 <_free_r+0x24>
 800f948:	6810      	ldr	r0, [r2, #0]
 800f94a:	6852      	ldr	r2, [r2, #4]
 800f94c:	605a      	str	r2, [r3, #4]
 800f94e:	4401      	add	r1, r0
 800f950:	6019      	str	r1, [r3, #0]
 800f952:	e7d7      	b.n	800f904 <_free_r+0x24>
 800f954:	d902      	bls.n	800f95c <_free_r+0x7c>
 800f956:	230c      	movs	r3, #12
 800f958:	602b      	str	r3, [r5, #0]
 800f95a:	e7d3      	b.n	800f904 <_free_r+0x24>
 800f95c:	6820      	ldr	r0, [r4, #0]
 800f95e:	1821      	adds	r1, r4, r0
 800f960:	428a      	cmp	r2, r1
 800f962:	bf04      	itt	eq
 800f964:	6811      	ldreq	r1, [r2, #0]
 800f966:	6852      	ldreq	r2, [r2, #4]
 800f968:	6062      	str	r2, [r4, #4]
 800f96a:	bf04      	itt	eq
 800f96c:	1809      	addeq	r1, r1, r0
 800f96e:	6021      	streq	r1, [r4, #0]
 800f970:	605c      	str	r4, [r3, #4]
 800f972:	e7c7      	b.n	800f904 <_free_r+0x24>
 800f974:	bd38      	pop	{r3, r4, r5, pc}
 800f976:	bf00      	nop
 800f978:	20001b58 	.word	0x20001b58

0800f97c <_malloc_r>:
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	1ccd      	adds	r5, r1, #3
 800f980:	f025 0503 	bic.w	r5, r5, #3
 800f984:	3508      	adds	r5, #8
 800f986:	2d0c      	cmp	r5, #12
 800f988:	bf38      	it	cc
 800f98a:	250c      	movcc	r5, #12
 800f98c:	2d00      	cmp	r5, #0
 800f98e:	4606      	mov	r6, r0
 800f990:	db01      	blt.n	800f996 <_malloc_r+0x1a>
 800f992:	42a9      	cmp	r1, r5
 800f994:	d903      	bls.n	800f99e <_malloc_r+0x22>
 800f996:	230c      	movs	r3, #12
 800f998:	6033      	str	r3, [r6, #0]
 800f99a:	2000      	movs	r0, #0
 800f99c:	bd70      	pop	{r4, r5, r6, pc}
 800f99e:	f000 fbf0 	bl	8010182 <__malloc_lock>
 800f9a2:	4a21      	ldr	r2, [pc, #132]	; (800fa28 <_malloc_r+0xac>)
 800f9a4:	6814      	ldr	r4, [r2, #0]
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	b991      	cbnz	r1, 800f9d0 <_malloc_r+0x54>
 800f9aa:	4c20      	ldr	r4, [pc, #128]	; (800fa2c <_malloc_r+0xb0>)
 800f9ac:	6823      	ldr	r3, [r4, #0]
 800f9ae:	b91b      	cbnz	r3, 800f9b8 <_malloc_r+0x3c>
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	f000 fb05 	bl	800ffc0 <_sbrk_r>
 800f9b6:	6020      	str	r0, [r4, #0]
 800f9b8:	4629      	mov	r1, r5
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f000 fb00 	bl	800ffc0 <_sbrk_r>
 800f9c0:	1c43      	adds	r3, r0, #1
 800f9c2:	d124      	bne.n	800fa0e <_malloc_r+0x92>
 800f9c4:	230c      	movs	r3, #12
 800f9c6:	6033      	str	r3, [r6, #0]
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	f000 fbdb 	bl	8010184 <__malloc_unlock>
 800f9ce:	e7e4      	b.n	800f99a <_malloc_r+0x1e>
 800f9d0:	680b      	ldr	r3, [r1, #0]
 800f9d2:	1b5b      	subs	r3, r3, r5
 800f9d4:	d418      	bmi.n	800fa08 <_malloc_r+0x8c>
 800f9d6:	2b0b      	cmp	r3, #11
 800f9d8:	d90f      	bls.n	800f9fa <_malloc_r+0x7e>
 800f9da:	600b      	str	r3, [r1, #0]
 800f9dc:	50cd      	str	r5, [r1, r3]
 800f9de:	18cc      	adds	r4, r1, r3
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	f000 fbcf 	bl	8010184 <__malloc_unlock>
 800f9e6:	f104 000b 	add.w	r0, r4, #11
 800f9ea:	1d23      	adds	r3, r4, #4
 800f9ec:	f020 0007 	bic.w	r0, r0, #7
 800f9f0:	1ac3      	subs	r3, r0, r3
 800f9f2:	d0d3      	beq.n	800f99c <_malloc_r+0x20>
 800f9f4:	425a      	negs	r2, r3
 800f9f6:	50e2      	str	r2, [r4, r3]
 800f9f8:	e7d0      	b.n	800f99c <_malloc_r+0x20>
 800f9fa:	428c      	cmp	r4, r1
 800f9fc:	684b      	ldr	r3, [r1, #4]
 800f9fe:	bf16      	itet	ne
 800fa00:	6063      	strne	r3, [r4, #4]
 800fa02:	6013      	streq	r3, [r2, #0]
 800fa04:	460c      	movne	r4, r1
 800fa06:	e7eb      	b.n	800f9e0 <_malloc_r+0x64>
 800fa08:	460c      	mov	r4, r1
 800fa0a:	6849      	ldr	r1, [r1, #4]
 800fa0c:	e7cc      	b.n	800f9a8 <_malloc_r+0x2c>
 800fa0e:	1cc4      	adds	r4, r0, #3
 800fa10:	f024 0403 	bic.w	r4, r4, #3
 800fa14:	42a0      	cmp	r0, r4
 800fa16:	d005      	beq.n	800fa24 <_malloc_r+0xa8>
 800fa18:	1a21      	subs	r1, r4, r0
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f000 fad0 	bl	800ffc0 <_sbrk_r>
 800fa20:	3001      	adds	r0, #1
 800fa22:	d0cf      	beq.n	800f9c4 <_malloc_r+0x48>
 800fa24:	6025      	str	r5, [r4, #0]
 800fa26:	e7db      	b.n	800f9e0 <_malloc_r+0x64>
 800fa28:	20001b58 	.word	0x20001b58
 800fa2c:	20001b5c 	.word	0x20001b5c

0800fa30 <__ssputs_r>:
 800fa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa34:	688e      	ldr	r6, [r1, #8]
 800fa36:	429e      	cmp	r6, r3
 800fa38:	4682      	mov	sl, r0
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	4690      	mov	r8, r2
 800fa3e:	4699      	mov	r9, r3
 800fa40:	d837      	bhi.n	800fab2 <__ssputs_r+0x82>
 800fa42:	898a      	ldrh	r2, [r1, #12]
 800fa44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa48:	d031      	beq.n	800faae <__ssputs_r+0x7e>
 800fa4a:	6825      	ldr	r5, [r4, #0]
 800fa4c:	6909      	ldr	r1, [r1, #16]
 800fa4e:	1a6f      	subs	r7, r5, r1
 800fa50:	6965      	ldr	r5, [r4, #20]
 800fa52:	2302      	movs	r3, #2
 800fa54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa58:	fb95 f5f3 	sdiv	r5, r5, r3
 800fa5c:	f109 0301 	add.w	r3, r9, #1
 800fa60:	443b      	add	r3, r7
 800fa62:	429d      	cmp	r5, r3
 800fa64:	bf38      	it	cc
 800fa66:	461d      	movcc	r5, r3
 800fa68:	0553      	lsls	r3, r2, #21
 800fa6a:	d530      	bpl.n	800face <__ssputs_r+0x9e>
 800fa6c:	4629      	mov	r1, r5
 800fa6e:	f7ff ff85 	bl	800f97c <_malloc_r>
 800fa72:	4606      	mov	r6, r0
 800fa74:	b950      	cbnz	r0, 800fa8c <__ssputs_r+0x5c>
 800fa76:	230c      	movs	r3, #12
 800fa78:	f8ca 3000 	str.w	r3, [sl]
 800fa7c:	89a3      	ldrh	r3, [r4, #12]
 800fa7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa82:	81a3      	strh	r3, [r4, #12]
 800fa84:	f04f 30ff 	mov.w	r0, #4294967295
 800fa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa8c:	463a      	mov	r2, r7
 800fa8e:	6921      	ldr	r1, [r4, #16]
 800fa90:	f7fc f92b 	bl	800bcea <memcpy>
 800fa94:	89a3      	ldrh	r3, [r4, #12]
 800fa96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa9e:	81a3      	strh	r3, [r4, #12]
 800faa0:	6126      	str	r6, [r4, #16]
 800faa2:	6165      	str	r5, [r4, #20]
 800faa4:	443e      	add	r6, r7
 800faa6:	1bed      	subs	r5, r5, r7
 800faa8:	6026      	str	r6, [r4, #0]
 800faaa:	60a5      	str	r5, [r4, #8]
 800faac:	464e      	mov	r6, r9
 800faae:	454e      	cmp	r6, r9
 800fab0:	d900      	bls.n	800fab4 <__ssputs_r+0x84>
 800fab2:	464e      	mov	r6, r9
 800fab4:	4632      	mov	r2, r6
 800fab6:	4641      	mov	r1, r8
 800fab8:	6820      	ldr	r0, [r4, #0]
 800faba:	f000 fb49 	bl	8010150 <memmove>
 800fabe:	68a3      	ldr	r3, [r4, #8]
 800fac0:	1b9b      	subs	r3, r3, r6
 800fac2:	60a3      	str	r3, [r4, #8]
 800fac4:	6823      	ldr	r3, [r4, #0]
 800fac6:	441e      	add	r6, r3
 800fac8:	6026      	str	r6, [r4, #0]
 800faca:	2000      	movs	r0, #0
 800facc:	e7dc      	b.n	800fa88 <__ssputs_r+0x58>
 800face:	462a      	mov	r2, r5
 800fad0:	f000 fb59 	bl	8010186 <_realloc_r>
 800fad4:	4606      	mov	r6, r0
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d1e2      	bne.n	800faa0 <__ssputs_r+0x70>
 800fada:	6921      	ldr	r1, [r4, #16]
 800fadc:	4650      	mov	r0, sl
 800fade:	f7ff feff 	bl	800f8e0 <_free_r>
 800fae2:	e7c8      	b.n	800fa76 <__ssputs_r+0x46>

0800fae4 <_svfiprintf_r>:
 800fae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	461d      	mov	r5, r3
 800faea:	898b      	ldrh	r3, [r1, #12]
 800faec:	061f      	lsls	r7, r3, #24
 800faee:	b09d      	sub	sp, #116	; 0x74
 800faf0:	4680      	mov	r8, r0
 800faf2:	460c      	mov	r4, r1
 800faf4:	4616      	mov	r6, r2
 800faf6:	d50f      	bpl.n	800fb18 <_svfiprintf_r+0x34>
 800faf8:	690b      	ldr	r3, [r1, #16]
 800fafa:	b96b      	cbnz	r3, 800fb18 <_svfiprintf_r+0x34>
 800fafc:	2140      	movs	r1, #64	; 0x40
 800fafe:	f7ff ff3d 	bl	800f97c <_malloc_r>
 800fb02:	6020      	str	r0, [r4, #0]
 800fb04:	6120      	str	r0, [r4, #16]
 800fb06:	b928      	cbnz	r0, 800fb14 <_svfiprintf_r+0x30>
 800fb08:	230c      	movs	r3, #12
 800fb0a:	f8c8 3000 	str.w	r3, [r8]
 800fb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb12:	e0c8      	b.n	800fca6 <_svfiprintf_r+0x1c2>
 800fb14:	2340      	movs	r3, #64	; 0x40
 800fb16:	6163      	str	r3, [r4, #20]
 800fb18:	2300      	movs	r3, #0
 800fb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800fb1c:	2320      	movs	r3, #32
 800fb1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb22:	2330      	movs	r3, #48	; 0x30
 800fb24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb28:	9503      	str	r5, [sp, #12]
 800fb2a:	f04f 0b01 	mov.w	fp, #1
 800fb2e:	4637      	mov	r7, r6
 800fb30:	463d      	mov	r5, r7
 800fb32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fb36:	b10b      	cbz	r3, 800fb3c <_svfiprintf_r+0x58>
 800fb38:	2b25      	cmp	r3, #37	; 0x25
 800fb3a:	d13e      	bne.n	800fbba <_svfiprintf_r+0xd6>
 800fb3c:	ebb7 0a06 	subs.w	sl, r7, r6
 800fb40:	d00b      	beq.n	800fb5a <_svfiprintf_r+0x76>
 800fb42:	4653      	mov	r3, sl
 800fb44:	4632      	mov	r2, r6
 800fb46:	4621      	mov	r1, r4
 800fb48:	4640      	mov	r0, r8
 800fb4a:	f7ff ff71 	bl	800fa30 <__ssputs_r>
 800fb4e:	3001      	adds	r0, #1
 800fb50:	f000 80a4 	beq.w	800fc9c <_svfiprintf_r+0x1b8>
 800fb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb56:	4453      	add	r3, sl
 800fb58:	9309      	str	r3, [sp, #36]	; 0x24
 800fb5a:	783b      	ldrb	r3, [r7, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f000 809d 	beq.w	800fc9c <_svfiprintf_r+0x1b8>
 800fb62:	2300      	movs	r3, #0
 800fb64:	f04f 32ff 	mov.w	r2, #4294967295
 800fb68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb6c:	9304      	str	r3, [sp, #16]
 800fb6e:	9307      	str	r3, [sp, #28]
 800fb70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb74:	931a      	str	r3, [sp, #104]	; 0x68
 800fb76:	462f      	mov	r7, r5
 800fb78:	2205      	movs	r2, #5
 800fb7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fb7e:	4850      	ldr	r0, [pc, #320]	; (800fcc0 <_svfiprintf_r+0x1dc>)
 800fb80:	f7f3 ffee 	bl	8003b60 <memchr>
 800fb84:	9b04      	ldr	r3, [sp, #16]
 800fb86:	b9d0      	cbnz	r0, 800fbbe <_svfiprintf_r+0xda>
 800fb88:	06d9      	lsls	r1, r3, #27
 800fb8a:	bf44      	itt	mi
 800fb8c:	2220      	movmi	r2, #32
 800fb8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fb92:	071a      	lsls	r2, r3, #28
 800fb94:	bf44      	itt	mi
 800fb96:	222b      	movmi	r2, #43	; 0x2b
 800fb98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fb9c:	782a      	ldrb	r2, [r5, #0]
 800fb9e:	2a2a      	cmp	r2, #42	; 0x2a
 800fba0:	d015      	beq.n	800fbce <_svfiprintf_r+0xea>
 800fba2:	9a07      	ldr	r2, [sp, #28]
 800fba4:	462f      	mov	r7, r5
 800fba6:	2000      	movs	r0, #0
 800fba8:	250a      	movs	r5, #10
 800fbaa:	4639      	mov	r1, r7
 800fbac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbb0:	3b30      	subs	r3, #48	; 0x30
 800fbb2:	2b09      	cmp	r3, #9
 800fbb4:	d94d      	bls.n	800fc52 <_svfiprintf_r+0x16e>
 800fbb6:	b1b8      	cbz	r0, 800fbe8 <_svfiprintf_r+0x104>
 800fbb8:	e00f      	b.n	800fbda <_svfiprintf_r+0xf6>
 800fbba:	462f      	mov	r7, r5
 800fbbc:	e7b8      	b.n	800fb30 <_svfiprintf_r+0x4c>
 800fbbe:	4a40      	ldr	r2, [pc, #256]	; (800fcc0 <_svfiprintf_r+0x1dc>)
 800fbc0:	1a80      	subs	r0, r0, r2
 800fbc2:	fa0b f000 	lsl.w	r0, fp, r0
 800fbc6:	4318      	orrs	r0, r3
 800fbc8:	9004      	str	r0, [sp, #16]
 800fbca:	463d      	mov	r5, r7
 800fbcc:	e7d3      	b.n	800fb76 <_svfiprintf_r+0x92>
 800fbce:	9a03      	ldr	r2, [sp, #12]
 800fbd0:	1d11      	adds	r1, r2, #4
 800fbd2:	6812      	ldr	r2, [r2, #0]
 800fbd4:	9103      	str	r1, [sp, #12]
 800fbd6:	2a00      	cmp	r2, #0
 800fbd8:	db01      	blt.n	800fbde <_svfiprintf_r+0xfa>
 800fbda:	9207      	str	r2, [sp, #28]
 800fbdc:	e004      	b.n	800fbe8 <_svfiprintf_r+0x104>
 800fbde:	4252      	negs	r2, r2
 800fbe0:	f043 0302 	orr.w	r3, r3, #2
 800fbe4:	9207      	str	r2, [sp, #28]
 800fbe6:	9304      	str	r3, [sp, #16]
 800fbe8:	783b      	ldrb	r3, [r7, #0]
 800fbea:	2b2e      	cmp	r3, #46	; 0x2e
 800fbec:	d10c      	bne.n	800fc08 <_svfiprintf_r+0x124>
 800fbee:	787b      	ldrb	r3, [r7, #1]
 800fbf0:	2b2a      	cmp	r3, #42	; 0x2a
 800fbf2:	d133      	bne.n	800fc5c <_svfiprintf_r+0x178>
 800fbf4:	9b03      	ldr	r3, [sp, #12]
 800fbf6:	1d1a      	adds	r2, r3, #4
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	9203      	str	r2, [sp, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	bfb8      	it	lt
 800fc00:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc04:	3702      	adds	r7, #2
 800fc06:	9305      	str	r3, [sp, #20]
 800fc08:	4d2e      	ldr	r5, [pc, #184]	; (800fcc4 <_svfiprintf_r+0x1e0>)
 800fc0a:	7839      	ldrb	r1, [r7, #0]
 800fc0c:	2203      	movs	r2, #3
 800fc0e:	4628      	mov	r0, r5
 800fc10:	f7f3 ffa6 	bl	8003b60 <memchr>
 800fc14:	b138      	cbz	r0, 800fc26 <_svfiprintf_r+0x142>
 800fc16:	2340      	movs	r3, #64	; 0x40
 800fc18:	1b40      	subs	r0, r0, r5
 800fc1a:	fa03 f000 	lsl.w	r0, r3, r0
 800fc1e:	9b04      	ldr	r3, [sp, #16]
 800fc20:	4303      	orrs	r3, r0
 800fc22:	3701      	adds	r7, #1
 800fc24:	9304      	str	r3, [sp, #16]
 800fc26:	7839      	ldrb	r1, [r7, #0]
 800fc28:	4827      	ldr	r0, [pc, #156]	; (800fcc8 <_svfiprintf_r+0x1e4>)
 800fc2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc2e:	2206      	movs	r2, #6
 800fc30:	1c7e      	adds	r6, r7, #1
 800fc32:	f7f3 ff95 	bl	8003b60 <memchr>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d038      	beq.n	800fcac <_svfiprintf_r+0x1c8>
 800fc3a:	4b24      	ldr	r3, [pc, #144]	; (800fccc <_svfiprintf_r+0x1e8>)
 800fc3c:	bb13      	cbnz	r3, 800fc84 <_svfiprintf_r+0x1a0>
 800fc3e:	9b03      	ldr	r3, [sp, #12]
 800fc40:	3307      	adds	r3, #7
 800fc42:	f023 0307 	bic.w	r3, r3, #7
 800fc46:	3308      	adds	r3, #8
 800fc48:	9303      	str	r3, [sp, #12]
 800fc4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc4c:	444b      	add	r3, r9
 800fc4e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc50:	e76d      	b.n	800fb2e <_svfiprintf_r+0x4a>
 800fc52:	fb05 3202 	mla	r2, r5, r2, r3
 800fc56:	2001      	movs	r0, #1
 800fc58:	460f      	mov	r7, r1
 800fc5a:	e7a6      	b.n	800fbaa <_svfiprintf_r+0xc6>
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	3701      	adds	r7, #1
 800fc60:	9305      	str	r3, [sp, #20]
 800fc62:	4619      	mov	r1, r3
 800fc64:	250a      	movs	r5, #10
 800fc66:	4638      	mov	r0, r7
 800fc68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc6c:	3a30      	subs	r2, #48	; 0x30
 800fc6e:	2a09      	cmp	r2, #9
 800fc70:	d903      	bls.n	800fc7a <_svfiprintf_r+0x196>
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d0c8      	beq.n	800fc08 <_svfiprintf_r+0x124>
 800fc76:	9105      	str	r1, [sp, #20]
 800fc78:	e7c6      	b.n	800fc08 <_svfiprintf_r+0x124>
 800fc7a:	fb05 2101 	mla	r1, r5, r1, r2
 800fc7e:	2301      	movs	r3, #1
 800fc80:	4607      	mov	r7, r0
 800fc82:	e7f0      	b.n	800fc66 <_svfiprintf_r+0x182>
 800fc84:	ab03      	add	r3, sp, #12
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	4622      	mov	r2, r4
 800fc8a:	4b11      	ldr	r3, [pc, #68]	; (800fcd0 <_svfiprintf_r+0x1ec>)
 800fc8c:	a904      	add	r1, sp, #16
 800fc8e:	4640      	mov	r0, r8
 800fc90:	f7fc f8d2 	bl	800be38 <_printf_float>
 800fc94:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fc98:	4681      	mov	r9, r0
 800fc9a:	d1d6      	bne.n	800fc4a <_svfiprintf_r+0x166>
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	065b      	lsls	r3, r3, #25
 800fca0:	f53f af35 	bmi.w	800fb0e <_svfiprintf_r+0x2a>
 800fca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fca6:	b01d      	add	sp, #116	; 0x74
 800fca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcac:	ab03      	add	r3, sp, #12
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	4622      	mov	r2, r4
 800fcb2:	4b07      	ldr	r3, [pc, #28]	; (800fcd0 <_svfiprintf_r+0x1ec>)
 800fcb4:	a904      	add	r1, sp, #16
 800fcb6:	4640      	mov	r0, r8
 800fcb8:	f7fc fb74 	bl	800c3a4 <_printf_i>
 800fcbc:	e7ea      	b.n	800fc94 <_svfiprintf_r+0x1b0>
 800fcbe:	bf00      	nop
 800fcc0:	0807691c 	.word	0x0807691c
 800fcc4:	08076922 	.word	0x08076922
 800fcc8:	08076926 	.word	0x08076926
 800fccc:	0800be39 	.word	0x0800be39
 800fcd0:	0800fa31 	.word	0x0800fa31

0800fcd4 <__sfputc_r>:
 800fcd4:	6893      	ldr	r3, [r2, #8]
 800fcd6:	3b01      	subs	r3, #1
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	b410      	push	{r4}
 800fcdc:	6093      	str	r3, [r2, #8]
 800fcde:	da08      	bge.n	800fcf2 <__sfputc_r+0x1e>
 800fce0:	6994      	ldr	r4, [r2, #24]
 800fce2:	42a3      	cmp	r3, r4
 800fce4:	db01      	blt.n	800fcea <__sfputc_r+0x16>
 800fce6:	290a      	cmp	r1, #10
 800fce8:	d103      	bne.n	800fcf2 <__sfputc_r+0x1e>
 800fcea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcee:	f7fd bdb1 	b.w	800d854 <__swbuf_r>
 800fcf2:	6813      	ldr	r3, [r2, #0]
 800fcf4:	1c58      	adds	r0, r3, #1
 800fcf6:	6010      	str	r0, [r2, #0]
 800fcf8:	7019      	strb	r1, [r3, #0]
 800fcfa:	4608      	mov	r0, r1
 800fcfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd00:	4770      	bx	lr

0800fd02 <__sfputs_r>:
 800fd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd04:	4606      	mov	r6, r0
 800fd06:	460f      	mov	r7, r1
 800fd08:	4614      	mov	r4, r2
 800fd0a:	18d5      	adds	r5, r2, r3
 800fd0c:	42ac      	cmp	r4, r5
 800fd0e:	d101      	bne.n	800fd14 <__sfputs_r+0x12>
 800fd10:	2000      	movs	r0, #0
 800fd12:	e007      	b.n	800fd24 <__sfputs_r+0x22>
 800fd14:	463a      	mov	r2, r7
 800fd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	f7ff ffda 	bl	800fcd4 <__sfputc_r>
 800fd20:	1c43      	adds	r3, r0, #1
 800fd22:	d1f3      	bne.n	800fd0c <__sfputs_r+0xa>
 800fd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd28 <_vfiprintf_r>:
 800fd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	b09d      	sub	sp, #116	; 0x74
 800fd30:	4617      	mov	r7, r2
 800fd32:	461d      	mov	r5, r3
 800fd34:	4606      	mov	r6, r0
 800fd36:	b118      	cbz	r0, 800fd40 <_vfiprintf_r+0x18>
 800fd38:	6983      	ldr	r3, [r0, #24]
 800fd3a:	b90b      	cbnz	r3, 800fd40 <_vfiprintf_r+0x18>
 800fd3c:	f7fe fd80 	bl	800e840 <__sinit>
 800fd40:	4b7c      	ldr	r3, [pc, #496]	; (800ff34 <_vfiprintf_r+0x20c>)
 800fd42:	429c      	cmp	r4, r3
 800fd44:	d158      	bne.n	800fdf8 <_vfiprintf_r+0xd0>
 800fd46:	6874      	ldr	r4, [r6, #4]
 800fd48:	89a3      	ldrh	r3, [r4, #12]
 800fd4a:	0718      	lsls	r0, r3, #28
 800fd4c:	d55e      	bpl.n	800fe0c <_vfiprintf_r+0xe4>
 800fd4e:	6923      	ldr	r3, [r4, #16]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d05b      	beq.n	800fe0c <_vfiprintf_r+0xe4>
 800fd54:	2300      	movs	r3, #0
 800fd56:	9309      	str	r3, [sp, #36]	; 0x24
 800fd58:	2320      	movs	r3, #32
 800fd5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd5e:	2330      	movs	r3, #48	; 0x30
 800fd60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd64:	9503      	str	r5, [sp, #12]
 800fd66:	f04f 0b01 	mov.w	fp, #1
 800fd6a:	46b8      	mov	r8, r7
 800fd6c:	4645      	mov	r5, r8
 800fd6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fd72:	b10b      	cbz	r3, 800fd78 <_vfiprintf_r+0x50>
 800fd74:	2b25      	cmp	r3, #37	; 0x25
 800fd76:	d154      	bne.n	800fe22 <_vfiprintf_r+0xfa>
 800fd78:	ebb8 0a07 	subs.w	sl, r8, r7
 800fd7c:	d00b      	beq.n	800fd96 <_vfiprintf_r+0x6e>
 800fd7e:	4653      	mov	r3, sl
 800fd80:	463a      	mov	r2, r7
 800fd82:	4621      	mov	r1, r4
 800fd84:	4630      	mov	r0, r6
 800fd86:	f7ff ffbc 	bl	800fd02 <__sfputs_r>
 800fd8a:	3001      	adds	r0, #1
 800fd8c:	f000 80c2 	beq.w	800ff14 <_vfiprintf_r+0x1ec>
 800fd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd92:	4453      	add	r3, sl
 800fd94:	9309      	str	r3, [sp, #36]	; 0x24
 800fd96:	f898 3000 	ldrb.w	r3, [r8]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	f000 80ba 	beq.w	800ff14 <_vfiprintf_r+0x1ec>
 800fda0:	2300      	movs	r3, #0
 800fda2:	f04f 32ff 	mov.w	r2, #4294967295
 800fda6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdaa:	9304      	str	r3, [sp, #16]
 800fdac:	9307      	str	r3, [sp, #28]
 800fdae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdb2:	931a      	str	r3, [sp, #104]	; 0x68
 800fdb4:	46a8      	mov	r8, r5
 800fdb6:	2205      	movs	r2, #5
 800fdb8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fdbc:	485e      	ldr	r0, [pc, #376]	; (800ff38 <_vfiprintf_r+0x210>)
 800fdbe:	f7f3 fecf 	bl	8003b60 <memchr>
 800fdc2:	9b04      	ldr	r3, [sp, #16]
 800fdc4:	bb78      	cbnz	r0, 800fe26 <_vfiprintf_r+0xfe>
 800fdc6:	06d9      	lsls	r1, r3, #27
 800fdc8:	bf44      	itt	mi
 800fdca:	2220      	movmi	r2, #32
 800fdcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fdd0:	071a      	lsls	r2, r3, #28
 800fdd2:	bf44      	itt	mi
 800fdd4:	222b      	movmi	r2, #43	; 0x2b
 800fdd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fdda:	782a      	ldrb	r2, [r5, #0]
 800fddc:	2a2a      	cmp	r2, #42	; 0x2a
 800fdde:	d02a      	beq.n	800fe36 <_vfiprintf_r+0x10e>
 800fde0:	9a07      	ldr	r2, [sp, #28]
 800fde2:	46a8      	mov	r8, r5
 800fde4:	2000      	movs	r0, #0
 800fde6:	250a      	movs	r5, #10
 800fde8:	4641      	mov	r1, r8
 800fdea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdee:	3b30      	subs	r3, #48	; 0x30
 800fdf0:	2b09      	cmp	r3, #9
 800fdf2:	d969      	bls.n	800fec8 <_vfiprintf_r+0x1a0>
 800fdf4:	b360      	cbz	r0, 800fe50 <_vfiprintf_r+0x128>
 800fdf6:	e024      	b.n	800fe42 <_vfiprintf_r+0x11a>
 800fdf8:	4b50      	ldr	r3, [pc, #320]	; (800ff3c <_vfiprintf_r+0x214>)
 800fdfa:	429c      	cmp	r4, r3
 800fdfc:	d101      	bne.n	800fe02 <_vfiprintf_r+0xda>
 800fdfe:	68b4      	ldr	r4, [r6, #8]
 800fe00:	e7a2      	b.n	800fd48 <_vfiprintf_r+0x20>
 800fe02:	4b4f      	ldr	r3, [pc, #316]	; (800ff40 <_vfiprintf_r+0x218>)
 800fe04:	429c      	cmp	r4, r3
 800fe06:	bf08      	it	eq
 800fe08:	68f4      	ldreq	r4, [r6, #12]
 800fe0a:	e79d      	b.n	800fd48 <_vfiprintf_r+0x20>
 800fe0c:	4621      	mov	r1, r4
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f7fd fd72 	bl	800d8f8 <__swsetup_r>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d09d      	beq.n	800fd54 <_vfiprintf_r+0x2c>
 800fe18:	f04f 30ff 	mov.w	r0, #4294967295
 800fe1c:	b01d      	add	sp, #116	; 0x74
 800fe1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe22:	46a8      	mov	r8, r5
 800fe24:	e7a2      	b.n	800fd6c <_vfiprintf_r+0x44>
 800fe26:	4a44      	ldr	r2, [pc, #272]	; (800ff38 <_vfiprintf_r+0x210>)
 800fe28:	1a80      	subs	r0, r0, r2
 800fe2a:	fa0b f000 	lsl.w	r0, fp, r0
 800fe2e:	4318      	orrs	r0, r3
 800fe30:	9004      	str	r0, [sp, #16]
 800fe32:	4645      	mov	r5, r8
 800fe34:	e7be      	b.n	800fdb4 <_vfiprintf_r+0x8c>
 800fe36:	9a03      	ldr	r2, [sp, #12]
 800fe38:	1d11      	adds	r1, r2, #4
 800fe3a:	6812      	ldr	r2, [r2, #0]
 800fe3c:	9103      	str	r1, [sp, #12]
 800fe3e:	2a00      	cmp	r2, #0
 800fe40:	db01      	blt.n	800fe46 <_vfiprintf_r+0x11e>
 800fe42:	9207      	str	r2, [sp, #28]
 800fe44:	e004      	b.n	800fe50 <_vfiprintf_r+0x128>
 800fe46:	4252      	negs	r2, r2
 800fe48:	f043 0302 	orr.w	r3, r3, #2
 800fe4c:	9207      	str	r2, [sp, #28]
 800fe4e:	9304      	str	r3, [sp, #16]
 800fe50:	f898 3000 	ldrb.w	r3, [r8]
 800fe54:	2b2e      	cmp	r3, #46	; 0x2e
 800fe56:	d10e      	bne.n	800fe76 <_vfiprintf_r+0x14e>
 800fe58:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fe5c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe5e:	d138      	bne.n	800fed2 <_vfiprintf_r+0x1aa>
 800fe60:	9b03      	ldr	r3, [sp, #12]
 800fe62:	1d1a      	adds	r2, r3, #4
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	9203      	str	r2, [sp, #12]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	bfb8      	it	lt
 800fe6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe70:	f108 0802 	add.w	r8, r8, #2
 800fe74:	9305      	str	r3, [sp, #20]
 800fe76:	4d33      	ldr	r5, [pc, #204]	; (800ff44 <_vfiprintf_r+0x21c>)
 800fe78:	f898 1000 	ldrb.w	r1, [r8]
 800fe7c:	2203      	movs	r2, #3
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f7f3 fe6e 	bl	8003b60 <memchr>
 800fe84:	b140      	cbz	r0, 800fe98 <_vfiprintf_r+0x170>
 800fe86:	2340      	movs	r3, #64	; 0x40
 800fe88:	1b40      	subs	r0, r0, r5
 800fe8a:	fa03 f000 	lsl.w	r0, r3, r0
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	4303      	orrs	r3, r0
 800fe92:	f108 0801 	add.w	r8, r8, #1
 800fe96:	9304      	str	r3, [sp, #16]
 800fe98:	f898 1000 	ldrb.w	r1, [r8]
 800fe9c:	482a      	ldr	r0, [pc, #168]	; (800ff48 <_vfiprintf_r+0x220>)
 800fe9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fea2:	2206      	movs	r2, #6
 800fea4:	f108 0701 	add.w	r7, r8, #1
 800fea8:	f7f3 fe5a 	bl	8003b60 <memchr>
 800feac:	2800      	cmp	r0, #0
 800feae:	d037      	beq.n	800ff20 <_vfiprintf_r+0x1f8>
 800feb0:	4b26      	ldr	r3, [pc, #152]	; (800ff4c <_vfiprintf_r+0x224>)
 800feb2:	bb1b      	cbnz	r3, 800fefc <_vfiprintf_r+0x1d4>
 800feb4:	9b03      	ldr	r3, [sp, #12]
 800feb6:	3307      	adds	r3, #7
 800feb8:	f023 0307 	bic.w	r3, r3, #7
 800febc:	3308      	adds	r3, #8
 800febe:	9303      	str	r3, [sp, #12]
 800fec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fec2:	444b      	add	r3, r9
 800fec4:	9309      	str	r3, [sp, #36]	; 0x24
 800fec6:	e750      	b.n	800fd6a <_vfiprintf_r+0x42>
 800fec8:	fb05 3202 	mla	r2, r5, r2, r3
 800fecc:	2001      	movs	r0, #1
 800fece:	4688      	mov	r8, r1
 800fed0:	e78a      	b.n	800fde8 <_vfiprintf_r+0xc0>
 800fed2:	2300      	movs	r3, #0
 800fed4:	f108 0801 	add.w	r8, r8, #1
 800fed8:	9305      	str	r3, [sp, #20]
 800feda:	4619      	mov	r1, r3
 800fedc:	250a      	movs	r5, #10
 800fede:	4640      	mov	r0, r8
 800fee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fee4:	3a30      	subs	r2, #48	; 0x30
 800fee6:	2a09      	cmp	r2, #9
 800fee8:	d903      	bls.n	800fef2 <_vfiprintf_r+0x1ca>
 800feea:	2b00      	cmp	r3, #0
 800feec:	d0c3      	beq.n	800fe76 <_vfiprintf_r+0x14e>
 800feee:	9105      	str	r1, [sp, #20]
 800fef0:	e7c1      	b.n	800fe76 <_vfiprintf_r+0x14e>
 800fef2:	fb05 2101 	mla	r1, r5, r1, r2
 800fef6:	2301      	movs	r3, #1
 800fef8:	4680      	mov	r8, r0
 800fefa:	e7f0      	b.n	800fede <_vfiprintf_r+0x1b6>
 800fefc:	ab03      	add	r3, sp, #12
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	4622      	mov	r2, r4
 800ff02:	4b13      	ldr	r3, [pc, #76]	; (800ff50 <_vfiprintf_r+0x228>)
 800ff04:	a904      	add	r1, sp, #16
 800ff06:	4630      	mov	r0, r6
 800ff08:	f7fb ff96 	bl	800be38 <_printf_float>
 800ff0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ff10:	4681      	mov	r9, r0
 800ff12:	d1d5      	bne.n	800fec0 <_vfiprintf_r+0x198>
 800ff14:	89a3      	ldrh	r3, [r4, #12]
 800ff16:	065b      	lsls	r3, r3, #25
 800ff18:	f53f af7e 	bmi.w	800fe18 <_vfiprintf_r+0xf0>
 800ff1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff1e:	e77d      	b.n	800fe1c <_vfiprintf_r+0xf4>
 800ff20:	ab03      	add	r3, sp, #12
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	4622      	mov	r2, r4
 800ff26:	4b0a      	ldr	r3, [pc, #40]	; (800ff50 <_vfiprintf_r+0x228>)
 800ff28:	a904      	add	r1, sp, #16
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	f7fc fa3a 	bl	800c3a4 <_printf_i>
 800ff30:	e7ec      	b.n	800ff0c <_vfiprintf_r+0x1e4>
 800ff32:	bf00      	nop
 800ff34:	080767d0 	.word	0x080767d0
 800ff38:	0807691c 	.word	0x0807691c
 800ff3c:	080767f0 	.word	0x080767f0
 800ff40:	080767b0 	.word	0x080767b0
 800ff44:	08076922 	.word	0x08076922
 800ff48:	08076926 	.word	0x08076926
 800ff4c:	0800be39 	.word	0x0800be39
 800ff50:	0800fd03 	.word	0x0800fd03

0800ff54 <_putc_r>:
 800ff54:	b570      	push	{r4, r5, r6, lr}
 800ff56:	460d      	mov	r5, r1
 800ff58:	4614      	mov	r4, r2
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	b118      	cbz	r0, 800ff66 <_putc_r+0x12>
 800ff5e:	6983      	ldr	r3, [r0, #24]
 800ff60:	b90b      	cbnz	r3, 800ff66 <_putc_r+0x12>
 800ff62:	f7fe fc6d 	bl	800e840 <__sinit>
 800ff66:	4b13      	ldr	r3, [pc, #76]	; (800ffb4 <_putc_r+0x60>)
 800ff68:	429c      	cmp	r4, r3
 800ff6a:	d112      	bne.n	800ff92 <_putc_r+0x3e>
 800ff6c:	6874      	ldr	r4, [r6, #4]
 800ff6e:	68a3      	ldr	r3, [r4, #8]
 800ff70:	3b01      	subs	r3, #1
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	60a3      	str	r3, [r4, #8]
 800ff76:	da16      	bge.n	800ffa6 <_putc_r+0x52>
 800ff78:	69a2      	ldr	r2, [r4, #24]
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	db02      	blt.n	800ff84 <_putc_r+0x30>
 800ff7e:	b2eb      	uxtb	r3, r5
 800ff80:	2b0a      	cmp	r3, #10
 800ff82:	d110      	bne.n	800ffa6 <_putc_r+0x52>
 800ff84:	4622      	mov	r2, r4
 800ff86:	4629      	mov	r1, r5
 800ff88:	4630      	mov	r0, r6
 800ff8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff8e:	f7fd bc61 	b.w	800d854 <__swbuf_r>
 800ff92:	4b09      	ldr	r3, [pc, #36]	; (800ffb8 <_putc_r+0x64>)
 800ff94:	429c      	cmp	r4, r3
 800ff96:	d101      	bne.n	800ff9c <_putc_r+0x48>
 800ff98:	68b4      	ldr	r4, [r6, #8]
 800ff9a:	e7e8      	b.n	800ff6e <_putc_r+0x1a>
 800ff9c:	4b07      	ldr	r3, [pc, #28]	; (800ffbc <_putc_r+0x68>)
 800ff9e:	429c      	cmp	r4, r3
 800ffa0:	bf08      	it	eq
 800ffa2:	68f4      	ldreq	r4, [r6, #12]
 800ffa4:	e7e3      	b.n	800ff6e <_putc_r+0x1a>
 800ffa6:	6823      	ldr	r3, [r4, #0]
 800ffa8:	1c5a      	adds	r2, r3, #1
 800ffaa:	6022      	str	r2, [r4, #0]
 800ffac:	701d      	strb	r5, [r3, #0]
 800ffae:	b2e8      	uxtb	r0, r5
 800ffb0:	bd70      	pop	{r4, r5, r6, pc}
 800ffb2:	bf00      	nop
 800ffb4:	080767d0 	.word	0x080767d0
 800ffb8:	080767f0 	.word	0x080767f0
 800ffbc:	080767b0 	.word	0x080767b0

0800ffc0 <_sbrk_r>:
 800ffc0:	b538      	push	{r3, r4, r5, lr}
 800ffc2:	4c06      	ldr	r4, [pc, #24]	; (800ffdc <_sbrk_r+0x1c>)
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	4608      	mov	r0, r1
 800ffca:	6023      	str	r3, [r4, #0]
 800ffcc:	f7fb fdc0 	bl	800bb50 <_sbrk>
 800ffd0:	1c43      	adds	r3, r0, #1
 800ffd2:	d102      	bne.n	800ffda <_sbrk_r+0x1a>
 800ffd4:	6823      	ldr	r3, [r4, #0]
 800ffd6:	b103      	cbz	r3, 800ffda <_sbrk_r+0x1a>
 800ffd8:	602b      	str	r3, [r5, #0]
 800ffda:	bd38      	pop	{r3, r4, r5, pc}
 800ffdc:	200103e8 	.word	0x200103e8

0800ffe0 <__sread>:
 800ffe0:	b510      	push	{r4, lr}
 800ffe2:	460c      	mov	r4, r1
 800ffe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffe8:	f000 f8f4 	bl	80101d4 <_read_r>
 800ffec:	2800      	cmp	r0, #0
 800ffee:	bfab      	itete	ge
 800fff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fff2:	89a3      	ldrhlt	r3, [r4, #12]
 800fff4:	181b      	addge	r3, r3, r0
 800fff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fffa:	bfac      	ite	ge
 800fffc:	6563      	strge	r3, [r4, #84]	; 0x54
 800fffe:	81a3      	strhlt	r3, [r4, #12]
 8010000:	bd10      	pop	{r4, pc}

08010002 <__swrite>:
 8010002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010006:	461f      	mov	r7, r3
 8010008:	898b      	ldrh	r3, [r1, #12]
 801000a:	05db      	lsls	r3, r3, #23
 801000c:	4605      	mov	r5, r0
 801000e:	460c      	mov	r4, r1
 8010010:	4616      	mov	r6, r2
 8010012:	d505      	bpl.n	8010020 <__swrite+0x1e>
 8010014:	2302      	movs	r3, #2
 8010016:	2200      	movs	r2, #0
 8010018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801001c:	f000 f886 	bl	801012c <_lseek_r>
 8010020:	89a3      	ldrh	r3, [r4, #12]
 8010022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801002a:	81a3      	strh	r3, [r4, #12]
 801002c:	4632      	mov	r2, r6
 801002e:	463b      	mov	r3, r7
 8010030:	4628      	mov	r0, r5
 8010032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010036:	f000 b835 	b.w	80100a4 <_write_r>

0801003a <__sseek>:
 801003a:	b510      	push	{r4, lr}
 801003c:	460c      	mov	r4, r1
 801003e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010042:	f000 f873 	bl	801012c <_lseek_r>
 8010046:	1c43      	adds	r3, r0, #1
 8010048:	89a3      	ldrh	r3, [r4, #12]
 801004a:	bf15      	itete	ne
 801004c:	6560      	strne	r0, [r4, #84]	; 0x54
 801004e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010056:	81a3      	strheq	r3, [r4, #12]
 8010058:	bf18      	it	ne
 801005a:	81a3      	strhne	r3, [r4, #12]
 801005c:	bd10      	pop	{r4, pc}

0801005e <__sclose>:
 801005e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010062:	f000 b831 	b.w	80100c8 <_close_r>

08010066 <strncmp>:
 8010066:	b510      	push	{r4, lr}
 8010068:	b16a      	cbz	r2, 8010086 <strncmp+0x20>
 801006a:	3901      	subs	r1, #1
 801006c:	1884      	adds	r4, r0, r2
 801006e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010072:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010076:	4293      	cmp	r3, r2
 8010078:	d103      	bne.n	8010082 <strncmp+0x1c>
 801007a:	42a0      	cmp	r0, r4
 801007c:	d001      	beq.n	8010082 <strncmp+0x1c>
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1f5      	bne.n	801006e <strncmp+0x8>
 8010082:	1a98      	subs	r0, r3, r2
 8010084:	bd10      	pop	{r4, pc}
 8010086:	4610      	mov	r0, r2
 8010088:	e7fc      	b.n	8010084 <strncmp+0x1e>

0801008a <__ascii_wctomb>:
 801008a:	b149      	cbz	r1, 80100a0 <__ascii_wctomb+0x16>
 801008c:	2aff      	cmp	r2, #255	; 0xff
 801008e:	bf85      	ittet	hi
 8010090:	238a      	movhi	r3, #138	; 0x8a
 8010092:	6003      	strhi	r3, [r0, #0]
 8010094:	700a      	strbls	r2, [r1, #0]
 8010096:	f04f 30ff 	movhi.w	r0, #4294967295
 801009a:	bf98      	it	ls
 801009c:	2001      	movls	r0, #1
 801009e:	4770      	bx	lr
 80100a0:	4608      	mov	r0, r1
 80100a2:	4770      	bx	lr

080100a4 <_write_r>:
 80100a4:	b538      	push	{r3, r4, r5, lr}
 80100a6:	4c07      	ldr	r4, [pc, #28]	; (80100c4 <_write_r+0x20>)
 80100a8:	4605      	mov	r5, r0
 80100aa:	4608      	mov	r0, r1
 80100ac:	4611      	mov	r1, r2
 80100ae:	2200      	movs	r2, #0
 80100b0:	6022      	str	r2, [r4, #0]
 80100b2:	461a      	mov	r2, r3
 80100b4:	f7fb fcfb 	bl	800baae <_write>
 80100b8:	1c43      	adds	r3, r0, #1
 80100ba:	d102      	bne.n	80100c2 <_write_r+0x1e>
 80100bc:	6823      	ldr	r3, [r4, #0]
 80100be:	b103      	cbz	r3, 80100c2 <_write_r+0x1e>
 80100c0:	602b      	str	r3, [r5, #0]
 80100c2:	bd38      	pop	{r3, r4, r5, pc}
 80100c4:	200103e8 	.word	0x200103e8

080100c8 <_close_r>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	4c06      	ldr	r4, [pc, #24]	; (80100e4 <_close_r+0x1c>)
 80100cc:	2300      	movs	r3, #0
 80100ce:	4605      	mov	r5, r0
 80100d0:	4608      	mov	r0, r1
 80100d2:	6023      	str	r3, [r4, #0]
 80100d4:	f7fb fd07 	bl	800bae6 <_close>
 80100d8:	1c43      	adds	r3, r0, #1
 80100da:	d102      	bne.n	80100e2 <_close_r+0x1a>
 80100dc:	6823      	ldr	r3, [r4, #0]
 80100de:	b103      	cbz	r3, 80100e2 <_close_r+0x1a>
 80100e0:	602b      	str	r3, [r5, #0]
 80100e2:	bd38      	pop	{r3, r4, r5, pc}
 80100e4:	200103e8 	.word	0x200103e8

080100e8 <_fstat_r>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	4c07      	ldr	r4, [pc, #28]	; (8010108 <_fstat_r+0x20>)
 80100ec:	2300      	movs	r3, #0
 80100ee:	4605      	mov	r5, r0
 80100f0:	4608      	mov	r0, r1
 80100f2:	4611      	mov	r1, r2
 80100f4:	6023      	str	r3, [r4, #0]
 80100f6:	f7fb fd02 	bl	800bafe <_fstat>
 80100fa:	1c43      	adds	r3, r0, #1
 80100fc:	d102      	bne.n	8010104 <_fstat_r+0x1c>
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	b103      	cbz	r3, 8010104 <_fstat_r+0x1c>
 8010102:	602b      	str	r3, [r5, #0]
 8010104:	bd38      	pop	{r3, r4, r5, pc}
 8010106:	bf00      	nop
 8010108:	200103e8 	.word	0x200103e8

0801010c <_isatty_r>:
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	4c06      	ldr	r4, [pc, #24]	; (8010128 <_isatty_r+0x1c>)
 8010110:	2300      	movs	r3, #0
 8010112:	4605      	mov	r5, r0
 8010114:	4608      	mov	r0, r1
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	f7fb fd01 	bl	800bb1e <_isatty>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_isatty_r+0x1a>
 8010120:	6823      	ldr	r3, [r4, #0]
 8010122:	b103      	cbz	r3, 8010126 <_isatty_r+0x1a>
 8010124:	602b      	str	r3, [r5, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	200103e8 	.word	0x200103e8

0801012c <_lseek_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4c07      	ldr	r4, [pc, #28]	; (801014c <_lseek_r+0x20>)
 8010130:	4605      	mov	r5, r0
 8010132:	4608      	mov	r0, r1
 8010134:	4611      	mov	r1, r2
 8010136:	2200      	movs	r2, #0
 8010138:	6022      	str	r2, [r4, #0]
 801013a:	461a      	mov	r2, r3
 801013c:	f7fb fcfa 	bl	800bb34 <_lseek>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_lseek_r+0x1e>
 8010144:	6823      	ldr	r3, [r4, #0]
 8010146:	b103      	cbz	r3, 801014a <_lseek_r+0x1e>
 8010148:	602b      	str	r3, [r5, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	200103e8 	.word	0x200103e8

08010150 <memmove>:
 8010150:	4288      	cmp	r0, r1
 8010152:	b510      	push	{r4, lr}
 8010154:	eb01 0302 	add.w	r3, r1, r2
 8010158:	d807      	bhi.n	801016a <memmove+0x1a>
 801015a:	1e42      	subs	r2, r0, #1
 801015c:	4299      	cmp	r1, r3
 801015e:	d00a      	beq.n	8010176 <memmove+0x26>
 8010160:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010164:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010168:	e7f8      	b.n	801015c <memmove+0xc>
 801016a:	4283      	cmp	r3, r0
 801016c:	d9f5      	bls.n	801015a <memmove+0xa>
 801016e:	1881      	adds	r1, r0, r2
 8010170:	1ad2      	subs	r2, r2, r3
 8010172:	42d3      	cmn	r3, r2
 8010174:	d100      	bne.n	8010178 <memmove+0x28>
 8010176:	bd10      	pop	{r4, pc}
 8010178:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801017c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010180:	e7f7      	b.n	8010172 <memmove+0x22>

08010182 <__malloc_lock>:
 8010182:	4770      	bx	lr

08010184 <__malloc_unlock>:
 8010184:	4770      	bx	lr

08010186 <_realloc_r>:
 8010186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010188:	4607      	mov	r7, r0
 801018a:	4614      	mov	r4, r2
 801018c:	460e      	mov	r6, r1
 801018e:	b921      	cbnz	r1, 801019a <_realloc_r+0x14>
 8010190:	4611      	mov	r1, r2
 8010192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010196:	f7ff bbf1 	b.w	800f97c <_malloc_r>
 801019a:	b922      	cbnz	r2, 80101a6 <_realloc_r+0x20>
 801019c:	f7ff fba0 	bl	800f8e0 <_free_r>
 80101a0:	4625      	mov	r5, r4
 80101a2:	4628      	mov	r0, r5
 80101a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101a6:	f000 f827 	bl	80101f8 <_malloc_usable_size_r>
 80101aa:	42a0      	cmp	r0, r4
 80101ac:	d20f      	bcs.n	80101ce <_realloc_r+0x48>
 80101ae:	4621      	mov	r1, r4
 80101b0:	4638      	mov	r0, r7
 80101b2:	f7ff fbe3 	bl	800f97c <_malloc_r>
 80101b6:	4605      	mov	r5, r0
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d0f2      	beq.n	80101a2 <_realloc_r+0x1c>
 80101bc:	4631      	mov	r1, r6
 80101be:	4622      	mov	r2, r4
 80101c0:	f7fb fd93 	bl	800bcea <memcpy>
 80101c4:	4631      	mov	r1, r6
 80101c6:	4638      	mov	r0, r7
 80101c8:	f7ff fb8a 	bl	800f8e0 <_free_r>
 80101cc:	e7e9      	b.n	80101a2 <_realloc_r+0x1c>
 80101ce:	4635      	mov	r5, r6
 80101d0:	e7e7      	b.n	80101a2 <_realloc_r+0x1c>
	...

080101d4 <_read_r>:
 80101d4:	b538      	push	{r3, r4, r5, lr}
 80101d6:	4c07      	ldr	r4, [pc, #28]	; (80101f4 <_read_r+0x20>)
 80101d8:	4605      	mov	r5, r0
 80101da:	4608      	mov	r0, r1
 80101dc:	4611      	mov	r1, r2
 80101de:	2200      	movs	r2, #0
 80101e0:	6022      	str	r2, [r4, #0]
 80101e2:	461a      	mov	r2, r3
 80101e4:	f7fb fc46 	bl	800ba74 <_read>
 80101e8:	1c43      	adds	r3, r0, #1
 80101ea:	d102      	bne.n	80101f2 <_read_r+0x1e>
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	b103      	cbz	r3, 80101f2 <_read_r+0x1e>
 80101f0:	602b      	str	r3, [r5, #0]
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	200103e8 	.word	0x200103e8

080101f8 <_malloc_usable_size_r>:
 80101f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101fc:	1f18      	subs	r0, r3, #4
 80101fe:	2b00      	cmp	r3, #0
 8010200:	bfbc      	itt	lt
 8010202:	580b      	ldrlt	r3, [r1, r0]
 8010204:	18c0      	addlt	r0, r0, r3
 8010206:	4770      	bx	lr

08010208 <tanhf>:
 8010208:	b510      	push	{r4, lr}
 801020a:	ee10 4a10 	vmov	r4, s0
 801020e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010212:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010216:	ed2d 8b02 	vpush	{d8}
 801021a:	eef0 7a40 	vmov.f32	s15, s0
 801021e:	db0c      	blt.n	801023a <tanhf+0x32>
 8010220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010224:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010228:	2c00      	cmp	r4, #0
 801022a:	bfac      	ite	ge
 801022c:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8010230:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8010234:	ecbd 8b02 	vpop	{d8}
 8010238:	bd10      	pop	{r4, pc}
 801023a:	4a1b      	ldr	r2, [pc, #108]	; (80102a8 <tanhf+0xa0>)
 801023c:	4293      	cmp	r3, r2
 801023e:	dc30      	bgt.n	80102a2 <tanhf+0x9a>
 8010240:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8010244:	da06      	bge.n	8010254 <tanhf+0x4c>
 8010246:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801024a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801024e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010252:	e7ef      	b.n	8010234 <tanhf+0x2c>
 8010254:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010258:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 801025c:	db12      	blt.n	8010284 <tanhf+0x7c>
 801025e:	f001 f837 	bl	80112d0 <fabsf>
 8010262:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010266:	f000 ff07 	bl	8011078 <expm1f>
 801026a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801026e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8010272:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010276:	ee30 0a67 	vsub.f32	s0, s0, s15
 801027a:	2c00      	cmp	r4, #0
 801027c:	bfb8      	it	lt
 801027e:	eeb1 0a40 	vneglt.f32	s0, s0
 8010282:	e7d7      	b.n	8010234 <tanhf+0x2c>
 8010284:	f001 f824 	bl	80112d0 <fabsf>
 8010288:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 801028c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010290:	f000 fef2 	bl	8011078 <expm1f>
 8010294:	ee70 7a08 	vadd.f32	s15, s0, s16
 8010298:	eeb1 7a40 	vneg.f32	s14, s0
 801029c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80102a0:	e7eb      	b.n	801027a <tanhf+0x72>
 80102a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80102a6:	e7e8      	b.n	801027a <tanhf+0x72>
 80102a8:	41afffff 	.word	0x41afffff

080102ac <expf>:
 80102ac:	b530      	push	{r4, r5, lr}
 80102ae:	ed2d 8b02 	vpush	{d8}
 80102b2:	4d35      	ldr	r5, [pc, #212]	; (8010388 <expf+0xdc>)
 80102b4:	b08b      	sub	sp, #44	; 0x2c
 80102b6:	eeb0 8a40 	vmov.f32	s16, s0
 80102ba:	f000 fa4b 	bl	8010754 <__ieee754_expf>
 80102be:	f995 3000 	ldrsb.w	r3, [r5]
 80102c2:	3301      	adds	r3, #1
 80102c4:	ee10 4a10 	vmov	r4, s0
 80102c8:	d030      	beq.n	801032c <expf+0x80>
 80102ca:	eeb0 0a48 	vmov.f32	s0, s16
 80102ce:	f001 f806 	bl	80112de <finitef>
 80102d2:	b358      	cbz	r0, 801032c <expf+0x80>
 80102d4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801038c <expf+0xe0>
 80102d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80102dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e0:	dd35      	ble.n	801034e <expf+0xa2>
 80102e2:	2303      	movs	r3, #3
 80102e4:	9300      	str	r3, [sp, #0]
 80102e6:	4b2a      	ldr	r3, [pc, #168]	; (8010390 <expf+0xe4>)
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	ee18 0a10 	vmov	r0, s16
 80102ee:	2300      	movs	r3, #0
 80102f0:	9308      	str	r3, [sp, #32]
 80102f2:	f7f3 fde9 	bl	8003ec8 <__aeabi_f2d>
 80102f6:	f995 3000 	ldrsb.w	r3, [r5]
 80102fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010302:	b9cb      	cbnz	r3, 8010338 <expf+0x8c>
 8010304:	4b23      	ldr	r3, [pc, #140]	; (8010394 <expf+0xe8>)
 8010306:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801030a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801030e:	4668      	mov	r0, sp
 8010310:	f000 fea5 	bl	801105e <matherr>
 8010314:	b1b0      	cbz	r0, 8010344 <expf+0x98>
 8010316:	9b08      	ldr	r3, [sp, #32]
 8010318:	b11b      	cbz	r3, 8010322 <expf+0x76>
 801031a:	f7fb fcad 	bl	800bc78 <__errno>
 801031e:	9b08      	ldr	r3, [sp, #32]
 8010320:	6003      	str	r3, [r0, #0]
 8010322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010326:	f7f4 f91f 	bl	8004568 <__aeabi_d2f>
 801032a:	4604      	mov	r4, r0
 801032c:	ee00 4a10 	vmov	s0, r4
 8010330:	b00b      	add	sp, #44	; 0x2c
 8010332:	ecbd 8b02 	vpop	{d8}
 8010336:	bd30      	pop	{r4, r5, pc}
 8010338:	4917      	ldr	r1, [pc, #92]	; (8010398 <expf+0xec>)
 801033a:	2000      	movs	r0, #0
 801033c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010340:	2b02      	cmp	r3, #2
 8010342:	d1e4      	bne.n	801030e <expf+0x62>
 8010344:	f7fb fc98 	bl	800bc78 <__errno>
 8010348:	2322      	movs	r3, #34	; 0x22
 801034a:	6003      	str	r3, [r0, #0]
 801034c:	e7e3      	b.n	8010316 <expf+0x6a>
 801034e:	eddf 7a13 	vldr	s15, [pc, #76]	; 801039c <expf+0xf0>
 8010352:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801035a:	d5e7      	bpl.n	801032c <expf+0x80>
 801035c:	2304      	movs	r3, #4
 801035e:	9300      	str	r3, [sp, #0]
 8010360:	4b0b      	ldr	r3, [pc, #44]	; (8010390 <expf+0xe4>)
 8010362:	9301      	str	r3, [sp, #4]
 8010364:	ee18 0a10 	vmov	r0, s16
 8010368:	2300      	movs	r3, #0
 801036a:	9308      	str	r3, [sp, #32]
 801036c:	f7f3 fdac 	bl	8003ec8 <__aeabi_f2d>
 8010370:	2300      	movs	r3, #0
 8010372:	2200      	movs	r2, #0
 8010374:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801037c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010380:	f995 3000 	ldrsb.w	r3, [r5]
 8010384:	e7dc      	b.n	8010340 <expf+0x94>
 8010386:	bf00      	nop
 8010388:	20000648 	.word	0x20000648
 801038c:	42b17180 	.word	0x42b17180
 8010390:	08076a2e 	.word	0x08076a2e
 8010394:	47efffff 	.word	0x47efffff
 8010398:	7ff00000 	.word	0x7ff00000
 801039c:	c2cff1b5 	.word	0xc2cff1b5

080103a0 <logf>:
 80103a0:	b510      	push	{r4, lr}
 80103a2:	ed2d 8b02 	vpush	{d8}
 80103a6:	b08a      	sub	sp, #40	; 0x28
 80103a8:	eeb0 8a40 	vmov.f32	s16, s0
 80103ac:	f000 faa6 	bl	80108fc <__ieee754_logf>
 80103b0:	4b31      	ldr	r3, [pc, #196]	; (8010478 <logf+0xd8>)
 80103b2:	f993 4000 	ldrsb.w	r4, [r3]
 80103b6:	1c63      	adds	r3, r4, #1
 80103b8:	d059      	beq.n	801046e <logf+0xce>
 80103ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80103be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c2:	d654      	bvs.n	801046e <logf+0xce>
 80103c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80103c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103cc:	dc4f      	bgt.n	801046e <logf+0xce>
 80103ce:	4b2b      	ldr	r3, [pc, #172]	; (801047c <logf+0xdc>)
 80103d0:	9301      	str	r3, [sp, #4]
 80103d2:	ee18 0a10 	vmov	r0, s16
 80103d6:	2300      	movs	r3, #0
 80103d8:	9308      	str	r3, [sp, #32]
 80103da:	f7f3 fd75 	bl	8003ec8 <__aeabi_f2d>
 80103de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103e6:	b994      	cbnz	r4, 801040e <logf+0x6e>
 80103e8:	4b25      	ldr	r3, [pc, #148]	; (8010480 <logf+0xe0>)
 80103ea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80103ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80103f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80103fa:	d025      	beq.n	8010448 <logf+0xa8>
 80103fc:	2301      	movs	r3, #1
 80103fe:	2c02      	cmp	r4, #2
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	d116      	bne.n	8010432 <logf+0x92>
 8010404:	f7fb fc38 	bl	800bc78 <__errno>
 8010408:	2321      	movs	r3, #33	; 0x21
 801040a:	6003      	str	r3, [r0, #0]
 801040c:	e016      	b.n	801043c <logf+0x9c>
 801040e:	4b1d      	ldr	r3, [pc, #116]	; (8010484 <logf+0xe4>)
 8010410:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010414:	2200      	movs	r2, #0
 8010416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801041a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801041e:	d1ed      	bne.n	80103fc <logf+0x5c>
 8010420:	2302      	movs	r3, #2
 8010422:	429c      	cmp	r4, r3
 8010424:	9300      	str	r3, [sp, #0]
 8010426:	d111      	bne.n	801044c <logf+0xac>
 8010428:	f7fb fc26 	bl	800bc78 <__errno>
 801042c:	2322      	movs	r3, #34	; 0x22
 801042e:	6003      	str	r3, [r0, #0]
 8010430:	e011      	b.n	8010456 <logf+0xb6>
 8010432:	4668      	mov	r0, sp
 8010434:	f000 fe13 	bl	801105e <matherr>
 8010438:	2800      	cmp	r0, #0
 801043a:	d0e3      	beq.n	8010404 <logf+0x64>
 801043c:	4812      	ldr	r0, [pc, #72]	; (8010488 <logf+0xe8>)
 801043e:	f000 fe13 	bl	8011068 <nan>
 8010442:	ed8d 0b06 	vstr	d0, [sp, #24]
 8010446:	e006      	b.n	8010456 <logf+0xb6>
 8010448:	2302      	movs	r3, #2
 801044a:	9300      	str	r3, [sp, #0]
 801044c:	4668      	mov	r0, sp
 801044e:	f000 fe06 	bl	801105e <matherr>
 8010452:	2800      	cmp	r0, #0
 8010454:	d0e8      	beq.n	8010428 <logf+0x88>
 8010456:	9b08      	ldr	r3, [sp, #32]
 8010458:	b11b      	cbz	r3, 8010462 <logf+0xc2>
 801045a:	f7fb fc0d 	bl	800bc78 <__errno>
 801045e:	9b08      	ldr	r3, [sp, #32]
 8010460:	6003      	str	r3, [r0, #0]
 8010462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010466:	f7f4 f87f 	bl	8004568 <__aeabi_d2f>
 801046a:	ee00 0a10 	vmov	s0, r0
 801046e:	b00a      	add	sp, #40	; 0x28
 8010470:	ecbd 8b02 	vpop	{d8}
 8010474:	bd10      	pop	{r4, pc}
 8010476:	bf00      	nop
 8010478:	20000648 	.word	0x20000648
 801047c:	08076a33 	.word	0x08076a33
 8010480:	c7efffff 	.word	0xc7efffff
 8010484:	fff00000 	.word	0xfff00000
 8010488:	08076921 	.word	0x08076921

0801048c <powf>:
 801048c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8010490:	ed2d 8b04 	vpush	{d8-d9}
 8010494:	4ca7      	ldr	r4, [pc, #668]	; (8010734 <powf+0x2a8>)
 8010496:	b08a      	sub	sp, #40	; 0x28
 8010498:	eef0 8a40 	vmov.f32	s17, s0
 801049c:	eeb0 8a60 	vmov.f32	s16, s1
 80104a0:	f000 fb1a 	bl	8010ad8 <__ieee754_powf>
 80104a4:	f994 5000 	ldrsb.w	r5, [r4]
 80104a8:	1c6b      	adds	r3, r5, #1
 80104aa:	eeb0 9a40 	vmov.f32	s18, s0
 80104ae:	4626      	mov	r6, r4
 80104b0:	d05f      	beq.n	8010572 <powf+0xe6>
 80104b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80104b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ba:	d65a      	bvs.n	8010572 <powf+0xe6>
 80104bc:	eef4 8a68 	vcmp.f32	s17, s17
 80104c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c4:	d721      	bvc.n	801050a <powf+0x7e>
 80104c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80104ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ce:	d150      	bne.n	8010572 <powf+0xe6>
 80104d0:	2301      	movs	r3, #1
 80104d2:	9300      	str	r3, [sp, #0]
 80104d4:	4b98      	ldr	r3, [pc, #608]	; (8010738 <powf+0x2ac>)
 80104d6:	9301      	str	r3, [sp, #4]
 80104d8:	ee18 0a90 	vmov	r0, s17
 80104dc:	2300      	movs	r3, #0
 80104de:	9308      	str	r3, [sp, #32]
 80104e0:	f7f3 fcf2 	bl	8003ec8 <__aeabi_f2d>
 80104e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104e8:	ee18 0a10 	vmov	r0, s16
 80104ec:	f7f3 fcec 	bl	8003ec8 <__aeabi_f2d>
 80104f0:	4b92      	ldr	r3, [pc, #584]	; (801073c <powf+0x2b0>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	2d02      	cmp	r5, #2
 80104f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80104fe:	d032      	beq.n	8010566 <powf+0xda>
 8010500:	4668      	mov	r0, sp
 8010502:	f000 fdac 	bl	801105e <matherr>
 8010506:	bb40      	cbnz	r0, 801055a <powf+0xce>
 8010508:	e065      	b.n	80105d6 <powf+0x14a>
 801050a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8010740 <powf+0x2b4>
 801050e:	eef4 8a69 	vcmp.f32	s17, s19
 8010512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010516:	d163      	bne.n	80105e0 <powf+0x154>
 8010518:	eeb4 8a69 	vcmp.f32	s16, s19
 801051c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010520:	d12e      	bne.n	8010580 <powf+0xf4>
 8010522:	2301      	movs	r3, #1
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	4b84      	ldr	r3, [pc, #528]	; (8010738 <powf+0x2ac>)
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	ee18 0a90 	vmov	r0, s17
 801052e:	2300      	movs	r3, #0
 8010530:	9308      	str	r3, [sp, #32]
 8010532:	f7f3 fcc9 	bl	8003ec8 <__aeabi_f2d>
 8010536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801053a:	ee18 0a10 	vmov	r0, s16
 801053e:	f7f3 fcc3 	bl	8003ec8 <__aeabi_f2d>
 8010542:	2200      	movs	r2, #0
 8010544:	2300      	movs	r3, #0
 8010546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801054a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801054e:	2d00      	cmp	r5, #0
 8010550:	d0d6      	beq.n	8010500 <powf+0x74>
 8010552:	4b7a      	ldr	r3, [pc, #488]	; (801073c <powf+0x2b0>)
 8010554:	2200      	movs	r2, #0
 8010556:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801055a:	9b08      	ldr	r3, [sp, #32]
 801055c:	b11b      	cbz	r3, 8010566 <powf+0xda>
 801055e:	f7fb fb8b 	bl	800bc78 <__errno>
 8010562:	9b08      	ldr	r3, [sp, #32]
 8010564:	6003      	str	r3, [r0, #0]
 8010566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801056a:	f7f3 fffd 	bl	8004568 <__aeabi_d2f>
 801056e:	ee09 0a10 	vmov	s18, r0
 8010572:	eeb0 0a49 	vmov.f32	s0, s18
 8010576:	b00a      	add	sp, #40	; 0x28
 8010578:	ecbd 8b04 	vpop	{d8-d9}
 801057c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8010580:	eeb0 0a48 	vmov.f32	s0, s16
 8010584:	f000 feab 	bl	80112de <finitef>
 8010588:	2800      	cmp	r0, #0
 801058a:	d0f2      	beq.n	8010572 <powf+0xe6>
 801058c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010594:	d5ed      	bpl.n	8010572 <powf+0xe6>
 8010596:	2301      	movs	r3, #1
 8010598:	9300      	str	r3, [sp, #0]
 801059a:	4b67      	ldr	r3, [pc, #412]	; (8010738 <powf+0x2ac>)
 801059c:	9301      	str	r3, [sp, #4]
 801059e:	ee18 0a90 	vmov	r0, s17
 80105a2:	2300      	movs	r3, #0
 80105a4:	9308      	str	r3, [sp, #32]
 80105a6:	f7f3 fc8f 	bl	8003ec8 <__aeabi_f2d>
 80105aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105ae:	ee18 0a10 	vmov	r0, s16
 80105b2:	f7f3 fc89 	bl	8003ec8 <__aeabi_f2d>
 80105b6:	f994 3000 	ldrsb.w	r3, [r4]
 80105ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105be:	b923      	cbnz	r3, 80105ca <powf+0x13e>
 80105c0:	2200      	movs	r2, #0
 80105c2:	2300      	movs	r3, #0
 80105c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80105c8:	e79a      	b.n	8010500 <powf+0x74>
 80105ca:	495e      	ldr	r1, [pc, #376]	; (8010744 <powf+0x2b8>)
 80105cc:	2000      	movs	r0, #0
 80105ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	d194      	bne.n	8010500 <powf+0x74>
 80105d6:	f7fb fb4f 	bl	800bc78 <__errno>
 80105da:	2321      	movs	r3, #33	; 0x21
 80105dc:	6003      	str	r3, [r0, #0]
 80105de:	e7bc      	b.n	801055a <powf+0xce>
 80105e0:	f000 fe7d 	bl	80112de <finitef>
 80105e4:	4605      	mov	r5, r0
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d173      	bne.n	80106d2 <powf+0x246>
 80105ea:	eeb0 0a68 	vmov.f32	s0, s17
 80105ee:	f000 fe76 	bl	80112de <finitef>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d06d      	beq.n	80106d2 <powf+0x246>
 80105f6:	eeb0 0a48 	vmov.f32	s0, s16
 80105fa:	f000 fe70 	bl	80112de <finitef>
 80105fe:	2800      	cmp	r0, #0
 8010600:	d067      	beq.n	80106d2 <powf+0x246>
 8010602:	ee18 0a90 	vmov	r0, s17
 8010606:	f7f3 fc5f 	bl	8003ec8 <__aeabi_f2d>
 801060a:	4680      	mov	r8, r0
 801060c:	ee18 0a10 	vmov	r0, s16
 8010610:	4689      	mov	r9, r1
 8010612:	f7f3 fc59 	bl	8003ec8 <__aeabi_f2d>
 8010616:	eeb4 9a49 	vcmp.f32	s18, s18
 801061a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801061e:	f994 4000 	ldrsb.w	r4, [r4]
 8010622:	4b45      	ldr	r3, [pc, #276]	; (8010738 <powf+0x2ac>)
 8010624:	d713      	bvc.n	801064e <powf+0x1c2>
 8010626:	2201      	movs	r2, #1
 8010628:	e9cd 2300 	strd	r2, r3, [sp]
 801062c:	9508      	str	r5, [sp, #32]
 801062e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010632:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010636:	2c00      	cmp	r4, #0
 8010638:	d0c2      	beq.n	80105c0 <powf+0x134>
 801063a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801063e:	ee17 0a90 	vmov	r0, s15
 8010642:	f7f3 fc41 	bl	8003ec8 <__aeabi_f2d>
 8010646:	2c02      	cmp	r4, #2
 8010648:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801064c:	e7c2      	b.n	80105d4 <powf+0x148>
 801064e:	2203      	movs	r2, #3
 8010650:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010654:	e9cd 2300 	strd	r2, r3, [sp]
 8010658:	9508      	str	r5, [sp, #32]
 801065a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801065e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010662:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010666:	b9fc      	cbnz	r4, 80106a8 <powf+0x21c>
 8010668:	4b37      	ldr	r3, [pc, #220]	; (8010748 <powf+0x2bc>)
 801066a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801066e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010676:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801067a:	d553      	bpl.n	8010724 <powf+0x298>
 801067c:	eeb0 0a48 	vmov.f32	s0, s16
 8010680:	f000 fe38 	bl	80112f4 <rintf>
 8010684:	eeb4 0a48 	vcmp.f32	s0, s16
 8010688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801068c:	d004      	beq.n	8010698 <powf+0x20c>
 801068e:	4b2f      	ldr	r3, [pc, #188]	; (801074c <powf+0x2c0>)
 8010690:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010698:	f996 3000 	ldrsb.w	r3, [r6]
 801069c:	2b02      	cmp	r3, #2
 801069e:	d141      	bne.n	8010724 <powf+0x298>
 80106a0:	f7fb faea 	bl	800bc78 <__errno>
 80106a4:	2322      	movs	r3, #34	; 0x22
 80106a6:	e799      	b.n	80105dc <powf+0x150>
 80106a8:	4b29      	ldr	r3, [pc, #164]	; (8010750 <powf+0x2c4>)
 80106aa:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80106ae:	2200      	movs	r2, #0
 80106b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80106b8:	d5ee      	bpl.n	8010698 <powf+0x20c>
 80106ba:	eeb0 0a48 	vmov.f32	s0, s16
 80106be:	f000 fe19 	bl	80112f4 <rintf>
 80106c2:	eeb4 0a48 	vcmp.f32	s0, s16
 80106c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ca:	d0e5      	beq.n	8010698 <powf+0x20c>
 80106cc:	2200      	movs	r2, #0
 80106ce:	4b1d      	ldr	r3, [pc, #116]	; (8010744 <powf+0x2b8>)
 80106d0:	e7e0      	b.n	8010694 <powf+0x208>
 80106d2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80106d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106da:	f47f af4a 	bne.w	8010572 <powf+0xe6>
 80106de:	eeb0 0a68 	vmov.f32	s0, s17
 80106e2:	f000 fdfc 	bl	80112de <finitef>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	f43f af43 	beq.w	8010572 <powf+0xe6>
 80106ec:	eeb0 0a48 	vmov.f32	s0, s16
 80106f0:	f000 fdf5 	bl	80112de <finitef>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	f43f af3c 	beq.w	8010572 <powf+0xe6>
 80106fa:	2304      	movs	r3, #4
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	4b0e      	ldr	r3, [pc, #56]	; (8010738 <powf+0x2ac>)
 8010700:	9301      	str	r3, [sp, #4]
 8010702:	ee18 0a90 	vmov	r0, s17
 8010706:	2300      	movs	r3, #0
 8010708:	9308      	str	r3, [sp, #32]
 801070a:	f7f3 fbdd 	bl	8003ec8 <__aeabi_f2d>
 801070e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010712:	ee18 0a10 	vmov	r0, s16
 8010716:	f7f3 fbd7 	bl	8003ec8 <__aeabi_f2d>
 801071a:	2200      	movs	r2, #0
 801071c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010720:	2300      	movs	r3, #0
 8010722:	e7b7      	b.n	8010694 <powf+0x208>
 8010724:	4668      	mov	r0, sp
 8010726:	f000 fc9a 	bl	801105e <matherr>
 801072a:	2800      	cmp	r0, #0
 801072c:	f47f af15 	bne.w	801055a <powf+0xce>
 8010730:	e7b6      	b.n	80106a0 <powf+0x214>
 8010732:	bf00      	nop
 8010734:	20000648 	.word	0x20000648
 8010738:	08076a38 	.word	0x08076a38
 801073c:	3ff00000 	.word	0x3ff00000
 8010740:	00000000 	.word	0x00000000
 8010744:	fff00000 	.word	0xfff00000
 8010748:	47efffff 	.word	0x47efffff
 801074c:	c7efffff 	.word	0xc7efffff
 8010750:	7ff00000 	.word	0x7ff00000

08010754 <__ieee754_expf>:
 8010754:	ee10 2a10 	vmov	r2, s0
 8010758:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801075c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010760:	d902      	bls.n	8010768 <__ieee754_expf+0x14>
 8010762:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010766:	4770      	bx	lr
 8010768:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801076c:	d106      	bne.n	801077c <__ieee754_expf+0x28>
 801076e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80108b4 <__ieee754_expf+0x160>
 8010772:	2b00      	cmp	r3, #0
 8010774:	bf18      	it	ne
 8010776:	eeb0 0a67 	vmovne.f32	s0, s15
 801077a:	4770      	bx	lr
 801077c:	484e      	ldr	r0, [pc, #312]	; (80108b8 <__ieee754_expf+0x164>)
 801077e:	4282      	cmp	r2, r0
 8010780:	dd04      	ble.n	801078c <__ieee754_expf+0x38>
 8010782:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80108bc <__ieee754_expf+0x168>
 8010786:	ee20 0a00 	vmul.f32	s0, s0, s0
 801078a:	4770      	bx	lr
 801078c:	2a00      	cmp	r2, #0
 801078e:	da03      	bge.n	8010798 <__ieee754_expf+0x44>
 8010790:	4a4b      	ldr	r2, [pc, #300]	; (80108c0 <__ieee754_expf+0x16c>)
 8010792:	4291      	cmp	r1, r2
 8010794:	f200 808a 	bhi.w	80108ac <__ieee754_expf+0x158>
 8010798:	4a4a      	ldr	r2, [pc, #296]	; (80108c4 <__ieee754_expf+0x170>)
 801079a:	4291      	cmp	r1, r2
 801079c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80107a0:	d954      	bls.n	801084c <__ieee754_expf+0xf8>
 80107a2:	4a49      	ldr	r2, [pc, #292]	; (80108c8 <__ieee754_expf+0x174>)
 80107a4:	4291      	cmp	r1, r2
 80107a6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80107aa:	d836      	bhi.n	801081a <__ieee754_expf+0xc6>
 80107ac:	4947      	ldr	r1, [pc, #284]	; (80108cc <__ieee754_expf+0x178>)
 80107ae:	4411      	add	r1, r2
 80107b0:	ed91 7a00 	vldr	s14, [r1]
 80107b4:	4946      	ldr	r1, [pc, #280]	; (80108d0 <__ieee754_expf+0x17c>)
 80107b6:	440a      	add	r2, r1
 80107b8:	edd2 7a00 	vldr	s15, [r2]
 80107bc:	ee30 7a47 	vsub.f32	s14, s0, s14
 80107c0:	f1c3 0201 	rsb	r2, r3, #1
 80107c4:	1ad2      	subs	r2, r2, r3
 80107c6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80107ca:	ee60 6a00 	vmul.f32	s13, s0, s0
 80107ce:	eddf 5a41 	vldr	s11, [pc, #260]	; 80108d4 <__ieee754_expf+0x180>
 80107d2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80108d8 <__ieee754_expf+0x184>
 80107d6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80107da:	eddf 5a40 	vldr	s11, [pc, #256]	; 80108dc <__ieee754_expf+0x188>
 80107de:	eee5 5a26 	vfma.f32	s11, s10, s13
 80107e2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80108e0 <__ieee754_expf+0x18c>
 80107e6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80107ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80108e4 <__ieee754_expf+0x190>
 80107ee:	eee5 5a26 	vfma.f32	s11, s10, s13
 80107f2:	eeb0 5a40 	vmov.f32	s10, s0
 80107f6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80107fa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80107fe:	eef0 6a45 	vmov.f32	s13, s10
 8010802:	ee20 5a05 	vmul.f32	s10, s0, s10
 8010806:	bb92      	cbnz	r2, 801086e <__ieee754_expf+0x11a>
 8010808:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801080c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010810:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010814:	ee36 0a40 	vsub.f32	s0, s12, s0
 8010818:	4770      	bx	lr
 801081a:	4b33      	ldr	r3, [pc, #204]	; (80108e8 <__ieee754_expf+0x194>)
 801081c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80108ec <__ieee754_expf+0x198>
 8010820:	4413      	add	r3, r2
 8010822:	edd3 7a00 	vldr	s15, [r3]
 8010826:	eee0 7a07 	vfma.f32	s15, s0, s14
 801082a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80108f0 <__ieee754_expf+0x19c>
 801082e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010832:	ee17 2a90 	vmov	r2, s15
 8010836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801083a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801083e:	eeb0 7a40 	vmov.f32	s14, s0
 8010842:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80108f4 <__ieee754_expf+0x1a0>
 8010846:	ee67 7a80 	vmul.f32	s15, s15, s0
 801084a:	e7bc      	b.n	80107c6 <__ieee754_expf+0x72>
 801084c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8010850:	d20b      	bcs.n	801086a <__ieee754_expf+0x116>
 8010852:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80108bc <__ieee754_expf+0x168>
 8010856:	ee70 6a26 	vadd.f32	s13, s0, s13
 801085a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010862:	dd02      	ble.n	801086a <__ieee754_expf+0x116>
 8010864:	ee30 0a06 	vadd.f32	s0, s0, s12
 8010868:	4770      	bx	lr
 801086a:	2200      	movs	r2, #0
 801086c:	e7ad      	b.n	80107ca <__ieee754_expf+0x76>
 801086e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010872:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8010876:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801087a:	bfb8      	it	lt
 801087c:	3264      	addlt	r2, #100	; 0x64
 801087e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010882:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010886:	ee76 7a40 	vsub.f32	s15, s12, s0
 801088a:	ee17 3a90 	vmov	r3, s15
 801088e:	bfab      	itete	ge
 8010890:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010894:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010898:	ee00 3a10 	vmovge	s0, r3
 801089c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80108f8 <__ieee754_expf+0x1a4>
 80108a0:	bfbc      	itt	lt
 80108a2:	ee00 3a10 	vmovlt	s0, r3
 80108a6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80108aa:	4770      	bx	lr
 80108ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80108b4 <__ieee754_expf+0x160>
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	00000000 	.word	0x00000000
 80108b8:	42b17217 	.word	0x42b17217
 80108bc:	7149f2ca 	.word	0x7149f2ca
 80108c0:	42cff1b5 	.word	0x42cff1b5
 80108c4:	3eb17218 	.word	0x3eb17218
 80108c8:	3f851591 	.word	0x3f851591
 80108cc:	08076a48 	.word	0x08076a48
 80108d0:	08076a50 	.word	0x08076a50
 80108d4:	3331bb4c 	.word	0x3331bb4c
 80108d8:	b5ddea0e 	.word	0xb5ddea0e
 80108dc:	388ab355 	.word	0x388ab355
 80108e0:	bb360b61 	.word	0xbb360b61
 80108e4:	3e2aaaab 	.word	0x3e2aaaab
 80108e8:	08076a40 	.word	0x08076a40
 80108ec:	3fb8aa3b 	.word	0x3fb8aa3b
 80108f0:	3f317180 	.word	0x3f317180
 80108f4:	3717f7d1 	.word	0x3717f7d1
 80108f8:	0d800000 	.word	0x0d800000

080108fc <__ieee754_logf>:
 80108fc:	ee10 3a10 	vmov	r3, s0
 8010900:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010904:	d106      	bne.n	8010914 <__ieee754_logf+0x18>
 8010906:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8010a9c <__ieee754_logf+0x1a0>
 801090a:	eddf 7a65 	vldr	s15, [pc, #404]	; 8010aa0 <__ieee754_logf+0x1a4>
 801090e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010912:	4770      	bx	lr
 8010914:	2b00      	cmp	r3, #0
 8010916:	da02      	bge.n	801091e <__ieee754_logf+0x22>
 8010918:	ee30 7a40 	vsub.f32	s14, s0, s0
 801091c:	e7f5      	b.n	801090a <__ieee754_logf+0xe>
 801091e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010922:	db02      	blt.n	801092a <__ieee754_logf+0x2e>
 8010924:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010928:	4770      	bx	lr
 801092a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801092e:	bfbf      	itttt	lt
 8010930:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8010aa4 <__ieee754_logf+0x1a8>
 8010934:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8010938:	f06f 0118 	mvnlt.w	r1, #24
 801093c:	ee17 3a90 	vmovlt	r3, s15
 8010940:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8010944:	bfa8      	it	ge
 8010946:	2100      	movge	r1, #0
 8010948:	3a7f      	subs	r2, #127	; 0x7f
 801094a:	440a      	add	r2, r1
 801094c:	4956      	ldr	r1, [pc, #344]	; (8010aa8 <__ieee754_logf+0x1ac>)
 801094e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010952:	4419      	add	r1, r3
 8010954:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8010958:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 801095c:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8010960:	4319      	orrs	r1, r3
 8010962:	ee07 1a90 	vmov	s15, r1
 8010966:	f103 010f 	add.w	r1, r3, #15
 801096a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 801096e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010972:	290f      	cmp	r1, #15
 8010974:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010978:	dc31      	bgt.n	80109de <__ieee754_logf+0xe2>
 801097a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010982:	d10f      	bne.n	80109a4 <__ieee754_logf+0xa8>
 8010984:	2a00      	cmp	r2, #0
 8010986:	f000 8085 	beq.w	8010a94 <__ieee754_logf+0x198>
 801098a:	ee07 2a90 	vmov	s15, r2
 801098e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8010aac <__ieee754_logf+0x1b0>
 8010992:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8010ab0 <__ieee754_logf+0x1b4>
 8010996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801099a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801099e:	eea7 0a87 	vfma.f32	s0, s15, s14
 80109a2:	4770      	bx	lr
 80109a4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8010ab4 <__ieee754_logf+0x1b8>
 80109a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80109ac:	eea0 7a67 	vfms.f32	s14, s0, s15
 80109b0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80109b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80109b8:	b912      	cbnz	r2, 80109c0 <__ieee754_logf+0xc4>
 80109ba:	ee30 0a47 	vsub.f32	s0, s0, s14
 80109be:	4770      	bx	lr
 80109c0:	ee07 2a90 	vmov	s15, r2
 80109c4:	eddf 6a39 	vldr	s13, [pc, #228]	; 8010aac <__ieee754_logf+0x1b0>
 80109c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109cc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80109d0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80109d4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010ab0 <__ieee754_logf+0x1b4>
 80109d8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80109dc:	4770      	bx	lr
 80109de:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80109e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80109e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010ab8 <__ieee754_logf+0x1bc>
 80109ea:	eddf 4a34 	vldr	s9, [pc, #208]	; 8010abc <__ieee754_logf+0x1c0>
 80109ee:	4934      	ldr	r1, [pc, #208]	; (8010ac0 <__ieee754_logf+0x1c4>)
 80109f0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80109f4:	4419      	add	r1, r3
 80109f6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80109fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80109fe:	430b      	orrs	r3, r1
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	ee07 2a90 	vmov	s15, r2
 8010a06:	ee26 5a06 	vmul.f32	s10, s12, s12
 8010a0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010a0e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8010a12:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8010ac4 <__ieee754_logf+0x1c8>
 8010a16:	eee7 7a25 	vfma.f32	s15, s14, s11
 8010a1a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8010ac8 <__ieee754_logf+0x1cc>
 8010a1e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010a22:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8010acc <__ieee754_logf+0x1d0>
 8010a26:	eee7 7a24 	vfma.f32	s15, s14, s9
 8010a2a:	eddf 4a29 	vldr	s9, [pc, #164]	; 8010ad0 <__ieee754_logf+0x1d4>
 8010a2e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8010a32:	eddf 7a28 	vldr	s15, [pc, #160]	; 8010ad4 <__ieee754_logf+0x1d8>
 8010a36:	eee4 7a87 	vfma.f32	s15, s9, s14
 8010a3a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010a3e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010a42:	dd1c      	ble.n	8010a7e <__ieee754_logf+0x182>
 8010a44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010a48:	ee20 7a07 	vmul.f32	s14, s0, s14
 8010a4c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a58:	b922      	cbnz	r2, 8010a64 <__ieee754_logf+0x168>
 8010a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010a62:	4770      	bx	lr
 8010a64:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8010aac <__ieee754_logf+0x1b0>
 8010a68:	eee6 7a86 	vfma.f32	s15, s13, s12
 8010a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a70:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010a74:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8010ab0 <__ieee754_logf+0x1b4>
 8010a78:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8010a7c:	4770      	bx	lr
 8010a7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010a82:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a86:	2a00      	cmp	r2, #0
 8010a88:	d0e9      	beq.n	8010a5e <__ieee754_logf+0x162>
 8010a8a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010aac <__ieee754_logf+0x1b0>
 8010a8e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010a92:	e7ed      	b.n	8010a70 <__ieee754_logf+0x174>
 8010a94:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8010aa0 <__ieee754_logf+0x1a4>
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	cc000000 	.word	0xcc000000
 8010aa0:	00000000 	.word	0x00000000
 8010aa4:	4c000000 	.word	0x4c000000
 8010aa8:	004afb20 	.word	0x004afb20
 8010aac:	3717f7d1 	.word	0x3717f7d1
 8010ab0:	3f317180 	.word	0x3f317180
 8010ab4:	3eaaaaab 	.word	0x3eaaaaab
 8010ab8:	3e1cd04f 	.word	0x3e1cd04f
 8010abc:	3e178897 	.word	0x3e178897
 8010ac0:	ffcf5c30 	.word	0xffcf5c30
 8010ac4:	3e638e29 	.word	0x3e638e29
 8010ac8:	3ecccccd 	.word	0x3ecccccd
 8010acc:	3e3a3325 	.word	0x3e3a3325
 8010ad0:	3e924925 	.word	0x3e924925
 8010ad4:	3f2aaaab 	.word	0x3f2aaaab

08010ad8 <__ieee754_powf>:
 8010ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010adc:	ee10 5a90 	vmov	r5, s1
 8010ae0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8010ae4:	ed2d 8b02 	vpush	{d8}
 8010ae8:	eeb0 8a40 	vmov.f32	s16, s0
 8010aec:	eef0 8a60 	vmov.f32	s17, s1
 8010af0:	f000 8293 	beq.w	801101a <__ieee754_powf+0x542>
 8010af4:	ee10 8a10 	vmov	r8, s0
 8010af8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8010afc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010b00:	dc06      	bgt.n	8010b10 <__ieee754_powf+0x38>
 8010b02:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8010b06:	dd0a      	ble.n	8010b1e <__ieee754_powf+0x46>
 8010b08:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8010b0c:	f000 8285 	beq.w	801101a <__ieee754_powf+0x542>
 8010b10:	ecbd 8b02 	vpop	{d8}
 8010b14:	48d9      	ldr	r0, [pc, #868]	; (8010e7c <__ieee754_powf+0x3a4>)
 8010b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b1a:	f7fb bfc7 	b.w	800caac <nanf>
 8010b1e:	f1b8 0f00 	cmp.w	r8, #0
 8010b22:	da1d      	bge.n	8010b60 <__ieee754_powf+0x88>
 8010b24:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8010b28:	da2c      	bge.n	8010b84 <__ieee754_powf+0xac>
 8010b2a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010b2e:	db30      	blt.n	8010b92 <__ieee754_powf+0xba>
 8010b30:	15fb      	asrs	r3, r7, #23
 8010b32:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010b36:	fa47 f603 	asr.w	r6, r7, r3
 8010b3a:	fa06 f303 	lsl.w	r3, r6, r3
 8010b3e:	42bb      	cmp	r3, r7
 8010b40:	d127      	bne.n	8010b92 <__ieee754_powf+0xba>
 8010b42:	f006 0601 	and.w	r6, r6, #1
 8010b46:	f1c6 0602 	rsb	r6, r6, #2
 8010b4a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8010b4e:	d122      	bne.n	8010b96 <__ieee754_powf+0xbe>
 8010b50:	2d00      	cmp	r5, #0
 8010b52:	f280 8268 	bge.w	8011026 <__ieee754_powf+0x54e>
 8010b56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010b5a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010b5e:	e00d      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010b60:	2600      	movs	r6, #0
 8010b62:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8010b66:	d1f0      	bne.n	8010b4a <__ieee754_powf+0x72>
 8010b68:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8010b6c:	f000 8255 	beq.w	801101a <__ieee754_powf+0x542>
 8010b70:	dd0a      	ble.n	8010b88 <__ieee754_powf+0xb0>
 8010b72:	2d00      	cmp	r5, #0
 8010b74:	f280 8254 	bge.w	8011020 <__ieee754_powf+0x548>
 8010b78:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8010e80 <__ieee754_powf+0x3a8>
 8010b7c:	ecbd 8b02 	vpop	{d8}
 8010b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b84:	2602      	movs	r6, #2
 8010b86:	e7ec      	b.n	8010b62 <__ieee754_powf+0x8a>
 8010b88:	2d00      	cmp	r5, #0
 8010b8a:	daf5      	bge.n	8010b78 <__ieee754_powf+0xa0>
 8010b8c:	eeb1 0a68 	vneg.f32	s0, s17
 8010b90:	e7f4      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010b92:	2600      	movs	r6, #0
 8010b94:	e7d9      	b.n	8010b4a <__ieee754_powf+0x72>
 8010b96:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8010b9a:	d102      	bne.n	8010ba2 <__ieee754_powf+0xca>
 8010b9c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010ba0:	e7ec      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010ba2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8010ba6:	eeb0 0a48 	vmov.f32	s0, s16
 8010baa:	d108      	bne.n	8010bbe <__ieee754_powf+0xe6>
 8010bac:	f1b8 0f00 	cmp.w	r8, #0
 8010bb0:	db05      	blt.n	8010bbe <__ieee754_powf+0xe6>
 8010bb2:	ecbd 8b02 	vpop	{d8}
 8010bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bba:	f000 ba4d 	b.w	8011058 <__ieee754_sqrtf>
 8010bbe:	f000 fb87 	bl	80112d0 <fabsf>
 8010bc2:	b124      	cbz	r4, 8010bce <__ieee754_powf+0xf6>
 8010bc4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8010bc8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010bcc:	d117      	bne.n	8010bfe <__ieee754_powf+0x126>
 8010bce:	2d00      	cmp	r5, #0
 8010bd0:	bfbc      	itt	lt
 8010bd2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8010bd6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010bda:	f1b8 0f00 	cmp.w	r8, #0
 8010bde:	dacd      	bge.n	8010b7c <__ieee754_powf+0xa4>
 8010be0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8010be4:	ea54 0306 	orrs.w	r3, r4, r6
 8010be8:	d104      	bne.n	8010bf4 <__ieee754_powf+0x11c>
 8010bea:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010bee:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010bf2:	e7c3      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010bf4:	2e01      	cmp	r6, #1
 8010bf6:	d1c1      	bne.n	8010b7c <__ieee754_powf+0xa4>
 8010bf8:	eeb1 0a40 	vneg.f32	s0, s0
 8010bfc:	e7be      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010bfe:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8010c02:	3801      	subs	r0, #1
 8010c04:	ea56 0300 	orrs.w	r3, r6, r0
 8010c08:	d104      	bne.n	8010c14 <__ieee754_powf+0x13c>
 8010c0a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010c0e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010c12:	e7b3      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010c14:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8010c18:	dd6d      	ble.n	8010cf6 <__ieee754_powf+0x21e>
 8010c1a:	4b9a      	ldr	r3, [pc, #616]	; (8010e84 <__ieee754_powf+0x3ac>)
 8010c1c:	429c      	cmp	r4, r3
 8010c1e:	dc06      	bgt.n	8010c2e <__ieee754_powf+0x156>
 8010c20:	2d00      	cmp	r5, #0
 8010c22:	daa9      	bge.n	8010b78 <__ieee754_powf+0xa0>
 8010c24:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8010e88 <__ieee754_powf+0x3b0>
 8010c28:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010c2c:	e7a6      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010c2e:	4b97      	ldr	r3, [pc, #604]	; (8010e8c <__ieee754_powf+0x3b4>)
 8010c30:	429c      	cmp	r4, r3
 8010c32:	dd02      	ble.n	8010c3a <__ieee754_powf+0x162>
 8010c34:	2d00      	cmp	r5, #0
 8010c36:	dcf5      	bgt.n	8010c24 <__ieee754_powf+0x14c>
 8010c38:	e79e      	b.n	8010b78 <__ieee754_powf+0xa0>
 8010c3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010c3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010c42:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8010e90 <__ieee754_powf+0x3b8>
 8010c46:	eef1 6a40 	vneg.f32	s13, s0
 8010c4a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010c4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c56:	eee7 7a40 	vfms.f32	s15, s14, s0
 8010c5a:	ee60 0a00 	vmul.f32	s1, s0, s0
 8010c5e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8010e94 <__ieee754_powf+0x3bc>
 8010c62:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8010c66:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8010e98 <__ieee754_powf+0x3c0>
 8010c6a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8010c6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010c72:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8010e9c <__ieee754_powf+0x3c4>
 8010c76:	eeb0 6a67 	vmov.f32	s12, s15
 8010c7a:	eea0 6a07 	vfma.f32	s12, s0, s14
 8010c7e:	ee16 3a10 	vmov	r3, s12
 8010c82:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010c86:	f023 030f 	bic.w	r3, r3, #15
 8010c8a:	ee00 3a90 	vmov	s1, r3
 8010c8e:	eee6 0a87 	vfma.f32	s1, s13, s14
 8010c92:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010c96:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8010c9a:	f025 050f 	bic.w	r5, r5, #15
 8010c9e:	ee07 5a10 	vmov	s14, r5
 8010ca2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010ca6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8010caa:	ee07 3a90 	vmov	s15, r3
 8010cae:	eee7 0a27 	vfma.f32	s1, s14, s15
 8010cb2:	3e01      	subs	r6, #1
 8010cb4:	ea56 0200 	orrs.w	r2, r6, r0
 8010cb8:	ee07 5a10 	vmov	s14, r5
 8010cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010cc0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010cc4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010cc8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010ccc:	ee17 4a10 	vmov	r4, s14
 8010cd0:	bf08      	it	eq
 8010cd2:	eeb0 8a40 	vmoveq.f32	s16, s0
 8010cd6:	2c00      	cmp	r4, #0
 8010cd8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010cdc:	f340 8184 	ble.w	8010fe8 <__ieee754_powf+0x510>
 8010ce0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8010ce4:	f340 80fc 	ble.w	8010ee0 <__ieee754_powf+0x408>
 8010ce8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8010e88 <__ieee754_powf+0x3b0>
 8010cec:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010cf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010cf4:	e742      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010cf6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8010cfa:	bfbf      	itttt	lt
 8010cfc:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8010ea0 <__ieee754_powf+0x3c8>
 8010d00:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8010d04:	f06f 0217 	mvnlt.w	r2, #23
 8010d08:	ee17 4a90 	vmovlt	r4, s15
 8010d0c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8010d10:	bfa8      	it	ge
 8010d12:	2200      	movge	r2, #0
 8010d14:	3b7f      	subs	r3, #127	; 0x7f
 8010d16:	4413      	add	r3, r2
 8010d18:	4a62      	ldr	r2, [pc, #392]	; (8010ea4 <__ieee754_powf+0x3cc>)
 8010d1a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8010d1e:	4294      	cmp	r4, r2
 8010d20:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8010d24:	dd06      	ble.n	8010d34 <__ieee754_powf+0x25c>
 8010d26:	4a60      	ldr	r2, [pc, #384]	; (8010ea8 <__ieee754_powf+0x3d0>)
 8010d28:	4294      	cmp	r4, r2
 8010d2a:	f340 80a5 	ble.w	8010e78 <__ieee754_powf+0x3a0>
 8010d2e:	3301      	adds	r3, #1
 8010d30:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010d34:	2400      	movs	r4, #0
 8010d36:	4a5d      	ldr	r2, [pc, #372]	; (8010eac <__ieee754_powf+0x3d4>)
 8010d38:	00a7      	lsls	r7, r4, #2
 8010d3a:	443a      	add	r2, r7
 8010d3c:	ee07 1a90 	vmov	s15, r1
 8010d40:	ed92 7a00 	vldr	s14, [r2]
 8010d44:	4a5a      	ldr	r2, [pc, #360]	; (8010eb0 <__ieee754_powf+0x3d8>)
 8010d46:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010d4a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010d4e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8010d52:	1049      	asrs	r1, r1, #1
 8010d54:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8010d58:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8010d5c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8010d60:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8010d64:	ee06 1a10 	vmov	s12, r1
 8010d68:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8010d6c:	ee14 ca90 	vmov	ip, s9
 8010d70:	ea02 0c0c 	and.w	ip, r2, ip
 8010d74:	ee05 ca10 	vmov	s10, ip
 8010d78:	eeb1 4a45 	vneg.f32	s8, s10
 8010d7c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8010d80:	ee36 6a47 	vsub.f32	s12, s12, s14
 8010d84:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010eb4 <__ieee754_powf+0x3dc>
 8010d88:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8010d8c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8010d90:	eee4 5a06 	vfma.f32	s11, s8, s12
 8010d94:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8010d98:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8010d9c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8010eb8 <__ieee754_powf+0x3e0>
 8010da0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010da4:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010ebc <__ieee754_powf+0x3e4>
 8010da8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010dac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010e90 <__ieee754_powf+0x3b8>
 8010db0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010db4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8010ec0 <__ieee754_powf+0x3e8>
 8010db8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010dbc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8010ec4 <__ieee754_powf+0x3ec>
 8010dc0:	ee75 6a24 	vadd.f32	s13, s10, s9
 8010dc4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010dc8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010dcc:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8010dd0:	eef0 7a65 	vmov.f32	s15, s11
 8010dd4:	eee3 6a87 	vfma.f32	s13, s7, s14
 8010dd8:	eee5 7a05 	vfma.f32	s15, s10, s10
 8010ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010de0:	ee17 1a90 	vmov	r1, s15
 8010de4:	4011      	ands	r1, r2
 8010de6:	ee07 1a90 	vmov	s15, r1
 8010dea:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8010dee:	eddf 5a36 	vldr	s11, [pc, #216]	; 8010ec8 <__ieee754_powf+0x3f0>
 8010df2:	eea4 7a05 	vfma.f32	s14, s8, s10
 8010df6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010dfa:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010dfe:	eea7 7a86 	vfma.f32	s14, s15, s12
 8010e02:	eeb0 6a47 	vmov.f32	s12, s14
 8010e06:	eea5 6a27 	vfma.f32	s12, s10, s15
 8010e0a:	ee16 1a10 	vmov	r1, s12
 8010e0e:	4011      	ands	r1, r2
 8010e10:	ee06 1a90 	vmov	s13, r1
 8010e14:	eee4 6a27 	vfma.f32	s13, s8, s15
 8010e18:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8010ecc <__ieee754_powf+0x3f4>
 8010e1c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010e20:	ee06 1a10 	vmov	s12, r1
 8010e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e28:	eddf 7a29 	vldr	s15, [pc, #164]	; 8010ed0 <__ieee754_powf+0x3f8>
 8010e2c:	4929      	ldr	r1, [pc, #164]	; (8010ed4 <__ieee754_powf+0x3fc>)
 8010e2e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010e32:	4439      	add	r1, r7
 8010e34:	edd1 7a00 	vldr	s15, [r1]
 8010e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e3c:	ee07 3a90 	vmov	s15, r3
 8010e40:	eef0 0a47 	vmov.f32	s1, s14
 8010e44:	4b24      	ldr	r3, [pc, #144]	; (8010ed8 <__ieee754_powf+0x400>)
 8010e46:	eee6 0a25 	vfma.f32	s1, s12, s11
 8010e4a:	443b      	add	r3, r7
 8010e4c:	ed93 5a00 	vldr	s10, [r3]
 8010e50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010e54:	ee70 0a85 	vadd.f32	s1, s1, s10
 8010e58:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8010e5c:	ee17 3a90 	vmov	r3, s15
 8010e60:	4013      	ands	r3, r2
 8010e62:	ee07 3a90 	vmov	s15, r3
 8010e66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010e6a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8010e6e:	eee6 7a65 	vfms.f32	s15, s12, s11
 8010e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e76:	e70e      	b.n	8010c96 <__ieee754_powf+0x1be>
 8010e78:	2401      	movs	r4, #1
 8010e7a:	e75c      	b.n	8010d36 <__ieee754_powf+0x25e>
 8010e7c:	08076921 	.word	0x08076921
 8010e80:	00000000 	.word	0x00000000
 8010e84:	3f7ffff7 	.word	0x3f7ffff7
 8010e88:	7149f2ca 	.word	0x7149f2ca
 8010e8c:	3f800007 	.word	0x3f800007
 8010e90:	3eaaaaab 	.word	0x3eaaaaab
 8010e94:	36eca570 	.word	0x36eca570
 8010e98:	3fb8aa3b 	.word	0x3fb8aa3b
 8010e9c:	3fb8aa00 	.word	0x3fb8aa00
 8010ea0:	4b800000 	.word	0x4b800000
 8010ea4:	001cc471 	.word	0x001cc471
 8010ea8:	005db3d6 	.word	0x005db3d6
 8010eac:	08076a58 	.word	0x08076a58
 8010eb0:	fffff000 	.word	0xfffff000
 8010eb4:	3e6c3255 	.word	0x3e6c3255
 8010eb8:	3e53f142 	.word	0x3e53f142
 8010ebc:	3e8ba305 	.word	0x3e8ba305
 8010ec0:	3edb6db7 	.word	0x3edb6db7
 8010ec4:	3f19999a 	.word	0x3f19999a
 8010ec8:	3f763800 	.word	0x3f763800
 8010ecc:	3f76384f 	.word	0x3f76384f
 8010ed0:	369dc3a0 	.word	0x369dc3a0
 8010ed4:	08076a68 	.word	0x08076a68
 8010ed8:	08076a60 	.word	0x08076a60
 8010edc:	3338aa3c 	.word	0x3338aa3c
 8010ee0:	f040 8092 	bne.w	8011008 <__ieee754_powf+0x530>
 8010ee4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8010edc <__ieee754_powf+0x404>
 8010ee8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010eec:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010ef0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef8:	f73f aef6 	bgt.w	8010ce8 <__ieee754_powf+0x210>
 8010efc:	15db      	asrs	r3, r3, #23
 8010efe:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8010f02:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010f06:	4103      	asrs	r3, r0
 8010f08:	4423      	add	r3, r4
 8010f0a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010f0e:	4947      	ldr	r1, [pc, #284]	; (801102c <__ieee754_powf+0x554>)
 8010f10:	3a7f      	subs	r2, #127	; 0x7f
 8010f12:	4111      	asrs	r1, r2
 8010f14:	ea23 0101 	bic.w	r1, r3, r1
 8010f18:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8010f1c:	ee07 1a10 	vmov	s14, r1
 8010f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010f24:	f1c2 0217 	rsb	r2, r2, #23
 8010f28:	4110      	asrs	r0, r2
 8010f2a:	2c00      	cmp	r4, #0
 8010f2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f30:	bfb8      	it	lt
 8010f32:	4240      	neglt	r0, r0
 8010f34:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010f38:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011030 <__ieee754_powf+0x558>
 8010f3c:	ee17 3a10 	vmov	r3, s14
 8010f40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010f44:	f023 030f 	bic.w	r3, r3, #15
 8010f48:	ee07 3a10 	vmov	s14, r3
 8010f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f50:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010f54:	eddf 7a37 	vldr	s15, [pc, #220]	; 8011034 <__ieee754_powf+0x55c>
 8010f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f5c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8010f60:	eddf 6a35 	vldr	s13, [pc, #212]	; 8011038 <__ieee754_powf+0x560>
 8010f64:	eeb0 0a67 	vmov.f32	s0, s15
 8010f68:	eea7 0a26 	vfma.f32	s0, s14, s13
 8010f6c:	eeb0 6a40 	vmov.f32	s12, s0
 8010f70:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010f74:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010f78:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010f7c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801103c <__ieee754_powf+0x564>
 8010f80:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8011040 <__ieee754_powf+0x568>
 8010f84:	eea7 6a26 	vfma.f32	s12, s14, s13
 8010f88:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8011044 <__ieee754_powf+0x56c>
 8010f8c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010f90:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8011048 <__ieee754_powf+0x570>
 8010f94:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010f98:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801104c <__ieee754_powf+0x574>
 8010f9c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010fa0:	eeb0 6a40 	vmov.f32	s12, s0
 8010fa4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010fa8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010fac:	eeb0 7a46 	vmov.f32	s14, s12
 8010fb0:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010fb4:	ee20 6a06 	vmul.f32	s12, s0, s12
 8010fb8:	eee0 7a27 	vfma.f32	s15, s0, s15
 8010fbc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fc4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010fc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010fcc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010fd0:	ee10 3a10 	vmov	r3, s0
 8010fd4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010fd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010fdc:	da1a      	bge.n	8011014 <__ieee754_powf+0x53c>
 8010fde:	f000 f9e3 	bl	80113a8 <scalbnf>
 8010fe2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010fe6:	e5c9      	b.n	8010b7c <__ieee754_powf+0xa4>
 8010fe8:	4a19      	ldr	r2, [pc, #100]	; (8011050 <__ieee754_powf+0x578>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	dd02      	ble.n	8010ff4 <__ieee754_powf+0x51c>
 8010fee:	eddf 7a19 	vldr	s15, [pc, #100]	; 8011054 <__ieee754_powf+0x57c>
 8010ff2:	e67b      	b.n	8010cec <__ieee754_powf+0x214>
 8010ff4:	d108      	bne.n	8011008 <__ieee754_powf+0x530>
 8010ff6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ffa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	f6ff af7b 	blt.w	8010efc <__ieee754_powf+0x424>
 8011006:	e7f2      	b.n	8010fee <__ieee754_powf+0x516>
 8011008:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801100c:	f73f af76 	bgt.w	8010efc <__ieee754_powf+0x424>
 8011010:	2000      	movs	r0, #0
 8011012:	e78f      	b.n	8010f34 <__ieee754_powf+0x45c>
 8011014:	ee00 3a10 	vmov	s0, r3
 8011018:	e7e3      	b.n	8010fe2 <__ieee754_powf+0x50a>
 801101a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801101e:	e5ad      	b.n	8010b7c <__ieee754_powf+0xa4>
 8011020:	eeb0 0a68 	vmov.f32	s0, s17
 8011024:	e5aa      	b.n	8010b7c <__ieee754_powf+0xa4>
 8011026:	eeb0 0a48 	vmov.f32	s0, s16
 801102a:	e5a7      	b.n	8010b7c <__ieee754_powf+0xa4>
 801102c:	007fffff 	.word	0x007fffff
 8011030:	3f317218 	.word	0x3f317218
 8011034:	35bfbe8c 	.word	0x35bfbe8c
 8011038:	3f317200 	.word	0x3f317200
 801103c:	3331bb4c 	.word	0x3331bb4c
 8011040:	b5ddea0e 	.word	0xb5ddea0e
 8011044:	388ab355 	.word	0x388ab355
 8011048:	bb360b61 	.word	0xbb360b61
 801104c:	3e2aaaab 	.word	0x3e2aaaab
 8011050:	43160000 	.word	0x43160000
 8011054:	0da24260 	.word	0x0da24260

08011058 <__ieee754_sqrtf>:
 8011058:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801105c:	4770      	bx	lr

0801105e <matherr>:
 801105e:	2000      	movs	r0, #0
 8011060:	4770      	bx	lr
 8011062:	0000      	movs	r0, r0
 8011064:	0000      	movs	r0, r0
	...

08011068 <nan>:
 8011068:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011070 <nan+0x8>
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	00000000 	.word	0x00000000
 8011074:	7ff80000 	.word	0x7ff80000

08011078 <expm1f>:
 8011078:	ee10 2a10 	vmov	r2, s0
 801107c:	4985      	ldr	r1, [pc, #532]	; (8011294 <expm1f+0x21c>)
 801107e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011082:	428b      	cmp	r3, r1
 8011084:	d924      	bls.n	80110d0 <expm1f+0x58>
 8011086:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801108a:	d902      	bls.n	8011092 <expm1f+0x1a>
 801108c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011090:	4770      	bx	lr
 8011092:	d106      	bne.n	80110a2 <expm1f+0x2a>
 8011094:	2a00      	cmp	r2, #0
 8011096:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801109a:	bfb8      	it	lt
 801109c:	eeb0 0a67 	vmovlt.f32	s0, s15
 80110a0:	4770      	bx	lr
 80110a2:	2a00      	cmp	r2, #0
 80110a4:	db08      	blt.n	80110b8 <expm1f+0x40>
 80110a6:	4a7c      	ldr	r2, [pc, #496]	; (8011298 <expm1f+0x220>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	f240 80eb 	bls.w	8011284 <expm1f+0x20c>
 80110ae:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 801129c <expm1f+0x224>
 80110b2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80110b6:	4770      	bx	lr
 80110b8:	eddf 7a79 	vldr	s15, [pc, #484]	; 80112a0 <expm1f+0x228>
 80110bc:	ee70 7a27 	vadd.f32	s15, s0, s15
 80110c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80110c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c8:	d554      	bpl.n	8011174 <expm1f+0xfc>
 80110ca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80110ce:	4770      	bx	lr
 80110d0:	4974      	ldr	r1, [pc, #464]	; (80112a4 <expm1f+0x22c>)
 80110d2:	428b      	cmp	r3, r1
 80110d4:	d96d      	bls.n	80111b2 <expm1f+0x13a>
 80110d6:	4974      	ldr	r1, [pc, #464]	; (80112a8 <expm1f+0x230>)
 80110d8:	428b      	cmp	r3, r1
 80110da:	d84b      	bhi.n	8011174 <expm1f+0xfc>
 80110dc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80112ac <expm1f+0x234>
 80110e0:	2a00      	cmp	r2, #0
 80110e2:	bfa7      	ittee	ge
 80110e4:	ee30 7a47 	vsubge.f32	s14, s0, s14
 80110e8:	eddf 7a71 	vldrge	s15, [pc, #452]	; 80112b0 <expm1f+0x238>
 80110ec:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 80112b4 <expm1f+0x23c>
 80110f0:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 80110f4:	bfac      	ite	ge
 80110f6:	2301      	movge	r3, #1
 80110f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80110fc:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011100:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011108:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801110c:	ee20 5a25 	vmul.f32	s10, s0, s11
 8011110:	eddf 6a69 	vldr	s13, [pc, #420]	; 80112b8 <expm1f+0x240>
 8011114:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80112bc <expm1f+0x244>
 8011118:	ee20 7a05 	vmul.f32	s14, s0, s10
 801111c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8011120:	eddf 6a67 	vldr	s13, [pc, #412]	; 80112c0 <expm1f+0x248>
 8011124:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011128:	ed9f 6a66 	vldr	s12, [pc, #408]	; 80112c4 <expm1f+0x24c>
 801112c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8011130:	eddf 6a65 	vldr	s13, [pc, #404]	; 80112c8 <expm1f+0x250>
 8011134:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011138:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801113c:	eef0 4a46 	vmov.f32	s9, s12
 8011140:	eee6 4a87 	vfma.f32	s9, s13, s14
 8011144:	eef0 6a64 	vmov.f32	s13, s9
 8011148:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801114c:	eee5 4a66 	vfms.f32	s9, s10, s13
 8011150:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8011154:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8011158:	eee0 6a64 	vfms.f32	s13, s0, s9
 801115c:	eef0 4a66 	vmov.f32	s9, s13
 8011160:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8011164:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011168:	bb8b      	cbnz	r3, 80111ce <expm1f+0x156>
 801116a:	eef0 7a47 	vmov.f32	s15, s14
 801116e:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8011172:	e027      	b.n	80111c4 <expm1f+0x14c>
 8011174:	eddf 7a55 	vldr	s15, [pc, #340]	; 80112cc <expm1f+0x254>
 8011178:	2a00      	cmp	r2, #0
 801117a:	ee20 7a27 	vmul.f32	s14, s0, s15
 801117e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011182:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011186:	bfa8      	it	ge
 8011188:	eef0 7a66 	vmovge.f32	s15, s13
 801118c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011190:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80112ac <expm1f+0x234>
 8011194:	eddf 6a46 	vldr	s13, [pc, #280]	; 80112b0 <expm1f+0x238>
 8011198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801119c:	ee17 3a90 	vmov	r3, s15
 80111a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111a4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80111a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80111ac:	eeb0 7a40 	vmov.f32	s14, s0
 80111b0:	e7a4      	b.n	80110fc <expm1f+0x84>
 80111b2:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80111b6:	d208      	bcs.n	80111ca <expm1f+0x152>
 80111b8:	eddf 7a38 	vldr	s15, [pc, #224]	; 801129c <expm1f+0x224>
 80111bc:	ee70 7a27 	vadd.f32	s15, s0, s15
 80111c0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80111c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80111c8:	4770      	bx	lr
 80111ca:	2300      	movs	r3, #0
 80111cc:	e79c      	b.n	8011108 <expm1f+0x90>
 80111ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80111d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111dc:	d106      	bne.n	80111ec <expm1f+0x174>
 80111de:	ee70 7a67 	vsub.f32	s15, s0, s15
 80111e2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80111e6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80111ea:	4770      	bx	lr
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d118      	bne.n	8011222 <expm1f+0x1aa>
 80111f0:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 80111f4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80111f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fc:	bf41      	itttt	mi
 80111fe:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8011202:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8011206:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 801120a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 801120e:	bf5f      	itttt	pl
 8011210:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8011214:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8011218:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 801121c:	eeb0 0a46 	vmovpl.f32	s0, s12
 8011220:	4770      	bx	lr
 8011222:	1c5a      	adds	r2, r3, #1
 8011224:	2a39      	cmp	r2, #57	; 0x39
 8011226:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801122a:	d90b      	bls.n	8011244 <expm1f+0x1cc>
 801122c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011230:	ee36 0a40 	vsub.f32	s0, s12, s0
 8011234:	ee10 3a10 	vmov	r3, s0
 8011238:	440b      	add	r3, r1
 801123a:	ee00 3a10 	vmov	s0, r3
 801123e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8011242:	4770      	bx	lr
 8011244:	2b16      	cmp	r3, #22
 8011246:	dc11      	bgt.n	801126c <expm1f+0x1f4>
 8011248:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801124c:	fa42 f303 	asr.w	r3, r2, r3
 8011250:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8011254:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011258:	ee07 3a90 	vmov	s15, r3
 801125c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011260:	ee10 3a10 	vmov	r3, s0
 8011264:	440b      	add	r3, r1
 8011266:	ee00 3a10 	vmov	s0, r3
 801126a:	4770      	bx	lr
 801126c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8011270:	05db      	lsls	r3, r3, #23
 8011272:	ee07 3a10 	vmov	s14, r3
 8011276:	ee77 7a87 	vadd.f32	s15, s15, s14
 801127a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801127e:	ee30 0a06 	vadd.f32	s0, s0, s12
 8011282:	e7ed      	b.n	8011260 <expm1f+0x1e8>
 8011284:	eddf 7a11 	vldr	s15, [pc, #68]	; 80112cc <expm1f+0x254>
 8011288:	ee20 7a27 	vmul.f32	s14, s0, s15
 801128c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011290:	e77c      	b.n	801118c <expm1f+0x114>
 8011292:	bf00      	nop
 8011294:	4195b843 	.word	0x4195b843
 8011298:	42b17217 	.word	0x42b17217
 801129c:	7149f2ca 	.word	0x7149f2ca
 80112a0:	0da24260 	.word	0x0da24260
 80112a4:	3eb17218 	.word	0x3eb17218
 80112a8:	3f851591 	.word	0x3f851591
 80112ac:	3f317180 	.word	0x3f317180
 80112b0:	3717f7d1 	.word	0x3717f7d1
 80112b4:	b717f7d1 	.word	0xb717f7d1
 80112b8:	b457edbb 	.word	0xb457edbb
 80112bc:	36867e54 	.word	0x36867e54
 80112c0:	b8a670cd 	.word	0xb8a670cd
 80112c4:	3ad00d01 	.word	0x3ad00d01
 80112c8:	bd088889 	.word	0xbd088889
 80112cc:	3fb8aa3b 	.word	0x3fb8aa3b

080112d0 <fabsf>:
 80112d0:	ee10 3a10 	vmov	r3, s0
 80112d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112d8:	ee00 3a10 	vmov	s0, r3
 80112dc:	4770      	bx	lr

080112de <finitef>:
 80112de:	ee10 3a10 	vmov	r3, s0
 80112e2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80112e6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80112ea:	bfac      	ite	ge
 80112ec:	2000      	movge	r0, #0
 80112ee:	2001      	movlt	r0, #1
 80112f0:	4770      	bx	lr
	...

080112f4 <rintf>:
 80112f4:	b513      	push	{r0, r1, r4, lr}
 80112f6:	ee10 1a10 	vmov	r1, s0
 80112fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80112fe:	0ddc      	lsrs	r4, r3, #23
 8011300:	3c7f      	subs	r4, #127	; 0x7f
 8011302:	2c16      	cmp	r4, #22
 8011304:	dc46      	bgt.n	8011394 <rintf+0xa0>
 8011306:	b32b      	cbz	r3, 8011354 <rintf+0x60>
 8011308:	2c00      	cmp	r4, #0
 801130a:	ee10 2a10 	vmov	r2, s0
 801130e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8011312:	da21      	bge.n	8011358 <rintf+0x64>
 8011314:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8011318:	425b      	negs	r3, r3
 801131a:	4a21      	ldr	r2, [pc, #132]	; (80113a0 <rintf+0xac>)
 801131c:	0a5b      	lsrs	r3, r3, #9
 801131e:	0d09      	lsrs	r1, r1, #20
 8011320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011324:	0509      	lsls	r1, r1, #20
 8011326:	430b      	orrs	r3, r1
 8011328:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801132c:	ee07 3a90 	vmov	s15, r3
 8011330:	edd2 6a00 	vldr	s13, [r2]
 8011334:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8011338:	ed8d 7a01 	vstr	s14, [sp, #4]
 801133c:	eddd 7a01 	vldr	s15, [sp, #4]
 8011340:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011344:	ee17 3a90 	vmov	r3, s15
 8011348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801134c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8011350:	ee00 3a10 	vmov	s0, r3
 8011354:	b002      	add	sp, #8
 8011356:	bd10      	pop	{r4, pc}
 8011358:	4b12      	ldr	r3, [pc, #72]	; (80113a4 <rintf+0xb0>)
 801135a:	4123      	asrs	r3, r4
 801135c:	4219      	tst	r1, r3
 801135e:	d0f9      	beq.n	8011354 <rintf+0x60>
 8011360:	085b      	lsrs	r3, r3, #1
 8011362:	4219      	tst	r1, r3
 8011364:	d006      	beq.n	8011374 <rintf+0x80>
 8011366:	ea21 0203 	bic.w	r2, r1, r3
 801136a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801136e:	fa43 f404 	asr.w	r4, r3, r4
 8011372:	4322      	orrs	r2, r4
 8011374:	4b0a      	ldr	r3, [pc, #40]	; (80113a0 <rintf+0xac>)
 8011376:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801137a:	ed90 7a00 	vldr	s14, [r0]
 801137e:	ee07 2a90 	vmov	s15, r2
 8011382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011386:	edcd 7a01 	vstr	s15, [sp, #4]
 801138a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801138e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011392:	e7df      	b.n	8011354 <rintf+0x60>
 8011394:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011398:	d3dc      	bcc.n	8011354 <rintf+0x60>
 801139a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801139e:	e7d9      	b.n	8011354 <rintf+0x60>
 80113a0:	08076a70 	.word	0x08076a70
 80113a4:	007fffff 	.word	0x007fffff

080113a8 <scalbnf>:
 80113a8:	b508      	push	{r3, lr}
 80113aa:	ee10 2a10 	vmov	r2, s0
 80113ae:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80113b2:	ed2d 8b02 	vpush	{d8}
 80113b6:	eef0 0a40 	vmov.f32	s1, s0
 80113ba:	d004      	beq.n	80113c6 <scalbnf+0x1e>
 80113bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80113c0:	d306      	bcc.n	80113d0 <scalbnf+0x28>
 80113c2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80113c6:	ecbd 8b02 	vpop	{d8}
 80113ca:	eeb0 0a60 	vmov.f32	s0, s1
 80113ce:	bd08      	pop	{r3, pc}
 80113d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80113d4:	d21c      	bcs.n	8011410 <scalbnf+0x68>
 80113d6:	4b1f      	ldr	r3, [pc, #124]	; (8011454 <scalbnf+0xac>)
 80113d8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011458 <scalbnf+0xb0>
 80113dc:	4298      	cmp	r0, r3
 80113de:	ee60 0a27 	vmul.f32	s1, s0, s15
 80113e2:	db10      	blt.n	8011406 <scalbnf+0x5e>
 80113e4:	ee10 2a90 	vmov	r2, s1
 80113e8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80113ec:	3b19      	subs	r3, #25
 80113ee:	4403      	add	r3, r0
 80113f0:	2bfe      	cmp	r3, #254	; 0xfe
 80113f2:	dd0f      	ble.n	8011414 <scalbnf+0x6c>
 80113f4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801145c <scalbnf+0xb4>
 80113f8:	eeb0 0a48 	vmov.f32	s0, s16
 80113fc:	f000 f834 	bl	8011468 <copysignf>
 8011400:	ee60 0a08 	vmul.f32	s1, s0, s16
 8011404:	e7df      	b.n	80113c6 <scalbnf+0x1e>
 8011406:	eddf 7a16 	vldr	s15, [pc, #88]	; 8011460 <scalbnf+0xb8>
 801140a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801140e:	e7da      	b.n	80113c6 <scalbnf+0x1e>
 8011410:	0ddb      	lsrs	r3, r3, #23
 8011412:	e7ec      	b.n	80113ee <scalbnf+0x46>
 8011414:	2b00      	cmp	r3, #0
 8011416:	dd06      	ble.n	8011426 <scalbnf+0x7e>
 8011418:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801141c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8011420:	ee00 3a90 	vmov	s1, r3
 8011424:	e7cf      	b.n	80113c6 <scalbnf+0x1e>
 8011426:	f113 0f16 	cmn.w	r3, #22
 801142a:	da06      	bge.n	801143a <scalbnf+0x92>
 801142c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011430:	4298      	cmp	r0, r3
 8011432:	dcdf      	bgt.n	80113f4 <scalbnf+0x4c>
 8011434:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8011460 <scalbnf+0xb8>
 8011438:	e7de      	b.n	80113f8 <scalbnf+0x50>
 801143a:	3319      	adds	r3, #25
 801143c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8011440:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8011444:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011464 <scalbnf+0xbc>
 8011448:	ee07 3a10 	vmov	s14, r3
 801144c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8011450:	e7b9      	b.n	80113c6 <scalbnf+0x1e>
 8011452:	bf00      	nop
 8011454:	ffff3cb0 	.word	0xffff3cb0
 8011458:	4c000000 	.word	0x4c000000
 801145c:	7149f2ca 	.word	0x7149f2ca
 8011460:	0da24260 	.word	0x0da24260
 8011464:	33000000 	.word	0x33000000

08011468 <copysignf>:
 8011468:	ee10 3a10 	vmov	r3, s0
 801146c:	ee10 2a90 	vmov	r2, s1
 8011470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011474:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8011478:	4313      	orrs	r3, r2
 801147a:	ee00 3a10 	vmov	s0, r3
 801147e:	4770      	bx	lr

08011480 <_init>:
 8011480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011482:	bf00      	nop
 8011484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011486:	bc08      	pop	{r3}
 8011488:	469e      	mov	lr, r3
 801148a:	4770      	bx	lr

0801148c <_fini>:
 801148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801148e:	bf00      	nop
 8011490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011492:	bc08      	pop	{r3}
 8011494:	469e      	mov	lr, r3
 8011496:	4770      	bx	lr
